(function () {
	'use strict';

	function _mergeNamespaces(n, m) {
		m.forEach(function (e) {
			e && typeof e !== 'string' && !Array.isArray(e) && Object.keys(e).forEach(function (k) {
				if (k !== 'default' && !(k in n)) {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		});
		return Object.freeze(n);
	}

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getAugmentedNamespace(n) {
	  if (n.__esModule) return n;
	  var f = n.default;
		if (typeof f == "function") {
			var a = function a () {
				if (this instanceof a) {
	        return Reflect.construct(f, arguments, this.constructor);
				}
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var react = {exports: {}};

	var react_production_min = {};

	/**
	 * @license React
	 * react.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReact_production_min;

	function requireReact_production_min () {
		if (hasRequiredReact_production_min) return react_production_min;
		hasRequiredReact_production_min = 1;

		var l = Symbol.for("react.element"),
		  n = Symbol.for("react.portal"),
		  p = Symbol.for("react.fragment"),
		  q = Symbol.for("react.strict_mode"),
		  r = Symbol.for("react.profiler"),
		  t = Symbol.for("react.provider"),
		  u = Symbol.for("react.context"),
		  v = Symbol.for("react.forward_ref"),
		  w = Symbol.for("react.suspense"),
		  x = Symbol.for("react.memo"),
		  y = Symbol.for("react.lazy"),
		  z = Symbol.iterator;
		function A(a) {
		  if (null === a || "object" !== typeof a) return null;
		  a = z && a[z] || a["@@iterator"];
		  return "function" === typeof a ? a : null;
		}
		var B = {
		    isMounted: function () {
		      return !1;
		    },
		    enqueueForceUpdate: function () {},
		    enqueueReplaceState: function () {},
		    enqueueSetState: function () {}
		  },
		  C = Object.assign,
		  D = {};
		function E(a, b, e) {
		  this.props = a;
		  this.context = b;
		  this.refs = D;
		  this.updater = e || B;
		}
		E.prototype.isReactComponent = {};
		E.prototype.setState = function (a, b) {
		  if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
		  this.updater.enqueueSetState(this, a, b, "setState");
		};
		E.prototype.forceUpdate = function (a) {
		  this.updater.enqueueForceUpdate(this, a, "forceUpdate");
		};
		function F() {}
		F.prototype = E.prototype;
		function G(a, b, e) {
		  this.props = a;
		  this.context = b;
		  this.refs = D;
		  this.updater = e || B;
		}
		var H = G.prototype = new F();
		H.constructor = G;
		C(H, E.prototype);
		H.isPureReactComponent = !0;
		var I = Array.isArray,
		  J = Object.prototype.hasOwnProperty,
		  K = {
		    current: null
		  },
		  L = {
		    key: !0,
		    ref: !0,
		    __self: !0,
		    __source: !0
		  };
		function M(a, b, e) {
		  var d,
		    c = {},
		    k = null,
		    h = null;
		  if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k = "" + b.key), b) J.call(b, d) && !L.hasOwnProperty(d) && (c[d] = b[d]);
		  var g = arguments.length - 2;
		  if (1 === g) c.children = e;else if (1 < g) {
		    for (var f = Array(g), m = 0; m < g; m++) f[m] = arguments[m + 2];
		    c.children = f;
		  }
		  if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);
		  return {
		    $$typeof: l,
		    type: a,
		    key: k,
		    ref: h,
		    props: c,
		    _owner: K.current
		  };
		}
		function N(a, b) {
		  return {
		    $$typeof: l,
		    type: a.type,
		    key: b,
		    ref: a.ref,
		    props: a.props,
		    _owner: a._owner
		  };
		}
		function O(a) {
		  return "object" === typeof a && null !== a && a.$$typeof === l;
		}
		function escape(a) {
		  var b = {
		    "=": "=0",
		    ":": "=2"
		  };
		  return "$" + a.replace(/[=:]/g, function (a) {
		    return b[a];
		  });
		}
		var P = /\/+/g;
		function Q(a, b) {
		  return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
		}
		function R(a, b, e, d, c) {
		  var k = typeof a;
		  if ("undefined" === k || "boolean" === k) a = null;
		  var h = !1;
		  if (null === a) h = !0;else switch (k) {
		    case "string":
		    case "number":
		      h = !0;
		      break;
		    case "object":
		      switch (a.$$typeof) {
		        case l:
		        case n:
		          h = !0;
		      }
		  }
		  if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P, "$&/") + "/"), R(c, b, e, "", function (a) {
		    return a;
		  })) : null != c && (O(c) && (c = N(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P, "$&/") + "/") + a)), b.push(c)), 1;
		  h = 0;
		  d = "" === d ? "." : d + ":";
		  if (I(a)) for (var g = 0; g < a.length; g++) {
		    k = a[g];
		    var f = d + Q(k, g);
		    h += R(k, b, e, f, c);
		  } else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k = a.next()).done;) k = k.value, f = d + Q(k, g++), h += R(k, b, e, f, c);else if ("object" === k) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
		  return h;
		}
		function S(a, b, e) {
		  if (null == a) return a;
		  var d = [],
		    c = 0;
		  R(a, d, "", "", function (a) {
		    return b.call(e, a, c++);
		  });
		  return d;
		}
		function T(a) {
		  if (-1 === a._status) {
		    var b = a._result;
		    b = b();
		    b.then(function (b) {
		      if (0 === a._status || -1 === a._status) a._status = 1, a._result = b;
		    }, function (b) {
		      if (0 === a._status || -1 === a._status) a._status = 2, a._result = b;
		    });
		    -1 === a._status && (a._status = 0, a._result = b);
		  }
		  if (1 === a._status) return a._result.default;
		  throw a._result;
		}
		var U = {
		    current: null
		  },
		  V = {
		    transition: null
		  },
		  W = {
		    ReactCurrentDispatcher: U,
		    ReactCurrentBatchConfig: V,
		    ReactCurrentOwner: K
		  };
		react_production_min.Children = {
		  map: S,
		  forEach: function (a, b, e) {
		    S(a, function () {
		      b.apply(this, arguments);
		    }, e);
		  },
		  count: function (a) {
		    var b = 0;
		    S(a, function () {
		      b++;
		    });
		    return b;
		  },
		  toArray: function (a) {
		    return S(a, function (a) {
		      return a;
		    }) || [];
		  },
		  only: function (a) {
		    if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");
		    return a;
		  }
		};
		react_production_min.Component = E;
		react_production_min.Fragment = p;
		react_production_min.Profiler = r;
		react_production_min.PureComponent = G;
		react_production_min.StrictMode = q;
		react_production_min.Suspense = w;
		react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W;
		react_production_min.cloneElement = function (a, b, e) {
		  if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
		  var d = C({}, a.props),
		    c = a.key,
		    k = a.ref,
		    h = a._owner;
		  if (null != b) {
		    void 0 !== b.ref && (k = b.ref, h = K.current);
		    void 0 !== b.key && (c = "" + b.key);
		    if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
		    for (f in b) J.call(b, f) && !L.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
		  }
		  var f = arguments.length - 2;
		  if (1 === f) d.children = e;else if (1 < f) {
		    g = Array(f);
		    for (var m = 0; m < f; m++) g[m] = arguments[m + 2];
		    d.children = g;
		  }
		  return {
		    $$typeof: l,
		    type: a.type,
		    key: c,
		    ref: k,
		    props: d,
		    _owner: h
		  };
		};
		react_production_min.createContext = function (a) {
		  a = {
		    $$typeof: u,
		    _currentValue: a,
		    _currentValue2: a,
		    _threadCount: 0,
		    Provider: null,
		    Consumer: null,
		    _defaultValue: null,
		    _globalName: null
		  };
		  a.Provider = {
		    $$typeof: t,
		    _context: a
		  };
		  return a.Consumer = a;
		};
		react_production_min.createElement = M;
		react_production_min.createFactory = function (a) {
		  var b = M.bind(null, a);
		  b.type = a;
		  return b;
		};
		react_production_min.createRef = function () {
		  return {
		    current: null
		  };
		};
		react_production_min.forwardRef = function (a) {
		  return {
		    $$typeof: v,
		    render: a
		  };
		};
		react_production_min.isValidElement = O;
		react_production_min.lazy = function (a) {
		  return {
		    $$typeof: y,
		    _payload: {
		      _status: -1,
		      _result: a
		    },
		    _init: T
		  };
		};
		react_production_min.memo = function (a, b) {
		  return {
		    $$typeof: x,
		    type: a,
		    compare: void 0 === b ? null : b
		  };
		};
		react_production_min.startTransition = function (a) {
		  var b = V.transition;
		  V.transition = {};
		  try {
		    a();
		  } finally {
		    V.transition = b;
		  }
		};
		react_production_min.unstable_act = function () {
		  throw Error("act(...) is not supported in production builds of React.");
		};
		react_production_min.useCallback = function (a, b) {
		  return U.current.useCallback(a, b);
		};
		react_production_min.useContext = function (a) {
		  return U.current.useContext(a);
		};
		react_production_min.useDebugValue = function () {};
		react_production_min.useDeferredValue = function (a) {
		  return U.current.useDeferredValue(a);
		};
		react_production_min.useEffect = function (a, b) {
		  return U.current.useEffect(a, b);
		};
		react_production_min.useId = function () {
		  return U.current.useId();
		};
		react_production_min.useImperativeHandle = function (a, b, e) {
		  return U.current.useImperativeHandle(a, b, e);
		};
		react_production_min.useInsertionEffect = function (a, b) {
		  return U.current.useInsertionEffect(a, b);
		};
		react_production_min.useLayoutEffect = function (a, b) {
		  return U.current.useLayoutEffect(a, b);
		};
		react_production_min.useMemo = function (a, b) {
		  return U.current.useMemo(a, b);
		};
		react_production_min.useReducer = function (a, b, e) {
		  return U.current.useReducer(a, b, e);
		};
		react_production_min.useRef = function (a) {
		  return U.current.useRef(a);
		};
		react_production_min.useState = function (a) {
		  return U.current.useState(a);
		};
		react_production_min.useSyncExternalStore = function (a, b, e) {
		  return U.current.useSyncExternalStore(a, b, e);
		};
		react_production_min.useTransition = function () {
		  return U.current.useTransition();
		};
		react_production_min.version = "18.2.0";
		return react_production_min;
	}

	{
	  react.exports = requireReact_production_min();
	}

	var reactExports = react.exports;
	var React = /*@__PURE__*/getDefaultExportFromCjs(reactExports);

	var React$1 = /*#__PURE__*/_mergeNamespaces({
		__proto__: null,
		default: React
	}, [reactExports]);

	/** Detect free variable `global` from Node.js. */

	var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
	var _freeGlobal = freeGlobal$1;

	var freeGlobal = _freeGlobal;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root$d = freeGlobal || freeSelf || Function('return this')();
	var _root = root$d;

	var root$c = _root;

	/** Built-in value references. */
	var Symbol$7 = root$c.Symbol;
	var _Symbol = Symbol$7;

	var Symbol$6 = _Symbol;

	/** Used for built-in method references. */
	var objectProto$j = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$g = objectProto$j.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString$1 = objectProto$j.toString;

	/** Built-in value references. */
	var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag$1(value) {
	  var isOwn = hasOwnProperty$g.call(value, symToStringTag$1),
	    tag = value[symToStringTag$1];
	  try {
	    value[symToStringTag$1] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	  var result = nativeObjectToString$1.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag$1] = tag;
	    } else {
	      delete value[symToStringTag$1];
	    }
	  }
	  return result;
	}
	var _getRawTag = getRawTag$1;

	/** Used for built-in method references. */

	var objectProto$i = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto$i.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString$1(value) {
	  return nativeObjectToString.call(value);
	}
	var _objectToString = objectToString$1;

	var Symbol$5 = _Symbol,
	  getRawTag = _getRawTag,
	  objectToString = _objectToString;

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	  undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag$8(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
	}
	var _baseGetTag = baseGetTag$8;

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */

	function isObjectLike$d(value) {
	  return value != null && typeof value == 'object';
	}
	var isObjectLike_1 = isObjectLike$d;

	var baseGetTag$7 = _baseGetTag,
	  isObjectLike$c = isObjectLike_1;

	/** `Object#toString` result references. */
	var symbolTag$3 = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol$6(value) {
	  return typeof value == 'symbol' || isObjectLike$c(value) && baseGetTag$7(value) == symbolTag$3;
	}
	var isSymbol_1 = isSymbol$6;

	var isSymbol$5 = isSymbol_1;

	/**
	 * The base implementation of methods like `_.max` and `_.min` which accepts a
	 * `comparator` to determine the extremum value.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The iteratee invoked per iteration.
	 * @param {Function} comparator The comparator used to compare values.
	 * @returns {*} Returns the extremum value.
	 */
	function baseExtremum$1(array, iteratee, comparator) {
	  var index = -1,
	    length = array.length;
	  while (++index < length) {
	    var value = array[index],
	      current = iteratee(value);
	    if (current != null && (computed === undefined ? current === current && !isSymbol$5(current) : comparator(current, computed))) {
	      var computed = current,
	        result = value;
	    }
	  }
	  return result;
	}
	var _baseExtremum = baseExtremum$1;

	/**
	 * The base implementation of `_.gt` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is greater than `other`,
	 *  else `false`.
	 */

	function baseGt$1(value, other) {
	  return value > other;
	}
	var _baseGt = baseGt$1;

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */

	function listCacheClear$1() {
	  this.__data__ = [];
	  this.size = 0;
	}
	var _listCacheClear = listCacheClear$1;

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */

	function eq$5(value, other) {
	  return value === other || value !== value && other !== other;
	}
	var eq_1 = eq$5;

	var eq$4 = eq_1;

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf$4(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq$4(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}
	var _assocIndexOf = assocIndexOf$4;

	var assocIndexOf$3 = _assocIndexOf;

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete$1(key) {
	  var data = this.__data__,
	    index = assocIndexOf$3(data, key);
	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}
	var _listCacheDelete = listCacheDelete$1;

	var assocIndexOf$2 = _assocIndexOf;

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet$1(key) {
	  var data = this.__data__,
	    index = assocIndexOf$2(data, key);
	  return index < 0 ? undefined : data[index][1];
	}
	var _listCacheGet = listCacheGet$1;

	var assocIndexOf$1 = _assocIndexOf;

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas$1(key) {
	  return assocIndexOf$1(this.__data__, key) > -1;
	}
	var _listCacheHas = listCacheHas$1;

	var assocIndexOf = _assocIndexOf;

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet$1(key, value) {
	  var data = this.__data__,
	    index = assocIndexOf(data, key);
	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}
	var _listCacheSet = listCacheSet$1;

	var listCacheClear = _listCacheClear,
	  listCacheDelete = _listCacheDelete,
	  listCacheGet = _listCacheGet,
	  listCacheHas = _listCacheHas,
	  listCacheSet = _listCacheSet;

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache$4(entries) {
	  var index = -1,
	    length = entries == null ? 0 : entries.length;
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache$4.prototype.clear = listCacheClear;
	ListCache$4.prototype['delete'] = listCacheDelete;
	ListCache$4.prototype.get = listCacheGet;
	ListCache$4.prototype.has = listCacheHas;
	ListCache$4.prototype.set = listCacheSet;
	var _ListCache = ListCache$4;

	var ListCache$3 = _ListCache;

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear$1() {
	  this.__data__ = new ListCache$3();
	  this.size = 0;
	}
	var _stackClear = stackClear$1;

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */

	function stackDelete$1(key) {
	  var data = this.__data__,
	    result = data['delete'](key);
	  this.size = data.size;
	  return result;
	}
	var _stackDelete = stackDelete$1;

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */

	function stackGet$1(key) {
	  return this.__data__.get(key);
	}
	var _stackGet = stackGet$1;

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */

	function stackHas$1(key) {
	  return this.__data__.has(key);
	}
	var _stackHas = stackHas$1;

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */

	function isObject$c(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}
	var isObject_1 = isObject$c;

	var baseGetTag$6 = _baseGetTag,
	  isObject$b = isObject_1;

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	  funcTag$2 = '[object Function]',
	  genTag$1 = '[object GeneratorFunction]',
	  proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction$3(value) {
	  if (!isObject$b(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag$6(value);
	  return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
	}
	var isFunction_1 = isFunction$3;

	var isFunction$4 = /*@__PURE__*/getDefaultExportFromCjs(isFunction_1);

	var root$b = _root;

	/** Used to detect overreaching core-js shims. */
	var coreJsData$1 = root$b['__core-js_shared__'];
	var _coreJsData = coreJsData$1;

	var coreJsData = _coreJsData;

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = function () {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? 'Symbol(src)_1.' + uid : '';
	}();

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked$1(func) {
	  return !!maskSrcKey && maskSrcKey in func;
	}
	var _isMasked = isMasked$1;

	/** Used for built-in method references. */

	var funcProto$2 = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$2 = funcProto$2.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource$2(func) {
	  if (func != null) {
	    try {
	      return funcToString$2.call(func);
	    } catch (e) {}
	    try {
	      return func + '';
	    } catch (e) {}
	  }
	  return '';
	}
	var _toSource = toSource$2;

	var isFunction$2 = isFunction_1,
	  isMasked = _isMasked,
	  isObject$a = isObject_1,
	  toSource$1 = _toSource;

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto$1 = Function.prototype,
	  objectProto$h = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString$1 = funcProto$1.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$f = objectProto$h.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' + funcToString$1.call(hasOwnProperty$f).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative$1(value) {
	  if (!isObject$a(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource$1(value));
	}
	var _baseIsNative = baseIsNative$1;

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */

	function getValue$2(object, key) {
	  return object == null ? undefined : object[key];
	}
	var _getValue = getValue$2;

	var baseIsNative = _baseIsNative,
	  getValue$1 = _getValue;

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative$7(object, key) {
	  var value = getValue$1(object, key);
	  return baseIsNative(value) ? value : undefined;
	}
	var _getNative = getNative$7;

	var getNative$6 = _getNative,
	  root$a = _root;

	/* Built-in method references that are verified to be native. */
	var Map$4 = getNative$6(root$a, 'Map');
	var _Map = Map$4;

	var getNative$5 = _getNative;

	/* Built-in method references that are verified to be native. */
	var nativeCreate$4 = getNative$5(Object, 'create');
	var _nativeCreate = nativeCreate$4;

	var nativeCreate$3 = _nativeCreate;

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear$1() {
	  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
	  this.size = 0;
	}
	var _hashClear = hashClear$1;

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */

	function hashDelete$1(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}
	var _hashDelete = hashDelete$1;

	var nativeCreate$2 = _nativeCreate;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto$g = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$e = objectProto$g.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet$1(key) {
	  var data = this.__data__;
	  if (nativeCreate$2) {
	    var result = data[key];
	    return result === HASH_UNDEFINED$2 ? undefined : result;
	  }
	  return hasOwnProperty$e.call(data, key) ? data[key] : undefined;
	}
	var _hashGet = hashGet$1;

	var nativeCreate$1 = _nativeCreate;

	/** Used for built-in method references. */
	var objectProto$f = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$d = objectProto$f.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas$1(key) {
	  var data = this.__data__;
	  return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty$d.call(data, key);
	}
	var _hashHas = hashHas$1;

	var nativeCreate = _nativeCreate;

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet$1(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;
	  return this;
	}
	var _hashSet = hashSet$1;

	var hashClear = _hashClear,
	  hashDelete = _hashDelete,
	  hashGet = _hashGet,
	  hashHas = _hashHas,
	  hashSet = _hashSet;

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash$1(entries) {
	  var index = -1,
	    length = entries == null ? 0 : entries.length;
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash$1.prototype.clear = hashClear;
	Hash$1.prototype['delete'] = hashDelete;
	Hash$1.prototype.get = hashGet;
	Hash$1.prototype.has = hashHas;
	Hash$1.prototype.set = hashSet;
	var _Hash = Hash$1;

	var Hash = _Hash,
	  ListCache$2 = _ListCache,
	  Map$3 = _Map;

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear$1() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash(),
	    'map': new (Map$3 || ListCache$2)(),
	    'string': new Hash()
	  };
	}
	var _mapCacheClear = mapCacheClear$1;

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */

	function isKeyable$1(value) {
	  var type = typeof value;
	  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
	}
	var _isKeyable = isKeyable$1;

	var isKeyable = _isKeyable;

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData$4(map, key) {
	  var data = map.__data__;
	  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
	}
	var _getMapData = getMapData$4;

	var getMapData$3 = _getMapData;

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete$1(key) {
	  var result = getMapData$3(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}
	var _mapCacheDelete = mapCacheDelete$1;

	var getMapData$2 = _getMapData;

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet$1(key) {
	  return getMapData$2(this, key).get(key);
	}
	var _mapCacheGet = mapCacheGet$1;

	var getMapData$1 = _getMapData;

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas$1(key) {
	  return getMapData$1(this, key).has(key);
	}
	var _mapCacheHas = mapCacheHas$1;

	var getMapData = _getMapData;

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet$1(key, value) {
	  var data = getMapData(this, key),
	    size = data.size;
	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}
	var _mapCacheSet = mapCacheSet$1;

	var mapCacheClear = _mapCacheClear,
	  mapCacheDelete = _mapCacheDelete,
	  mapCacheGet = _mapCacheGet,
	  mapCacheHas = _mapCacheHas,
	  mapCacheSet = _mapCacheSet;

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache$3(entries) {
	  var index = -1,
	    length = entries == null ? 0 : entries.length;
	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache$3.prototype.clear = mapCacheClear;
	MapCache$3.prototype['delete'] = mapCacheDelete;
	MapCache$3.prototype.get = mapCacheGet;
	MapCache$3.prototype.has = mapCacheHas;
	MapCache$3.prototype.set = mapCacheSet;
	var _MapCache = MapCache$3;

	var ListCache$1 = _ListCache,
	  Map$2 = _Map,
	  MapCache$2 = _MapCache;

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE$1 = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet$1(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache$1) {
	    var pairs = data.__data__;
	    if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE$1 - 1) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache$2(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}
	var _stackSet = stackSet$1;

	var ListCache = _ListCache,
	  stackClear = _stackClear,
	  stackDelete = _stackDelete,
	  stackGet = _stackGet,
	  stackHas = _stackHas,
	  stackSet = _stackSet;

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack$6(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}

	// Add methods to `Stack`.
	Stack$6.prototype.clear = stackClear;
	Stack$6.prototype['delete'] = stackDelete;
	Stack$6.prototype.get = stackGet;
	Stack$6.prototype.has = stackHas;
	Stack$6.prototype.set = stackSet;
	var _Stack = Stack$6;

	/** Used to stand-in for `undefined` hash values. */

	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd$1(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}
	var _setCacheAdd = setCacheAdd$1;

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */

	function setCacheHas$1(value) {
	  return this.__data__.has(value);
	}
	var _setCacheHas = setCacheHas$1;

	var MapCache$1 = _MapCache,
	  setCacheAdd = _setCacheAdd,
	  setCacheHas = _setCacheHas;

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache$2(values) {
	  var index = -1,
	    length = values == null ? 0 : values.length;
	  this.__data__ = new MapCache$1();
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache$2.prototype.add = SetCache$2.prototype.push = setCacheAdd;
	SetCache$2.prototype.has = setCacheHas;
	var _SetCache = SetCache$2;

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */

	function arraySome$1(array, predicate) {
	  var index = -1,
	    length = array == null ? 0 : array.length;
	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}
	var _arraySome = arraySome$1;

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */

	function cacheHas$2(cache, key) {
	  return cache.has(key);
	}
	var _cacheHas = cacheHas$2;

	var SetCache$1 = _SetCache,
	  arraySome = _arraySome,
	  cacheHas$1 = _cacheHas;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$5 = 1,
	  COMPARE_UNORDERED_FLAG$3 = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
	    arrLength = array.length,
	    othLength = other.length;
	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Check that cyclic values are equal.
	  var arrStacked = stack.get(array);
	  var othStacked = stack.get(other);
	  if (arrStacked && othStacked) {
	    return arrStacked == other && othStacked == array;
	  }
	  var index = -1,
	    result = true,
	    seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache$1() : undefined;
	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	      othValue = other[index];
	    if (customizer) {
	      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function (othValue, othIndex) {
	        if (!cacheHas$1(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	          return seen.push(othIndex);
	        }
	      })) {
	        result = false;
	        break;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}
	var _equalArrays = equalArrays$2;

	var root$9 = _root;

	/** Built-in value references. */
	var Uint8Array$2 = root$9.Uint8Array;
	var _Uint8Array = Uint8Array$2;

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */

	function mapToArray$2(map) {
	  var index = -1,
	    result = Array(map.size);
	  map.forEach(function (value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}
	var _mapToArray = mapToArray$2;

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */

	function setToArray$3(set) {
	  var index = -1,
	    result = Array(set.size);
	  set.forEach(function (value) {
	    result[++index] = value;
	  });
	  return result;
	}
	var _setToArray = setToArray$3;

	var Symbol$4 = _Symbol,
	  Uint8Array$1 = _Uint8Array,
	  eq$3 = eq_1,
	  equalArrays$1 = _equalArrays,
	  mapToArray$1 = _mapToArray,
	  setToArray$2 = _setToArray;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$4 = 1,
	  COMPARE_UNORDERED_FLAG$2 = 2;

	/** `Object#toString` result references. */
	var boolTag$3 = '[object Boolean]',
	  dateTag$3 = '[object Date]',
	  errorTag$3 = '[object Error]',
	  mapTag$7 = '[object Map]',
	  numberTag$3 = '[object Number]',
	  regexpTag$3 = '[object RegExp]',
	  setTag$7 = '[object Set]',
	  stringTag$4 = '[object String]',
	  symbolTag$2 = '[object Symbol]';
	var arrayBufferTag$3 = '[object ArrayBuffer]',
	  dataViewTag$4 = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : undefined,
	  symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag$4:
	      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;
	    case arrayBufferTag$3:
	      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
	        return false;
	      }
	      return true;
	    case boolTag$3:
	    case dateTag$3:
	    case numberTag$3:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq$3(+object, +other);
	    case errorTag$3:
	      return object.name == other.name && object.message == other.message;
	    case regexpTag$3:
	    case stringTag$4:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == other + '';
	    case mapTag$7:
	      var convert = mapToArray$1;
	    case setTag$7:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
	      convert || (convert = setToArray$2);
	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG$2;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;
	    case symbolTag$2:
	      if (symbolValueOf$1) {
	        return symbolValueOf$1.call(object) == symbolValueOf$1.call(other);
	      }
	  }
	  return false;
	}
	var _equalByTag = equalByTag$1;

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */

	function arrayPush$3(array, values) {
	  var index = -1,
	    length = values.length,
	    offset = array.length;
	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}
	var _arrayPush = arrayPush$3;

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */

	var isArray$i = Array.isArray;
	var isArray_1 = isArray$i;

	var isArray$j = /*@__PURE__*/getDefaultExportFromCjs(isArray_1);

	var arrayPush$2 = _arrayPush,
	  isArray$h = isArray_1;

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray$h(object) ? result : arrayPush$2(result, symbolsFunc(object));
	}
	var _baseGetAllKeys = baseGetAllKeys$2;

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */

	function arrayFilter$2(array, predicate) {
	  var index = -1,
	    length = array == null ? 0 : array.length,
	    resIndex = 0,
	    result = [];
	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}
	var _arrayFilter = arrayFilter$2;

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */

	function stubArray$2() {
	  return [];
	}
	var stubArray_1 = stubArray$2;

	var arrayFilter$1 = _arrayFilter,
	  stubArray$1 = stubArray_1;

	/** Used for built-in method references. */
	var objectProto$e = Object.prototype;

	/** Built-in value references. */
	var propertyIsEnumerable$1 = objectProto$e.propertyIsEnumerable;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function (object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return arrayFilter$1(nativeGetSymbols$1(object), function (symbol) {
	    return propertyIsEnumerable$1.call(object, symbol);
	  });
	};
	var _getSymbols = getSymbols$3;

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */

	function baseTimes$1(n, iteratee) {
	  var index = -1,
	    result = Array(n);
	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}
	var _baseTimes = baseTimes$1;

	var baseGetTag$5 = _baseGetTag,
	  isObjectLike$b = isObjectLike_1;

	/** `Object#toString` result references. */
	var argsTag$3 = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments$1(value) {
	  return isObjectLike$b(value) && baseGetTag$5(value) == argsTag$3;
	}
	var _baseIsArguments = baseIsArguments$1;

	var baseIsArguments = _baseIsArguments,
	  isObjectLike$a = isObjectLike_1;

	/** Used for built-in method references. */
	var objectProto$d = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$c = objectProto$d.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto$d.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments$5 = baseIsArguments(function () {
	  return arguments;
	}()) ? baseIsArguments : function (value) {
	  return isObjectLike$a(value) && hasOwnProperty$c.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	};
	var isArguments_1 = isArguments$5;

	var isBuffer$5 = {exports: {}};

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */

	function stubFalse() {
	  return false;
	}
	var stubFalse_1 = stubFalse;

	isBuffer$5.exports;

	(function (module, exports) {
		var root = _root,
		  stubFalse = stubFalse_1;

		/** Detect free variable `exports`. */
		var freeExports = exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Built-in value references. */
		var Buffer = moduleExports ? root.Buffer : undefined;

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

		/**
		 * Checks if `value` is a buffer.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		 * @example
		 *
		 * _.isBuffer(new Buffer(2));
		 * // => true
		 *
		 * _.isBuffer(new Uint8Array(2));
		 * // => false
		 */
		var isBuffer = nativeIsBuffer || stubFalse;
		module.exports = isBuffer; 
	} (isBuffer$5, isBuffer$5.exports));

	var isBufferExports = isBuffer$5.exports;

	/** Used as references for various `Number` constants. */

	var MAX_SAFE_INTEGER$1 = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex$4(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER$1 : length;
	  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
	}
	var _isIndex = isIndex$4;

	/** Used as references for various `Number` constants. */

	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength$3(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	var isLength_1 = isLength$3;

	var baseGetTag$4 = _baseGetTag,
	  isLength$2 = isLength_1,
	  isObjectLike$9 = isObjectLike_1;

	/** `Object#toString` result references. */
	var argsTag$2 = '[object Arguments]',
	  arrayTag$2 = '[object Array]',
	  boolTag$2 = '[object Boolean]',
	  dateTag$2 = '[object Date]',
	  errorTag$2 = '[object Error]',
	  funcTag$1 = '[object Function]',
	  mapTag$6 = '[object Map]',
	  numberTag$2 = '[object Number]',
	  objectTag$4 = '[object Object]',
	  regexpTag$2 = '[object RegExp]',
	  setTag$6 = '[object Set]',
	  stringTag$3 = '[object String]',
	  weakMapTag$3 = '[object WeakMap]';
	var arrayBufferTag$2 = '[object ArrayBuffer]',
	  dataViewTag$3 = '[object DataView]',
	  float32Tag$2 = '[object Float32Array]',
	  float64Tag$2 = '[object Float64Array]',
	  int8Tag$2 = '[object Int8Array]',
	  int16Tag$2 = '[object Int16Array]',
	  int32Tag$2 = '[object Int32Array]',
	  uint8Tag$2 = '[object Uint8Array]',
	  uint8ClampedTag$2 = '[object Uint8ClampedArray]',
	  uint16Tag$2 = '[object Uint16Array]',
	  uint32Tag$2 = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] = typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] = typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] = typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] = typedArrayTags[uint32Tag$2] = true;
	typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] = typedArrayTags[arrayBufferTag$2] = typedArrayTags[boolTag$2] = typedArrayTags[dataViewTag$3] = typedArrayTags[dateTag$2] = typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] = typedArrayTags[mapTag$6] = typedArrayTags[numberTag$2] = typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$2] = typedArrayTags[setTag$6] = typedArrayTags[stringTag$3] = typedArrayTags[weakMapTag$3] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray$1(value) {
	  return isObjectLike$9(value) && isLength$2(value.length) && !!typedArrayTags[baseGetTag$4(value)];
	}
	var _baseIsTypedArray = baseIsTypedArray$1;

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */

	function baseUnary$3(func) {
	  return function (value) {
	    return func(value);
	  };
	}
	var _baseUnary = baseUnary$3;

	var _nodeUtil = {exports: {}};

	_nodeUtil.exports;

	(function (module, exports) {
		var freeGlobal = _freeGlobal;

		/** Detect free variable `exports`. */
		var freeExports = exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Detect free variable `process` from Node.js. */
		var freeProcess = moduleExports && freeGlobal.process;

		/** Used to access faster Node.js helpers. */
		var nodeUtil = function () {
		  try {
		    // Use `util.types` for Node.js 10+.
		    var types = freeModule && freeModule.require && freeModule.require('util').types;
		    if (types) {
		      return types;
		    }

		    // Legacy `process.binding('util')` for Node.js < 10.
		    return freeProcess && freeProcess.binding && freeProcess.binding('util');
		  } catch (e) {}
		}();
		module.exports = nodeUtil; 
	} (_nodeUtil, _nodeUtil.exports));

	var _nodeUtilExports = _nodeUtil.exports;

	var baseIsTypedArray = _baseIsTypedArray,
	  baseUnary$2 = _baseUnary,
	  nodeUtil$2 = _nodeUtilExports;

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray$4 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;
	var isTypedArray_1 = isTypedArray$4;

	var baseTimes = _baseTimes,
	  isArguments$4 = isArguments_1,
	  isArray$g = isArray_1,
	  isBuffer$4 = isBufferExports,
	  isIndex$3 = _isIndex,
	  isTypedArray$3 = isTypedArray_1;

	/** Used for built-in method references. */
	var objectProto$c = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$b = objectProto$c.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys$2(value, inherited) {
	  var isArr = isArray$g(value),
	    isArg = !isArr && isArguments$4(value),
	    isBuff = !isArr && !isArg && isBuffer$4(value),
	    isType = !isArr && !isArg && !isBuff && isTypedArray$3(value),
	    skipIndexes = isArr || isArg || isBuff || isType,
	    result = skipIndexes ? baseTimes(value.length, String) : [],
	    length = result.length;
	  for (var key in value) {
	    if ((inherited || hasOwnProperty$b.call(value, key)) && !(skipIndexes && (
	    // Safari 9 has enumerable `arguments.length` in strict mode.
	    key == 'length' ||
	    // Node.js 0.10 has enumerable non-index properties on buffers.
	    isBuff && (key == 'offset' || key == 'parent') ||
	    // PhantomJS 2 has enumerable non-index properties on typed arrays.
	    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
	    // Skip index properties.
	    isIndex$3(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	var _arrayLikeKeys = arrayLikeKeys$2;

	/** Used for built-in method references. */

	var objectProto$b = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype$4(value) {
	  var Ctor = value && value.constructor,
	    proto = typeof Ctor == 'function' && Ctor.prototype || objectProto$b;
	  return value === proto;
	}
	var _isPrototype = isPrototype$4;

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */

	function overArg$2(func, transform) {
	  return function (arg) {
	    return func(transform(arg));
	  };
	}
	var _overArg = overArg$2;

	var overArg$1 = _overArg;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys$1 = overArg$1(Object.keys, Object);
	var _nativeKeys = nativeKeys$1;

	var isPrototype$3 = _isPrototype,
	  nativeKeys = _nativeKeys;

	/** Used for built-in method references. */
	var objectProto$a = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$a = objectProto$a.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys$2(object) {
	  if (!isPrototype$3(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty$a.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}
	var _baseKeys = baseKeys$2;

	var isFunction$1 = isFunction_1,
	  isLength$1 = isLength_1;

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike$9(value) {
	  return value != null && isLength$1(value.length) && !isFunction$1(value);
	}
	var isArrayLike_1 = isArrayLike$9;

	var arrayLikeKeys$1 = _arrayLikeKeys,
	  baseKeys$1 = _baseKeys,
	  isArrayLike$8 = isArrayLike_1;

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys$8(object) {
	  return isArrayLike$8(object) ? arrayLikeKeys$1(object) : baseKeys$1(object);
	}
	var keys_1 = keys$8;

	var keys$9 = /*@__PURE__*/getDefaultExportFromCjs(keys_1);

	var baseGetAllKeys$1 = _baseGetAllKeys,
	  getSymbols$2 = _getSymbols,
	  keys$7 = keys_1;

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys$2(object) {
	  return baseGetAllKeys$1(object, keys$7, getSymbols$2);
	}
	var _getAllKeys = getAllKeys$2;

	var getAllKeys$1 = _getAllKeys;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$3 = 1;

	/** Used for built-in method references. */
	var objectProto$9 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$9 = objectProto$9.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
	    objProps = getAllKeys$1(object),
	    objLength = objProps.length,
	    othProps = getAllKeys$1(other),
	    othLength = othProps.length;
	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty$9.call(other, key))) {
	      return false;
	    }
	  }
	  // Check that cyclic values are equal.
	  var objStacked = stack.get(object);
	  var othStacked = stack.get(other);
	  if (objStacked && othStacked) {
	    return objStacked == other && othStacked == object;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);
	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	      othValue = other[key];
	    if (customizer) {
	      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	      othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}
	var _equalObjects = equalObjects$1;

	var getNative$4 = _getNative,
	  root$8 = _root;

	/* Built-in method references that are verified to be native. */
	var DataView$1 = getNative$4(root$8, 'DataView');
	var _DataView = DataView$1;

	var getNative$3 = _getNative,
	  root$7 = _root;

	/* Built-in method references that are verified to be native. */
	var Promise$2 = getNative$3(root$7, 'Promise');
	var _Promise = Promise$2;

	var getNative$2 = _getNative,
	  root$6 = _root;

	/* Built-in method references that are verified to be native. */
	var Set$3 = getNative$2(root$6, 'Set');
	var _Set = Set$3;

	var getNative$1 = _getNative,
	  root$5 = _root;

	/* Built-in method references that are verified to be native. */
	var WeakMap$3 = getNative$1(root$5, 'WeakMap');
	var _WeakMap = WeakMap$3;

	var DataView = _DataView,
	  Map$1 = _Map,
	  Promise$1 = _Promise,
	  Set$2 = _Set,
	  WeakMap$2 = _WeakMap,
	  baseGetTag$3 = _baseGetTag,
	  toSource = _toSource;

	/** `Object#toString` result references. */
	var mapTag$5 = '[object Map]',
	  objectTag$3 = '[object Object]',
	  promiseTag = '[object Promise]',
	  setTag$5 = '[object Set]',
	  weakMapTag$2 = '[object WeakMap]';
	var dataViewTag$2 = '[object DataView]';

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	  mapCtorString = toSource(Map$1),
	  promiseCtorString = toSource(Promise$1),
	  setCtorString = toSource(Set$2),
	  weakMapCtorString = toSource(WeakMap$2);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag$7 = baseGetTag$3;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if (DataView && getTag$7(new DataView(new ArrayBuffer(1))) != dataViewTag$2 || Map$1 && getTag$7(new Map$1()) != mapTag$5 || Promise$1 && getTag$7(Promise$1.resolve()) != promiseTag || Set$2 && getTag$7(new Set$2()) != setTag$5 || WeakMap$2 && getTag$7(new WeakMap$2()) != weakMapTag$2) {
	  getTag$7 = function (value) {
	    var result = baseGetTag$3(value),
	      Ctor = result == objectTag$3 ? value.constructor : undefined,
	      ctorString = Ctor ? toSource(Ctor) : '';
	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString:
	          return dataViewTag$2;
	        case mapCtorString:
	          return mapTag$5;
	        case promiseCtorString:
	          return promiseTag;
	        case setCtorString:
	          return setTag$5;
	        case weakMapCtorString:
	          return weakMapTag$2;
	      }
	    }
	    return result;
	  };
	}
	var _getTag = getTag$7;

	var Stack$5 = _Stack,
	  equalArrays = _equalArrays,
	  equalByTag = _equalByTag,
	  equalObjects = _equalObjects,
	  getTag$6 = _getTag,
	  isArray$f = isArray_1,
	  isBuffer$3 = isBufferExports,
	  isTypedArray$2 = isTypedArray_1;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$2 = 1;

	/** `Object#toString` result references. */
	var argsTag$1 = '[object Arguments]',
	  arrayTag$1 = '[object Array]',
	  objectTag$2 = '[object Object]';

	/** Used for built-in method references. */
	var objectProto$8 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$8 = objectProto$8.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray$f(object),
	    othIsArr = isArray$f(other),
	    objTag = objIsArr ? arrayTag$1 : getTag$6(object),
	    othTag = othIsArr ? arrayTag$1 : getTag$6(other);
	  objTag = objTag == argsTag$1 ? objectTag$2 : objTag;
	  othTag = othTag == argsTag$1 ? objectTag$2 : othTag;
	  var objIsObj = objTag == objectTag$2,
	    othIsObj = othTag == objectTag$2,
	    isSameTag = objTag == othTag;
	  if (isSameTag && isBuffer$3(object)) {
	    if (!isBuffer$3(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack$5());
	    return objIsArr || isTypedArray$2(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
	    var objIsWrapped = objIsObj && hasOwnProperty$8.call(object, '__wrapped__'),
	      othIsWrapped = othIsObj && hasOwnProperty$8.call(other, '__wrapped__');
	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	        othUnwrapped = othIsWrapped ? other.value() : other;
	      stack || (stack = new Stack$5());
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack$5());
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}
	var _baseIsEqualDeep = baseIsEqualDeep$1;

	var baseIsEqualDeep = _baseIsEqualDeep,
	  isObjectLike$8 = isObjectLike_1;

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual$3(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || !isObjectLike$8(value) && !isObjectLike$8(other)) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$3, stack);
	}
	var _baseIsEqual = baseIsEqual$3;

	var Stack$4 = _Stack,
	  baseIsEqual$2 = _baseIsEqual;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG$1 = 1,
	  COMPARE_UNORDERED_FLAG$1 = 2;

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch$1(object, source, matchData, customizer) {
	  var index = matchData.length,
	    length = index,
	    noCustomizer = !customizer;
	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	      objValue = object[key],
	      srcValue = data[1];
	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack$4();
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined ? baseIsEqual$2(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack) : result)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}
	var _baseIsMatch = baseIsMatch$1;

	var isObject$9 = isObject_1;

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable$2(value) {
	  return value === value && !isObject$9(value);
	}
	var _isStrictComparable = isStrictComparable$2;

	var isStrictComparable$1 = _isStrictComparable,
	  keys$6 = keys_1;

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData$1(object) {
	  var result = keys$6(object),
	    length = result.length;
	  while (length--) {
	    var key = result[length],
	      value = object[key];
	    result[length] = [key, value, isStrictComparable$1(value)];
	  }
	  return result;
	}
	var _getMatchData = getMatchData$1;

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */

	function matchesStrictComparable$2(key, srcValue) {
	  return function (object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
	  };
	}
	var _matchesStrictComparable = matchesStrictComparable$2;

	var baseIsMatch = _baseIsMatch,
	  getMatchData = _getMatchData,
	  matchesStrictComparable$1 = _matchesStrictComparable;

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches$1(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
	  }
	  return function (object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}
	var _baseMatches = baseMatches$1;

	var isArray$e = isArray_1,
	  isSymbol$4 = isSymbol_1;

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	  reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey$3(value, object) {
	  if (isArray$e(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol$4(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
	}
	var _isKey = isKey$3;

	var MapCache = _MapCache;

	/** Error message constants. */
	var FUNC_ERROR_TEXT$2 = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize$3(func, resolver) {
	  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$2);
	  }
	  var memoized = function () {
	    var args = arguments,
	      key = resolver ? resolver.apply(this, args) : args[0],
	      cache = memoized.cache;
	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize$3.Cache || MapCache)();
	  return memoized;
	}

	// Expose `MapCache`.
	memoize$3.Cache = MapCache;
	var memoize_1 = memoize$3;

	var memoize$2 = memoize_1;

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped$1(func) {
	  var result = memoize$2(func, function (key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });
	  var cache = result.cache;
	  return result;
	}
	var _memoizeCapped = memoizeCapped$1;

	var memoizeCapped = _memoizeCapped;

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath$2 = memoizeCapped(function (string) {
	  var result = [];
	  if (string.charCodeAt(0) === 46 /* . */) {
	    result.push('');
	  }
	  string.replace(rePropName, function (match, number, quote, subString) {
	    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
	  });
	  return result;
	});
	var _stringToPath = stringToPath$2;

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */

	function arrayMap$6(array, iteratee) {
	  var index = -1,
	    length = array == null ? 0 : array.length,
	    result = Array(length);
	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}
	var _arrayMap = arrayMap$6;

	var Symbol$3 = _Symbol,
	  arrayMap$5 = _arrayMap,
	  isArray$d = isArray_1,
	  isSymbol$3 = isSymbol_1;

	/** Used as references for various `Number` constants. */
	var INFINITY$3 = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : undefined,
	  symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString$1(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray$d(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap$5(value, baseToString$1) + '';
	  }
	  if (isSymbol$3(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = value + '';
	  return result == '0' && 1 / value == -INFINITY$3 ? '-0' : result;
	}
	var _baseToString = baseToString$1;

	var baseToString = _baseToString;

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString$5(value) {
	  return value == null ? '' : baseToString(value);
	}
	var toString_1 = toString$5;

	var isArray$c = isArray_1,
	  isKey$2 = _isKey,
	  stringToPath$1 = _stringToPath,
	  toString$4 = toString_1;

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath$4(value, object) {
	  if (isArray$c(value)) {
	    return value;
	  }
	  return isKey$2(value, object) ? [value] : stringToPath$1(toString$4(value));
	}
	var _castPath = castPath$4;

	var isSymbol$2 = isSymbol_1;

	/** Used as references for various `Number` constants. */
	var INFINITY$2 = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey$6(value) {
	  if (typeof value == 'string' || isSymbol$2(value)) {
	    return value;
	  }
	  var result = value + '';
	  return result == '0' && 1 / value == -INFINITY$2 ? '-0' : result;
	}
	var _toKey = toKey$6;

	var castPath$3 = _castPath,
	  toKey$5 = _toKey;

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet$3(object, path) {
	  path = castPath$3(path, object);
	  var index = 0,
	    length = path.length;
	  while (object != null && index < length) {
	    object = object[toKey$5(path[index++])];
	  }
	  return index && index == length ? object : undefined;
	}
	var _baseGet = baseGet$3;

	var baseGet$2 = _baseGet;

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get$1(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet$2(object, path);
	  return result === undefined ? defaultValue : result;
	}
	var get_1 = get$1;

	var get$2 = /*@__PURE__*/getDefaultExportFromCjs(get_1);

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */

	function baseHasIn$1(object, key) {
	  return object != null && key in Object(object);
	}
	var _baseHasIn = baseHasIn$1;

	var castPath$2 = _castPath,
	  isArguments$3 = isArguments_1,
	  isArray$b = isArray_1,
	  isIndex$2 = _isIndex,
	  isLength = isLength_1,
	  toKey$4 = _toKey;

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath$2(object, path, hasFunc) {
	  path = castPath$2(path, object);
	  var index = -1,
	    length = path.length,
	    result = false;
	  while (++index < length) {
	    var key = toKey$4(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object == null ? 0 : object.length;
	  return !!length && isLength(length) && isIndex$2(key, length) && (isArray$b(object) || isArguments$3(object));
	}
	var _hasPath = hasPath$2;

	var baseHasIn = _baseHasIn,
	  hasPath$1 = _hasPath;

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn$1(object, path) {
	  return object != null && hasPath$1(object, path, baseHasIn);
	}
	var hasIn_1 = hasIn$1;

	var baseIsEqual$1 = _baseIsEqual,
	  get = get_1,
	  hasIn = hasIn_1,
	  isKey$1 = _isKey,
	  isStrictComparable = _isStrictComparable,
	  matchesStrictComparable = _matchesStrictComparable,
	  toKey$3 = _toKey;

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	  COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty$1(path, srcValue) {
	  if (isKey$1(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey$3(path), srcValue);
	  }
	  return function (object) {
	    var objValue = get(object, path);
	    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	  };
	}
	var _baseMatchesProperty = baseMatchesProperty$1;

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */

	function identity$4(value) {
	  return value;
	}
	var identity_1 = identity$4;

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */

	function baseProperty$1(key) {
	  return function (object) {
	    return object == null ? undefined : object[key];
	  };
	}
	var _baseProperty = baseProperty$1;

	var baseGet$1 = _baseGet;

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep$1(path) {
	  return function (object) {
	    return baseGet$1(object, path);
	  };
	}
	var _basePropertyDeep = basePropertyDeep$1;

	var baseProperty = _baseProperty,
	  basePropertyDeep = _basePropertyDeep,
	  isKey = _isKey,
	  toKey$2 = _toKey;

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property$1(path) {
	  return isKey(path) ? baseProperty(toKey$2(path)) : basePropertyDeep(path);
	}
	var property_1 = property$1;

	var baseMatches = _baseMatches,
	  baseMatchesProperty = _baseMatchesProperty,
	  identity$3 = identity_1,
	  isArray$a = isArray_1,
	  property = property_1;

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee$7(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity$3;
	  }
	  if (typeof value == 'object') {
	    return isArray$a(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
	  }
	  return property(value);
	}
	var _baseIteratee = baseIteratee$7;

	var baseExtremum = _baseExtremum,
	  baseGt = _baseGt,
	  baseIteratee$6 = _baseIteratee;

	/**
	 * This method is like `_.max` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the criterion by which
	 * the value is ranked. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {*} Returns the maximum value.
	 * @example
	 *
	 * var objects = [{ 'n': 1 }, { 'n': 2 }];
	 *
	 * _.maxBy(objects, function(o) { return o.n; });
	 * // => { 'n': 2 }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.maxBy(objects, 'n');
	 * // => { 'n': 2 }
	 */
	function maxBy(array, iteratee) {
	  return array && array.length ? baseExtremum(array, baseIteratee$6(iteratee), baseGt) : undefined;
	}
	var maxBy_1 = maxBy;

	var maxBy$1 = /*@__PURE__*/getDefaultExportFromCjs(maxBy_1);

	var baseKeys = _baseKeys,
	  getTag$5 = _getTag,
	  isArguments$2 = isArguments_1,
	  isArray$9 = isArray_1,
	  isArrayLike$7 = isArrayLike_1,
	  isBuffer$2 = isBufferExports,
	  isPrototype$2 = _isPrototype,
	  isTypedArray$1 = isTypedArray_1;

	/** `Object#toString` result references. */
	var mapTag$4 = '[object Map]',
	  setTag$4 = '[object Set]';

	/** Used for built-in method references. */
	var objectProto$7 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$7 = objectProto$7.hasOwnProperty;

	/**
	 * Checks if `value` is an empty object, collection, map, or set.
	 *
	 * Objects are considered empty if they have no own enumerable string keyed
	 * properties.
	 *
	 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	 * jQuery-like collections are considered empty if they have a `length` of `0`.
	 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	 * @example
	 *
	 * _.isEmpty(null);
	 * // => true
	 *
	 * _.isEmpty(true);
	 * // => true
	 *
	 * _.isEmpty(1);
	 * // => true
	 *
	 * _.isEmpty([1, 2, 3]);
	 * // => false
	 *
	 * _.isEmpty({ 'a': 1 });
	 * // => false
	 */
	function isEmpty$5(value) {
	  if (value == null) {
	    return true;
	  }
	  if (isArrayLike$7(value) && (isArray$9(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer$2(value) || isTypedArray$1(value) || isArguments$2(value))) {
	    return !value.length;
	  }
	  var tag = getTag$5(value);
	  if (tag == mapTag$4 || tag == setTag$4) {
	    return !value.size;
	  }
	  if (isPrototype$2(value)) {
	    return !baseKeys(value).length;
	  }
	  for (var key in value) {
	    if (hasOwnProperty$7.call(value, key)) {
	      return false;
	    }
	  }
	  return true;
	}
	var isEmpty_1 = isEmpty$5;

	var isEmpty$6 = /*@__PURE__*/getDefaultExportFromCjs(isEmpty_1);

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */

	function arrayReduce$2(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	    length = array == null ? 0 : array.length;
	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}
	var _arrayReduce = arrayReduce$2;

	/**
	 * The base implementation of `_.propertyOf` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 */

	function basePropertyOf$1(object) {
	  return function (key) {
	    return object == null ? undefined : object[key];
	  };
	}
	var _basePropertyOf = basePropertyOf$1;

	var basePropertyOf = _basePropertyOf;

	/** Used to map Latin Unicode letters to basic Latin letters. */
	var deburredLetters = {
	  // Latin-1 Supplement block.
	  '\xc0': 'A',
	  '\xc1': 'A',
	  '\xc2': 'A',
	  '\xc3': 'A',
	  '\xc4': 'A',
	  '\xc5': 'A',
	  '\xe0': 'a',
	  '\xe1': 'a',
	  '\xe2': 'a',
	  '\xe3': 'a',
	  '\xe4': 'a',
	  '\xe5': 'a',
	  '\xc7': 'C',
	  '\xe7': 'c',
	  '\xd0': 'D',
	  '\xf0': 'd',
	  '\xc8': 'E',
	  '\xc9': 'E',
	  '\xca': 'E',
	  '\xcb': 'E',
	  '\xe8': 'e',
	  '\xe9': 'e',
	  '\xea': 'e',
	  '\xeb': 'e',
	  '\xcc': 'I',
	  '\xcd': 'I',
	  '\xce': 'I',
	  '\xcf': 'I',
	  '\xec': 'i',
	  '\xed': 'i',
	  '\xee': 'i',
	  '\xef': 'i',
	  '\xd1': 'N',
	  '\xf1': 'n',
	  '\xd2': 'O',
	  '\xd3': 'O',
	  '\xd4': 'O',
	  '\xd5': 'O',
	  '\xd6': 'O',
	  '\xd8': 'O',
	  '\xf2': 'o',
	  '\xf3': 'o',
	  '\xf4': 'o',
	  '\xf5': 'o',
	  '\xf6': 'o',
	  '\xf8': 'o',
	  '\xd9': 'U',
	  '\xda': 'U',
	  '\xdb': 'U',
	  '\xdc': 'U',
	  '\xf9': 'u',
	  '\xfa': 'u',
	  '\xfb': 'u',
	  '\xfc': 'u',
	  '\xdd': 'Y',
	  '\xfd': 'y',
	  '\xff': 'y',
	  '\xc6': 'Ae',
	  '\xe6': 'ae',
	  '\xde': 'Th',
	  '\xfe': 'th',
	  '\xdf': 'ss',
	  // Latin Extended-A block.
	  '\u0100': 'A',
	  '\u0102': 'A',
	  '\u0104': 'A',
	  '\u0101': 'a',
	  '\u0103': 'a',
	  '\u0105': 'a',
	  '\u0106': 'C',
	  '\u0108': 'C',
	  '\u010a': 'C',
	  '\u010c': 'C',
	  '\u0107': 'c',
	  '\u0109': 'c',
	  '\u010b': 'c',
	  '\u010d': 'c',
	  '\u010e': 'D',
	  '\u0110': 'D',
	  '\u010f': 'd',
	  '\u0111': 'd',
	  '\u0112': 'E',
	  '\u0114': 'E',
	  '\u0116': 'E',
	  '\u0118': 'E',
	  '\u011a': 'E',
	  '\u0113': 'e',
	  '\u0115': 'e',
	  '\u0117': 'e',
	  '\u0119': 'e',
	  '\u011b': 'e',
	  '\u011c': 'G',
	  '\u011e': 'G',
	  '\u0120': 'G',
	  '\u0122': 'G',
	  '\u011d': 'g',
	  '\u011f': 'g',
	  '\u0121': 'g',
	  '\u0123': 'g',
	  '\u0124': 'H',
	  '\u0126': 'H',
	  '\u0125': 'h',
	  '\u0127': 'h',
	  '\u0128': 'I',
	  '\u012a': 'I',
	  '\u012c': 'I',
	  '\u012e': 'I',
	  '\u0130': 'I',
	  '\u0129': 'i',
	  '\u012b': 'i',
	  '\u012d': 'i',
	  '\u012f': 'i',
	  '\u0131': 'i',
	  '\u0134': 'J',
	  '\u0135': 'j',
	  '\u0136': 'K',
	  '\u0137': 'k',
	  '\u0138': 'k',
	  '\u0139': 'L',
	  '\u013b': 'L',
	  '\u013d': 'L',
	  '\u013f': 'L',
	  '\u0141': 'L',
	  '\u013a': 'l',
	  '\u013c': 'l',
	  '\u013e': 'l',
	  '\u0140': 'l',
	  '\u0142': 'l',
	  '\u0143': 'N',
	  '\u0145': 'N',
	  '\u0147': 'N',
	  '\u014a': 'N',
	  '\u0144': 'n',
	  '\u0146': 'n',
	  '\u0148': 'n',
	  '\u014b': 'n',
	  '\u014c': 'O',
	  '\u014e': 'O',
	  '\u0150': 'O',
	  '\u014d': 'o',
	  '\u014f': 'o',
	  '\u0151': 'o',
	  '\u0154': 'R',
	  '\u0156': 'R',
	  '\u0158': 'R',
	  '\u0155': 'r',
	  '\u0157': 'r',
	  '\u0159': 'r',
	  '\u015a': 'S',
	  '\u015c': 'S',
	  '\u015e': 'S',
	  '\u0160': 'S',
	  '\u015b': 's',
	  '\u015d': 's',
	  '\u015f': 's',
	  '\u0161': 's',
	  '\u0162': 'T',
	  '\u0164': 'T',
	  '\u0166': 'T',
	  '\u0163': 't',
	  '\u0165': 't',
	  '\u0167': 't',
	  '\u0168': 'U',
	  '\u016a': 'U',
	  '\u016c': 'U',
	  '\u016e': 'U',
	  '\u0170': 'U',
	  '\u0172': 'U',
	  '\u0169': 'u',
	  '\u016b': 'u',
	  '\u016d': 'u',
	  '\u016f': 'u',
	  '\u0171': 'u',
	  '\u0173': 'u',
	  '\u0174': 'W',
	  '\u0175': 'w',
	  '\u0176': 'Y',
	  '\u0177': 'y',
	  '\u0178': 'Y',
	  '\u0179': 'Z',
	  '\u017b': 'Z',
	  '\u017d': 'Z',
	  '\u017a': 'z',
	  '\u017c': 'z',
	  '\u017e': 'z',
	  '\u0132': 'IJ',
	  '\u0133': 'ij',
	  '\u0152': 'Oe',
	  '\u0153': 'oe',
	  '\u0149': "'n",
	  '\u017f': 's'
	};

	/**
	 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	 * letters to basic Latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	var deburrLetter$1 = basePropertyOf(deburredLetters);
	var _deburrLetter = deburrLetter$1;

	var deburrLetter = _deburrLetter,
	  toString$3 = toString_1;

	/** Used to match Latin Unicode letters (excluding mathematical operators). */
	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	/** Used to compose unicode character classes. */
	var rsComboMarksRange$3 = '\\u0300-\\u036f',
	  reComboHalfMarksRange$3 = '\\ufe20-\\ufe2f',
	  rsComboSymbolsRange$3 = '\\u20d0-\\u20ff',
	  rsComboRange$3 = rsComboMarksRange$3 + reComboHalfMarksRange$3 + rsComboSymbolsRange$3;

	/** Used to compose unicode capture groups. */
	var rsCombo$2 = '[' + rsComboRange$3 + ']';

	/**
	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	 */
	var reComboMark = RegExp(rsCombo$2, 'g');

	/**
	 * Deburrs `string` by converting
	 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	 * letters to basic Latin letters and removing
	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */
	function deburr$1(string) {
	  string = toString$3(string);
	  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	}
	var deburr_1 = deburr$1;

	/** Used to match words composed of alphanumeric characters. */

	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	/**
	 * Splits an ASCII `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function asciiWords$1(string) {
	  return string.match(reAsciiWord) || [];
	}
	var _asciiWords = asciiWords$1;

	/** Used to detect strings that need a more robust regexp to match words. */

	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	/**
	 * Checks if `string` contains a word composed of Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a word is found, else `false`.
	 */
	function hasUnicodeWord$1(string) {
	  return reHasUnicodeWord.test(string);
	}
	var _hasUnicodeWord = hasUnicodeWord$1;

	/** Used to compose unicode character classes. */

	var rsAstralRange$2 = '\\ud800-\\udfff',
	  rsComboMarksRange$2 = '\\u0300-\\u036f',
	  reComboHalfMarksRange$2 = '\\ufe20-\\ufe2f',
	  rsComboSymbolsRange$2 = '\\u20d0-\\u20ff',
	  rsComboRange$2 = rsComboMarksRange$2 + reComboHalfMarksRange$2 + rsComboSymbolsRange$2,
	  rsDingbatRange = '\\u2700-\\u27bf',
	  rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	  rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	  rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	  rsPunctuationRange = '\\u2000-\\u206f',
	  rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	  rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	  rsVarRange$2 = '\\ufe0e\\ufe0f',
	  rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	/** Used to compose unicode capture groups. */
	var rsApos$1 = "['\u2019]",
	  rsBreak = '[' + rsBreakRange + ']',
	  rsCombo$1 = '[' + rsComboRange$2 + ']',
	  rsDigits = '\\d+',
	  rsDingbat = '[' + rsDingbatRange + ']',
	  rsLower = '[' + rsLowerRange + ']',
	  rsMisc = '[^' + rsAstralRange$2 + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	  rsFitz$1 = '\\ud83c[\\udffb-\\udfff]',
	  rsModifier$1 = '(?:' + rsCombo$1 + '|' + rsFitz$1 + ')',
	  rsNonAstral$1 = '[^' + rsAstralRange$2 + ']',
	  rsRegional$1 = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	  rsSurrPair$1 = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	  rsUpper = '[' + rsUpperRange + ']',
	  rsZWJ$2 = '\\u200d';

	/** Used to compose unicode regexes. */
	var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	  rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	  rsOptContrLower = '(?:' + rsApos$1 + '(?:d|ll|m|re|s|t|ve))?',
	  rsOptContrUpper = '(?:' + rsApos$1 + '(?:D|LL|M|RE|S|T|VE))?',
	  reOptMod$1 = rsModifier$1 + '?',
	  rsOptVar$1 = '[' + rsVarRange$2 + ']?',
	  rsOptJoin$1 = '(?:' + rsZWJ$2 + '(?:' + [rsNonAstral$1, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsOptVar$1 + reOptMod$1 + ')*',
	  rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	  rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	  rsSeq$1 = rsOptVar$1 + reOptMod$1 + rsOptJoin$1,
	  rsEmoji = '(?:' + [rsDingbat, rsRegional$1, rsSurrPair$1].join('|') + ')' + rsSeq$1;

	/** Used to match complex or compound words. */
	var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');

	/**
	 * Splits a Unicode `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function unicodeWords$1(string) {
	  return string.match(reUnicodeWord) || [];
	}
	var _unicodeWords = unicodeWords$1;

	var asciiWords = _asciiWords,
	  hasUnicodeWord = _hasUnicodeWord,
	  toString$2 = toString_1,
	  unicodeWords = _unicodeWords;

	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	function words$1(string, pattern, guard) {
	  string = toString$2(string);
	  pattern = guard ? undefined : pattern;
	  if (pattern === undefined) {
	    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	  }
	  return string.match(pattern) || [];
	}
	var words_1 = words$1;

	var arrayReduce$1 = _arrayReduce,
	  deburr = deburr_1,
	  words = words_1;

	/** Used to compose unicode capture groups. */
	var rsApos = "['\u2019]";

	/** Used to match apostrophes. */
	var reApos = RegExp(rsApos, 'g');

	/**
	 * Creates a function like `_.camelCase`.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */
	function createCompounder$1(callback) {
	  return function (string) {
	    return arrayReduce$1(words(deburr(string).replace(reApos, '')), callback, '');
	  };
	}
	var _createCompounder = createCompounder$1;

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */

	function baseSlice$2(array, start, end) {
	  var index = -1,
	    length = array.length;
	  if (start < 0) {
	    start = -start > length ? 0 : length + start;
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : end - start >>> 0;
	  start >>>= 0;
	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}
	var _baseSlice = baseSlice$2;

	var baseSlice$1 = _baseSlice;

	/**
	 * Casts `array` to a slice if it's needed.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {number} start The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the cast slice.
	 */
	function castSlice$1(array, start, end) {
	  var length = array.length;
	  end = end === undefined ? length : end;
	  return !start && end >= length ? array : baseSlice$1(array, start, end);
	}
	var _castSlice = castSlice$1;

	/** Used to compose unicode character classes. */

	var rsAstralRange$1 = '\\ud800-\\udfff',
	  rsComboMarksRange$1 = '\\u0300-\\u036f',
	  reComboHalfMarksRange$1 = '\\ufe20-\\ufe2f',
	  rsComboSymbolsRange$1 = '\\u20d0-\\u20ff',
	  rsComboRange$1 = rsComboMarksRange$1 + reComboHalfMarksRange$1 + rsComboSymbolsRange$1,
	  rsVarRange$1 = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsZWJ$1 = '\\u200d';

	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	var reHasUnicode = RegExp('[' + rsZWJ$1 + rsAstralRange$1 + rsComboRange$1 + rsVarRange$1 + ']');

	/**
	 * Checks if `string` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	 */
	function hasUnicode$2(string) {
	  return reHasUnicode.test(string);
	}
	var _hasUnicode = hasUnicode$2;

	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */

	function asciiToArray$1(string) {
	  return string.split('');
	}
	var _asciiToArray = asciiToArray$1;

	/** Used to compose unicode character classes. */

	var rsAstralRange = '\\ud800-\\udfff',
	  rsComboMarksRange = '\\u0300-\\u036f',
	  reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	  rsComboSymbolsRange = '\\u20d0-\\u20ff',
	  rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	  rsVarRange = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsAstral = '[' + rsAstralRange + ']',
	  rsCombo = '[' + rsComboRange + ']',
	  rsFitz = '\\ud83c[\\udffb-\\udfff]',
	  rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	  rsNonAstral = '[^' + rsAstralRange + ']',
	  rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	  rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	  rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var reOptMod = rsModifier + '?',
	  rsOptVar = '[' + rsVarRange + ']?',
	  rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	  rsSeq = rsOptVar + reOptMod + rsOptJoin,
	  rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	/**
	 * Converts a Unicode `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function unicodeToArray$1(string) {
	  return string.match(reUnicode) || [];
	}
	var _unicodeToArray = unicodeToArray$1;

	var asciiToArray = _asciiToArray,
	  hasUnicode$1 = _hasUnicode,
	  unicodeToArray = _unicodeToArray;

	/**
	 * Converts `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function stringToArray$1(string) {
	  return hasUnicode$1(string) ? unicodeToArray(string) : asciiToArray(string);
	}
	var _stringToArray = stringToArray$1;

	var castSlice = _castSlice,
	  hasUnicode = _hasUnicode,
	  stringToArray = _stringToArray,
	  toString$1 = toString_1;

	/**
	 * Creates a function like `_.lowerFirst`.
	 *
	 * @private
	 * @param {string} methodName The name of the `String` case method to use.
	 * @returns {Function} Returns the new case function.
	 */
	function createCaseFirst$1(methodName) {
	  return function (string) {
	    string = toString$1(string);
	    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
	    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
	    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
	    return chr[methodName]() + trailing;
	  };
	}
	var _createCaseFirst = createCaseFirst$1;

	var createCaseFirst = _createCaseFirst;

	/**
	 * Converts the first character of `string` to upper case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.upperFirst('fred');
	 * // => 'Fred'
	 *
	 * _.upperFirst('FRED');
	 * // => 'FRED'
	 */
	var upperFirst$1 = createCaseFirst('toUpperCase');
	var upperFirst_1 = upperFirst$1;

	var createCompounder = _createCompounder,
	  upperFirst = upperFirst_1;

	/**
	 * Converts `string` to
	 * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.1.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the start cased string.
	 * @example
	 *
	 * _.startCase('--foo-bar--');
	 * // => 'Foo Bar'
	 *
	 * _.startCase('fooBar');
	 * // => 'Foo Bar'
	 *
	 * _.startCase('__FOO_BAR__');
	 * // => 'FOO BAR'
	 */
	var startCase = createCompounder(function (result, word, index) {
	  return result + (index ? ' ' : '') + upperFirst(word);
	});
	var startCase_1 = startCase;

	var startCase$1 = /*@__PURE__*/getDefaultExportFromCjs(startCase_1);

	var getNative = _getNative;
	var defineProperty$2 = function () {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}();
	var _defineProperty = defineProperty$2;

	var defineProperty$1 = _defineProperty;

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue$3(object, key, value) {
	  if (key == '__proto__' && defineProperty$1) {
	    defineProperty$1(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}
	var _baseAssignValue = baseAssignValue$3;

	var baseAssignValue$2 = _baseAssignValue,
	  eq$2 = eq_1;

	/**
	 * This function is like `assignValue` except that it doesn't assign
	 * `undefined` values.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignMergeValue$2(object, key, value) {
	  if (value !== undefined && !eq$2(object[key], value) || value === undefined && !(key in object)) {
	    baseAssignValue$2(object, key, value);
	  }
	}
	var _assignMergeValue = assignMergeValue$2;

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */

	function createBaseFor$1(fromRight) {
	  return function (object, iteratee, keysFunc) {
	    var index = -1,
	      iterable = Object(object),
	      props = keysFunc(object),
	      length = props.length;
	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}
	var _createBaseFor = createBaseFor$1;

	var createBaseFor = _createBaseFor;

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor$2 = createBaseFor();
	var _baseFor = baseFor$2;

	var _cloneBuffer = {exports: {}};

	_cloneBuffer.exports;

	(function (module, exports) {
		var root = _root;

		/** Detect free variable `exports`. */
		var freeExports = exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Built-in value references. */
		var Buffer = moduleExports ? root.Buffer : undefined,
		  allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

		/**
		 * Creates a clone of  `buffer`.
		 *
		 * @private
		 * @param {Buffer} buffer The buffer to clone.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Buffer} Returns the cloned buffer.
		 */
		function cloneBuffer(buffer, isDeep) {
		  if (isDeep) {
		    return buffer.slice();
		  }
		  var length = buffer.length,
		    result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
		  buffer.copy(result);
		  return result;
		}
		module.exports = cloneBuffer; 
	} (_cloneBuffer, _cloneBuffer.exports));

	var _cloneBufferExports = _cloneBuffer.exports;

	var Uint8Array = _Uint8Array;

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer$3(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}
	var _cloneArrayBuffer = cloneArrayBuffer$3;

	var cloneArrayBuffer$2 = _cloneArrayBuffer;

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray$2(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer$2(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}
	var _cloneTypedArray = cloneTypedArray$2;

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */

	function copyArray$5(source, array) {
	  var index = -1,
	    length = source.length;
	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}
	var _copyArray = copyArray$5;

	var isObject$8 = isObject_1;

	/** Built-in value references. */
	var objectCreate = Object.create;

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate$4 = function () {
	  function object() {}
	  return function (proto) {
	    if (!isObject$8(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object();
	    object.prototype = undefined;
	    return result;
	  };
	}();
	var _baseCreate = baseCreate$4;

	var overArg = _overArg;

	/** Built-in value references. */
	var getPrototype$3 = overArg(Object.getPrototypeOf, Object);
	var _getPrototype = getPrototype$3;

	var baseCreate$3 = _baseCreate,
	  getPrototype$2 = _getPrototype,
	  isPrototype$1 = _isPrototype;

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject$2(object) {
	  return typeof object.constructor == 'function' && !isPrototype$1(object) ? baseCreate$3(getPrototype$2(object)) : {};
	}
	var _initCloneObject = initCloneObject$2;

	var isArrayLike$6 = isArrayLike_1,
	  isObjectLike$7 = isObjectLike_1;

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject$2(value) {
	  return isObjectLike$7(value) && isArrayLike$6(value);
	}
	var isArrayLikeObject_1 = isArrayLikeObject$2;

	var baseGetTag$2 = _baseGetTag,
	  getPrototype$1 = _getPrototype,
	  isObjectLike$6 = isObjectLike_1;

	/** `Object#toString` result references. */
	var objectTag$1 = '[object Object]';

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	  objectProto$6 = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty$6 = objectProto$6.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject$4(value) {
	  if (!isObjectLike$6(value) || baseGetTag$2(value) != objectTag$1) {
	    return false;
	  }
	  var proto = getPrototype$1(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty$6.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
	}
	var isPlainObject_1 = isPlainObject$4;

	/**
	 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */

	function safeGet$2(object, key) {
	  if (key === 'constructor' && typeof object[key] === 'function') {
	    return;
	  }
	  if (key == '__proto__') {
	    return;
	  }
	  return object[key];
	}
	var _safeGet = safeGet$2;

	var baseAssignValue$1 = _baseAssignValue,
	  eq$1 = eq_1;

	/** Used for built-in method references. */
	var objectProto$5 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$5 = objectProto$5.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue$2(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty$5.call(object, key) && eq$1(objValue, value)) || value === undefined && !(key in object)) {
	    baseAssignValue$1(object, key, value);
	  }
	}
	var _assignValue = assignValue$2;

	var assignValue$1 = _assignValue,
	  baseAssignValue = _baseAssignValue;

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject$6(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});
	  var index = -1,
	    length = props.length;
	  while (++index < length) {
	    var key = props[index];
	    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue$1(object, key, newValue);
	    }
	  }
	  return object;
	}
	var _copyObject = copyObject$6;

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */

	function nativeKeysIn$1(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	var _nativeKeysIn = nativeKeysIn$1;

	var isObject$7 = isObject_1,
	  isPrototype = _isPrototype,
	  nativeKeysIn = _nativeKeysIn;

	/** Used for built-in method references. */
	var objectProto$4 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn$1(object) {
	  if (!isObject$7(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	    result = [];
	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty$4.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	var _baseKeysIn = baseKeysIn$1;

	var arrayLikeKeys = _arrayLikeKeys,
	  baseKeysIn = _baseKeysIn,
	  isArrayLike$5 = isArrayLike_1;

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn$5(object) {
	  return isArrayLike$5(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}
	var keysIn_1 = keysIn$5;

	var copyObject$5 = _copyObject,
	  keysIn$4 = keysIn_1;

	/**
	 * Converts `value` to a plain object flattening inherited enumerable string
	 * keyed properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject$1(value) {
	  return copyObject$5(value, keysIn$4(value));
	}
	var toPlainObject_1 = toPlainObject$1;

	var assignMergeValue$1 = _assignMergeValue,
	  cloneBuffer$1 = _cloneBufferExports,
	  cloneTypedArray$1 = _cloneTypedArray,
	  copyArray$4 = _copyArray,
	  initCloneObject$1 = _initCloneObject,
	  isArguments$1 = isArguments_1,
	  isArray$8 = isArray_1,
	  isArrayLikeObject$1 = isArrayLikeObject_1,
	  isBuffer$1 = isBufferExports,
	  isFunction = isFunction_1,
	  isObject$6 = isObject_1,
	  isPlainObject$3 = isPlainObject_1,
	  isTypedArray = isTypedArray_1,
	  safeGet$1 = _safeGet,
	  toPlainObject = toPlainObject_1;

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMergeDeep$1(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	  var objValue = safeGet$1(object, key),
	    srcValue = safeGet$1(source, key),
	    stacked = stack.get(srcValue);
	  if (stacked) {
	    assignMergeValue$1(object, key, stacked);
	    return;
	  }
	  var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
	  var isCommon = newValue === undefined;
	  if (isCommon) {
	    var isArr = isArray$8(srcValue),
	      isBuff = !isArr && isBuffer$1(srcValue),
	      isTyped = !isArr && !isBuff && isTypedArray(srcValue);
	    newValue = srcValue;
	    if (isArr || isBuff || isTyped) {
	      if (isArray$8(objValue)) {
	        newValue = objValue;
	      } else if (isArrayLikeObject$1(objValue)) {
	        newValue = copyArray$4(objValue);
	      } else if (isBuff) {
	        isCommon = false;
	        newValue = cloneBuffer$1(srcValue, true);
	      } else if (isTyped) {
	        isCommon = false;
	        newValue = cloneTypedArray$1(srcValue, true);
	      } else {
	        newValue = [];
	      }
	    } else if (isPlainObject$3(srcValue) || isArguments$1(srcValue)) {
	      newValue = objValue;
	      if (isArguments$1(objValue)) {
	        newValue = toPlainObject(objValue);
	      } else if (!isObject$6(objValue) || isFunction(objValue)) {
	        newValue = initCloneObject$1(srcValue);
	      }
	    } else {
	      isCommon = false;
	    }
	  }
	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    stack.set(srcValue, newValue);
	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	    stack['delete'](srcValue);
	  }
	  assignMergeValue$1(object, key, newValue);
	}
	var _baseMergeDeep = baseMergeDeep$1;

	var Stack$3 = _Stack,
	  assignMergeValue = _assignMergeValue,
	  baseFor$1 = _baseFor,
	  baseMergeDeep = _baseMergeDeep,
	  isObject$5 = isObject_1,
	  keysIn$3 = keysIn_1,
	  safeGet = _safeGet;

	/**
	 * The base implementation of `_.merge` without support for multiple sources.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMerge$1(object, source, srcIndex, customizer, stack) {
	  if (object === source) {
	    return;
	  }
	  baseFor$1(source, function (srcValue, key) {
	    stack || (stack = new Stack$3());
	    if (isObject$5(srcValue)) {
	      baseMergeDeep(object, source, key, srcIndex, baseMerge$1, customizer, stack);
	    } else {
	      var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;
	      if (newValue === undefined) {
	        newValue = srcValue;
	      }
	      assignMergeValue(object, key, newValue);
	    }
	  }, keysIn$3);
	}
	var _baseMerge = baseMerge$1;

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */

	function apply$3(func, thisArg, args) {
	  switch (args.length) {
	    case 0:
	      return func.call(thisArg);
	    case 1:
	      return func.call(thisArg, args[0]);
	    case 2:
	      return func.call(thisArg, args[0], args[1]);
	    case 3:
	      return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}
	var _apply = apply$3;

	var apply$2 = _apply;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$7 = Math.max;

	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest$2(func, start, transform) {
	  start = nativeMax$7(start === undefined ? func.length - 1 : start, 0);
	  return function () {
	    var args = arguments,
	      index = -1,
	      length = nativeMax$7(args.length - start, 0),
	      array = Array(length);
	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply$2(func, this, otherArgs);
	  };
	}
	var _overRest = overRest$2;

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */

	function constant$1(value) {
	  return function () {
	    return value;
	  };
	}
	var constant_1 = constant$1;

	var constant = constant_1,
	  defineProperty = _defineProperty,
	  identity$2 = identity_1;

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString$1 = !defineProperty ? identity$2 : function (func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};
	var _baseSetToString = baseSetToString$1;

	/** Used to detect hot functions by number of calls within a span of milliseconds. */

	var HOT_COUNT = 800,
	  HOT_SPAN = 16;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;

	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut$2(func) {
	  var count = 0,
	    lastCalled = 0;
	  return function () {
	    var stamp = nativeNow(),
	      remaining = HOT_SPAN - (stamp - lastCalled);
	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}
	var _shortOut = shortOut$2;

	var baseSetToString = _baseSetToString,
	  shortOut$1 = _shortOut;

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString$3 = shortOut$1(baseSetToString);
	var _setToString = setToString$3;

	var identity$1 = identity_1,
	  overRest$1 = _overRest,
	  setToString$2 = _setToString;

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest$2(func, start) {
	  return setToString$2(overRest$1(func, start, identity$1), func + '');
	}
	var _baseRest = baseRest$2;

	var eq = eq_1,
	  isArrayLike$4 = isArrayLike_1,
	  isIndex$1 = _isIndex,
	  isObject$4 = isObject_1;

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall$2(value, index, object) {
	  if (!isObject$4(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number' ? isArrayLike$4(object) && isIndex$1(index, object.length) : type == 'string' && index in object) {
	    return eq(object[index], value);
	  }
	  return false;
	}
	var _isIterateeCall = isIterateeCall$2;

	var baseRest$1 = _baseRest,
	  isIterateeCall$1 = _isIterateeCall;

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner$1(assigner) {
	  return baseRest$1(function (object, sources) {
	    var index = -1,
	      length = sources.length,
	      customizer = length > 1 ? sources[length - 1] : undefined,
	      guard = length > 2 ? sources[2] : undefined;
	    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
	    if (guard && isIterateeCall$1(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}
	var _createAssigner = createAssigner$1;

	var baseMerge = _baseMerge,
	  createAssigner = _createAssigner;

	/**
	 * This method is like `_.assign` except that it recursively merges own and
	 * inherited enumerable string keyed properties of source objects into the
	 * destination object. Source properties that resolve to `undefined` are
	 * skipped if a destination value exists. Array and plain object properties
	 * are merged recursively. Other objects and value types are overridden by
	 * assignment. Source objects are applied from left to right. Subsequent
	 * sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.5.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = {
	 *   'a': [{ 'b': 2 }, { 'd': 4 }]
	 * };
	 *
	 * var other = {
	 *   'a': [{ 'c': 3 }, { 'e': 5 }]
	 * };
	 *
	 * _.merge(object, other);
	 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	 */
	var merge$1 = createAssigner(function (object, source, srcIndex) {
	  baseMerge(object, source, srcIndex);
	});
	var merge_1 = merge$1;

	var merge$2 = /*@__PURE__*/getDefaultExportFromCjs(merge_1);

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */

	function arrayEach$2(array, iteratee) {
	  var index = -1,
	    length = array == null ? 0 : array.length;
	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}
	var _arrayEach = arrayEach$2;

	var copyObject$4 = _copyObject,
	  keys$5 = keys_1;

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign$1(object, source) {
	  return object && copyObject$4(source, keys$5(source), object);
	}
	var _baseAssign = baseAssign$1;

	var copyObject$3 = _copyObject,
	  keysIn$2 = keysIn_1;

	/**
	 * The base implementation of `_.assignIn` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssignIn$1(object, source) {
	  return object && copyObject$3(source, keysIn$2(source), object);
	}
	var _baseAssignIn = baseAssignIn$1;

	var copyObject$2 = _copyObject,
	  getSymbols$1 = _getSymbols;

	/**
	 * Copies own symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols$1(source, object) {
	  return copyObject$2(source, getSymbols$1(source), object);
	}
	var _copySymbols = copySymbols$1;

	var arrayPush$1 = _arrayPush,
	  getPrototype = _getPrototype,
	  getSymbols = _getSymbols,
	  stubArray = stubArray_1;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own and inherited enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function (object) {
	  var result = [];
	  while (object) {
	    arrayPush$1(result, getSymbols(object));
	    object = getPrototype(object);
	  }
	  return result;
	};
	var _getSymbolsIn = getSymbolsIn$2;

	var copyObject$1 = _copyObject,
	  getSymbolsIn$1 = _getSymbolsIn;

	/**
	 * Copies own and inherited symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbolsIn$1(source, object) {
	  return copyObject$1(source, getSymbolsIn$1(source), object);
	}
	var _copySymbolsIn = copySymbolsIn$1;

	var baseGetAllKeys = _baseGetAllKeys,
	  getSymbolsIn = _getSymbolsIn,
	  keysIn$1 = keysIn_1;

	/**
	 * Creates an array of own and inherited enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeysIn$2(object) {
	  return baseGetAllKeys(object, keysIn$1, getSymbolsIn);
	}
	var _getAllKeysIn = getAllKeysIn$2;

	/** Used for built-in method references. */

	var objectProto$3 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray$1(array) {
	  var length = array.length,
	    result = new array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty$3.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}
	var _initCloneArray = initCloneArray$1;

	var cloneArrayBuffer$1 = _cloneArrayBuffer;

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView$1(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer$1(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}
	var _cloneDataView = cloneDataView$1;

	/** Used to match `RegExp` flags from their coerced string values. */

	var reFlags = /\w*$/;

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp$1(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}
	var _cloneRegExp = cloneRegExp$1;

	var Symbol$2 = _Symbol;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol$2 ? Symbol$2.prototype : undefined,
	  symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol$1(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}
	var _cloneSymbol = cloneSymbol$1;

	var cloneArrayBuffer = _cloneArrayBuffer,
	  cloneDataView = _cloneDataView,
	  cloneRegExp = _cloneRegExp,
	  cloneSymbol = _cloneSymbol,
	  cloneTypedArray = _cloneTypedArray;

	/** `Object#toString` result references. */
	var boolTag$1 = '[object Boolean]',
	  dateTag$1 = '[object Date]',
	  mapTag$3 = '[object Map]',
	  numberTag$1 = '[object Number]',
	  regexpTag$1 = '[object RegExp]',
	  setTag$3 = '[object Set]',
	  stringTag$2 = '[object String]',
	  symbolTag$1 = '[object Symbol]';
	var arrayBufferTag$1 = '[object ArrayBuffer]',
	  dataViewTag$1 = '[object DataView]',
	  float32Tag$1 = '[object Float32Array]',
	  float64Tag$1 = '[object Float64Array]',
	  int8Tag$1 = '[object Int8Array]',
	  int16Tag$1 = '[object Int16Array]',
	  int32Tag$1 = '[object Int32Array]',
	  uint8Tag$1 = '[object Uint8Array]',
	  uint8ClampedTag$1 = '[object Uint8ClampedArray]',
	  uint16Tag$1 = '[object Uint16Array]',
	  uint32Tag$1 = '[object Uint32Array]';

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag$1(object, tag, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag$1:
	      return cloneArrayBuffer(object);
	    case boolTag$1:
	    case dateTag$1:
	      return new Ctor(+object);
	    case dataViewTag$1:
	      return cloneDataView(object, isDeep);
	    case float32Tag$1:
	    case float64Tag$1:
	    case int8Tag$1:
	    case int16Tag$1:
	    case int32Tag$1:
	    case uint8Tag$1:
	    case uint8ClampedTag$1:
	    case uint16Tag$1:
	    case uint32Tag$1:
	      return cloneTypedArray(object, isDeep);
	    case mapTag$3:
	      return new Ctor();
	    case numberTag$1:
	    case stringTag$2:
	      return new Ctor(object);
	    case regexpTag$1:
	      return cloneRegExp(object);
	    case setTag$3:
	      return new Ctor();
	    case symbolTag$1:
	      return cloneSymbol(object);
	  }
	}
	var _initCloneByTag = initCloneByTag$1;

	var getTag$4 = _getTag,
	  isObjectLike$5 = isObjectLike_1;

	/** `Object#toString` result references. */
	var mapTag$2 = '[object Map]';

	/**
	 * The base implementation of `_.isMap` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 */
	function baseIsMap$1(value) {
	  return isObjectLike$5(value) && getTag$4(value) == mapTag$2;
	}
	var _baseIsMap = baseIsMap$1;

	var baseIsMap = _baseIsMap,
	  baseUnary$1 = _baseUnary,
	  nodeUtil$1 = _nodeUtilExports;

	/* Node.js helper references. */
	var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

	/**
	 * Checks if `value` is classified as a `Map` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 * @example
	 *
	 * _.isMap(new Map);
	 * // => true
	 *
	 * _.isMap(new WeakMap);
	 * // => false
	 */
	var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;
	var isMap_1 = isMap$1;

	var getTag$3 = _getTag,
	  isObjectLike$4 = isObjectLike_1;

	/** `Object#toString` result references. */
	var setTag$2 = '[object Set]';

	/**
	 * The base implementation of `_.isSet` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 */
	function baseIsSet$1(value) {
	  return isObjectLike$4(value) && getTag$3(value) == setTag$2;
	}
	var _baseIsSet = baseIsSet$1;

	var baseIsSet = _baseIsSet,
	  baseUnary = _baseUnary,
	  nodeUtil = _nodeUtilExports;

	/* Node.js helper references. */
	var nodeIsSet = nodeUtil && nodeUtil.isSet;

	/**
	 * Checks if `value` is classified as a `Set` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 * @example
	 *
	 * _.isSet(new Set);
	 * // => true
	 *
	 * _.isSet(new WeakSet);
	 * // => false
	 */
	var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
	var isSet_1 = isSet$1;

	var Stack$2 = _Stack,
	  arrayEach$1 = _arrayEach,
	  assignValue = _assignValue,
	  baseAssign = _baseAssign,
	  baseAssignIn = _baseAssignIn,
	  cloneBuffer = _cloneBufferExports,
	  copyArray$3 = _copyArray,
	  copySymbols = _copySymbols,
	  copySymbolsIn = _copySymbolsIn,
	  getAllKeys = _getAllKeys,
	  getAllKeysIn$1 = _getAllKeysIn,
	  getTag$2 = _getTag,
	  initCloneArray = _initCloneArray,
	  initCloneByTag = _initCloneByTag,
	  initCloneObject = _initCloneObject,
	  isArray$7 = isArray_1,
	  isBuffer = isBufferExports,
	  isMap = isMap_1,
	  isObject$3 = isObject_1,
	  isSet = isSet_1,
	  keys$4 = keys_1,
	  keysIn = keysIn_1;

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG$3 = 1,
	  CLONE_FLAT_FLAG$1 = 2,
	  CLONE_SYMBOLS_FLAG$3 = 4;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	  arrayTag = '[object Array]',
	  boolTag = '[object Boolean]',
	  dateTag = '[object Date]',
	  errorTag$1 = '[object Error]',
	  funcTag = '[object Function]',
	  genTag = '[object GeneratorFunction]',
	  mapTag$1 = '[object Map]',
	  numberTag = '[object Number]',
	  objectTag = '[object Object]',
	  regexpTag = '[object RegExp]',
	  setTag$1 = '[object Set]',
	  stringTag$1 = '[object String]',
	  symbolTag = '[object Symbol]',
	  weakMapTag$1 = '[object WeakMap]';
	var arrayBufferTag = '[object ArrayBuffer]',
	  dataViewTag = '[object DataView]',
	  float32Tag = '[object Float32Array]',
	  float64Tag = '[object Float64Array]',
	  int8Tag = '[object Int8Array]',
	  int16Tag = '[object Int16Array]',
	  int32Tag = '[object Int32Array]',
	  uint8Tag = '[object Uint8Array]',
	  uint8ClampedTag = '[object Uint8ClampedArray]',
	  uint16Tag = '[object Uint16Array]',
	  uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag$1] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag$1] = cloneableTags[stringTag$1] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag$1] = cloneableTags[funcTag] = cloneableTags[weakMapTag$1] = false;

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Deep clone
	 *  2 - Flatten inherited properties
	 *  4 - Clone symbols
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone$4(value, bitmask, customizer, key, object, stack) {
	  var result,
	    isDeep = bitmask & CLONE_DEEP_FLAG$3,
	    isFlat = bitmask & CLONE_FLAT_FLAG$1,
	    isFull = bitmask & CLONE_SYMBOLS_FLAG$3;
	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject$3(value)) {
	    return value;
	  }
	  var isArr = isArray$7(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray$3(value, result);
	    }
	  } else {
	    var tag = getTag$2(value),
	      isFunc = tag == funcTag || tag == genTag;
	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || isFunc && !object) {
	      result = isFlat || isFunc ? {} : initCloneObject(value);
	      if (!isDeep) {
	        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack$2());
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);
	  if (isSet(value)) {
	    value.forEach(function (subValue) {
	      result.add(baseClone$4(subValue, bitmask, customizer, subValue, value, stack));
	    });
	  } else if (isMap(value)) {
	    value.forEach(function (subValue, key) {
	      result.set(key, baseClone$4(subValue, bitmask, customizer, key, value, stack));
	    });
	  }
	  var keysFunc = isFull ? isFlat ? getAllKeysIn$1 : getAllKeys : isFlat ? keysIn : keys$4;
	  var props = isArr ? undefined : keysFunc(value);
	  arrayEach$1(props || value, function (subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone$4(subValue, bitmask, customizer, key, value, stack));
	  });
	  return result;
	}
	var _baseClone = baseClone$4;

	var baseClone$3 = _baseClone;

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG$2 = 1,
	  CLONE_SYMBOLS_FLAG$2 = 4;

	/**
	 * This method is like `_.clone` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.clone
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var deep = _.cloneDeep(objects);
	 * console.log(deep[0] === objects[0]);
	 * // => false
	 */
	function cloneDeep(value) {
	  return baseClone$3(value, CLONE_DEEP_FLAG$2 | CLONE_SYMBOLS_FLAG$2);
	}
	var cloneDeep_1 = cloneDeep;

	var cloneDeep$1 = /*@__PURE__*/getDefaultExportFromCjs(cloneDeep_1);

	var _mapping = {};

	/** Used to map aliases to their real names. */

	(function (exports) {
		exports.aliasToReal = {
		  // Lodash aliases.
		  'each': 'forEach',
		  'eachRight': 'forEachRight',
		  'entries': 'toPairs',
		  'entriesIn': 'toPairsIn',
		  'extend': 'assignIn',
		  'extendAll': 'assignInAll',
		  'extendAllWith': 'assignInAllWith',
		  'extendWith': 'assignInWith',
		  'first': 'head',
		  // Methods that are curried variants of others.
		  'conforms': 'conformsTo',
		  'matches': 'isMatch',
		  'property': 'get',
		  // Ramda aliases.
		  '__': 'placeholder',
		  'F': 'stubFalse',
		  'T': 'stubTrue',
		  'all': 'every',
		  'allPass': 'overEvery',
		  'always': 'constant',
		  'any': 'some',
		  'anyPass': 'overSome',
		  'apply': 'spread',
		  'assoc': 'set',
		  'assocPath': 'set',
		  'complement': 'negate',
		  'compose': 'flowRight',
		  'contains': 'includes',
		  'dissoc': 'unset',
		  'dissocPath': 'unset',
		  'dropLast': 'dropRight',
		  'dropLastWhile': 'dropRightWhile',
		  'equals': 'isEqual',
		  'identical': 'eq',
		  'indexBy': 'keyBy',
		  'init': 'initial',
		  'invertObj': 'invert',
		  'juxt': 'over',
		  'omitAll': 'omit',
		  'nAry': 'ary',
		  'path': 'get',
		  'pathEq': 'matchesProperty',
		  'pathOr': 'getOr',
		  'paths': 'at',
		  'pickAll': 'pick',
		  'pipe': 'flow',
		  'pluck': 'map',
		  'prop': 'get',
		  'propEq': 'matchesProperty',
		  'propOr': 'getOr',
		  'props': 'at',
		  'symmetricDifference': 'xor',
		  'symmetricDifferenceBy': 'xorBy',
		  'symmetricDifferenceWith': 'xorWith',
		  'takeLast': 'takeRight',
		  'takeLastWhile': 'takeRightWhile',
		  'unapply': 'rest',
		  'unnest': 'flatten',
		  'useWith': 'overArgs',
		  'where': 'conformsTo',
		  'whereEq': 'isMatch',
		  'zipObj': 'zipObject'
		};

		/** Used to map ary to method names. */
		exports.aryMethod = {
		  '1': ['assignAll', 'assignInAll', 'attempt', 'castArray', 'ceil', 'create', 'curry', 'curryRight', 'defaultsAll', 'defaultsDeepAll', 'floor', 'flow', 'flowRight', 'fromPairs', 'invert', 'iteratee', 'memoize', 'method', 'mergeAll', 'methodOf', 'mixin', 'nthArg', 'over', 'overEvery', 'overSome', 'rest', 'reverse', 'round', 'runInContext', 'spread', 'template', 'trim', 'trimEnd', 'trimStart', 'uniqueId', 'words', 'zipAll'],
		  '2': ['add', 'after', 'ary', 'assign', 'assignAllWith', 'assignIn', 'assignInAllWith', 'at', 'before', 'bind', 'bindAll', 'bindKey', 'chunk', 'cloneDeepWith', 'cloneWith', 'concat', 'conformsTo', 'countBy', 'curryN', 'curryRightN', 'debounce', 'defaults', 'defaultsDeep', 'defaultTo', 'delay', 'difference', 'divide', 'drop', 'dropRight', 'dropRightWhile', 'dropWhile', 'endsWith', 'eq', 'every', 'filter', 'find', 'findIndex', 'findKey', 'findLast', 'findLastIndex', 'findLastKey', 'flatMap', 'flatMapDeep', 'flattenDepth', 'forEach', 'forEachRight', 'forIn', 'forInRight', 'forOwn', 'forOwnRight', 'get', 'groupBy', 'gt', 'gte', 'has', 'hasIn', 'includes', 'indexOf', 'intersection', 'invertBy', 'invoke', 'invokeMap', 'isEqual', 'isMatch', 'join', 'keyBy', 'lastIndexOf', 'lt', 'lte', 'map', 'mapKeys', 'mapValues', 'matchesProperty', 'maxBy', 'meanBy', 'merge', 'mergeAllWith', 'minBy', 'multiply', 'nth', 'omit', 'omitBy', 'overArgs', 'pad', 'padEnd', 'padStart', 'parseInt', 'partial', 'partialRight', 'partition', 'pick', 'pickBy', 'propertyOf', 'pull', 'pullAll', 'pullAt', 'random', 'range', 'rangeRight', 'rearg', 'reject', 'remove', 'repeat', 'restFrom', 'result', 'sampleSize', 'some', 'sortBy', 'sortedIndex', 'sortedIndexOf', 'sortedLastIndex', 'sortedLastIndexOf', 'sortedUniqBy', 'split', 'spreadFrom', 'startsWith', 'subtract', 'sumBy', 'take', 'takeRight', 'takeRightWhile', 'takeWhile', 'tap', 'throttle', 'thru', 'times', 'trimChars', 'trimCharsEnd', 'trimCharsStart', 'truncate', 'union', 'uniqBy', 'uniqWith', 'unset', 'unzipWith', 'without', 'wrap', 'xor', 'zip', 'zipObject', 'zipObjectDeep'],
		  '3': ['assignInWith', 'assignWith', 'clamp', 'differenceBy', 'differenceWith', 'findFrom', 'findIndexFrom', 'findLastFrom', 'findLastIndexFrom', 'getOr', 'includesFrom', 'indexOfFrom', 'inRange', 'intersectionBy', 'intersectionWith', 'invokeArgs', 'invokeArgsMap', 'isEqualWith', 'isMatchWith', 'flatMapDepth', 'lastIndexOfFrom', 'mergeWith', 'orderBy', 'padChars', 'padCharsEnd', 'padCharsStart', 'pullAllBy', 'pullAllWith', 'rangeStep', 'rangeStepRight', 'reduce', 'reduceRight', 'replace', 'set', 'slice', 'sortedIndexBy', 'sortedLastIndexBy', 'transform', 'unionBy', 'unionWith', 'update', 'xorBy', 'xorWith', 'zipWith'],
		  '4': ['fill', 'setWith', 'updateWith']
		};

		/** Used to map ary to rearg configs. */
		exports.aryRearg = {
		  '2': [1, 0],
		  '3': [2, 0, 1],
		  '4': [3, 2, 0, 1]
		};

		/** Used to map method names to their iteratee ary. */
		exports.iterateeAry = {
		  'dropRightWhile': 1,
		  'dropWhile': 1,
		  'every': 1,
		  'filter': 1,
		  'find': 1,
		  'findFrom': 1,
		  'findIndex': 1,
		  'findIndexFrom': 1,
		  'findKey': 1,
		  'findLast': 1,
		  'findLastFrom': 1,
		  'findLastIndex': 1,
		  'findLastIndexFrom': 1,
		  'findLastKey': 1,
		  'flatMap': 1,
		  'flatMapDeep': 1,
		  'flatMapDepth': 1,
		  'forEach': 1,
		  'forEachRight': 1,
		  'forIn': 1,
		  'forInRight': 1,
		  'forOwn': 1,
		  'forOwnRight': 1,
		  'map': 1,
		  'mapKeys': 1,
		  'mapValues': 1,
		  'partition': 1,
		  'reduce': 2,
		  'reduceRight': 2,
		  'reject': 1,
		  'remove': 1,
		  'some': 1,
		  'takeRightWhile': 1,
		  'takeWhile': 1,
		  'times': 1,
		  'transform': 2
		};

		/** Used to map method names to iteratee rearg configs. */
		exports.iterateeRearg = {
		  'mapKeys': [1],
		  'reduceRight': [1, 0]
		};

		/** Used to map method names to rearg configs. */
		exports.methodRearg = {
		  'assignInAllWith': [1, 0],
		  'assignInWith': [1, 2, 0],
		  'assignAllWith': [1, 0],
		  'assignWith': [1, 2, 0],
		  'differenceBy': [1, 2, 0],
		  'differenceWith': [1, 2, 0],
		  'getOr': [2, 1, 0],
		  'intersectionBy': [1, 2, 0],
		  'intersectionWith': [1, 2, 0],
		  'isEqualWith': [1, 2, 0],
		  'isMatchWith': [2, 1, 0],
		  'mergeAllWith': [1, 0],
		  'mergeWith': [1, 2, 0],
		  'padChars': [2, 1, 0],
		  'padCharsEnd': [2, 1, 0],
		  'padCharsStart': [2, 1, 0],
		  'pullAllBy': [2, 1, 0],
		  'pullAllWith': [2, 1, 0],
		  'rangeStep': [1, 2, 0],
		  'rangeStepRight': [1, 2, 0],
		  'setWith': [3, 1, 2, 0],
		  'sortedIndexBy': [2, 1, 0],
		  'sortedLastIndexBy': [2, 1, 0],
		  'unionBy': [1, 2, 0],
		  'unionWith': [1, 2, 0],
		  'updateWith': [3, 1, 2, 0],
		  'xorBy': [1, 2, 0],
		  'xorWith': [1, 2, 0],
		  'zipWith': [1, 2, 0]
		};

		/** Used to map method names to spread configs. */
		exports.methodSpread = {
		  'assignAll': {
		    'start': 0
		  },
		  'assignAllWith': {
		    'start': 0
		  },
		  'assignInAll': {
		    'start': 0
		  },
		  'assignInAllWith': {
		    'start': 0
		  },
		  'defaultsAll': {
		    'start': 0
		  },
		  'defaultsDeepAll': {
		    'start': 0
		  },
		  'invokeArgs': {
		    'start': 2
		  },
		  'invokeArgsMap': {
		    'start': 2
		  },
		  'mergeAll': {
		    'start': 0
		  },
		  'mergeAllWith': {
		    'start': 0
		  },
		  'partial': {
		    'start': 1
		  },
		  'partialRight': {
		    'start': 1
		  },
		  'without': {
		    'start': 1
		  },
		  'zipAll': {
		    'start': 0
		  }
		};

		/** Used to identify methods which mutate arrays or objects. */
		exports.mutate = {
		  'array': {
		    'fill': true,
		    'pull': true,
		    'pullAll': true,
		    'pullAllBy': true,
		    'pullAllWith': true,
		    'pullAt': true,
		    'remove': true,
		    'reverse': true
		  },
		  'object': {
		    'assign': true,
		    'assignAll': true,
		    'assignAllWith': true,
		    'assignIn': true,
		    'assignInAll': true,
		    'assignInAllWith': true,
		    'assignInWith': true,
		    'assignWith': true,
		    'defaults': true,
		    'defaultsAll': true,
		    'defaultsDeep': true,
		    'defaultsDeepAll': true,
		    'merge': true,
		    'mergeAll': true,
		    'mergeAllWith': true,
		    'mergeWith': true
		  },
		  'set': {
		    'set': true,
		    'setWith': true,
		    'unset': true,
		    'update': true,
		    'updateWith': true
		  }
		};

		/** Used to map real names to their aliases. */
		exports.realToAlias = function () {
		  var hasOwnProperty = Object.prototype.hasOwnProperty,
		    object = exports.aliasToReal,
		    result = {};
		  for (var key in object) {
		    var value = object[key];
		    if (hasOwnProperty.call(result, value)) {
		      result[value].push(key);
		    } else {
		      result[value] = [key];
		    }
		  }
		  return result;
		}();

		/** Used to map method names to other names. */
		exports.remap = {
		  'assignAll': 'assign',
		  'assignAllWith': 'assignWith',
		  'assignInAll': 'assignIn',
		  'assignInAllWith': 'assignInWith',
		  'curryN': 'curry',
		  'curryRightN': 'curryRight',
		  'defaultsAll': 'defaults',
		  'defaultsDeepAll': 'defaultsDeep',
		  'findFrom': 'find',
		  'findIndexFrom': 'findIndex',
		  'findLastFrom': 'findLast',
		  'findLastIndexFrom': 'findLastIndex',
		  'getOr': 'get',
		  'includesFrom': 'includes',
		  'indexOfFrom': 'indexOf',
		  'invokeArgs': 'invoke',
		  'invokeArgsMap': 'invokeMap',
		  'lastIndexOfFrom': 'lastIndexOf',
		  'mergeAll': 'merge',
		  'mergeAllWith': 'mergeWith',
		  'padChars': 'pad',
		  'padCharsEnd': 'padEnd',
		  'padCharsStart': 'padStart',
		  'propertyOf': 'get',
		  'rangeStep': 'range',
		  'rangeStepRight': 'rangeRight',
		  'restFrom': 'rest',
		  'spreadFrom': 'spread',
		  'trimChars': 'trim',
		  'trimCharsEnd': 'trimEnd',
		  'trimCharsStart': 'trimStart',
		  'zipAll': 'zip'
		};

		/** Used to track methods that skip fixing their arity. */
		exports.skipFixed = {
		  'castArray': true,
		  'flow': true,
		  'flowRight': true,
		  'iteratee': true,
		  'mixin': true,
		  'rearg': true,
		  'runInContext': true
		};

		/** Used to track methods that skip rearranging arguments. */
		exports.skipRearg = {
		  'add': true,
		  'assign': true,
		  'assignIn': true,
		  'bind': true,
		  'bindKey': true,
		  'concat': true,
		  'difference': true,
		  'divide': true,
		  'eq': true,
		  'gt': true,
		  'gte': true,
		  'isEqual': true,
		  'lt': true,
		  'lte': true,
		  'matchesProperty': true,
		  'merge': true,
		  'multiply': true,
		  'overArgs': true,
		  'partial': true,
		  'partialRight': true,
		  'propertyOf': true,
		  'random': true,
		  'range': true,
		  'rangeRight': true,
		  'subtract': true,
		  'zip': true,
		  'zipObject': true,
		  'zipObjectDeep': true
		}; 
	} (_mapping));

	/**
	 * The default argument placeholder value for methods.
	 *
	 * @type {Object}
	 */

	var placeholder;
	var hasRequiredPlaceholder;

	function requirePlaceholder () {
		if (hasRequiredPlaceholder) return placeholder;
		hasRequiredPlaceholder = 1;
		placeholder = {};
		return placeholder;
	}

	var mapping = _mapping,
	  fallbackHolder = requirePlaceholder();

	/** Built-in value reference. */
	var push = Array.prototype.push;

	/**
	 * Creates a function, with an arity of `n`, that invokes `func` with the
	 * arguments it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} n The arity of the new function.
	 * @returns {Function} Returns the new function.
	 */
	function baseArity(func, n) {
	  return n == 2 ? function (a, b) {
	    return func.apply(undefined, arguments);
	  } : function (a) {
	    return func.apply(undefined, arguments);
	  };
	}

	/**
	 * Creates a function that invokes `func`, with up to `n` arguments, ignoring
	 * any additional arguments.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @param {number} n The arity cap.
	 * @returns {Function} Returns the new function.
	 */
	function baseAry(func, n) {
	  return n == 2 ? function (a, b) {
	    return func(a, b);
	  } : function (a) {
	    return func(a);
	  };
	}

	/**
	 * Creates a clone of `array`.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the cloned array.
	 */
	function cloneArray(array) {
	  var length = array ? array.length : 0,
	    result = Array(length);
	  while (length--) {
	    result[length] = array[length];
	  }
	  return result;
	}

	/**
	 * Creates a function that clones a given object using the assignment `func`.
	 *
	 * @private
	 * @param {Function} func The assignment function.
	 * @returns {Function} Returns the new cloner function.
	 */
	function createCloner(func) {
	  return function (object) {
	    return func({}, object);
	  };
	}

	/**
	 * A specialized version of `_.spread` which flattens the spread array into
	 * the arguments of the invoked `func`.
	 *
	 * @private
	 * @param {Function} func The function to spread arguments over.
	 * @param {number} start The start position of the spread.
	 * @returns {Function} Returns the new function.
	 */
	function flatSpread(func, start) {
	  return function () {
	    var length = arguments.length,
	      lastIndex = length - 1,
	      args = Array(length);
	    while (length--) {
	      args[length] = arguments[length];
	    }
	    var array = args[start],
	      otherArgs = args.slice(0, start);
	    if (array) {
	      push.apply(otherArgs, array);
	    }
	    if (start != lastIndex) {
	      push.apply(otherArgs, args.slice(start + 1));
	    }
	    return func.apply(this, otherArgs);
	  };
	}

	/**
	 * Creates a function that wraps `func` and uses `cloner` to clone the first
	 * argument it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} cloner The function to clone arguments.
	 * @returns {Function} Returns the new immutable function.
	 */
	function wrapImmutable(func, cloner) {
	  return function () {
	    var length = arguments.length;
	    if (!length) {
	      return;
	    }
	    var args = Array(length);
	    while (length--) {
	      args[length] = arguments[length];
	    }
	    var result = args[0] = cloner.apply(undefined, args);
	    func.apply(undefined, args);
	    return result;
	  };
	}

	/**
	 * The base implementation of `convert` which accepts a `util` object of methods
	 * required to perform conversions.
	 *
	 * @param {Object} util The util object.
	 * @param {string} name The name of the function to convert.
	 * @param {Function} func The function to convert.
	 * @param {Object} [options] The options object.
	 * @param {boolean} [options.cap=true] Specify capping iteratee arguments.
	 * @param {boolean} [options.curry=true] Specify currying.
	 * @param {boolean} [options.fixed=true] Specify fixed arity.
	 * @param {boolean} [options.immutable=true] Specify immutable operations.
	 * @param {boolean} [options.rearg=true] Specify rearranging arguments.
	 * @returns {Function|Object} Returns the converted function or object.
	 */
	function baseConvert$1(util, name, func, options) {
	  var isLib = typeof name == 'function',
	    isObj = name === Object(name);
	  if (isObj) {
	    options = func;
	    func = name;
	    name = undefined;
	  }
	  if (func == null) {
	    throw new TypeError();
	  }
	  options || (options = {});
	  var config = {
	    'cap': 'cap' in options ? options.cap : true,
	    'curry': 'curry' in options ? options.curry : true,
	    'fixed': 'fixed' in options ? options.fixed : true,
	    'immutable': 'immutable' in options ? options.immutable : true,
	    'rearg': 'rearg' in options ? options.rearg : true
	  };
	  var defaultHolder = isLib ? func : fallbackHolder,
	    forceCurry = 'curry' in options && options.curry,
	    forceFixed = 'fixed' in options && options.fixed,
	    forceRearg = 'rearg' in options && options.rearg,
	    pristine = isLib ? func.runInContext() : undefined;
	  var helpers = isLib ? func : {
	    'ary': util.ary,
	    'assign': util.assign,
	    'clone': util.clone,
	    'curry': util.curry,
	    'forEach': util.forEach,
	    'isArray': util.isArray,
	    'isError': util.isError,
	    'isFunction': util.isFunction,
	    'isWeakMap': util.isWeakMap,
	    'iteratee': util.iteratee,
	    'keys': util.keys,
	    'rearg': util.rearg,
	    'toInteger': util.toInteger,
	    'toPath': util.toPath
	  };
	  var ary = helpers.ary,
	    assign = helpers.assign,
	    clone = helpers.clone,
	    curry = helpers.curry,
	    each = helpers.forEach,
	    isArray = helpers.isArray,
	    isError = helpers.isError,
	    isFunction = helpers.isFunction,
	    isWeakMap = helpers.isWeakMap,
	    keys = helpers.keys,
	    rearg = helpers.rearg,
	    toInteger = helpers.toInteger,
	    toPath = helpers.toPath;
	  var aryMethodKeys = keys(mapping.aryMethod);
	  var wrappers = {
	    'castArray': function (castArray) {
	      return function () {
	        var value = arguments[0];
	        return isArray(value) ? castArray(cloneArray(value)) : castArray.apply(undefined, arguments);
	      };
	    },
	    'iteratee': function (iteratee) {
	      return function () {
	        var func = arguments[0],
	          arity = arguments[1],
	          result = iteratee(func, arity),
	          length = result.length;
	        if (config.cap && typeof arity == 'number') {
	          arity = arity > 2 ? arity - 2 : 1;
	          return length && length <= arity ? result : baseAry(result, arity);
	        }
	        return result;
	      };
	    },
	    'mixin': function (mixin) {
	      return function (source) {
	        var func = this;
	        if (!isFunction(func)) {
	          return mixin(func, Object(source));
	        }
	        var pairs = [];
	        each(keys(source), function (key) {
	          if (isFunction(source[key])) {
	            pairs.push([key, func.prototype[key]]);
	          }
	        });
	        mixin(func, Object(source));
	        each(pairs, function (pair) {
	          var value = pair[1];
	          if (isFunction(value)) {
	            func.prototype[pair[0]] = value;
	          } else {
	            delete func.prototype[pair[0]];
	          }
	        });
	        return func;
	      };
	    },
	    'nthArg': function (nthArg) {
	      return function (n) {
	        var arity = n < 0 ? 1 : toInteger(n) + 1;
	        return curry(nthArg(n), arity);
	      };
	    },
	    'rearg': function (rearg) {
	      return function (func, indexes) {
	        var arity = indexes ? indexes.length : 0;
	        return curry(rearg(func, indexes), arity);
	      };
	    },
	    'runInContext': function (runInContext) {
	      return function (context) {
	        return baseConvert$1(util, runInContext(context), options);
	      };
	    }
	  };

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Casts `func` to a function with an arity capped iteratee if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @returns {Function} Returns the cast function.
	   */
	  function castCap(name, func) {
	    if (config.cap) {
	      var indexes = mapping.iterateeRearg[name];
	      if (indexes) {
	        return iterateeRearg(func, indexes);
	      }
	      var n = !isLib && mapping.iterateeAry[name];
	      if (n) {
	        return iterateeAry(func, n);
	      }
	    }
	    return func;
	  }

	  /**
	   * Casts `func` to a curried function if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @param {number} n The arity of `func`.
	   * @returns {Function} Returns the cast function.
	   */
	  function castCurry(name, func, n) {
	    return forceCurry || config.curry && n > 1 ? curry(func, n) : func;
	  }

	  /**
	   * Casts `func` to a fixed arity function if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @param {number} n The arity cap.
	   * @returns {Function} Returns the cast function.
	   */
	  function castFixed(name, func, n) {
	    if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {
	      var data = mapping.methodSpread[name],
	        start = data && data.start;
	      return start === undefined ? ary(func, n) : flatSpread(func, start);
	    }
	    return func;
	  }

	  /**
	   * Casts `func` to an rearged function if needed.
	   *
	   * @private
	   * @param {string} name The name of the function to inspect.
	   * @param {Function} func The function to inspect.
	   * @param {number} n The arity of `func`.
	   * @returns {Function} Returns the cast function.
	   */
	  function castRearg(name, func, n) {
	    return config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]) ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n]) : func;
	  }

	  /**
	   * Creates a clone of `object` by `path`.
	   *
	   * @private
	   * @param {Object} object The object to clone.
	   * @param {Array|string} path The path to clone by.
	   * @returns {Object} Returns the cloned object.
	   */
	  function cloneByPath(object, path) {
	    path = toPath(path);
	    var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      result = clone(Object(object)),
	      nested = result;
	    while (nested != null && ++index < length) {
	      var key = path[index],
	        value = nested[key];
	      if (value != null && !(isFunction(value) || isError(value) || isWeakMap(value))) {
	        nested[key] = clone(index == lastIndex ? value : Object(value));
	      }
	      nested = nested[key];
	    }
	    return result;
	  }

	  /**
	   * Converts `lodash` to an immutable auto-curried iteratee-first data-last
	   * version with conversion `options` applied.
	   *
	   * @param {Object} [options] The options object. See `baseConvert` for more details.
	   * @returns {Function} Returns the converted `lodash`.
	   */
	  function convertLib(options) {
	    return _.runInContext.convert(options)(undefined);
	  }

	  /**
	   * Create a converter function for `func` of `name`.
	   *
	   * @param {string} name The name of the function to convert.
	   * @param {Function} func The function to convert.
	   * @returns {Function} Returns the new converter function.
	   */
	  function createConverter(name, func) {
	    var realName = mapping.aliasToReal[name] || name,
	      methodName = mapping.remap[realName] || realName,
	      oldOptions = options;
	    return function (options) {
	      var newUtil = isLib ? pristine : helpers,
	        newFunc = isLib ? pristine[methodName] : func,
	        newOptions = assign(assign({}, oldOptions), options);
	      return baseConvert$1(newUtil, realName, newFunc, newOptions);
	    };
	  }

	  /**
	   * Creates a function that wraps `func` to invoke its iteratee, with up to `n`
	   * arguments, ignoring any additional arguments.
	   *
	   * @private
	   * @param {Function} func The function to cap iteratee arguments for.
	   * @param {number} n The arity cap.
	   * @returns {Function} Returns the new function.
	   */
	  function iterateeAry(func, n) {
	    return overArg(func, function (func) {
	      return typeof func == 'function' ? baseAry(func, n) : func;
	    });
	  }

	  /**
	   * Creates a function that wraps `func` to invoke its iteratee with arguments
	   * arranged according to the specified `indexes` where the argument value at
	   * the first index is provided as the first argument, the argument value at
	   * the second index is provided as the second argument, and so on.
	   *
	   * @private
	   * @param {Function} func The function to rearrange iteratee arguments for.
	   * @param {number[]} indexes The arranged argument indexes.
	   * @returns {Function} Returns the new function.
	   */
	  function iterateeRearg(func, indexes) {
	    return overArg(func, function (func) {
	      var n = indexes.length;
	      return baseArity(rearg(baseAry(func, n), indexes), n);
	    });
	  }

	  /**
	   * Creates a function that invokes `func` with its first argument transformed.
	   *
	   * @private
	   * @param {Function} func The function to wrap.
	   * @param {Function} transform The argument transform.
	   * @returns {Function} Returns the new function.
	   */
	  function overArg(func, transform) {
	    return function () {
	      var length = arguments.length;
	      if (!length) {
	        return func();
	      }
	      var args = Array(length);
	      while (length--) {
	        args[length] = arguments[length];
	      }
	      var index = config.rearg ? 0 : length - 1;
	      args[index] = transform(args[index]);
	      return func.apply(undefined, args);
	    };
	  }

	  /**
	   * Creates a function that wraps `func` and applys the conversions
	   * rules by `name`.
	   *
	   * @private
	   * @param {string} name The name of the function to wrap.
	   * @param {Function} func The function to wrap.
	   * @returns {Function} Returns the converted function.
	   */
	  function wrap(name, func, placeholder) {
	    var result,
	      realName = mapping.aliasToReal[name] || name,
	      wrapped = func,
	      wrapper = wrappers[realName];
	    if (wrapper) {
	      wrapped = wrapper(func);
	    } else if (config.immutable) {
	      if (mapping.mutate.array[realName]) {
	        wrapped = wrapImmutable(func, cloneArray);
	      } else if (mapping.mutate.object[realName]) {
	        wrapped = wrapImmutable(func, createCloner(func));
	      } else if (mapping.mutate.set[realName]) {
	        wrapped = wrapImmutable(func, cloneByPath);
	      }
	    }
	    each(aryMethodKeys, function (aryKey) {
	      each(mapping.aryMethod[aryKey], function (otherName) {
	        if (realName == otherName) {
	          var data = mapping.methodSpread[realName],
	            afterRearg = data && data.afterRearg;
	          result = afterRearg ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey) : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);
	          result = castCap(realName, result);
	          result = castCurry(realName, result, aryKey);
	          return false;
	        }
	      });
	      return !result;
	    });
	    result || (result = wrapped);
	    if (result == func) {
	      result = forceCurry ? curry(result, 1) : function () {
	        return func.apply(this, arguments);
	      };
	    }
	    result.convert = createConverter(realName, func);
	    result.placeholder = func.placeholder = placeholder;
	    return result;
	  }

	  /*--------------------------------------------------------------------------*/

	  if (!isObj) {
	    return wrap(name, func, defaultHolder);
	  }
	  var _ = func;

	  // Convert methods by ary cap.
	  var pairs = [];
	  each(aryMethodKeys, function (aryKey) {
	    each(mapping.aryMethod[aryKey], function (key) {
	      var func = _[mapping.remap[key] || key];
	      if (func) {
	        pairs.push([key, wrap(key, func, _)]);
	      }
	    });
	  });

	  // Convert remaining methods.
	  each(keys(_), function (key) {
	    var func = _[key];
	    if (typeof func == 'function') {
	      var length = pairs.length;
	      while (length--) {
	        if (pairs[length][0] == key) {
	          return;
	        }
	      }
	      func.convert = createConverter(key, func);
	      pairs.push([key, func]);
	    }
	  });

	  // Assign to `_` leaving `_.prototype` unchanged to allow chaining.
	  each(pairs, function (pair) {
	    _[pair[0]] = pair[1];
	  });
	  _.convert = convertLib;
	  _.placeholder = _;

	  // Assign aliases.
	  each(keys(_), function (key) {
	    each(mapping.realToAlias[key] || [], function (alias) {
	      _[alias] = _[key];
	    });
	  });
	  return _;
	}
	var _baseConvert = baseConvert$1;

	var WeakMap$1 = _WeakMap;

	/** Used to store function metadata. */
	var metaMap$2 = WeakMap$1 && new WeakMap$1();
	var _metaMap = metaMap$2;

	var identity = identity_1,
	  metaMap$1 = _metaMap;

	/**
	 * The base implementation of `setData` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to associate metadata with.
	 * @param {*} data The metadata.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetData$2 = !metaMap$1 ? identity : function (func, data) {
	  metaMap$1.set(func, data);
	  return func;
	};
	var _baseSetData = baseSetData$2;

	var baseCreate$2 = _baseCreate,
	  isObject$2 = isObject_1;

	/**
	 * Creates a function that produces an instance of `Ctor` regardless of
	 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	 *
	 * @private
	 * @param {Function} Ctor The constructor to wrap.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createCtor$4(Ctor) {
	  return function () {
	    // Use a `switch` statement to work with class constructors. See
	    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	    // for more details.
	    var args = arguments;
	    switch (args.length) {
	      case 0:
	        return new Ctor();
	      case 1:
	        return new Ctor(args[0]);
	      case 2:
	        return new Ctor(args[0], args[1]);
	      case 3:
	        return new Ctor(args[0], args[1], args[2]);
	      case 4:
	        return new Ctor(args[0], args[1], args[2], args[3]);
	      case 5:
	        return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	      case 6:
	        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	      case 7:
	        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	    }
	    var thisBinding = baseCreate$2(Ctor.prototype),
	      result = Ctor.apply(thisBinding, args);

	    // Mimic the constructor's `return` behavior.
	    // See https://es5.github.io/#x13.2.2 for more details.
	    return isObject$2(result) ? result : thisBinding;
	  };
	}
	var _createCtor = createCtor$4;

	var createCtor$3 = _createCtor,
	  root$4 = _root;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG$6 = 1;

	/**
	 * Creates a function that wraps `func` to invoke it with the optional `this`
	 * binding of `thisArg`.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createBind$1(func, bitmask, thisArg) {
	  var isBind = bitmask & WRAP_BIND_FLAG$6,
	    Ctor = createCtor$3(func);
	  function wrapper() {
	    var fn = this && this !== root$4 && this instanceof wrapper ? Ctor : func;
	    return fn.apply(isBind ? thisArg : this, arguments);
	  }
	  return wrapper;
	}
	var _createBind = createBind$1;

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMax$6 = Math.max;

	/**
	 * Creates an array that is the composition of partially applied arguments,
	 * placeholders, and provided arguments into a single array of arguments.
	 *
	 * @private
	 * @param {Array} args The provided arguments.
	 * @param {Array} partials The arguments to prepend to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @params {boolean} [isCurried] Specify composing for a curried function.
	 * @returns {Array} Returns the new array of composed arguments.
	 */
	function composeArgs$2(args, partials, holders, isCurried) {
	  var argsIndex = -1,
	    argsLength = args.length,
	    holdersLength = holders.length,
	    leftIndex = -1,
	    leftLength = partials.length,
	    rangeLength = nativeMax$6(argsLength - holdersLength, 0),
	    result = Array(leftLength + rangeLength),
	    isUncurried = !isCurried;
	  while (++leftIndex < leftLength) {
	    result[leftIndex] = partials[leftIndex];
	  }
	  while (++argsIndex < holdersLength) {
	    if (isUncurried || argsIndex < argsLength) {
	      result[holders[argsIndex]] = args[argsIndex];
	    }
	  }
	  while (rangeLength--) {
	    result[leftIndex++] = args[argsIndex++];
	  }
	  return result;
	}
	var _composeArgs = composeArgs$2;

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeMax$5 = Math.max;

	/**
	 * This function is like `composeArgs` except that the arguments composition
	 * is tailored for `_.partialRight`.
	 *
	 * @private
	 * @param {Array} args The provided arguments.
	 * @param {Array} partials The arguments to append to those provided.
	 * @param {Array} holders The `partials` placeholder indexes.
	 * @params {boolean} [isCurried] Specify composing for a curried function.
	 * @returns {Array} Returns the new array of composed arguments.
	 */
	function composeArgsRight$2(args, partials, holders, isCurried) {
	  var argsIndex = -1,
	    argsLength = args.length,
	    holdersIndex = -1,
	    holdersLength = holders.length,
	    rightIndex = -1,
	    rightLength = partials.length,
	    rangeLength = nativeMax$5(argsLength - holdersLength, 0),
	    result = Array(rangeLength + rightLength),
	    isUncurried = !isCurried;
	  while (++argsIndex < rangeLength) {
	    result[argsIndex] = args[argsIndex];
	  }
	  var offset = argsIndex;
	  while (++rightIndex < rightLength) {
	    result[offset + rightIndex] = partials[rightIndex];
	  }
	  while (++holdersIndex < holdersLength) {
	    if (isUncurried || argsIndex < argsLength) {
	      result[offset + holders[holdersIndex]] = args[argsIndex++];
	    }
	  }
	  return result;
	}
	var _composeArgsRight = composeArgsRight$2;

	/**
	 * Gets the number of `placeholder` occurrences in `array`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} placeholder The placeholder to search for.
	 * @returns {number} Returns the placeholder count.
	 */

	function countHolders$1(array, placeholder) {
	  var length = array.length,
	    result = 0;
	  while (length--) {
	    if (array[length] === placeholder) {
	      ++result;
	    }
	  }
	  return result;
	}
	var _countHolders = countHolders$1;

	/**
	 * The function whose prototype chain sequence wrappers inherit from.
	 *
	 * @private
	 */

	function baseLodash$3() {
	  // No operation performed.
	}
	var _baseLodash = baseLodash$3;

	var baseCreate$1 = _baseCreate,
	  baseLodash$2 = _baseLodash;

	/** Used as references for the maximum length and index of an array. */
	var MAX_ARRAY_LENGTH = 4294967295;

	/**
	 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	 *
	 * @private
	 * @constructor
	 * @param {*} value The value to wrap.
	 */
	function LazyWrapper$3(value) {
	  this.__wrapped__ = value;
	  this.__actions__ = [];
	  this.__dir__ = 1;
	  this.__filtered__ = false;
	  this.__iteratees__ = [];
	  this.__takeCount__ = MAX_ARRAY_LENGTH;
	  this.__views__ = [];
	}

	// Ensure `LazyWrapper` is an instance of `baseLodash`.
	LazyWrapper$3.prototype = baseCreate$1(baseLodash$2.prototype);
	LazyWrapper$3.prototype.constructor = LazyWrapper$3;
	var _LazyWrapper = LazyWrapper$3;

	/**
	 * This method returns `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * _.times(2, _.noop);
	 * // => [undefined, undefined]
	 */

	function noop$4() {
	  // No operation performed.
	}
	var noop_1 = noop$4;

	var metaMap = _metaMap,
	  noop$3 = noop_1;

	/**
	 * Gets metadata for `func`.
	 *
	 * @private
	 * @param {Function} func The function to query.
	 * @returns {*} Returns the metadata for `func`.
	 */
	var getData$4 = !metaMap ? noop$3 : function (func) {
	  return metaMap.get(func);
	};
	var _getData = getData$4;

	/** Used to lookup unminified function names. */

	var realNames$1 = {};
	var _realNames = realNames$1;

	var realNames = _realNames;

	/** Used for built-in method references. */
	var objectProto$2 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

	/**
	 * Gets the name of `func`.
	 *
	 * @private
	 * @param {Function} func The function to query.
	 * @returns {string} Returns the function name.
	 */
	function getFuncName$1(func) {
	  var result = func.name + '',
	    array = realNames[result],
	    length = hasOwnProperty$2.call(realNames, result) ? array.length : 0;
	  while (length--) {
	    var data = array[length],
	      otherFunc = data.func;
	    if (otherFunc == null || otherFunc == func) {
	      return data.name;
	    }
	  }
	  return result;
	}
	var _getFuncName = getFuncName$1;

	var baseCreate = _baseCreate,
	  baseLodash$1 = _baseLodash;

	/**
	 * The base constructor for creating `lodash` wrapper objects.
	 *
	 * @private
	 * @param {*} value The value to wrap.
	 * @param {boolean} [chainAll] Enable explicit method chain sequences.
	 */
	function LodashWrapper$2(value, chainAll) {
	  this.__wrapped__ = value;
	  this.__actions__ = [];
	  this.__chain__ = !!chainAll;
	  this.__index__ = 0;
	  this.__values__ = undefined;
	}
	LodashWrapper$2.prototype = baseCreate(baseLodash$1.prototype);
	LodashWrapper$2.prototype.constructor = LodashWrapper$2;
	var _LodashWrapper = LodashWrapper$2;

	var LazyWrapper$2 = _LazyWrapper,
	  LodashWrapper$1 = _LodashWrapper,
	  copyArray$2 = _copyArray;

	/**
	 * Creates a clone of `wrapper`.
	 *
	 * @private
	 * @param {Object} wrapper The wrapper to clone.
	 * @returns {Object} Returns the cloned wrapper.
	 */
	function wrapperClone$1(wrapper) {
	  if (wrapper instanceof LazyWrapper$2) {
	    return wrapper.clone();
	  }
	  var result = new LodashWrapper$1(wrapper.__wrapped__, wrapper.__chain__);
	  result.__actions__ = copyArray$2(wrapper.__actions__);
	  result.__index__ = wrapper.__index__;
	  result.__values__ = wrapper.__values__;
	  return result;
	}
	var _wrapperClone = wrapperClone$1;

	var LazyWrapper$1 = _LazyWrapper,
	  LodashWrapper = _LodashWrapper,
	  baseLodash = _baseLodash,
	  isArray$6 = isArray_1,
	  isObjectLike$3 = isObjectLike_1,
	  wrapperClone = _wrapperClone;

	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

	/**
	 * Creates a `lodash` object which wraps `value` to enable implicit method
	 * chain sequences. Methods that operate on and return arrays, collections,
	 * and functions can be chained together. Methods that retrieve a single value
	 * or may return a primitive value will automatically end the chain sequence
	 * and return the unwrapped value. Otherwise, the value must be unwrapped
	 * with `_#value`.
	 *
	 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
	 * enabled using `_.chain`.
	 *
	 * The execution of chained methods is lazy, that is, it's deferred until
	 * `_#value` is implicitly or explicitly called.
	 *
	 * Lazy evaluation allows several methods to support shortcut fusion.
	 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
	 * the creation of intermediate arrays and can greatly reduce the number of
	 * iteratee executions. Sections of a chain sequence qualify for shortcut
	 * fusion if the section is applied to an array and iteratees accept only
	 * one argument. The heuristic for whether a section qualifies for shortcut
	 * fusion is subject to change.
	 *
	 * Chaining is supported in custom builds as long as the `_#value` method is
	 * directly or indirectly included in the build.
	 *
	 * In addition to lodash methods, wrappers have `Array` and `String` methods.
	 *
	 * The wrapper `Array` methods are:
	 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
	 *
	 * The wrapper `String` methods are:
	 * `replace` and `split`
	 *
	 * The wrapper methods that support shortcut fusion are:
	 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
	 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
	 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
	 *
	 * The chainable wrapper methods are:
	 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
	 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
	 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
	 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
	 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
	 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
	 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
	 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
	 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
	 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
	 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
	 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
	 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
	 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
	 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
	 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
	 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
	 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
	 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
	 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
	 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
	 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
	 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
	 * `zipObject`, `zipObjectDeep`, and `zipWith`
	 *
	 * The wrapper methods that are **not** chainable by default are:
	 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
	 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
	 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
	 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
	 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
	 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
	 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
	 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
	 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
	 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
	 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
	 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
	 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
	 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
	 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
	 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
	 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
	 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
	 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
	 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
	 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
	 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
	 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
	 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
	 * `upperFirst`, `value`, and `words`
	 *
	 * @name _
	 * @constructor
	 * @category Seq
	 * @param {*} value The value to wrap in a `lodash` instance.
	 * @returns {Object} Returns the new `lodash` wrapper instance.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * var wrapped = _([1, 2, 3]);
	 *
	 * // Returns an unwrapped value.
	 * wrapped.reduce(_.add);
	 * // => 6
	 *
	 * // Returns a wrapped value.
	 * var squares = wrapped.map(square);
	 *
	 * _.isArray(squares);
	 * // => false
	 *
	 * _.isArray(squares.value());
	 * // => true
	 */
	function lodash$1(value) {
	  if (isObjectLike$3(value) && !isArray$6(value) && !(value instanceof LazyWrapper$1)) {
	    if (value instanceof LodashWrapper) {
	      return value;
	    }
	    if (hasOwnProperty$1.call(value, '__wrapped__')) {
	      return wrapperClone(value);
	    }
	  }
	  return new LodashWrapper(value);
	}

	// Ensure wrappers are instances of `baseLodash`.
	lodash$1.prototype = baseLodash.prototype;
	lodash$1.prototype.constructor = lodash$1;
	var wrapperLodash = lodash$1;

	var LazyWrapper = _LazyWrapper,
	  getData$3 = _getData,
	  getFuncName = _getFuncName,
	  lodash = wrapperLodash;

	/**
	 * Checks if `func` has a lazy counterpart.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
	 *  else `false`.
	 */
	function isLaziable$1(func) {
	  var funcName = getFuncName(func),
	    other = lodash[funcName];
	  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
	    return false;
	  }
	  if (func === other) {
	    return true;
	  }
	  var data = getData$3(other);
	  return !!data && func === data[0];
	}
	var _isLaziable = isLaziable$1;

	var baseSetData$1 = _baseSetData,
	  shortOut = _shortOut;

	/**
	 * Sets metadata for `func`.
	 *
	 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	 * period of time, it will trip its breaker and transition to an identity
	 * function to avoid garbage collection pauses in V8. See
	 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
	 * for more details.
	 *
	 * @private
	 * @param {Function} func The function to associate metadata with.
	 * @param {*} data The metadata.
	 * @returns {Function} Returns `func`.
	 */
	var setData$2 = shortOut(baseSetData$1);
	var _setData = setData$2;

	/** Used to match wrap detail comments. */

	var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
	  reSplitDetails = /,? & /;

	/**
	 * Extracts wrapper details from the `source` body comment.
	 *
	 * @private
	 * @param {string} source The source to inspect.
	 * @returns {Array} Returns the wrapper details.
	 */
	function getWrapDetails$1(source) {
	  var match = source.match(reWrapDetails);
	  return match ? match[1].split(reSplitDetails) : [];
	}
	var _getWrapDetails = getWrapDetails$1;

	/** Used to match wrap detail comments. */

	var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;

	/**
	 * Inserts wrapper `details` in a comment at the top of the `source` body.
	 *
	 * @private
	 * @param {string} source The source to modify.
	 * @returns {Array} details The details to insert.
	 * @returns {string} Returns the modified source.
	 */
	function insertWrapDetails$1(source, details) {
	  var length = details.length;
	  if (!length) {
	    return source;
	  }
	  var lastIndex = length - 1;
	  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
	  details = details.join(length > 2 ? ', ' : ' ');
	  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
	}
	var _insertWrapDetails = insertWrapDetails$1;

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */

	function baseFindIndex$2(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	    index = fromIndex + (fromRight ? 1 : -1);
	  while (fromRight ? index-- : ++index < length) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}
	var _baseFindIndex = baseFindIndex$2;

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */

	function baseIsNaN$1(value) {
	  return value !== value;
	}
	var _baseIsNaN = baseIsNaN$1;

	/**
	 * A specialized version of `_.indexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */

	function strictIndexOf$1(array, value, fromIndex) {
	  var index = fromIndex - 1,
	    length = array.length;
	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}
	var _strictIndexOf = strictIndexOf$1;

	var baseFindIndex$1 = _baseFindIndex,
	  baseIsNaN = _baseIsNaN,
	  strictIndexOf = _strictIndexOf;

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf$2(array, value, fromIndex) {
	  return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex$1(array, baseIsNaN, fromIndex);
	}
	var _baseIndexOf = baseIndexOf$2;

	var baseIndexOf$1 = _baseIndexOf;

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes$3(array, value) {
	  var length = array == null ? 0 : array.length;
	  return !!length && baseIndexOf$1(array, value, 0) > -1;
	}
	var _arrayIncludes = arrayIncludes$3;

	var arrayEach = _arrayEach,
	  arrayIncludes$2 = _arrayIncludes;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG$5 = 1,
	  WRAP_BIND_KEY_FLAG$4 = 2,
	  WRAP_CURRY_FLAG$5 = 8,
	  WRAP_CURRY_RIGHT_FLAG$2 = 16,
	  WRAP_PARTIAL_FLAG$2 = 32,
	  WRAP_PARTIAL_RIGHT_FLAG$2 = 64,
	  WRAP_ARY_FLAG$3 = 128,
	  WRAP_REARG_FLAG$2 = 256,
	  WRAP_FLIP_FLAG$1 = 512;

	/** Used to associate wrap methods with their bit flags. */
	var wrapFlags = [['ary', WRAP_ARY_FLAG$3], ['bind', WRAP_BIND_FLAG$5], ['bindKey', WRAP_BIND_KEY_FLAG$4], ['curry', WRAP_CURRY_FLAG$5], ['curryRight', WRAP_CURRY_RIGHT_FLAG$2], ['flip', WRAP_FLIP_FLAG$1], ['partial', WRAP_PARTIAL_FLAG$2], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG$2], ['rearg', WRAP_REARG_FLAG$2]];

	/**
	 * Updates wrapper `details` based on `bitmask` flags.
	 *
	 * @private
	 * @returns {Array} details The details to modify.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @returns {Array} Returns `details`.
	 */
	function updateWrapDetails$1(details, bitmask) {
	  arrayEach(wrapFlags, function (pair) {
	    var value = '_.' + pair[0];
	    if (bitmask & pair[1] && !arrayIncludes$2(details, value)) {
	      details.push(value);
	    }
	  });
	  return details.sort();
	}
	var _updateWrapDetails = updateWrapDetails$1;

	var getWrapDetails = _getWrapDetails,
	  insertWrapDetails = _insertWrapDetails,
	  setToString$1 = _setToString,
	  updateWrapDetails = _updateWrapDetails;

	/**
	 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
	 * with wrapper details in a comment at the top of the source body.
	 *
	 * @private
	 * @param {Function} wrapper The function to modify.
	 * @param {Function} reference The reference function.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @returns {Function} Returns `wrapper`.
	 */
	function setWrapToString$2(wrapper, reference, bitmask) {
	  var source = reference + '';
	  return setToString$1(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
	}
	var _setWrapToString = setWrapToString$2;

	var isLaziable = _isLaziable,
	  setData$1 = _setData,
	  setWrapToString$1 = _setWrapToString;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG$4 = 1,
	  WRAP_BIND_KEY_FLAG$3 = 2,
	  WRAP_CURRY_BOUND_FLAG$1 = 4,
	  WRAP_CURRY_FLAG$4 = 8,
	  WRAP_PARTIAL_FLAG$1 = 32,
	  WRAP_PARTIAL_RIGHT_FLAG$1 = 64;

	/**
	 * Creates a function that wraps `func` to continue currying.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {Function} wrapFunc The function to create the `func` wrapper.
	 * @param {*} placeholder The placeholder value.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to prepend to those provided to
	 *  the new function.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createRecurry$2(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
	  var isCurry = bitmask & WRAP_CURRY_FLAG$4,
	    newHolders = isCurry ? holders : undefined,
	    newHoldersRight = isCurry ? undefined : holders,
	    newPartials = isCurry ? partials : undefined,
	    newPartialsRight = isCurry ? undefined : partials;
	  bitmask |= isCurry ? WRAP_PARTIAL_FLAG$1 : WRAP_PARTIAL_RIGHT_FLAG$1;
	  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG$1 : WRAP_PARTIAL_FLAG$1);
	  if (!(bitmask & WRAP_CURRY_BOUND_FLAG$1)) {
	    bitmask &= ~(WRAP_BIND_FLAG$4 | WRAP_BIND_KEY_FLAG$3);
	  }
	  var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
	  var result = wrapFunc.apply(undefined, newData);
	  if (isLaziable(func)) {
	    setData$1(result, newData);
	  }
	  result.placeholder = placeholder;
	  return setWrapToString$1(result, func, bitmask);
	}
	var _createRecurry = createRecurry$2;

	/**
	 * Gets the argument placeholder value for `func`.
	 *
	 * @private
	 * @param {Function} func The function to inspect.
	 * @returns {*} Returns the placeholder value.
	 */

	function getHolder$2(func) {
	  var object = func;
	  return object.placeholder;
	}
	var _getHolder = getHolder$2;

	var copyArray$1 = _copyArray,
	  isIndex = _isIndex;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMin$2 = Math.min;

	/**
	 * Reorder `array` according to the specified indexes where the element at
	 * the first index is assigned as the first element, the element at
	 * the second index is assigned as the second element, and so on.
	 *
	 * @private
	 * @param {Array} array The array to reorder.
	 * @param {Array} indexes The arranged array indexes.
	 * @returns {Array} Returns `array`.
	 */
	function reorder$1(array, indexes) {
	  var arrLength = array.length,
	    length = nativeMin$2(indexes.length, arrLength),
	    oldArray = copyArray$1(array);
	  while (length--) {
	    var index = indexes[length];
	    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	  }
	  return array;
	}
	var _reorder = reorder$1;

	/** Used as the internal argument placeholder. */

	var PLACEHOLDER$1 = '__lodash_placeholder__';

	/**
	 * Replaces all `placeholder` elements in `array` with an internal placeholder
	 * and returns an array of their indexes.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {*} placeholder The placeholder to replace.
	 * @returns {Array} Returns the new array of placeholder indexes.
	 */
	function replaceHolders$3(array, placeholder) {
	  var index = -1,
	    length = array.length,
	    resIndex = 0,
	    result = [];
	  while (++index < length) {
	    var value = array[index];
	    if (value === placeholder || value === PLACEHOLDER$1) {
	      array[index] = PLACEHOLDER$1;
	      result[resIndex++] = index;
	    }
	  }
	  return result;
	}
	var _replaceHolders = replaceHolders$3;

	var composeArgs$1 = _composeArgs,
	  composeArgsRight$1 = _composeArgsRight,
	  countHolders = _countHolders,
	  createCtor$2 = _createCtor,
	  createRecurry$1 = _createRecurry,
	  getHolder$1 = _getHolder,
	  reorder = _reorder,
	  replaceHolders$2 = _replaceHolders,
	  root$3 = _root;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG$3 = 1,
	  WRAP_BIND_KEY_FLAG$2 = 2,
	  WRAP_CURRY_FLAG$3 = 8,
	  WRAP_CURRY_RIGHT_FLAG$1 = 16,
	  WRAP_ARY_FLAG$2 = 128,
	  WRAP_FLIP_FLAG = 512;

	/**
	 * Creates a function that wraps `func` to invoke it with optional `this`
	 * binding of `thisArg`, partial application, and currying.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to prepend to those provided to
	 *  the new function.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [partialsRight] The arguments to append to those provided
	 *  to the new function.
	 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createHybrid$2(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	  var isAry = bitmask & WRAP_ARY_FLAG$2,
	    isBind = bitmask & WRAP_BIND_FLAG$3,
	    isBindKey = bitmask & WRAP_BIND_KEY_FLAG$2,
	    isCurried = bitmask & (WRAP_CURRY_FLAG$3 | WRAP_CURRY_RIGHT_FLAG$1),
	    isFlip = bitmask & WRAP_FLIP_FLAG,
	    Ctor = isBindKey ? undefined : createCtor$2(func);
	  function wrapper() {
	    var length = arguments.length,
	      args = Array(length),
	      index = length;
	    while (index--) {
	      args[index] = arguments[index];
	    }
	    if (isCurried) {
	      var placeholder = getHolder$1(wrapper),
	        holdersCount = countHolders(args, placeholder);
	    }
	    if (partials) {
	      args = composeArgs$1(args, partials, holders, isCurried);
	    }
	    if (partialsRight) {
	      args = composeArgsRight$1(args, partialsRight, holdersRight, isCurried);
	    }
	    length -= holdersCount;
	    if (isCurried && length < arity) {
	      var newHolders = replaceHolders$2(args, placeholder);
	      return createRecurry$1(func, bitmask, createHybrid$2, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
	    }
	    var thisBinding = isBind ? thisArg : this,
	      fn = isBindKey ? thisBinding[func] : func;
	    length = args.length;
	    if (argPos) {
	      args = reorder(args, argPos);
	    } else if (isFlip && length > 1) {
	      args.reverse();
	    }
	    if (isAry && ary < length) {
	      args.length = ary;
	    }
	    if (this && this !== root$3 && this instanceof wrapper) {
	      fn = Ctor || createCtor$2(fn);
	    }
	    return fn.apply(thisBinding, args);
	  }
	  return wrapper;
	}
	var _createHybrid = createHybrid$2;

	var apply$1 = _apply,
	  createCtor$1 = _createCtor,
	  createHybrid$1 = _createHybrid,
	  createRecurry = _createRecurry,
	  getHolder = _getHolder,
	  replaceHolders$1 = _replaceHolders,
	  root$2 = _root;

	/**
	 * Creates a function that wraps `func` to enable currying.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {number} arity The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createCurry$1(func, bitmask, arity) {
	  var Ctor = createCtor$1(func);
	  function wrapper() {
	    var length = arguments.length,
	      args = Array(length),
	      index = length,
	      placeholder = getHolder(wrapper);
	    while (index--) {
	      args[index] = arguments[index];
	    }
	    var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders$1(args, placeholder);
	    length -= holders.length;
	    if (length < arity) {
	      return createRecurry(func, bitmask, createHybrid$1, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
	    }
	    var fn = this && this !== root$2 && this instanceof wrapper ? Ctor : func;
	    return apply$1(fn, this, args);
	  }
	  return wrapper;
	}
	var _createCurry = createCurry$1;

	var apply = _apply,
	  createCtor = _createCtor,
	  root$1 = _root;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG$2 = 1;

	/**
	 * Creates a function that wraps `func` to invoke it with the `this` binding
	 * of `thisArg` and `partials` prepended to the arguments it receives.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} partials The arguments to prepend to those provided to
	 *  the new function.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createPartial$1(func, bitmask, thisArg, partials) {
	  var isBind = bitmask & WRAP_BIND_FLAG$2,
	    Ctor = createCtor(func);
	  function wrapper() {
	    var argsIndex = -1,
	      argsLength = arguments.length,
	      leftIndex = -1,
	      leftLength = partials.length,
	      args = Array(leftLength + argsLength),
	      fn = this && this !== root$1 && this instanceof wrapper ? Ctor : func;
	    while (++leftIndex < leftLength) {
	      args[leftIndex] = partials[leftIndex];
	    }
	    while (argsLength--) {
	      args[leftIndex++] = arguments[++argsIndex];
	    }
	    return apply(fn, isBind ? thisArg : this, args);
	  }
	  return wrapper;
	}
	var _createPartial = createPartial$1;

	var composeArgs = _composeArgs,
	  composeArgsRight = _composeArgsRight,
	  replaceHolders = _replaceHolders;

	/** Used as the internal argument placeholder. */
	var PLACEHOLDER = '__lodash_placeholder__';

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG$1 = 1,
	  WRAP_BIND_KEY_FLAG$1 = 2,
	  WRAP_CURRY_BOUND_FLAG = 4,
	  WRAP_CURRY_FLAG$2 = 8,
	  WRAP_ARY_FLAG$1 = 128,
	  WRAP_REARG_FLAG$1 = 256;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMin$1 = Math.min;

	/**
	 * Merges the function metadata of `source` into `data`.
	 *
	 * Merging metadata reduces the number of wrappers used to invoke a function.
	 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	 * may be applied regardless of execution order. Methods like `_.ary` and
	 * `_.rearg` modify function arguments, making the order in which they are
	 * executed important, preventing the merging of metadata. However, we make
	 * an exception for a safe combined case where curried functions have `_.ary`
	 * and or `_.rearg` applied.
	 *
	 * @private
	 * @param {Array} data The destination metadata.
	 * @param {Array} source The source metadata.
	 * @returns {Array} Returns `data`.
	 */
	function mergeData$1(data, source) {
	  var bitmask = data[1],
	    srcBitmask = source[1],
	    newBitmask = bitmask | srcBitmask,
	    isCommon = newBitmask < (WRAP_BIND_FLAG$1 | WRAP_BIND_KEY_FLAG$1 | WRAP_ARY_FLAG$1);
	  var isCombo = srcBitmask == WRAP_ARY_FLAG$1 && bitmask == WRAP_CURRY_FLAG$2 || srcBitmask == WRAP_ARY_FLAG$1 && bitmask == WRAP_REARG_FLAG$1 && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG$1 | WRAP_REARG_FLAG$1) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG$2;

	  // Exit early if metadata can't be merged.
	  if (!(isCommon || isCombo)) {
	    return data;
	  }
	  // Use source `thisArg` if available.
	  if (srcBitmask & WRAP_BIND_FLAG$1) {
	    data[2] = source[2];
	    // Set when currying a bound function.
	    newBitmask |= bitmask & WRAP_BIND_FLAG$1 ? 0 : WRAP_CURRY_BOUND_FLAG;
	  }
	  // Compose partial arguments.
	  var value = source[3];
	  if (value) {
	    var partials = data[3];
	    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
	    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
	  }
	  // Compose partial right arguments.
	  value = source[5];
	  if (value) {
	    partials = data[5];
	    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
	    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
	  }
	  // Use source `argPos` if available.
	  value = source[7];
	  if (value) {
	    data[7] = value;
	  }
	  // Use source `ary` if it's smaller.
	  if (srcBitmask & WRAP_ARY_FLAG$1) {
	    data[8] = data[8] == null ? source[8] : nativeMin$1(data[8], source[8]);
	  }
	  // Use source `arity` if one is not provided.
	  if (data[9] == null) {
	    data[9] = source[9];
	  }
	  // Use source `func` and merge bitmasks.
	  data[0] = source[0];
	  data[1] = newBitmask;
	  return data;
	}
	var _mergeData = mergeData$1;

	/** Used to match a single whitespace character. */

	var reWhitespace = /\s/;

	/**
	 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
	 * character of `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the index of the last non-whitespace character.
	 */
	function trimmedEndIndex$1(string) {
	  var index = string.length;
	  while (index-- && reWhitespace.test(string.charAt(index))) {}
	  return index;
	}
	var _trimmedEndIndex = trimmedEndIndex$1;

	var trimmedEndIndex = _trimmedEndIndex;

	/** Used to match leading whitespace. */
	var reTrimStart = /^\s+/;

	/**
	 * The base implementation of `_.trim`.
	 *
	 * @private
	 * @param {string} string The string to trim.
	 * @returns {string} Returns the trimmed string.
	 */
	function baseTrim$1(string) {
	  return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
	}
	var _baseTrim = baseTrim$1;

	var baseTrim = _baseTrim,
	  isObject$1 = isObject_1,
	  isSymbol$1 = isSymbol_1;

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber$4(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol$1(value)) {
	    return NAN;
	  }
	  if (isObject$1(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject$1(other) ? other + '' : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = baseTrim(value);
	  var isBinary = reIsBinary.test(value);
	  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
	}
	var toNumber_1 = toNumber$4;

	var toNumber$3 = toNumber_1;

	/** Used as references for various `Number` constants. */
	var INFINITY$1 = 1 / 0,
	  MAX_INTEGER = 1.7976931348623157e+308;

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite$2(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber$3(value);
	  if (value === INFINITY$1 || value === -INFINITY$1) {
	    var sign = value < 0 ? -1 : 1;
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}
	var toFinite_1 = toFinite$2;

	var toFinite$1 = toFinite_1;

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger$3(value) {
	  var result = toFinite$1(value),
	    remainder = result % 1;
	  return result === result ? remainder ? result - remainder : result : 0;
	}
	var toInteger_1 = toInteger$3;

	var baseSetData = _baseSetData,
	  createBind = _createBind,
	  createCurry = _createCurry,
	  createHybrid = _createHybrid,
	  createPartial = _createPartial,
	  getData$2 = _getData,
	  mergeData = _mergeData,
	  setData = _setData,
	  setWrapToString = _setWrapToString,
	  toInteger$2 = toInteger_1;

	/** Error message constants. */
	var FUNC_ERROR_TEXT$1 = 'Expected a function';

	/** Used to compose bitmasks for function metadata. */
	var WRAP_BIND_FLAG = 1,
	  WRAP_BIND_KEY_FLAG = 2,
	  WRAP_CURRY_FLAG$1 = 8,
	  WRAP_CURRY_RIGHT_FLAG = 16,
	  WRAP_PARTIAL_FLAG = 32,
	  WRAP_PARTIAL_RIGHT_FLAG = 64;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$4 = Math.max;

	/**
	 * Creates a function that either curries or invokes `func` with optional
	 * `this` binding and partially applied arguments.
	 *
	 * @private
	 * @param {Function|string} func The function or method name to wrap.
	 * @param {number} bitmask The bitmask flags.
	 *    1 - `_.bind`
	 *    2 - `_.bindKey`
	 *    4 - `_.curry` or `_.curryRight` of a bound function
	 *    8 - `_.curry`
	 *   16 - `_.curryRight`
	 *   32 - `_.partial`
	 *   64 - `_.partialRight`
	 *  128 - `_.rearg`
	 *  256 - `_.ary`
	 *  512 - `_.flip`
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {Array} [partials] The arguments to be partially applied.
	 * @param {Array} [holders] The `partials` placeholder indexes.
	 * @param {Array} [argPos] The argument positions of the new function.
	 * @param {number} [ary] The arity cap of `func`.
	 * @param {number} [arity] The arity of `func`.
	 * @returns {Function} Returns the new wrapped function.
	 */
	function createWrap$3(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
	  if (!isBindKey && typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT$1);
	  }
	  var length = partials ? partials.length : 0;
	  if (!length) {
	    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
	    partials = holders = undefined;
	  }
	  ary = ary === undefined ? ary : nativeMax$4(toInteger$2(ary), 0);
	  arity = arity === undefined ? arity : toInteger$2(arity);
	  length -= holders ? holders.length : 0;
	  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
	    var partialsRight = partials,
	      holdersRight = holders;
	    partials = holders = undefined;
	  }
	  var data = isBindKey ? undefined : getData$2(func);
	  var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];
	  if (data) {
	    mergeData(newData, data);
	  }
	  func = newData[0];
	  bitmask = newData[1];
	  thisArg = newData[2];
	  partials = newData[3];
	  holders = newData[4];
	  arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax$4(newData[9] - length, 0);
	  if (!arity && bitmask & (WRAP_CURRY_FLAG$1 | WRAP_CURRY_RIGHT_FLAG)) {
	    bitmask &= ~(WRAP_CURRY_FLAG$1 | WRAP_CURRY_RIGHT_FLAG);
	  }
	  if (!bitmask || bitmask == WRAP_BIND_FLAG) {
	    var result = createBind(func, bitmask, thisArg);
	  } else if (bitmask == WRAP_CURRY_FLAG$1 || bitmask == WRAP_CURRY_RIGHT_FLAG) {
	    result = createCurry(func, bitmask, arity);
	  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
	    result = createPartial(func, bitmask, thisArg, partials);
	  } else {
	    result = createHybrid.apply(undefined, newData);
	  }
	  var setter = data ? baseSetData : setData;
	  return setWrapToString(setter(result, newData), func, bitmask);
	}
	var _createWrap = createWrap$3;

	var createWrap$2 = _createWrap;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_ARY_FLAG = 128;

	/**
	 * Creates a function that invokes `func`, with up to `n` arguments,
	 * ignoring any additional arguments.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Function
	 * @param {Function} func The function to cap arguments for.
	 * @param {number} [n=func.length] The arity cap.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Function} Returns the new capped function.
	 * @example
	 *
	 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	 * // => [6, 8, 10]
	 */
	function ary(func, n, guard) {
	  n = guard ? undefined : n;
	  n = func && n == null ? func.length : n;
	  return createWrap$2(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
	}
	var ary_1 = ary;

	var baseClone$2 = _baseClone;

	/** Used to compose bitmasks for cloning. */
	var CLONE_SYMBOLS_FLAG$1 = 4;

	/**
	 * Creates a shallow clone of `value`.
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	 * and supports cloning arrays, array buffers, booleans, date objects, maps,
	 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	 * arrays. The own enumerable properties of `arguments` objects are cloned
	 * as plain objects. An empty object is returned for uncloneable values such
	 * as error objects, functions, DOM nodes, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to clone.
	 * @returns {*} Returns the cloned value.
	 * @see _.cloneDeep
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var shallow = _.clone(objects);
	 * console.log(shallow[0] === objects[0]);
	 * // => true
	 */
	function clone(value) {
	  return baseClone$2(value, CLONE_SYMBOLS_FLAG$1);
	}
	var clone_1 = clone;

	var createWrap$1 = _createWrap;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_CURRY_FLAG = 8;

	/**
	 * Creates a function that accepts arguments of `func` and either invokes
	 * `func` returning its result, if at least `arity` number of arguments have
	 * been provided, or returns a function that accepts the remaining `func`
	 * arguments, and so on. The arity of `func` may be specified if `func.length`
	 * is not sufficient.
	 *
	 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	 * may be used as a placeholder for provided arguments.
	 *
	 * **Note:** This method doesn't set the "length" property of curried functions.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.0.0
	 * @category Function
	 * @param {Function} func The function to curry.
	 * @param {number} [arity=func.length] The arity of `func`.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Function} Returns the new curried function.
	 * @example
	 *
	 * var abc = function(a, b, c) {
	 *   return [a, b, c];
	 * };
	 *
	 * var curried = _.curry(abc);
	 *
	 * curried(1)(2)(3);
	 * // => [1, 2, 3]
	 *
	 * curried(1, 2)(3);
	 * // => [1, 2, 3]
	 *
	 * curried(1, 2, 3);
	 * // => [1, 2, 3]
	 *
	 * // Curried with placeholders.
	 * curried(1)(_, 3)(2);
	 * // => [1, 2, 3]
	 */
	function curry(func, arity, guard) {
	  arity = guard ? undefined : arity;
	  var result = createWrap$1(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
	  result.placeholder = curry.placeholder;
	  return result;
	}

	// Assign default placeholders.
	curry.placeholder = {};
	var curry_1 = curry;

	var baseGetTag$1 = _baseGetTag,
	  isObjectLike$2 = isObjectLike_1,
	  isPlainObject$2 = isPlainObject_1;

	/** `Object#toString` result references. */
	var domExcTag = '[object DOMException]',
	  errorTag = '[object Error]';

	/**
	 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	 * `SyntaxError`, `TypeError`, or `URIError` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	 * @example
	 *
	 * _.isError(new Error);
	 * // => true
	 *
	 * _.isError(Error);
	 * // => false
	 */
	function isError(value) {
	  if (!isObjectLike$2(value)) {
	    return false;
	  }
	  var tag = baseGetTag$1(value);
	  return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject$2(value);
	}
	var isError_1 = isError;

	var getTag$1 = _getTag,
	  isObjectLike$1 = isObjectLike_1;

	/** `Object#toString` result references. */
	var weakMapTag = '[object WeakMap]';

	/**
	 * Checks if `value` is classified as a `WeakMap` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
	 * @example
	 *
	 * _.isWeakMap(new WeakMap);
	 * // => true
	 *
	 * _.isWeakMap(new Map);
	 * // => false
	 */
	function isWeakMap(value) {
	  return isObjectLike$1(value) && getTag$1(value) == weakMapTag;
	}
	var isWeakMap_1 = isWeakMap;

	var baseClone$1 = _baseClone,
	  baseIteratee$5 = _baseIteratee;

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG$1 = 1;

	/**
	 * Creates a function that invokes `func` with the arguments of the created
	 * function. If `func` is a property name, the created function returns the
	 * property value for a given element. If `func` is an array or object, the
	 * created function returns `true` for elements that contain the equivalent
	 * source properties, otherwise it returns `false`.
	 *
	 * @static
	 * @since 4.0.0
	 * @memberOf _
	 * @category Util
	 * @param {*} [func=_.identity] The value to convert to a callback.
	 * @returns {Function} Returns the callback.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
	 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.filter(users, _.iteratee(['user', 'fred']));
	 * // => [{ 'user': 'fred', 'age': 40 }]
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, _.iteratee('user'));
	 * // => ['barney', 'fred']
	 *
	 * // Create custom iteratee shorthands.
	 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
	 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
	 *     return func.test(string);
	 *   };
	 * });
	 *
	 * _.filter(['abc', 'def'], /ef/);
	 * // => ['def']
	 */
	function iteratee(func) {
	  return baseIteratee$5(typeof func == 'function' ? func : baseClone$1(func, CLONE_DEEP_FLAG$1));
	}
	var iteratee_1 = iteratee;

	var Symbol$1 = _Symbol,
	  isArguments = isArguments_1,
	  isArray$5 = isArray_1;

	/** Built-in value references. */
	var spreadableSymbol = Symbol$1 ? Symbol$1.isConcatSpreadable : undefined;

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable$1(value) {
	  return isArray$5(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
	}
	var _isFlattenable = isFlattenable$1;

	var arrayPush = _arrayPush,
	  isFlattenable = _isFlattenable;

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten$2(array, depth, predicate, isStrict, result) {
	  var index = -1,
	    length = array.length;
	  predicate || (predicate = isFlattenable);
	  result || (result = []);
	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten$2(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}
	var _baseFlatten = baseFlatten$2;

	var baseFlatten$1 = _baseFlatten;

	/**
	 * Flattens `array` a single level deep.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flatten([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, [3, [4]], 5]
	 */
	function flatten$1(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseFlatten$1(array, 1) : [];
	}
	var flatten_1 = flatten$1;

	var flatten = flatten_1,
	  overRest = _overRest,
	  setToString = _setToString;

	/**
	 * A specialized version of `baseRest` which flattens the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @returns {Function} Returns the new function.
	 */
	function flatRest$2(func) {
	  return setToString(overRest(func, undefined, flatten), func + '');
	}
	var _flatRest = flatRest$2;

	var createWrap = _createWrap,
	  flatRest$1 = _flatRest;

	/** Used to compose bitmasks for function metadata. */
	var WRAP_REARG_FLAG = 256;

	/**
	 * Creates a function that invokes `func` with arguments arranged according
	 * to the specified `indexes` where the argument value at the first index is
	 * provided as the first argument, the argument value at the second index is
	 * provided as the second argument, and so on.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Function
	 * @param {Function} func The function to rearrange arguments for.
	 * @param {...(number|number[])} indexes The arranged argument indexes.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var rearged = _.rearg(function(a, b, c) {
	 *   return [a, b, c];
	 * }, [2, 0, 1]);
	 *
	 * rearged('b', 'c', 'a')
	 * // => ['a', 'b', 'c']
	 */
	var rearg = flatRest$1(function (func, indexes) {
	  return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
	});
	var rearg_1 = rearg;

	var arrayMap$4 = _arrayMap,
	  copyArray = _copyArray,
	  isArray$4 = isArray_1,
	  isSymbol = isSymbol_1,
	  stringToPath = _stringToPath,
	  toKey$1 = _toKey,
	  toString = toString_1;

	/**
	 * Converts `value` to a property path array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Util
	 * @param {*} value The value to convert.
	 * @returns {Array} Returns the new property path array.
	 * @example
	 *
	 * _.toPath('a.b.c');
	 * // => ['a', 'b', 'c']
	 *
	 * _.toPath('a[0].b.c');
	 * // => ['a', '0', 'b', 'c']
	 */
	function toPath(value) {
	  if (isArray$4(value)) {
	    return arrayMap$4(value, toKey$1);
	  }
	  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
	}
	var toPath_1 = toPath;

	var _util = {
	  'ary': ary_1,
	  'assign': _baseAssign,
	  'clone': clone_1,
	  'curry': curry_1,
	  'forEach': _arrayEach,
	  'isArray': isArray_1,
	  'isError': isError_1,
	  'isFunction': isFunction_1,
	  'isWeakMap': isWeakMap_1,
	  'iteratee': iteratee_1,
	  'keys': _baseKeys,
	  'rearg': rearg_1,
	  'toInteger': toInteger_1,
	  'toPath': toPath_1
	};

	var baseConvert = _baseConvert,
	  util$1 = _util;

	/**
	 * Converts `func` of `name` to an immutable auto-curried iteratee-first data-last
	 * version with conversion `options` applied. If `name` is an object its methods
	 * will be converted.
	 *
	 * @param {string} name The name of the function to wrap.
	 * @param {Function} [func] The function to wrap.
	 * @param {Object} [options] The options object. See `baseConvert` for more details.
	 * @returns {Function|Object} Returns the converted function or object.
	 */
	function convert$1(name, func, options) {
	  return baseConvert(util$1, name, func, options);
	}
	var convert_1 = convert$1;

	var _baseSet;
	var hasRequired_baseSet;

	function require_baseSet () {
		if (hasRequired_baseSet) return _baseSet;
		hasRequired_baseSet = 1;
		var assignValue = _assignValue,
		  castPath = _castPath,
		  isIndex = _isIndex,
		  isObject = isObject_1,
		  toKey = _toKey;

		/**
		 * The base implementation of `_.set`.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {Array|string} path The path of the property to set.
		 * @param {*} value The value to set.
		 * @param {Function} [customizer] The function to customize path creation.
		 * @returns {Object} Returns `object`.
		 */
		function baseSet(object, path, value, customizer) {
		  if (!isObject(object)) {
		    return object;
		  }
		  path = castPath(path, object);
		  var index = -1,
		    length = path.length,
		    lastIndex = length - 1,
		    nested = object;
		  while (nested != null && ++index < length) {
		    var key = toKey(path[index]),
		      newValue = value;
		    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
		      return object;
		    }
		    if (index != lastIndex) {
		      var objValue = nested[key];
		      newValue = customizer ? customizer(objValue, key, nested) : undefined;
		      if (newValue === undefined) {
		        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
		      }
		    }
		    assignValue(nested, key, newValue);
		    nested = nested[key];
		  }
		  return object;
		}
		_baseSet = baseSet;
		return _baseSet;
	}

	var set_1;
	var hasRequiredSet;

	function requireSet () {
		if (hasRequiredSet) return set_1;
		hasRequiredSet = 1;
		var baseSet = require_baseSet();

		/**
		 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
		 * it's created. Arrays are created for missing index properties while objects
		 * are created for all other missing properties. Use `_.setWith` to customize
		 * `path` creation.
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.7.0
		 * @category Object
		 * @param {Object} object The object to modify.
		 * @param {Array|string} path The path of the property to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns `object`.
		 * @example
		 *
		 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
		 *
		 * _.set(object, 'a[0].b.c', 4);
		 * console.log(object.a[0].b.c);
		 * // => 4
		 *
		 * _.set(object, ['x', '0', 'y', 'z'], 5);
		 * console.log(object.x[0].y.z);
		 * // => 5
		 */
		function set(object, path, value) {
		  return object == null ? object : baseSet(object, path, value);
		}
		set_1 = set;
		return set_1;
	}

	var convert = convert_1,
	  func = convert('set', requireSet());
	func.placeholder = requirePlaceholder();
	var set = func;

	var setFp = /*@__PURE__*/getDefaultExportFromCjs(set);

	var baseFor = _baseFor,
	  keys$3 = keys_1;

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn$1(object, iteratee) {
	  return object && baseFor(object, iteratee, keys$3);
	}
	var _baseForOwn = baseForOwn$1;

	var isArrayLike$3 = isArrayLike_1;

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach$1(eachFunc, fromRight) {
	  return function (collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike$3(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	      index = fromRight ? length : -1,
	      iterable = Object(collection);
	    while (fromRight ? index-- : ++index < length) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}
	var _createBaseEach = createBaseEach$1;

	var baseForOwn = _baseForOwn,
	  createBaseEach = _createBaseEach;

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach$3 = createBaseEach(baseForOwn);
	var _baseEach = baseEach$3;

	var baseEach$2 = _baseEach;

	/**
	 * The base implementation of `_.filter` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function baseFilter$1(collection, predicate) {
	  var result = [];
	  baseEach$2(collection, function (value, index, collection) {
	    if (predicate(value, index, collection)) {
	      result.push(value);
	    }
	  });
	  return result;
	}
	var _baseFilter = baseFilter$1;

	var arrayFilter = _arrayFilter,
	  baseFilter = _baseFilter,
	  baseIteratee$4 = _baseIteratee,
	  isArray$3 = isArray_1;

	/**
	 * Iterates over elements of `collection`, returning an array of all elements
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * **Note:** Unlike `_.remove`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 * @see _.reject
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * _.filter(users, function(o) { return !o.active; });
	 * // => objects for ['fred']
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.filter(users, { 'age': 36, 'active': true });
	 * // => objects for ['barney']
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.filter(users, ['active', false]);
	 * // => objects for ['fred']
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.filter(users, 'active');
	 * // => objects for ['barney']
	 *
	 * // Combining several predicates using `_.overEvery` or `_.overSome`.
	 * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
	 * // => objects for ['fred', 'barney']
	 */
	function filter(collection, predicate) {
	  var func = isArray$3(collection) ? arrayFilter : baseFilter;
	  return func(collection, baseIteratee$4(predicate));
	}
	var filter_1 = filter;

	var filter$1 = /*@__PURE__*/getDefaultExportFromCjs(filter_1);

	var baseIsEqual = _baseIsEqual;

	/**
	 * Performs a deep comparison between two values to determine if they are
	 * equivalent.
	 *
	 * **Note:** This method supports comparing arrays, array buffers, booleans,
	 * date objects, error objects, maps, numbers, `Object` objects, regexes,
	 * sets, strings, symbols, and typed arrays. `Object` objects are compared
	 * by their own, not inherited, enumerable properties. Functions and DOM
	 * nodes are compared by strict equality, i.e. `===`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.isEqual(object, other);
	 * // => true
	 *
	 * object === other;
	 * // => false
	 */
	function isEqual(value, other) {
	  return baseIsEqual(value, other);
	}
	var isEqual_1 = isEqual;

	var isEqual$1 = /*@__PURE__*/getDefaultExportFromCjs(isEqual_1);

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */

	function last$1(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? array[length - 1] : undefined;
	}
	var last_1 = last$1;

	var baseGet = _baseGet,
	  baseSlice = _baseSlice;

	/**
	 * Gets the parent value at `path` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path to get the parent value of.
	 * @returns {*} Returns the parent value.
	 */
	function parent$1(object, path) {
	  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
	}
	var _parent = parent$1;

	var castPath$1 = _castPath,
	  last = last_1,
	  parent = _parent,
	  toKey = _toKey;

	/**
	 * The base implementation of `_.unset`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The property path to unset.
	 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
	 */
	function baseUnset$1(object, path) {
	  path = castPath$1(path, object);
	  object = parent(object, path);
	  return object == null || delete object[toKey(last(path))];
	}
	var _baseUnset = baseUnset$1;

	/**
	 * The base implementation of `_.reduce` and `_.reduceRight`, without support
	 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} accumulator The initial value.
	 * @param {boolean} initAccum Specify using the first or last element of
	 *  `collection` as the initial value.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the accumulated value.
	 */

	function baseReduce$1(collection, iteratee, accumulator, initAccum, eachFunc) {
	  eachFunc(collection, function (value, index, collection) {
	    accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
	  });
	  return accumulator;
	}
	var _baseReduce = baseReduce$1;

	var arrayReduce = _arrayReduce,
	  baseEach$1 = _baseEach,
	  baseIteratee$3 = _baseIteratee,
	  baseReduce = _baseReduce,
	  isArray$2 = isArray_1;

	/**
	 * Reduces `collection` to a value which is the accumulated result of running
	 * each element in `collection` thru `iteratee`, where each successive
	 * invocation is supplied the return value of the previous. If `accumulator`
	 * is not given, the first element of `collection` is used as the initial
	 * value. The iteratee is invoked with four arguments:
	 * (accumulator, value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.reduce`, `_.reduceRight`, and `_.transform`.
	 *
	 * The guarded methods are:
	 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	 * and `sortBy`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @returns {*} Returns the accumulated value.
	 * @see _.reduceRight
	 * @example
	 *
	 * _.reduce([1, 2], function(sum, n) {
	 *   return sum + n;
	 * }, 0);
	 * // => 3
	 *
	 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	 *   (result[value] || (result[value] = [])).push(key);
	 *   return result;
	 * }, {});
	 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	 */
	function reduce(collection, iteratee, accumulator) {
	  var func = isArray$2(collection) ? arrayReduce : baseReduce,
	    initAccum = arguments.length < 3;
	  return func(collection, baseIteratee$3(iteratee), accumulator, initAccum, baseEach$1);
	}
	var reduce_1 = reduce;

	var reduce$1 = /*@__PURE__*/getDefaultExportFromCjs(reduce_1);

	var arrayMap$3 = _arrayMap;

	/**
	 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
	 * of key-value pairs for `object` corresponding to the property names of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the key-value pairs.
	 */
	function baseToPairs$1(object, props) {
	  return arrayMap$3(props, function (key) {
	    return [key, object[key]];
	  });
	}
	var _baseToPairs = baseToPairs$1;

	/**
	 * Converts `set` to its value-value pairs.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the value-value pairs.
	 */

	function setToPairs$1(set) {
	  var index = -1,
	    result = Array(set.size);
	  set.forEach(function (value) {
	    result[++index] = [value, value];
	  });
	  return result;
	}
	var _setToPairs = setToPairs$1;

	var baseToPairs = _baseToPairs,
	  getTag = _getTag,
	  mapToArray = _mapToArray,
	  setToPairs = _setToPairs;

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	  setTag = '[object Set]';

	/**
	 * Creates a `_.toPairs` or `_.toPairsIn` function.
	 *
	 * @private
	 * @param {Function} keysFunc The function to get the keys of a given object.
	 * @returns {Function} Returns the new pairs function.
	 */
	function createToPairs$1(keysFunc) {
	  return function (object) {
	    var tag = getTag(object);
	    if (tag == mapTag) {
	      return mapToArray(object);
	    }
	    if (tag == setTag) {
	      return setToPairs(object);
	    }
	    return baseToPairs(object, keysFunc(object));
	  };
	}
	var _createToPairs = createToPairs$1;

	var createToPairs = _createToPairs,
	  keys$2 = keys_1;

	/**
	 * Creates an array of own enumerable string keyed-value pairs for `object`
	 * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
	 * entries are returned.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @alias entries
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the key-value pairs.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.toPairs(new Foo);
	 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
	 */
	var toPairs = createToPairs(keys$2);
	var toPairs_1 = toPairs;

	var toPairs$1 = /*@__PURE__*/getDefaultExportFromCjs(toPairs_1);

	var baseGetTag = _baseGetTag,
	  isArray$1 = isArray_1,
	  isObjectLike = isObjectLike_1;

	/** `Object#toString` result references. */
	var stringTag = '[object String]';

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString$1(value) {
	  return typeof value == 'string' || !isArray$1(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
	}
	var isString_1 = isString$1;

	var arrayMap$2 = _arrayMap;

	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */
	function baseValues$1(object, props) {
	  return arrayMap$2(props, function (key) {
	    return object[key];
	  });
	}
	var _baseValues = baseValues$1;

	var baseValues = _baseValues,
	  keys$1 = keys_1;

	/**
	 * Creates an array of the own enumerable string keyed property values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.values(new Foo);
	 * // => [1, 2] (iteration order is not guaranteed)
	 *
	 * _.values('hi');
	 * // => ['h', 'i']
	 */
	function values$3(object) {
	  return object == null ? [] : baseValues(object, keys$1(object));
	}
	var values_1 = values$3;

	var baseIndexOf = _baseIndexOf,
	  isArrayLike$2 = isArrayLike_1,
	  isString = isString_1,
	  toInteger$1 = toInteger_1,
	  values$2 = values_1;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$3 = Math.max;

	/**
	 * Checks if `value` is in `collection`. If `collection` is a string, it's
	 * checked for a substring of `value`, otherwise
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * is used for equality comparisons. If `fromIndex` is negative, it's used as
	 * the offset from the end of `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	 * @returns {boolean} Returns `true` if `value` is found, else `false`.
	 * @example
	 *
	 * _.includes([1, 2, 3], 1);
	 * // => true
	 *
	 * _.includes([1, 2, 3], 1, 2);
	 * // => false
	 *
	 * _.includes({ 'a': 1, 'b': 2 }, 1);
	 * // => true
	 *
	 * _.includes('abcd', 'bc');
	 * // => true
	 */
	function includes(collection, value, fromIndex, guard) {
	  collection = isArrayLike$2(collection) ? collection : values$2(collection);
	  fromIndex = fromIndex && !guard ? toInteger$1(fromIndex) : 0;
	  var length = collection.length;
	  if (fromIndex < 0) {
	    fromIndex = nativeMax$3(length + fromIndex, 0);
	  }
	  return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
	}
	var includes_1 = includes;

	var includes$1 = /*@__PURE__*/getDefaultExportFromCjs(includes_1);

	var baseIteratee$2 = _baseIteratee,
	  isArrayLike$1 = isArrayLike_1,
	  keys = keys_1;

	/**
	 * Creates a `_.find` or `_.findLast` function.
	 *
	 * @private
	 * @param {Function} findIndexFunc The function to find the collection index.
	 * @returns {Function} Returns the new find function.
	 */
	function createFind$1(findIndexFunc) {
	  return function (collection, predicate, fromIndex) {
	    var iterable = Object(collection);
	    if (!isArrayLike$1(collection)) {
	      var iteratee = baseIteratee$2(predicate);
	      collection = keys(collection);
	      predicate = function (key) {
	        return iteratee(iterable[key], key, iterable);
	      };
	    }
	    var index = findIndexFunc(collection, predicate, fromIndex);
	    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	  };
	}
	var _createFind = createFind$1;

	var baseFindIndex = _baseFindIndex,
	  baseIteratee$1 = _baseIteratee,
	  toInteger = toInteger_1;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax$2 = Math.max;

	/**
	 * This method is like `_.find` except that it returns the index of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {number} Returns the index of the found element, else `-1`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * _.findIndex(users, function(o) { return o.user == 'barney'; });
	 * // => 0
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findIndex(users, { 'user': 'fred', 'active': false });
	 * // => 1
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findIndex(users, ['active', false]);
	 * // => 0
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findIndex(users, 'active');
	 * // => 2
	 */
	function findIndex$2(array, predicate, fromIndex) {
	  var length = array == null ? 0 : array.length;
	  if (!length) {
	    return -1;
	  }
	  var index = fromIndex == null ? 0 : toInteger(fromIndex);
	  if (index < 0) {
	    index = nativeMax$2(length + index, 0);
	  }
	  return baseFindIndex(array, baseIteratee$1(predicate), index);
	}
	var findIndex_1 = findIndex$2;

	var createFind = _createFind,
	  findIndex$1 = findIndex_1;

	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.find(users, function(o) { return o.age < 40; });
	 * // => object for 'barney'
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.find(users, { 'age': 1, 'active': true });
	 * // => object for 'pebbles'
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.find(users, ['active', false]);
	 * // => object for 'fred'
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.find(users, 'active');
	 * // => object for 'barney'
	 */
	var find = createFind(findIndex$1);
	var find_1 = find;

	var find$1 = /*@__PURE__*/getDefaultExportFromCjs(find_1);

	/* Built-in method references for those with the same name as other `lodash` methods. */

	var nativeCeil = Math.ceil,
	  nativeMax$1 = Math.max;

	/**
	 * The base implementation of `_.range` and `_.rangeRight` which doesn't
	 * coerce arguments.
	 *
	 * @private
	 * @param {number} start The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} step The value to increment or decrement by.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Array} Returns the range of numbers.
	 */
	function baseRange$1(start, end, step, fromRight) {
	  var index = -1,
	    length = nativeMax$1(nativeCeil((end - start) / (step || 1)), 0),
	    result = Array(length);
	  while (length--) {
	    result[fromRight ? length : ++index] = start;
	    start += step;
	  }
	  return result;
	}
	var _baseRange = baseRange$1;

	var baseRange = _baseRange,
	  isIterateeCall = _isIterateeCall,
	  toFinite = toFinite_1;

	/**
	 * Creates a `_.range` or `_.rangeRight` function.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new range function.
	 */
	function createRange$1(fromRight) {
	  return function (start, end, step) {
	    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	      end = step = undefined;
	    }
	    // Ensure the sign of `-0` is preserved.
	    start = toFinite(start);
	    if (end === undefined) {
	      end = start;
	      start = 0;
	    } else {
	      end = toFinite(end);
	    }
	    step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
	    return baseRange(start, end, step, fromRight);
	  };
	}
	var _createRange = createRange$1;

	var createRange = _createRange;

	/**
	 * Creates an array of numbers (positive and/or negative) progressing from
	 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	 * `start` is specified without an `end` or `step`. If `end` is not specified,
	 * it's set to `start` with `start` then set to `0`.
	 *
	 * **Note:** JavaScript follows the IEEE-754 standard for resolving
	 * floating-point values which can produce unexpected results.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {number} [start=0] The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} [step=1] The value to increment or decrement by.
	 * @returns {Array} Returns the range of numbers.
	 * @see _.inRange, _.rangeRight
	 * @example
	 *
	 * _.range(4);
	 * // => [0, 1, 2, 3]
	 *
	 * _.range(-4);
	 * // => [0, -1, -2, -3]
	 *
	 * _.range(1, 5);
	 * // => [1, 2, 3, 4]
	 *
	 * _.range(0, 20, 5);
	 * // => [0, 5, 10, 15]
	 *
	 * _.range(0, -4, -1);
	 * // => [0, -1, -2, -3]
	 *
	 * _.range(1, 4, 0);
	 * // => [1, 1, 1]
	 *
	 * _.range(0);
	 * // => []
	 */
	var range = createRange();
	var range_1 = range;

	var range$1 = /*@__PURE__*/getDefaultExportFromCjs(range_1);

	/** Used for built-in method references. */

	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.has` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHas$1(object, key) {
	  return object != null && hasOwnProperty.call(object, key);
	}
	var _baseHas = baseHas$1;

	var baseHas = _baseHas,
	  hasPath = _hasPath;

	/**
	 * Checks if `path` is a direct property of `object`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = { 'a': { 'b': 2 } };
	 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.has(object, 'a');
	 * // => true
	 *
	 * _.has(object, 'a.b');
	 * // => true
	 *
	 * _.has(object, ['a', 'b']);
	 * // => true
	 *
	 * _.has(other, 'a');
	 * // => false
	 */
	function has(object, path) {
	  return object != null && hasPath(object, path, baseHas);
	}
	var has_1 = has;

	var has$1 = /*@__PURE__*/getDefaultExportFromCjs(has_1);

	var ajv = {exports: {}};

	var core$2 = {};

	var validate$1 = {};

	var boolSchema = {};

	var errors = {};

	var codegen = {};

	var code$1 = {};

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.regexpCode = exports.getEsmExportName = exports.getProperty = exports.safeStringify = exports.stringify = exports.strConcat = exports.addCodeArg = exports.str = exports._ = exports.nil = exports._Code = exports.Name = exports.IDENTIFIER = exports._CodeOrName = void 0;
		class _CodeOrName {}
		exports._CodeOrName = _CodeOrName;
		exports.IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
		class Name extends _CodeOrName {
		  constructor(s) {
		    super();
		    if (!exports.IDENTIFIER.test(s)) throw new Error("CodeGen: name must be a valid identifier");
		    this.str = s;
		  }
		  toString() {
		    return this.str;
		  }
		  emptyStr() {
		    return false;
		  }
		  get names() {
		    return {
		      [this.str]: 1
		    };
		  }
		}
		exports.Name = Name;
		class _Code extends _CodeOrName {
		  constructor(code) {
		    super();
		    this._items = typeof code === "string" ? [code] : code;
		  }
		  toString() {
		    return this.str;
		  }
		  emptyStr() {
		    if (this._items.length > 1) return false;
		    const item = this._items[0];
		    return item === "" || item === '""';
		  }
		  get str() {
		    var _a;
		    return (_a = this._str) !== null && _a !== void 0 ? _a : this._str = this._items.reduce((s, c) => `${s}${c}`, "");
		  }
		  get names() {
		    var _a;
		    return (_a = this._names) !== null && _a !== void 0 ? _a : this._names = this._items.reduce((names, c) => {
		      if (c instanceof Name) names[c.str] = (names[c.str] || 0) + 1;
		      return names;
		    }, {});
		  }
		}
		exports._Code = _Code;
		exports.nil = new _Code("");
		function _(strs, ...args) {
		  const code = [strs[0]];
		  let i = 0;
		  while (i < args.length) {
		    addCodeArg(code, args[i]);
		    code.push(strs[++i]);
		  }
		  return new _Code(code);
		}
		exports._ = _;
		const plus = new _Code("+");
		function str(strs, ...args) {
		  const expr = [safeStringify(strs[0])];
		  let i = 0;
		  while (i < args.length) {
		    expr.push(plus);
		    addCodeArg(expr, args[i]);
		    expr.push(plus, safeStringify(strs[++i]));
		  }
		  optimize(expr);
		  return new _Code(expr);
		}
		exports.str = str;
		function addCodeArg(code, arg) {
		  if (arg instanceof _Code) code.push(...arg._items);else if (arg instanceof Name) code.push(arg);else code.push(interpolate(arg));
		}
		exports.addCodeArg = addCodeArg;
		function optimize(expr) {
		  let i = 1;
		  while (i < expr.length - 1) {
		    if (expr[i] === plus) {
		      const res = mergeExprItems(expr[i - 1], expr[i + 1]);
		      if (res !== undefined) {
		        expr.splice(i - 1, 3, res);
		        continue;
		      }
		      expr[i++] = "+";
		    }
		    i++;
		  }
		}
		function mergeExprItems(a, b) {
		  if (b === '""') return a;
		  if (a === '""') return b;
		  if (typeof a == "string") {
		    if (b instanceof Name || a[a.length - 1] !== '"') return;
		    if (typeof b != "string") return `${a.slice(0, -1)}${b}"`;
		    if (b[0] === '"') return a.slice(0, -1) + b.slice(1);
		    return;
		  }
		  if (typeof b == "string" && b[0] === '"' && !(a instanceof Name)) return `"${a}${b.slice(1)}`;
		  return;
		}
		function strConcat(c1, c2) {
		  return c2.emptyStr() ? c1 : c1.emptyStr() ? c2 : str`${c1}${c2}`;
		}
		exports.strConcat = strConcat;
		// TODO do not allow arrays here
		function interpolate(x) {
		  return typeof x == "number" || typeof x == "boolean" || x === null ? x : safeStringify(Array.isArray(x) ? x.join(",") : x);
		}
		function stringify(x) {
		  return new _Code(safeStringify(x));
		}
		exports.stringify = stringify;
		function safeStringify(x) {
		  return JSON.stringify(x).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
		}
		exports.safeStringify = safeStringify;
		function getProperty(key) {
		  return typeof key == "string" && exports.IDENTIFIER.test(key) ? new _Code(`.${key}`) : _`[${key}]`;
		}
		exports.getProperty = getProperty;
		//Does best effort to format the name properly
		function getEsmExportName(key) {
		  if (typeof key == "string" && exports.IDENTIFIER.test(key)) {
		    return new _Code(`${key}`);
		  }
		  throw new Error(`CodeGen: invalid export name: ${key}, use explicit $id name mapping`);
		}
		exports.getEsmExportName = getEsmExportName;
		function regexpCode(rx) {
		  return new _Code(rx.toString());
		}
		exports.regexpCode = regexpCode; 
	} (code$1));

	var scope = {};

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.ValueScope = exports.ValueScopeName = exports.Scope = exports.varKinds = exports.UsedValueState = void 0;
		const code_1 = code$1;
		class ValueError extends Error {
		  constructor(name) {
		    super(`CodeGen: "code" for ${name} not defined`);
		    this.value = name.value;
		  }
		}
		var UsedValueState;
		(function (UsedValueState) {
		  UsedValueState[UsedValueState["Started"] = 0] = "Started";
		  UsedValueState[UsedValueState["Completed"] = 1] = "Completed";
		})(UsedValueState = exports.UsedValueState || (exports.UsedValueState = {}));
		exports.varKinds = {
		  const: new code_1.Name("const"),
		  let: new code_1.Name("let"),
		  var: new code_1.Name("var")
		};
		class Scope {
		  constructor({
		    prefixes,
		    parent
		  } = {}) {
		    this._names = {};
		    this._prefixes = prefixes;
		    this._parent = parent;
		  }
		  toName(nameOrPrefix) {
		    return nameOrPrefix instanceof code_1.Name ? nameOrPrefix : this.name(nameOrPrefix);
		  }
		  name(prefix) {
		    return new code_1.Name(this._newName(prefix));
		  }
		  _newName(prefix) {
		    const ng = this._names[prefix] || this._nameGroup(prefix);
		    return `${prefix}${ng.index++}`;
		  }
		  _nameGroup(prefix) {
		    var _a, _b;
		    if (((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a._prefixes) === null || _b === void 0 ? void 0 : _b.has(prefix)) || this._prefixes && !this._prefixes.has(prefix)) {
		      throw new Error(`CodeGen: prefix "${prefix}" is not allowed in this scope`);
		    }
		    return this._names[prefix] = {
		      prefix,
		      index: 0
		    };
		  }
		}
		exports.Scope = Scope;
		class ValueScopeName extends code_1.Name {
		  constructor(prefix, nameStr) {
		    super(nameStr);
		    this.prefix = prefix;
		  }
		  setValue(value, {
		    property,
		    itemIndex
		  }) {
		    this.value = value;
		    this.scopePath = (0, code_1._)`.${new code_1.Name(property)}[${itemIndex}]`;
		  }
		}
		exports.ValueScopeName = ValueScopeName;
		const line = (0, code_1._)`\n`;
		class ValueScope extends Scope {
		  constructor(opts) {
		    super(opts);
		    this._values = {};
		    this._scope = opts.scope;
		    this.opts = {
		      ...opts,
		      _n: opts.lines ? line : code_1.nil
		    };
		  }
		  get() {
		    return this._scope;
		  }
		  name(prefix) {
		    return new ValueScopeName(prefix, this._newName(prefix));
		  }
		  value(nameOrPrefix, value) {
		    var _a;
		    if (value.ref === undefined) throw new Error("CodeGen: ref must be passed in value");
		    const name = this.toName(nameOrPrefix);
		    const {
		      prefix
		    } = name;
		    const valueKey = (_a = value.key) !== null && _a !== void 0 ? _a : value.ref;
		    let vs = this._values[prefix];
		    if (vs) {
		      const _name = vs.get(valueKey);
		      if (_name) return _name;
		    } else {
		      vs = this._values[prefix] = new Map();
		    }
		    vs.set(valueKey, name);
		    const s = this._scope[prefix] || (this._scope[prefix] = []);
		    const itemIndex = s.length;
		    s[itemIndex] = value.ref;
		    name.setValue(value, {
		      property: prefix,
		      itemIndex
		    });
		    return name;
		  }
		  getValue(prefix, keyOrRef) {
		    const vs = this._values[prefix];
		    if (!vs) return;
		    return vs.get(keyOrRef);
		  }
		  scopeRefs(scopeName, values = this._values) {
		    return this._reduceValues(values, name => {
		      if (name.scopePath === undefined) throw new Error(`CodeGen: name "${name}" has no value`);
		      return (0, code_1._)`${scopeName}${name.scopePath}`;
		    });
		  }
		  scopeCode(values = this._values, usedValues, getCode) {
		    return this._reduceValues(values, name => {
		      if (name.value === undefined) throw new Error(`CodeGen: name "${name}" has no value`);
		      return name.value.code;
		    }, usedValues, getCode);
		  }
		  _reduceValues(values, valueCode, usedValues = {}, getCode) {
		    let code = code_1.nil;
		    for (const prefix in values) {
		      const vs = values[prefix];
		      if (!vs) continue;
		      const nameSet = usedValues[prefix] = usedValues[prefix] || new Map();
		      vs.forEach(name => {
		        if (nameSet.has(name)) return;
		        nameSet.set(name, UsedValueState.Started);
		        let c = valueCode(name);
		        if (c) {
		          const def = this.opts.es5 ? exports.varKinds.var : exports.varKinds.const;
		          code = (0, code_1._)`${code}${def} ${name} = ${c};${this.opts._n}`;
		        } else if (c = getCode === null || getCode === void 0 ? void 0 : getCode(name)) {
		          code = (0, code_1._)`${code}${c}${this.opts._n}`;
		        } else {
		          throw new ValueError(name);
		        }
		        nameSet.set(name, UsedValueState.Completed);
		      });
		    }
		    return code;
		  }
		}
		exports.ValueScope = ValueScope; 
	} (scope));

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.or = exports.and = exports.not = exports.CodeGen = exports.operators = exports.varKinds = exports.ValueScopeName = exports.ValueScope = exports.Scope = exports.Name = exports.regexpCode = exports.stringify = exports.getProperty = exports.nil = exports.strConcat = exports.str = exports._ = void 0;
		const code_1 = code$1;
		const scope_1 = scope;
		var code_2 = code$1;
		Object.defineProperty(exports, "_", {
		  enumerable: true,
		  get: function () {
		    return code_2._;
		  }
		});
		Object.defineProperty(exports, "str", {
		  enumerable: true,
		  get: function () {
		    return code_2.str;
		  }
		});
		Object.defineProperty(exports, "strConcat", {
		  enumerable: true,
		  get: function () {
		    return code_2.strConcat;
		  }
		});
		Object.defineProperty(exports, "nil", {
		  enumerable: true,
		  get: function () {
		    return code_2.nil;
		  }
		});
		Object.defineProperty(exports, "getProperty", {
		  enumerable: true,
		  get: function () {
		    return code_2.getProperty;
		  }
		});
		Object.defineProperty(exports, "stringify", {
		  enumerable: true,
		  get: function () {
		    return code_2.stringify;
		  }
		});
		Object.defineProperty(exports, "regexpCode", {
		  enumerable: true,
		  get: function () {
		    return code_2.regexpCode;
		  }
		});
		Object.defineProperty(exports, "Name", {
		  enumerable: true,
		  get: function () {
		    return code_2.Name;
		  }
		});
		var scope_2 = scope;
		Object.defineProperty(exports, "Scope", {
		  enumerable: true,
		  get: function () {
		    return scope_2.Scope;
		  }
		});
		Object.defineProperty(exports, "ValueScope", {
		  enumerable: true,
		  get: function () {
		    return scope_2.ValueScope;
		  }
		});
		Object.defineProperty(exports, "ValueScopeName", {
		  enumerable: true,
		  get: function () {
		    return scope_2.ValueScopeName;
		  }
		});
		Object.defineProperty(exports, "varKinds", {
		  enumerable: true,
		  get: function () {
		    return scope_2.varKinds;
		  }
		});
		exports.operators = {
		  GT: new code_1._Code(">"),
		  GTE: new code_1._Code(">="),
		  LT: new code_1._Code("<"),
		  LTE: new code_1._Code("<="),
		  EQ: new code_1._Code("==="),
		  NEQ: new code_1._Code("!=="),
		  NOT: new code_1._Code("!"),
		  OR: new code_1._Code("||"),
		  AND: new code_1._Code("&&"),
		  ADD: new code_1._Code("+")
		};
		class Node {
		  optimizeNodes() {
		    return this;
		  }
		  optimizeNames(_names, _constants) {
		    return this;
		  }
		}
		class Def extends Node {
		  constructor(varKind, name, rhs) {
		    super();
		    this.varKind = varKind;
		    this.name = name;
		    this.rhs = rhs;
		  }
		  render({
		    es5,
		    _n
		  }) {
		    const varKind = es5 ? scope_1.varKinds.var : this.varKind;
		    const rhs = this.rhs === undefined ? "" : ` = ${this.rhs}`;
		    return `${varKind} ${this.name}${rhs};` + _n;
		  }
		  optimizeNames(names, constants) {
		    if (!names[this.name.str]) return;
		    if (this.rhs) this.rhs = optimizeExpr(this.rhs, names, constants);
		    return this;
		  }
		  get names() {
		    return this.rhs instanceof code_1._CodeOrName ? this.rhs.names : {};
		  }
		}
		class Assign extends Node {
		  constructor(lhs, rhs, sideEffects) {
		    super();
		    this.lhs = lhs;
		    this.rhs = rhs;
		    this.sideEffects = sideEffects;
		  }
		  render({
		    _n
		  }) {
		    return `${this.lhs} = ${this.rhs};` + _n;
		  }
		  optimizeNames(names, constants) {
		    if (this.lhs instanceof code_1.Name && !names[this.lhs.str] && !this.sideEffects) return;
		    this.rhs = optimizeExpr(this.rhs, names, constants);
		    return this;
		  }
		  get names() {
		    const names = this.lhs instanceof code_1.Name ? {} : {
		      ...this.lhs.names
		    };
		    return addExprNames(names, this.rhs);
		  }
		}
		class AssignOp extends Assign {
		  constructor(lhs, op, rhs, sideEffects) {
		    super(lhs, rhs, sideEffects);
		    this.op = op;
		  }
		  render({
		    _n
		  }) {
		    return `${this.lhs} ${this.op}= ${this.rhs};` + _n;
		  }
		}
		class Label extends Node {
		  constructor(label) {
		    super();
		    this.label = label;
		    this.names = {};
		  }
		  render({
		    _n
		  }) {
		    return `${this.label}:` + _n;
		  }
		}
		class Break extends Node {
		  constructor(label) {
		    super();
		    this.label = label;
		    this.names = {};
		  }
		  render({
		    _n
		  }) {
		    const label = this.label ? ` ${this.label}` : "";
		    return `break${label};` + _n;
		  }
		}
		class Throw extends Node {
		  constructor(error) {
		    super();
		    this.error = error;
		  }
		  render({
		    _n
		  }) {
		    return `throw ${this.error};` + _n;
		  }
		  get names() {
		    return this.error.names;
		  }
		}
		class AnyCode extends Node {
		  constructor(code) {
		    super();
		    this.code = code;
		  }
		  render({
		    _n
		  }) {
		    return `${this.code};` + _n;
		  }
		  optimizeNodes() {
		    return `${this.code}` ? this : undefined;
		  }
		  optimizeNames(names, constants) {
		    this.code = optimizeExpr(this.code, names, constants);
		    return this;
		  }
		  get names() {
		    return this.code instanceof code_1._CodeOrName ? this.code.names : {};
		  }
		}
		class ParentNode extends Node {
		  constructor(nodes = []) {
		    super();
		    this.nodes = nodes;
		  }
		  render(opts) {
		    return this.nodes.reduce((code, n) => code + n.render(opts), "");
		  }
		  optimizeNodes() {
		    const {
		      nodes
		    } = this;
		    let i = nodes.length;
		    while (i--) {
		      const n = nodes[i].optimizeNodes();
		      if (Array.isArray(n)) nodes.splice(i, 1, ...n);else if (n) nodes[i] = n;else nodes.splice(i, 1);
		    }
		    return nodes.length > 0 ? this : undefined;
		  }
		  optimizeNames(names, constants) {
		    const {
		      nodes
		    } = this;
		    let i = nodes.length;
		    while (i--) {
		      // iterating backwards improves 1-pass optimization
		      const n = nodes[i];
		      if (n.optimizeNames(names, constants)) continue;
		      subtractNames(names, n.names);
		      nodes.splice(i, 1);
		    }
		    return nodes.length > 0 ? this : undefined;
		  }
		  get names() {
		    return this.nodes.reduce((names, n) => addNames(names, n.names), {});
		  }
		}
		class BlockNode extends ParentNode {
		  render(opts) {
		    return "{" + opts._n + super.render(opts) + "}" + opts._n;
		  }
		}
		class Root extends ParentNode {}
		class Else extends BlockNode {}
		Else.kind = "else";
		class If extends BlockNode {
		  constructor(condition, nodes) {
		    super(nodes);
		    this.condition = condition;
		  }
		  render(opts) {
		    let code = `if(${this.condition})` + super.render(opts);
		    if (this.else) code += "else " + this.else.render(opts);
		    return code;
		  }
		  optimizeNodes() {
		    super.optimizeNodes();
		    const cond = this.condition;
		    if (cond === true) return this.nodes; // else is ignored here
		    let e = this.else;
		    if (e) {
		      const ns = e.optimizeNodes();
		      e = this.else = Array.isArray(ns) ? new Else(ns) : ns;
		    }
		    if (e) {
		      if (cond === false) return e instanceof If ? e : e.nodes;
		      if (this.nodes.length) return this;
		      return new If(not(cond), e instanceof If ? [e] : e.nodes);
		    }
		    if (cond === false || !this.nodes.length) return undefined;
		    return this;
		  }
		  optimizeNames(names, constants) {
		    var _a;
		    this.else = (_a = this.else) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
		    if (!(super.optimizeNames(names, constants) || this.else)) return;
		    this.condition = optimizeExpr(this.condition, names, constants);
		    return this;
		  }
		  get names() {
		    const names = super.names;
		    addExprNames(names, this.condition);
		    if (this.else) addNames(names, this.else.names);
		    return names;
		  }
		}
		If.kind = "if";
		class For extends BlockNode {}
		For.kind = "for";
		class ForLoop extends For {
		  constructor(iteration) {
		    super();
		    this.iteration = iteration;
		  }
		  render(opts) {
		    return `for(${this.iteration})` + super.render(opts);
		  }
		  optimizeNames(names, constants) {
		    if (!super.optimizeNames(names, constants)) return;
		    this.iteration = optimizeExpr(this.iteration, names, constants);
		    return this;
		  }
		  get names() {
		    return addNames(super.names, this.iteration.names);
		  }
		}
		class ForRange extends For {
		  constructor(varKind, name, from, to) {
		    super();
		    this.varKind = varKind;
		    this.name = name;
		    this.from = from;
		    this.to = to;
		  }
		  render(opts) {
		    const varKind = opts.es5 ? scope_1.varKinds.var : this.varKind;
		    const {
		      name,
		      from,
		      to
		    } = this;
		    return `for(${varKind} ${name}=${from}; ${name}<${to}; ${name}++)` + super.render(opts);
		  }
		  get names() {
		    const names = addExprNames(super.names, this.from);
		    return addExprNames(names, this.to);
		  }
		}
		class ForIter extends For {
		  constructor(loop, varKind, name, iterable) {
		    super();
		    this.loop = loop;
		    this.varKind = varKind;
		    this.name = name;
		    this.iterable = iterable;
		  }
		  render(opts) {
		    return `for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})` + super.render(opts);
		  }
		  optimizeNames(names, constants) {
		    if (!super.optimizeNames(names, constants)) return;
		    this.iterable = optimizeExpr(this.iterable, names, constants);
		    return this;
		  }
		  get names() {
		    return addNames(super.names, this.iterable.names);
		  }
		}
		class Func extends BlockNode {
		  constructor(name, args, async) {
		    super();
		    this.name = name;
		    this.args = args;
		    this.async = async;
		  }
		  render(opts) {
		    const _async = this.async ? "async " : "";
		    return `${_async}function ${this.name}(${this.args})` + super.render(opts);
		  }
		}
		Func.kind = "func";
		class Return extends ParentNode {
		  render(opts) {
		    return "return " + super.render(opts);
		  }
		}
		Return.kind = "return";
		class Try extends BlockNode {
		  render(opts) {
		    let code = "try" + super.render(opts);
		    if (this.catch) code += this.catch.render(opts);
		    if (this.finally) code += this.finally.render(opts);
		    return code;
		  }
		  optimizeNodes() {
		    var _a, _b;
		    super.optimizeNodes();
		    (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNodes();
		    (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNodes();
		    return this;
		  }
		  optimizeNames(names, constants) {
		    var _a, _b;
		    super.optimizeNames(names, constants);
		    (_a = this.catch) === null || _a === void 0 ? void 0 : _a.optimizeNames(names, constants);
		    (_b = this.finally) === null || _b === void 0 ? void 0 : _b.optimizeNames(names, constants);
		    return this;
		  }
		  get names() {
		    const names = super.names;
		    if (this.catch) addNames(names, this.catch.names);
		    if (this.finally) addNames(names, this.finally.names);
		    return names;
		  }
		}
		class Catch extends BlockNode {
		  constructor(error) {
		    super();
		    this.error = error;
		  }
		  render(opts) {
		    return `catch(${this.error})` + super.render(opts);
		  }
		}
		Catch.kind = "catch";
		class Finally extends BlockNode {
		  render(opts) {
		    return "finally" + super.render(opts);
		  }
		}
		Finally.kind = "finally";
		class CodeGen {
		  constructor(extScope, opts = {}) {
		    this._values = {};
		    this._blockStarts = [];
		    this._constants = {};
		    this.opts = {
		      ...opts,
		      _n: opts.lines ? "\n" : ""
		    };
		    this._extScope = extScope;
		    this._scope = new scope_1.Scope({
		      parent: extScope
		    });
		    this._nodes = [new Root()];
		  }
		  toString() {
		    return this._root.render(this.opts);
		  }
		  // returns unique name in the internal scope
		  name(prefix) {
		    return this._scope.name(prefix);
		  }
		  // reserves unique name in the external scope
		  scopeName(prefix) {
		    return this._extScope.name(prefix);
		  }
		  // reserves unique name in the external scope and assigns value to it
		  scopeValue(prefixOrName, value) {
		    const name = this._extScope.value(prefixOrName, value);
		    const vs = this._values[name.prefix] || (this._values[name.prefix] = new Set());
		    vs.add(name);
		    return name;
		  }
		  getScopeValue(prefix, keyOrRef) {
		    return this._extScope.getValue(prefix, keyOrRef);
		  }
		  // return code that assigns values in the external scope to the names that are used internally
		  // (same names that were returned by gen.scopeName or gen.scopeValue)
		  scopeRefs(scopeName) {
		    return this._extScope.scopeRefs(scopeName, this._values);
		  }
		  scopeCode() {
		    return this._extScope.scopeCode(this._values);
		  }
		  _def(varKind, nameOrPrefix, rhs, constant) {
		    const name = this._scope.toName(nameOrPrefix);
		    if (rhs !== undefined && constant) this._constants[name.str] = rhs;
		    this._leafNode(new Def(varKind, name, rhs));
		    return name;
		  }
		  // `const` declaration (`var` in es5 mode)
		  const(nameOrPrefix, rhs, _constant) {
		    return this._def(scope_1.varKinds.const, nameOrPrefix, rhs, _constant);
		  }
		  // `let` declaration with optional assignment (`var` in es5 mode)
		  let(nameOrPrefix, rhs, _constant) {
		    return this._def(scope_1.varKinds.let, nameOrPrefix, rhs, _constant);
		  }
		  // `var` declaration with optional assignment
		  var(nameOrPrefix, rhs, _constant) {
		    return this._def(scope_1.varKinds.var, nameOrPrefix, rhs, _constant);
		  }
		  // assignment code
		  assign(lhs, rhs, sideEffects) {
		    return this._leafNode(new Assign(lhs, rhs, sideEffects));
		  }
		  // `+=` code
		  add(lhs, rhs) {
		    return this._leafNode(new AssignOp(lhs, exports.operators.ADD, rhs));
		  }
		  // appends passed SafeExpr to code or executes Block
		  code(c) {
		    if (typeof c == "function") c();else if (c !== code_1.nil) this._leafNode(new AnyCode(c));
		    return this;
		  }
		  // returns code for object literal for the passed argument list of key-value pairs
		  object(...keyValues) {
		    const code = ["{"];
		    for (const [key, value] of keyValues) {
		      if (code.length > 1) code.push(",");
		      code.push(key);
		      if (key !== value || this.opts.es5) {
		        code.push(":");
		        (0, code_1.addCodeArg)(code, value);
		      }
		    }
		    code.push("}");
		    return new code_1._Code(code);
		  }
		  // `if` clause (or statement if `thenBody` and, optionally, `elseBody` are passed)
		  if(condition, thenBody, elseBody) {
		    this._blockNode(new If(condition));
		    if (thenBody && elseBody) {
		      this.code(thenBody).else().code(elseBody).endIf();
		    } else if (thenBody) {
		      this.code(thenBody).endIf();
		    } else if (elseBody) {
		      throw new Error('CodeGen: "else" body without "then" body');
		    }
		    return this;
		  }
		  // `else if` clause - invalid without `if` or after `else` clauses
		  elseIf(condition) {
		    return this._elseNode(new If(condition));
		  }
		  // `else` clause - only valid after `if` or `else if` clauses
		  else() {
		    return this._elseNode(new Else());
		  }
		  // end `if` statement (needed if gen.if was used only with condition)
		  endIf() {
		    return this._endBlockNode(If, Else);
		  }
		  _for(node, forBody) {
		    this._blockNode(node);
		    if (forBody) this.code(forBody).endFor();
		    return this;
		  }
		  // a generic `for` clause (or statement if `forBody` is passed)
		  for(iteration, forBody) {
		    return this._for(new ForLoop(iteration), forBody);
		  }
		  // `for` statement for a range of values
		  forRange(nameOrPrefix, from, to, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.let) {
		    const name = this._scope.toName(nameOrPrefix);
		    return this._for(new ForRange(varKind, name, from, to), () => forBody(name));
		  }
		  // `for-of` statement (in es5 mode replace with a normal for loop)
		  forOf(nameOrPrefix, iterable, forBody, varKind = scope_1.varKinds.const) {
		    const name = this._scope.toName(nameOrPrefix);
		    if (this.opts.es5) {
		      const arr = iterable instanceof code_1.Name ? iterable : this.var("_arr", iterable);
		      return this.forRange("_i", 0, (0, code_1._)`${arr}.length`, i => {
		        this.var(name, (0, code_1._)`${arr}[${i}]`);
		        forBody(name);
		      });
		    }
		    return this._for(new ForIter("of", varKind, name, iterable), () => forBody(name));
		  }
		  // `for-in` statement.
		  // With option `ownProperties` replaced with a `for-of` loop for object keys
		  forIn(nameOrPrefix, obj, forBody, varKind = this.opts.es5 ? scope_1.varKinds.var : scope_1.varKinds.const) {
		    if (this.opts.ownProperties) {
		      return this.forOf(nameOrPrefix, (0, code_1._)`Object.keys(${obj})`, forBody);
		    }
		    const name = this._scope.toName(nameOrPrefix);
		    return this._for(new ForIter("in", varKind, name, obj), () => forBody(name));
		  }
		  // end `for` loop
		  endFor() {
		    return this._endBlockNode(For);
		  }
		  // `label` statement
		  label(label) {
		    return this._leafNode(new Label(label));
		  }
		  // `break` statement
		  break(label) {
		    return this._leafNode(new Break(label));
		  }
		  // `return` statement
		  return(value) {
		    const node = new Return();
		    this._blockNode(node);
		    this.code(value);
		    if (node.nodes.length !== 1) throw new Error('CodeGen: "return" should have one node');
		    return this._endBlockNode(Return);
		  }
		  // `try` statement
		  try(tryBody, catchCode, finallyCode) {
		    if (!catchCode && !finallyCode) throw new Error('CodeGen: "try" without "catch" and "finally"');
		    const node = new Try();
		    this._blockNode(node);
		    this.code(tryBody);
		    if (catchCode) {
		      const error = this.name("e");
		      this._currNode = node.catch = new Catch(error);
		      catchCode(error);
		    }
		    if (finallyCode) {
		      this._currNode = node.finally = new Finally();
		      this.code(finallyCode);
		    }
		    return this._endBlockNode(Catch, Finally);
		  }
		  // `throw` statement
		  throw(error) {
		    return this._leafNode(new Throw(error));
		  }
		  // start self-balancing block
		  block(body, nodeCount) {
		    this._blockStarts.push(this._nodes.length);
		    if (body) this.code(body).endBlock(nodeCount);
		    return this;
		  }
		  // end the current self-balancing block
		  endBlock(nodeCount) {
		    const len = this._blockStarts.pop();
		    if (len === undefined) throw new Error("CodeGen: not in self-balancing block");
		    const toClose = this._nodes.length - len;
		    if (toClose < 0 || nodeCount !== undefined && toClose !== nodeCount) {
		      throw new Error(`CodeGen: wrong number of nodes: ${toClose} vs ${nodeCount} expected`);
		    }
		    this._nodes.length = len;
		    return this;
		  }
		  // `function` heading (or definition if funcBody is passed)
		  func(name, args = code_1.nil, async, funcBody) {
		    this._blockNode(new Func(name, args, async));
		    if (funcBody) this.code(funcBody).endFunc();
		    return this;
		  }
		  // end function definition
		  endFunc() {
		    return this._endBlockNode(Func);
		  }
		  optimize(n = 1) {
		    while (n-- > 0) {
		      this._root.optimizeNodes();
		      this._root.optimizeNames(this._root.names, this._constants);
		    }
		  }
		  _leafNode(node) {
		    this._currNode.nodes.push(node);
		    return this;
		  }
		  _blockNode(node) {
		    this._currNode.nodes.push(node);
		    this._nodes.push(node);
		  }
		  _endBlockNode(N1, N2) {
		    const n = this._currNode;
		    if (n instanceof N1 || N2 && n instanceof N2) {
		      this._nodes.pop();
		      return this;
		    }
		    throw new Error(`CodeGen: not in block "${N2 ? `${N1.kind}/${N2.kind}` : N1.kind}"`);
		  }
		  _elseNode(node) {
		    const n = this._currNode;
		    if (!(n instanceof If)) {
		      throw new Error('CodeGen: "else" without "if"');
		    }
		    this._currNode = n.else = node;
		    return this;
		  }
		  get _root() {
		    return this._nodes[0];
		  }
		  get _currNode() {
		    const ns = this._nodes;
		    return ns[ns.length - 1];
		  }
		  set _currNode(node) {
		    const ns = this._nodes;
		    ns[ns.length - 1] = node;
		  }
		}
		exports.CodeGen = CodeGen;
		function addNames(names, from) {
		  for (const n in from) names[n] = (names[n] || 0) + (from[n] || 0);
		  return names;
		}
		function addExprNames(names, from) {
		  return from instanceof code_1._CodeOrName ? addNames(names, from.names) : names;
		}
		function optimizeExpr(expr, names, constants) {
		  if (expr instanceof code_1.Name) return replaceName(expr);
		  if (!canOptimize(expr)) return expr;
		  return new code_1._Code(expr._items.reduce((items, c) => {
		    if (c instanceof code_1.Name) c = replaceName(c);
		    if (c instanceof code_1._Code) items.push(...c._items);else items.push(c);
		    return items;
		  }, []));
		  function replaceName(n) {
		    const c = constants[n.str];
		    if (c === undefined || names[n.str] !== 1) return n;
		    delete names[n.str];
		    return c;
		  }
		  function canOptimize(e) {
		    return e instanceof code_1._Code && e._items.some(c => c instanceof code_1.Name && names[c.str] === 1 && constants[c.str] !== undefined);
		  }
		}
		function subtractNames(names, from) {
		  for (const n in from) names[n] = (names[n] || 0) - (from[n] || 0);
		}
		function not(x) {
		  return typeof x == "boolean" || typeof x == "number" || x === null ? !x : (0, code_1._)`!${par(x)}`;
		}
		exports.not = not;
		const andCode = mappend(exports.operators.AND);
		// boolean AND (&&) expression with the passed arguments
		function and(...args) {
		  return args.reduce(andCode);
		}
		exports.and = and;
		const orCode = mappend(exports.operators.OR);
		// boolean OR (||) expression with the passed arguments
		function or(...args) {
		  return args.reduce(orCode);
		}
		exports.or = or;
		function mappend(op) {
		  return (x, y) => x === code_1.nil ? y : y === code_1.nil ? x : (0, code_1._)`${par(x)} ${op} ${par(y)}`;
		}
		function par(x) {
		  return x instanceof code_1.Name ? x : (0, code_1._)`(${x})`;
		} 
	} (codegen));

	var util = {};

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.checkStrictMode = exports.getErrorPath = exports.Type = exports.useFunc = exports.setEvaluated = exports.evaluatedPropsToName = exports.mergeEvaluated = exports.eachItem = exports.unescapeJsonPointer = exports.escapeJsonPointer = exports.escapeFragment = exports.unescapeFragment = exports.schemaRefOrVal = exports.schemaHasRulesButRef = exports.schemaHasRules = exports.checkUnknownRules = exports.alwaysValidSchema = exports.toHash = void 0;
		const codegen_1 = codegen;
		const code_1 = code$1;
		// TODO refactor to use Set
		function toHash(arr) {
		  const hash = {};
		  for (const item of arr) hash[item] = true;
		  return hash;
		}
		exports.toHash = toHash;
		function alwaysValidSchema(it, schema) {
		  if (typeof schema == "boolean") return schema;
		  if (Object.keys(schema).length === 0) return true;
		  checkUnknownRules(it, schema);
		  return !schemaHasRules(schema, it.self.RULES.all);
		}
		exports.alwaysValidSchema = alwaysValidSchema;
		function checkUnknownRules(it, schema = it.schema) {
		  const {
		    opts,
		    self
		  } = it;
		  if (!opts.strictSchema) return;
		  if (typeof schema === "boolean") return;
		  const rules = self.RULES.keywords;
		  for (const key in schema) {
		    if (!rules[key]) checkStrictMode(it, `unknown keyword: "${key}"`);
		  }
		}
		exports.checkUnknownRules = checkUnknownRules;
		function schemaHasRules(schema, rules) {
		  if (typeof schema == "boolean") return !schema;
		  for (const key in schema) if (rules[key]) return true;
		  return false;
		}
		exports.schemaHasRules = schemaHasRules;
		function schemaHasRulesButRef(schema, RULES) {
		  if (typeof schema == "boolean") return !schema;
		  for (const key in schema) if (key !== "$ref" && RULES.all[key]) return true;
		  return false;
		}
		exports.schemaHasRulesButRef = schemaHasRulesButRef;
		function schemaRefOrVal({
		  topSchemaRef,
		  schemaPath
		}, schema, keyword, $data) {
		  if (!$data) {
		    if (typeof schema == "number" || typeof schema == "boolean") return schema;
		    if (typeof schema == "string") return (0, codegen_1._)`${schema}`;
		  }
		  return (0, codegen_1._)`${topSchemaRef}${schemaPath}${(0, codegen_1.getProperty)(keyword)}`;
		}
		exports.schemaRefOrVal = schemaRefOrVal;
		function unescapeFragment(str) {
		  return unescapeJsonPointer(decodeURIComponent(str));
		}
		exports.unescapeFragment = unescapeFragment;
		function escapeFragment(str) {
		  return encodeURIComponent(escapeJsonPointer(str));
		}
		exports.escapeFragment = escapeFragment;
		function escapeJsonPointer(str) {
		  if (typeof str == "number") return `${str}`;
		  return str.replace(/~/g, "~0").replace(/\//g, "~1");
		}
		exports.escapeJsonPointer = escapeJsonPointer;
		function unescapeJsonPointer(str) {
		  return str.replace(/~1/g, "/").replace(/~0/g, "~");
		}
		exports.unescapeJsonPointer = unescapeJsonPointer;
		function eachItem(xs, f) {
		  if (Array.isArray(xs)) {
		    for (const x of xs) f(x);
		  } else {
		    f(xs);
		  }
		}
		exports.eachItem = eachItem;
		function makeMergeEvaluated({
		  mergeNames,
		  mergeToName,
		  mergeValues,
		  resultToName
		}) {
		  return (gen, from, to, toName) => {
		    const res = to === undefined ? from : to instanceof codegen_1.Name ? (from instanceof codegen_1.Name ? mergeNames(gen, from, to) : mergeToName(gen, from, to), to) : from instanceof codegen_1.Name ? (mergeToName(gen, to, from), from) : mergeValues(from, to);
		    return toName === codegen_1.Name && !(res instanceof codegen_1.Name) ? resultToName(gen, res) : res;
		  };
		}
		exports.mergeEvaluated = {
		  props: makeMergeEvaluated({
		    mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => {
		      gen.if((0, codegen_1._)`${from} === true`, () => gen.assign(to, true), () => gen.assign(to, (0, codegen_1._)`${to} || {}`).code((0, codegen_1._)`Object.assign(${to}, ${from})`));
		    }),
		    mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => {
		      if (from === true) {
		        gen.assign(to, true);
		      } else {
		        gen.assign(to, (0, codegen_1._)`${to} || {}`);
		        setEvaluated(gen, to, from);
		      }
		    }),
		    mergeValues: (from, to) => from === true ? true : {
		      ...from,
		      ...to
		    },
		    resultToName: evaluatedPropsToName
		  }),
		  items: makeMergeEvaluated({
		    mergeNames: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true && ${from} !== undefined`, () => gen.assign(to, (0, codegen_1._)`${from} === true ? true : ${to} > ${from} ? ${to} : ${from}`)),
		    mergeToName: (gen, from, to) => gen.if((0, codegen_1._)`${to} !== true`, () => gen.assign(to, from === true ? true : (0, codegen_1._)`${to} > ${from} ? ${to} : ${from}`)),
		    mergeValues: (from, to) => from === true ? true : Math.max(from, to),
		    resultToName: (gen, items) => gen.var("items", items)
		  })
		};
		function evaluatedPropsToName(gen, ps) {
		  if (ps === true) return gen.var("props", true);
		  const props = gen.var("props", (0, codegen_1._)`{}`);
		  if (ps !== undefined) setEvaluated(gen, props, ps);
		  return props;
		}
		exports.evaluatedPropsToName = evaluatedPropsToName;
		function setEvaluated(gen, props, ps) {
		  Object.keys(ps).forEach(p => gen.assign((0, codegen_1._)`${props}${(0, codegen_1.getProperty)(p)}`, true));
		}
		exports.setEvaluated = setEvaluated;
		const snippets = {};
		function useFunc(gen, f) {
		  return gen.scopeValue("func", {
		    ref: f,
		    code: snippets[f.code] || (snippets[f.code] = new code_1._Code(f.code))
		  });
		}
		exports.useFunc = useFunc;
		var Type;
		(function (Type) {
		  Type[Type["Num"] = 0] = "Num";
		  Type[Type["Str"] = 1] = "Str";
		})(Type = exports.Type || (exports.Type = {}));
		function getErrorPath(dataProp, dataPropType, jsPropertySyntax) {
		  // let path
		  if (dataProp instanceof codegen_1.Name) {
		    const isNumber = dataPropType === Type.Num;
		    return jsPropertySyntax ? isNumber ? (0, codegen_1._)`"[" + ${dataProp} + "]"` : (0, codegen_1._)`"['" + ${dataProp} + "']"` : isNumber ? (0, codegen_1._)`"/" + ${dataProp}` : (0, codegen_1._)`"/" + ${dataProp}.replace(/~/g, "~0").replace(/\\//g, "~1")`; // TODO maybe use global escapePointer
		  }
		  return jsPropertySyntax ? (0, codegen_1.getProperty)(dataProp).toString() : "/" + escapeJsonPointer(dataProp);
		}
		exports.getErrorPath = getErrorPath;
		function checkStrictMode(it, msg, mode = it.opts.strictSchema) {
		  if (!mode) return;
		  msg = `strict mode: ${msg}`;
		  if (mode === true) throw new Error(msg);
		  it.self.logger.warn(msg);
		}
		exports.checkStrictMode = checkStrictMode; 
	} (util));

	var names = {};

	var hasRequiredNames;

	function requireNames () {
		if (hasRequiredNames) return names;
		hasRequiredNames = 1;

		Object.defineProperty(names, "__esModule", {
		  value: true
		});
		const codegen_1 = codegen;
		const names$1 = {
		  // validation function arguments
		  data: new codegen_1.Name("data"),
		  // args passed from referencing schema
		  valCxt: new codegen_1.Name("valCxt"),
		  instancePath: new codegen_1.Name("instancePath"),
		  parentData: new codegen_1.Name("parentData"),
		  parentDataProperty: new codegen_1.Name("parentDataProperty"),
		  rootData: new codegen_1.Name("rootData"),
		  dynamicAnchors: new codegen_1.Name("dynamicAnchors"),
		  // function scoped variables
		  vErrors: new codegen_1.Name("vErrors"),
		  errors: new codegen_1.Name("errors"),
		  this: new codegen_1.Name("this"),
		  // "globals"
		  self: new codegen_1.Name("self"),
		  scope: new codegen_1.Name("scope"),
		  // JTD serialize/parse name for JSON string and position
		  json: new codegen_1.Name("json"),
		  jsonPos: new codegen_1.Name("jsonPos"),
		  jsonLen: new codegen_1.Name("jsonLen"),
		  jsonPart: new codegen_1.Name("jsonPart")
		};
		names.default = names$1;
		return names;
	}

	var hasRequiredErrors;

	function requireErrors () {
		if (hasRequiredErrors) return errors;
		hasRequiredErrors = 1;
		(function (exports) {

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			exports.extendErrors = exports.resetErrorsCount = exports.reportExtraError = exports.reportError = exports.keyword$DataError = exports.keywordError = void 0;
			const codegen_1 = codegen;
			const util_1 = util;
			const names_1 = requireNames();
			exports.keywordError = {
			  message: ({
			    keyword
			  }) => (0, codegen_1.str)`must pass "${keyword}" keyword validation`
			};
			exports.keyword$DataError = {
			  message: ({
			    keyword,
			    schemaType
			  }) => schemaType ? (0, codegen_1.str)`"${keyword}" keyword must be ${schemaType} ($data)` : (0, codegen_1.str)`"${keyword}" keyword is invalid ($data)`
			};
			function reportError(cxt, error = exports.keywordError, errorPaths, overrideAllErrors) {
			  const {
			    it
			  } = cxt;
			  const {
			    gen,
			    compositeRule,
			    allErrors
			  } = it;
			  const errObj = errorObjectCode(cxt, error, errorPaths);
			  if (overrideAllErrors !== null && overrideAllErrors !== void 0 ? overrideAllErrors : compositeRule || allErrors) {
			    addError(gen, errObj);
			  } else {
			    returnErrors(it, (0, codegen_1._)`[${errObj}]`);
			  }
			}
			exports.reportError = reportError;
			function reportExtraError(cxt, error = exports.keywordError, errorPaths) {
			  const {
			    it
			  } = cxt;
			  const {
			    gen,
			    compositeRule,
			    allErrors
			  } = it;
			  const errObj = errorObjectCode(cxt, error, errorPaths);
			  addError(gen, errObj);
			  if (!(compositeRule || allErrors)) {
			    returnErrors(it, names_1.default.vErrors);
			  }
			}
			exports.reportExtraError = reportExtraError;
			function resetErrorsCount(gen, errsCount) {
			  gen.assign(names_1.default.errors, errsCount);
			  gen.if((0, codegen_1._)`${names_1.default.vErrors} !== null`, () => gen.if(errsCount, () => gen.assign((0, codegen_1._)`${names_1.default.vErrors}.length`, errsCount), () => gen.assign(names_1.default.vErrors, null)));
			}
			exports.resetErrorsCount = resetErrorsCount;
			function extendErrors({
			  gen,
			  keyword,
			  schemaValue,
			  data,
			  errsCount,
			  it
			}) {
			  /* istanbul ignore if */
			  if (errsCount === undefined) throw new Error("ajv implementation error");
			  const err = gen.name("err");
			  gen.forRange("i", errsCount, names_1.default.errors, i => {
			    gen.const(err, (0, codegen_1._)`${names_1.default.vErrors}[${i}]`);
			    gen.if((0, codegen_1._)`${err}.instancePath === undefined`, () => gen.assign((0, codegen_1._)`${err}.instancePath`, (0, codegen_1.strConcat)(names_1.default.instancePath, it.errorPath)));
			    gen.assign((0, codegen_1._)`${err}.schemaPath`, (0, codegen_1.str)`${it.errSchemaPath}/${keyword}`);
			    if (it.opts.verbose) {
			      gen.assign((0, codegen_1._)`${err}.schema`, schemaValue);
			      gen.assign((0, codegen_1._)`${err}.data`, data);
			    }
			  });
			}
			exports.extendErrors = extendErrors;
			function addError(gen, errObj) {
			  const err = gen.const("err", errObj);
			  gen.if((0, codegen_1._)`${names_1.default.vErrors} === null`, () => gen.assign(names_1.default.vErrors, (0, codegen_1._)`[${err}]`), (0, codegen_1._)`${names_1.default.vErrors}.push(${err})`);
			  gen.code((0, codegen_1._)`${names_1.default.errors}++`);
			}
			function returnErrors(it, errs) {
			  const {
			    gen,
			    validateName,
			    schemaEnv
			  } = it;
			  if (schemaEnv.$async) {
			    gen.throw((0, codegen_1._)`new ${it.ValidationError}(${errs})`);
			  } else {
			    gen.assign((0, codegen_1._)`${validateName}.errors`, errs);
			    gen.return(false);
			  }
			}
			const E = {
			  keyword: new codegen_1.Name("keyword"),
			  schemaPath: new codegen_1.Name("schemaPath"),
			  params: new codegen_1.Name("params"),
			  propertyName: new codegen_1.Name("propertyName"),
			  message: new codegen_1.Name("message"),
			  schema: new codegen_1.Name("schema"),
			  parentSchema: new codegen_1.Name("parentSchema")
			};
			function errorObjectCode(cxt, error, errorPaths) {
			  const {
			    createErrors
			  } = cxt.it;
			  if (createErrors === false) return (0, codegen_1._)`{}`;
			  return errorObject(cxt, error, errorPaths);
			}
			function errorObject(cxt, error, errorPaths = {}) {
			  const {
			    gen,
			    it
			  } = cxt;
			  const keyValues = [errorInstancePath(it, errorPaths), errorSchemaPath(cxt, errorPaths)];
			  extraErrorProps(cxt, error, keyValues);
			  return gen.object(...keyValues);
			}
			function errorInstancePath({
			  errorPath
			}, {
			  instancePath
			}) {
			  const instPath = instancePath ? (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(instancePath, util_1.Type.Str)}` : errorPath;
			  return [names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, instPath)];
			}
			function errorSchemaPath({
			  keyword,
			  it: {
			    errSchemaPath
			  }
			}, {
			  schemaPath,
			  parentSchema
			}) {
			  let schPath = parentSchema ? errSchemaPath : (0, codegen_1.str)`${errSchemaPath}/${keyword}`;
			  if (schemaPath) {
			    schPath = (0, codegen_1.str)`${schPath}${(0, util_1.getErrorPath)(schemaPath, util_1.Type.Str)}`;
			  }
			  return [E.schemaPath, schPath];
			}
			function extraErrorProps(cxt, {
			  params,
			  message
			}, keyValues) {
			  const {
			    keyword,
			    data,
			    schemaValue,
			    it
			  } = cxt;
			  const {
			    opts,
			    propertyName,
			    topSchemaRef,
			    schemaPath
			  } = it;
			  keyValues.push([E.keyword, keyword], [E.params, typeof params == "function" ? params(cxt) : params || (0, codegen_1._)`{}`]);
			  if (opts.messages) {
			    keyValues.push([E.message, typeof message == "function" ? message(cxt) : message]);
			  }
			  if (opts.verbose) {
			    keyValues.push([E.schema, schemaValue], [E.parentSchema, (0, codegen_1._)`${topSchemaRef}${schemaPath}`], [names_1.default.data, data]);
			  }
			  if (propertyName) keyValues.push([E.propertyName, propertyName]);
			} 
		} (errors));
		return errors;
	}

	var hasRequiredBoolSchema;

	function requireBoolSchema () {
		if (hasRequiredBoolSchema) return boolSchema;
		hasRequiredBoolSchema = 1;

		Object.defineProperty(boolSchema, "__esModule", {
		  value: true
		});
		boolSchema.boolOrEmptySchema = boolSchema.topBoolOrEmptySchema = void 0;
		const errors_1 = requireErrors();
		const codegen_1 = codegen;
		const names_1 = requireNames();
		const boolError = {
		  message: "boolean schema is false"
		};
		function topBoolOrEmptySchema(it) {
		  const {
		    gen,
		    schema,
		    validateName
		  } = it;
		  if (schema === false) {
		    falseSchemaError(it, false);
		  } else if (typeof schema == "object" && schema.$async === true) {
		    gen.return(names_1.default.data);
		  } else {
		    gen.assign((0, codegen_1._)`${validateName}.errors`, null);
		    gen.return(true);
		  }
		}
		boolSchema.topBoolOrEmptySchema = topBoolOrEmptySchema;
		function boolOrEmptySchema(it, valid) {
		  const {
		    gen,
		    schema
		  } = it;
		  if (schema === false) {
		    gen.var(valid, false); // TODO var
		    falseSchemaError(it);
		  } else {
		    gen.var(valid, true); // TODO var
		  }
		}
		boolSchema.boolOrEmptySchema = boolOrEmptySchema;
		function falseSchemaError(it, overrideAllErrors) {
		  const {
		    gen,
		    data
		  } = it;
		  // TODO maybe some other interface should be used for non-keyword validation errors...
		  const cxt = {
		    gen,
		    keyword: "false schema",
		    data,
		    schema: false,
		    schemaCode: false,
		    schemaValue: false,
		    params: {},
		    it
		  };
		  (0, errors_1.reportError)(cxt, boolError, undefined, overrideAllErrors);
		}
		return boolSchema;
	}

	var dataType = {};

	var rules = {};

	Object.defineProperty(rules, "__esModule", {
	  value: true
	});
	rules.getRules = rules.isJSONType = void 0;
	const _jsonTypes = ["string", "number", "integer", "boolean", "null", "object", "array"];
	const jsonTypes = new Set(_jsonTypes);
	function isJSONType(x) {
	  return typeof x == "string" && jsonTypes.has(x);
	}
	rules.isJSONType = isJSONType;
	function getRules$1() {
	  const groups = {
	    number: {
	      type: "number",
	      rules: []
	    },
	    string: {
	      type: "string",
	      rules: []
	    },
	    array: {
	      type: "array",
	      rules: []
	    },
	    object: {
	      type: "object",
	      rules: []
	    }
	  };
	  return {
	    types: {
	      ...groups,
	      integer: true,
	      boolean: true,
	      null: true
	    },
	    rules: [{
	      rules: []
	    }, groups.number, groups.string, groups.array, groups.object],
	    post: {
	      rules: []
	    },
	    all: {},
	    keywords: {}
	  };
	}
	rules.getRules = getRules$1;

	var applicability = {};

	var hasRequiredApplicability;

	function requireApplicability () {
		if (hasRequiredApplicability) return applicability;
		hasRequiredApplicability = 1;

		Object.defineProperty(applicability, "__esModule", {
		  value: true
		});
		applicability.shouldUseRule = applicability.shouldUseGroup = applicability.schemaHasRulesForType = void 0;
		function schemaHasRulesForType({
		  schema,
		  self
		}, type) {
		  const group = self.RULES.types[type];
		  return group && group !== true && shouldUseGroup(schema, group);
		}
		applicability.schemaHasRulesForType = schemaHasRulesForType;
		function shouldUseGroup(schema, group) {
		  return group.rules.some(rule => shouldUseRule(schema, rule));
		}
		applicability.shouldUseGroup = shouldUseGroup;
		function shouldUseRule(schema, rule) {
		  var _a;
		  return schema[rule.keyword] !== undefined || ((_a = rule.definition.implements) === null || _a === void 0 ? void 0 : _a.some(kwd => schema[kwd] !== undefined));
		}
		applicability.shouldUseRule = shouldUseRule;
		return applicability;
	}

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.reportTypeError = exports.checkDataTypes = exports.checkDataType = exports.coerceAndCheckDataType = exports.getJSONTypes = exports.getSchemaTypes = exports.DataType = void 0;
		const rules_1 = rules;
		const applicability_1 = requireApplicability();
		const errors_1 = requireErrors();
		const codegen_1 = codegen;
		const util_1 = util;
		var DataType;
		(function (DataType) {
		  DataType[DataType["Correct"] = 0] = "Correct";
		  DataType[DataType["Wrong"] = 1] = "Wrong";
		})(DataType = exports.DataType || (exports.DataType = {}));
		function getSchemaTypes(schema) {
		  const types = getJSONTypes(schema.type);
		  const hasNull = types.includes("null");
		  if (hasNull) {
		    if (schema.nullable === false) throw new Error("type: null contradicts nullable: false");
		  } else {
		    if (!types.length && schema.nullable !== undefined) {
		      throw new Error('"nullable" cannot be used without "type"');
		    }
		    if (schema.nullable === true) types.push("null");
		  }
		  return types;
		}
		exports.getSchemaTypes = getSchemaTypes;
		function getJSONTypes(ts) {
		  const types = Array.isArray(ts) ? ts : ts ? [ts] : [];
		  if (types.every(rules_1.isJSONType)) return types;
		  throw new Error("type must be JSONType or JSONType[]: " + types.join(","));
		}
		exports.getJSONTypes = getJSONTypes;
		function coerceAndCheckDataType(it, types) {
		  const {
		    gen,
		    data,
		    opts
		  } = it;
		  const coerceTo = coerceToTypes(types, opts.coerceTypes);
		  const checkTypes = types.length > 0 && !(coerceTo.length === 0 && types.length === 1 && (0, applicability_1.schemaHasRulesForType)(it, types[0]));
		  if (checkTypes) {
		    const wrongType = checkDataTypes(types, data, opts.strictNumbers, DataType.Wrong);
		    gen.if(wrongType, () => {
		      if (coerceTo.length) coerceData(it, types, coerceTo);else reportTypeError(it);
		    });
		  }
		  return checkTypes;
		}
		exports.coerceAndCheckDataType = coerceAndCheckDataType;
		const COERCIBLE = new Set(["string", "number", "integer", "boolean", "null"]);
		function coerceToTypes(types, coerceTypes) {
		  return coerceTypes ? types.filter(t => COERCIBLE.has(t) || coerceTypes === "array" && t === "array") : [];
		}
		function coerceData(it, types, coerceTo) {
		  const {
		    gen,
		    data,
		    opts
		  } = it;
		  const dataType = gen.let("dataType", (0, codegen_1._)`typeof ${data}`);
		  const coerced = gen.let("coerced", (0, codegen_1._)`undefined`);
		  if (opts.coerceTypes === "array") {
		    gen.if((0, codegen_1._)`${dataType} == 'object' && Array.isArray(${data}) && ${data}.length == 1`, () => gen.assign(data, (0, codegen_1._)`${data}[0]`).assign(dataType, (0, codegen_1._)`typeof ${data}`).if(checkDataTypes(types, data, opts.strictNumbers), () => gen.assign(coerced, data)));
		  }
		  gen.if((0, codegen_1._)`${coerced} !== undefined`);
		  for (const t of coerceTo) {
		    if (COERCIBLE.has(t) || t === "array" && opts.coerceTypes === "array") {
		      coerceSpecificType(t);
		    }
		  }
		  gen.else();
		  reportTypeError(it);
		  gen.endIf();
		  gen.if((0, codegen_1._)`${coerced} !== undefined`, () => {
		    gen.assign(data, coerced);
		    assignParentData(it, coerced);
		  });
		  function coerceSpecificType(t) {
		    switch (t) {
		      case "string":
		        gen.elseIf((0, codegen_1._)`${dataType} == "number" || ${dataType} == "boolean"`).assign(coerced, (0, codegen_1._)`"" + ${data}`).elseIf((0, codegen_1._)`${data} === null`).assign(coerced, (0, codegen_1._)`""`);
		        return;
		      case "number":
		        gen.elseIf((0, codegen_1._)`${dataType} == "boolean" || ${data} === null
              || (${dataType} == "string" && ${data} && ${data} == +${data})`).assign(coerced, (0, codegen_1._)`+${data}`);
		        return;
		      case "integer":
		        gen.elseIf((0, codegen_1._)`${dataType} === "boolean" || ${data} === null
              || (${dataType} === "string" && ${data} && ${data} == +${data} && !(${data} % 1))`).assign(coerced, (0, codegen_1._)`+${data}`);
		        return;
		      case "boolean":
		        gen.elseIf((0, codegen_1._)`${data} === "false" || ${data} === 0 || ${data} === null`).assign(coerced, false).elseIf((0, codegen_1._)`${data} === "true" || ${data} === 1`).assign(coerced, true);
		        return;
		      case "null":
		        gen.elseIf((0, codegen_1._)`${data} === "" || ${data} === 0 || ${data} === false`);
		        gen.assign(coerced, null);
		        return;
		      case "array":
		        gen.elseIf((0, codegen_1._)`${dataType} === "string" || ${dataType} === "number"
              || ${dataType} === "boolean" || ${data} === null`).assign(coerced, (0, codegen_1._)`[${data}]`);
		    }
		  }
		}
		function assignParentData({
		  gen,
		  parentData,
		  parentDataProperty
		}, expr) {
		  // TODO use gen.property
		  gen.if((0, codegen_1._)`${parentData} !== undefined`, () => gen.assign((0, codegen_1._)`${parentData}[${parentDataProperty}]`, expr));
		}
		function checkDataType(dataType, data, strictNums, correct = DataType.Correct) {
		  const EQ = correct === DataType.Correct ? codegen_1.operators.EQ : codegen_1.operators.NEQ;
		  let cond;
		  switch (dataType) {
		    case "null":
		      return (0, codegen_1._)`${data} ${EQ} null`;
		    case "array":
		      cond = (0, codegen_1._)`Array.isArray(${data})`;
		      break;
		    case "object":
		      cond = (0, codegen_1._)`${data} && typeof ${data} == "object" && !Array.isArray(${data})`;
		      break;
		    case "integer":
		      cond = numCond((0, codegen_1._)`!(${data} % 1) && !isNaN(${data})`);
		      break;
		    case "number":
		      cond = numCond();
		      break;
		    default:
		      return (0, codegen_1._)`typeof ${data} ${EQ} ${dataType}`;
		  }
		  return correct === DataType.Correct ? cond : (0, codegen_1.not)(cond);
		  function numCond(_cond = codegen_1.nil) {
		    return (0, codegen_1.and)((0, codegen_1._)`typeof ${data} == "number"`, _cond, strictNums ? (0, codegen_1._)`isFinite(${data})` : codegen_1.nil);
		  }
		}
		exports.checkDataType = checkDataType;
		function checkDataTypes(dataTypes, data, strictNums, correct) {
		  if (dataTypes.length === 1) {
		    return checkDataType(dataTypes[0], data, strictNums, correct);
		  }
		  let cond;
		  const types = (0, util_1.toHash)(dataTypes);
		  if (types.array && types.object) {
		    const notObj = (0, codegen_1._)`typeof ${data} != "object"`;
		    cond = types.null ? notObj : (0, codegen_1._)`!${data} || ${notObj}`;
		    delete types.null;
		    delete types.array;
		    delete types.object;
		  } else {
		    cond = codegen_1.nil;
		  }
		  if (types.number) delete types.integer;
		  for (const t in types) cond = (0, codegen_1.and)(cond, checkDataType(t, data, strictNums, correct));
		  return cond;
		}
		exports.checkDataTypes = checkDataTypes;
		const typeError = {
		  message: ({
		    schema
		  }) => `must be ${schema}`,
		  params: ({
		    schema,
		    schemaValue
		  }) => typeof schema == "string" ? (0, codegen_1._)`{type: ${schema}}` : (0, codegen_1._)`{type: ${schemaValue}}`
		};
		function reportTypeError(it) {
		  const cxt = getTypeErrorContext(it);
		  (0, errors_1.reportError)(cxt, typeError);
		}
		exports.reportTypeError = reportTypeError;
		function getTypeErrorContext(it) {
		  const {
		    gen,
		    data,
		    schema
		  } = it;
		  const schemaCode = (0, util_1.schemaRefOrVal)(it, schema, "type");
		  return {
		    gen,
		    keyword: "type",
		    data,
		    schema: schema.type,
		    schemaCode,
		    schemaValue: schemaCode,
		    parentSchema: schema,
		    params: {},
		    it
		  };
		} 
	} (dataType));

	var defaults = {};

	var hasRequiredDefaults;

	function requireDefaults () {
		if (hasRequiredDefaults) return defaults;
		hasRequiredDefaults = 1;

		Object.defineProperty(defaults, "__esModule", {
		  value: true
		});
		defaults.assignDefaults = void 0;
		const codegen_1 = codegen;
		const util_1 = util;
		function assignDefaults(it, ty) {
		  const {
		    properties,
		    items
		  } = it.schema;
		  if (ty === "object" && properties) {
		    for (const key in properties) {
		      assignDefault(it, key, properties[key].default);
		    }
		  } else if (ty === "array" && Array.isArray(items)) {
		    items.forEach((sch, i) => assignDefault(it, i, sch.default));
		  }
		}
		defaults.assignDefaults = assignDefaults;
		function assignDefault(it, prop, defaultValue) {
		  const {
		    gen,
		    compositeRule,
		    data,
		    opts
		  } = it;
		  if (defaultValue === undefined) return;
		  const childData = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(prop)}`;
		  if (compositeRule) {
		    (0, util_1.checkStrictMode)(it, `default is ignored for: ${childData}`);
		    return;
		  }
		  let condition = (0, codegen_1._)`${childData} === undefined`;
		  if (opts.useDefaults === "empty") {
		    condition = (0, codegen_1._)`${condition} || ${childData} === null || ${childData} === ""`;
		  }
		  // `${childData} === undefined` +
		  // (opts.useDefaults === "empty" ? ` || ${childData} === null || ${childData} === ""` : "")
		  gen.if(condition, (0, codegen_1._)`${childData} = ${(0, codegen_1.stringify)(defaultValue)}`);
		}
		return defaults;
	}

	var keyword = {};

	var code = {};

	var hasRequiredCode;

	function requireCode () {
		if (hasRequiredCode) return code;
		hasRequiredCode = 1;

		Object.defineProperty(code, "__esModule", {
		  value: true
		});
		code.validateUnion = code.validateArray = code.usePattern = code.callValidateCode = code.schemaProperties = code.allSchemaProperties = code.noPropertyInData = code.propertyInData = code.isOwnProperty = code.hasPropFunc = code.reportMissingProp = code.checkMissingProp = code.checkReportMissingProp = void 0;
		const codegen_1 = codegen;
		const util_1 = util;
		const names_1 = requireNames();
		const util_2 = util;
		function checkReportMissingProp(cxt, prop) {
		  const {
		    gen,
		    data,
		    it
		  } = cxt;
		  gen.if(noPropertyInData(gen, data, prop, it.opts.ownProperties), () => {
		    cxt.setParams({
		      missingProperty: (0, codegen_1._)`${prop}`
		    }, true);
		    cxt.error();
		  });
		}
		code.checkReportMissingProp = checkReportMissingProp;
		function checkMissingProp({
		  gen,
		  data,
		  it: {
		    opts
		  }
		}, properties, missing) {
		  return (0, codegen_1.or)(...properties.map(prop => (0, codegen_1.and)(noPropertyInData(gen, data, prop, opts.ownProperties), (0, codegen_1._)`${missing} = ${prop}`)));
		}
		code.checkMissingProp = checkMissingProp;
		function reportMissingProp(cxt, missing) {
		  cxt.setParams({
		    missingProperty: missing
		  }, true);
		  cxt.error();
		}
		code.reportMissingProp = reportMissingProp;
		function hasPropFunc(gen) {
		  return gen.scopeValue("func", {
		    // eslint-disable-next-line @typescript-eslint/unbound-method
		    ref: Object.prototype.hasOwnProperty,
		    code: (0, codegen_1._)`Object.prototype.hasOwnProperty`
		  });
		}
		code.hasPropFunc = hasPropFunc;
		function isOwnProperty(gen, data, property) {
		  return (0, codegen_1._)`${hasPropFunc(gen)}.call(${data}, ${property})`;
		}
		code.isOwnProperty = isOwnProperty;
		function propertyInData(gen, data, property, ownProperties) {
		  const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} !== undefined`;
		  return ownProperties ? (0, codegen_1._)`${cond} && ${isOwnProperty(gen, data, property)}` : cond;
		}
		code.propertyInData = propertyInData;
		function noPropertyInData(gen, data, property, ownProperties) {
		  const cond = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(property)} === undefined`;
		  return ownProperties ? (0, codegen_1.or)(cond, (0, codegen_1.not)(isOwnProperty(gen, data, property))) : cond;
		}
		code.noPropertyInData = noPropertyInData;
		function allSchemaProperties(schemaMap) {
		  return schemaMap ? Object.keys(schemaMap).filter(p => p !== "__proto__") : [];
		}
		code.allSchemaProperties = allSchemaProperties;
		function schemaProperties(it, schemaMap) {
		  return allSchemaProperties(schemaMap).filter(p => !(0, util_1.alwaysValidSchema)(it, schemaMap[p]));
		}
		code.schemaProperties = schemaProperties;
		function callValidateCode({
		  schemaCode,
		  data,
		  it: {
		    gen,
		    topSchemaRef,
		    schemaPath,
		    errorPath
		  },
		  it
		}, func, context, passSchema) {
		  const dataAndSchema = passSchema ? (0, codegen_1._)`${schemaCode}, ${data}, ${topSchemaRef}${schemaPath}` : data;
		  const valCxt = [[names_1.default.instancePath, (0, codegen_1.strConcat)(names_1.default.instancePath, errorPath)], [names_1.default.parentData, it.parentData], [names_1.default.parentDataProperty, it.parentDataProperty], [names_1.default.rootData, names_1.default.rootData]];
		  if (it.opts.dynamicRef) valCxt.push([names_1.default.dynamicAnchors, names_1.default.dynamicAnchors]);
		  const args = (0, codegen_1._)`${dataAndSchema}, ${gen.object(...valCxt)}`;
		  return context !== codegen_1.nil ? (0, codegen_1._)`${func}.call(${context}, ${args})` : (0, codegen_1._)`${func}(${args})`;
		}
		code.callValidateCode = callValidateCode;
		const newRegExp = (0, codegen_1._)`new RegExp`;
		function usePattern({
		  gen,
		  it: {
		    opts
		  }
		}, pattern) {
		  const u = opts.unicodeRegExp ? "u" : "";
		  const {
		    regExp
		  } = opts.code;
		  const rx = regExp(pattern, u);
		  return gen.scopeValue("pattern", {
		    key: rx.toString(),
		    ref: rx,
		    code: (0, codegen_1._)`${regExp.code === "new RegExp" ? newRegExp : (0, util_2.useFunc)(gen, regExp)}(${pattern}, ${u})`
		  });
		}
		code.usePattern = usePattern;
		function validateArray(cxt) {
		  const {
		    gen,
		    data,
		    keyword,
		    it
		  } = cxt;
		  const valid = gen.name("valid");
		  if (it.allErrors) {
		    const validArr = gen.let("valid", true);
		    validateItems(() => gen.assign(validArr, false));
		    return validArr;
		  }
		  gen.var(valid, true);
		  validateItems(() => gen.break());
		  return valid;
		  function validateItems(notValid) {
		    const len = gen.const("len", (0, codegen_1._)`${data}.length`);
		    gen.forRange("i", 0, len, i => {
		      cxt.subschema({
		        keyword,
		        dataProp: i,
		        dataPropType: util_1.Type.Num
		      }, valid);
		      gen.if((0, codegen_1.not)(valid), notValid);
		    });
		  }
		}
		code.validateArray = validateArray;
		function validateUnion(cxt) {
		  const {
		    gen,
		    schema,
		    keyword,
		    it
		  } = cxt;
		  /* istanbul ignore if */
		  if (!Array.isArray(schema)) throw new Error("ajv implementation error");
		  const alwaysValid = schema.some(sch => (0, util_1.alwaysValidSchema)(it, sch));
		  if (alwaysValid && !it.opts.unevaluated) return;
		  const valid = gen.let("valid", false);
		  const schValid = gen.name("_valid");
		  gen.block(() => schema.forEach((_sch, i) => {
		    const schCxt = cxt.subschema({
		      keyword,
		      schemaProp: i,
		      compositeRule: true
		    }, schValid);
		    gen.assign(valid, (0, codegen_1._)`${valid} || ${schValid}`);
		    const merged = cxt.mergeValidEvaluated(schCxt, schValid);
		    // can short-circuit if `unevaluatedProperties/Items` not supported (opts.unevaluated !== true)
		    // or if all properties and items were evaluated (it.props === true && it.items === true)
		    if (!merged) gen.if((0, codegen_1.not)(valid));
		  }));
		  cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
		}
		code.validateUnion = validateUnion;
		return code;
	}

	var hasRequiredKeyword;

	function requireKeyword () {
		if (hasRequiredKeyword) return keyword;
		hasRequiredKeyword = 1;

		Object.defineProperty(keyword, "__esModule", {
		  value: true
		});
		keyword.validateKeywordUsage = keyword.validSchemaType = keyword.funcKeywordCode = keyword.macroKeywordCode = void 0;
		const codegen_1 = codegen;
		const names_1 = requireNames();
		const code_1 = requireCode();
		const errors_1 = requireErrors();
		function macroKeywordCode(cxt, def) {
		  const {
		    gen,
		    keyword,
		    schema,
		    parentSchema,
		    it
		  } = cxt;
		  const macroSchema = def.macro.call(it.self, schema, parentSchema, it);
		  const schemaRef = useKeyword(gen, keyword, macroSchema);
		  if (it.opts.validateSchema !== false) it.self.validateSchema(macroSchema, true);
		  const valid = gen.name("valid");
		  cxt.subschema({
		    schema: macroSchema,
		    schemaPath: codegen_1.nil,
		    errSchemaPath: `${it.errSchemaPath}/${keyword}`,
		    topSchemaRef: schemaRef,
		    compositeRule: true
		  }, valid);
		  cxt.pass(valid, () => cxt.error(true));
		}
		keyword.macroKeywordCode = macroKeywordCode;
		function funcKeywordCode(cxt, def) {
		  var _a;
		  const {
		    gen,
		    keyword,
		    schema,
		    parentSchema,
		    $data,
		    it
		  } = cxt;
		  checkAsyncKeyword(it, def);
		  const validate = !$data && def.compile ? def.compile.call(it.self, schema, parentSchema, it) : def.validate;
		  const validateRef = useKeyword(gen, keyword, validate);
		  const valid = gen.let("valid");
		  cxt.block$data(valid, validateKeyword);
		  cxt.ok((_a = def.valid) !== null && _a !== void 0 ? _a : valid);
		  function validateKeyword() {
		    if (def.errors === false) {
		      assignValid();
		      if (def.modifying) modifyData(cxt);
		      reportErrs(() => cxt.error());
		    } else {
		      const ruleErrs = def.async ? validateAsync() : validateSync();
		      if (def.modifying) modifyData(cxt);
		      reportErrs(() => addErrs(cxt, ruleErrs));
		    }
		  }
		  function validateAsync() {
		    const ruleErrs = gen.let("ruleErrs", null);
		    gen.try(() => assignValid((0, codegen_1._)`await `), e => gen.assign(valid, false).if((0, codegen_1._)`${e} instanceof ${it.ValidationError}`, () => gen.assign(ruleErrs, (0, codegen_1._)`${e}.errors`), () => gen.throw(e)));
		    return ruleErrs;
		  }
		  function validateSync() {
		    const validateErrs = (0, codegen_1._)`${validateRef}.errors`;
		    gen.assign(validateErrs, null);
		    assignValid(codegen_1.nil);
		    return validateErrs;
		  }
		  function assignValid(_await = def.async ? (0, codegen_1._)`await ` : codegen_1.nil) {
		    const passCxt = it.opts.passContext ? names_1.default.this : names_1.default.self;
		    const passSchema = !("compile" in def && !$data || def.schema === false);
		    gen.assign(valid, (0, codegen_1._)`${_await}${(0, code_1.callValidateCode)(cxt, validateRef, passCxt, passSchema)}`, def.modifying);
		  }
		  function reportErrs(errors) {
		    var _a;
		    gen.if((0, codegen_1.not)((_a = def.valid) !== null && _a !== void 0 ? _a : valid), errors);
		  }
		}
		keyword.funcKeywordCode = funcKeywordCode;
		function modifyData(cxt) {
		  const {
		    gen,
		    data,
		    it
		  } = cxt;
		  gen.if(it.parentData, () => gen.assign(data, (0, codegen_1._)`${it.parentData}[${it.parentDataProperty}]`));
		}
		function addErrs(cxt, errs) {
		  const {
		    gen
		  } = cxt;
		  gen.if((0, codegen_1._)`Array.isArray(${errs})`, () => {
		    gen.assign(names_1.default.vErrors, (0, codegen_1._)`${names_1.default.vErrors} === null ? ${errs} : ${names_1.default.vErrors}.concat(${errs})`).assign(names_1.default.errors, (0, codegen_1._)`${names_1.default.vErrors}.length`);
		    (0, errors_1.extendErrors)(cxt);
		  }, () => cxt.error());
		}
		function checkAsyncKeyword({
		  schemaEnv
		}, def) {
		  if (def.async && !schemaEnv.$async) throw new Error("async keyword in sync schema");
		}
		function useKeyword(gen, keyword, result) {
		  if (result === undefined) throw new Error(`keyword "${keyword}" failed to compile`);
		  return gen.scopeValue("keyword", typeof result == "function" ? {
		    ref: result
		  } : {
		    ref: result,
		    code: (0, codegen_1.stringify)(result)
		  });
		}
		function validSchemaType(schema, schemaType, allowUndefined = false) {
		  // TODO add tests
		  return !schemaType.length || schemaType.some(st => st === "array" ? Array.isArray(schema) : st === "object" ? schema && typeof schema == "object" && !Array.isArray(schema) : typeof schema == st || allowUndefined && typeof schema == "undefined");
		}
		keyword.validSchemaType = validSchemaType;
		function validateKeywordUsage({
		  schema,
		  opts,
		  self,
		  errSchemaPath
		}, def, keyword) {
		  /* istanbul ignore if */
		  if (Array.isArray(def.keyword) ? !def.keyword.includes(keyword) : def.keyword !== keyword) {
		    throw new Error("ajv implementation error");
		  }
		  const deps = def.dependencies;
		  if (deps === null || deps === void 0 ? void 0 : deps.some(kwd => !Object.prototype.hasOwnProperty.call(schema, kwd))) {
		    throw new Error(`parent schema must have dependencies of ${keyword}: ${deps.join(",")}`);
		  }
		  if (def.validateSchema) {
		    const valid = def.validateSchema(schema[keyword]);
		    if (!valid) {
		      const msg = `keyword "${keyword}" value is invalid at path "${errSchemaPath}": ` + self.errorsText(def.validateSchema.errors);
		      if (opts.validateSchema === "log") self.logger.error(msg);else throw new Error(msg);
		    }
		  }
		}
		keyword.validateKeywordUsage = validateKeywordUsage;
		return keyword;
	}

	var subschema = {};

	var hasRequiredSubschema;

	function requireSubschema () {
		if (hasRequiredSubschema) return subschema;
		hasRequiredSubschema = 1;

		Object.defineProperty(subschema, "__esModule", {
		  value: true
		});
		subschema.extendSubschemaMode = subschema.extendSubschemaData = subschema.getSubschema = void 0;
		const codegen_1 = codegen;
		const util_1 = util;
		function getSubschema(it, {
		  keyword,
		  schemaProp,
		  schema,
		  schemaPath,
		  errSchemaPath,
		  topSchemaRef
		}) {
		  if (keyword !== undefined && schema !== undefined) {
		    throw new Error('both "keyword" and "schema" passed, only one allowed');
		  }
		  if (keyword !== undefined) {
		    const sch = it.schema[keyword];
		    return schemaProp === undefined ? {
		      schema: sch,
		      schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}`,
		      errSchemaPath: `${it.errSchemaPath}/${keyword}`
		    } : {
		      schema: sch[schemaProp],
		      schemaPath: (0, codegen_1._)`${it.schemaPath}${(0, codegen_1.getProperty)(keyword)}${(0, codegen_1.getProperty)(schemaProp)}`,
		      errSchemaPath: `${it.errSchemaPath}/${keyword}/${(0, util_1.escapeFragment)(schemaProp)}`
		    };
		  }
		  if (schema !== undefined) {
		    if (schemaPath === undefined || errSchemaPath === undefined || topSchemaRef === undefined) {
		      throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');
		    }
		    return {
		      schema,
		      schemaPath,
		      topSchemaRef,
		      errSchemaPath
		    };
		  }
		  throw new Error('either "keyword" or "schema" must be passed');
		}
		subschema.getSubschema = getSubschema;
		function extendSubschemaData(subschema, it, {
		  dataProp,
		  dataPropType: dpType,
		  data,
		  dataTypes,
		  propertyName
		}) {
		  if (data !== undefined && dataProp !== undefined) {
		    throw new Error('both "data" and "dataProp" passed, only one allowed');
		  }
		  const {
		    gen
		  } = it;
		  if (dataProp !== undefined) {
		    const {
		      errorPath,
		      dataPathArr,
		      opts
		    } = it;
		    const nextData = gen.let("data", (0, codegen_1._)`${it.data}${(0, codegen_1.getProperty)(dataProp)}`, true);
		    dataContextProps(nextData);
		    subschema.errorPath = (0, codegen_1.str)`${errorPath}${(0, util_1.getErrorPath)(dataProp, dpType, opts.jsPropertySyntax)}`;
		    subschema.parentDataProperty = (0, codegen_1._)`${dataProp}`;
		    subschema.dataPathArr = [...dataPathArr, subschema.parentDataProperty];
		  }
		  if (data !== undefined) {
		    const nextData = data instanceof codegen_1.Name ? data : gen.let("data", data, true); // replaceable if used once?
		    dataContextProps(nextData);
		    if (propertyName !== undefined) subschema.propertyName = propertyName;
		    // TODO something is possibly wrong here with not changing parentDataProperty and not appending dataPathArr
		  }
		  if (dataTypes) subschema.dataTypes = dataTypes;
		  function dataContextProps(_nextData) {
		    subschema.data = _nextData;
		    subschema.dataLevel = it.dataLevel + 1;
		    subschema.dataTypes = [];
		    it.definedProperties = new Set();
		    subschema.parentData = it.data;
		    subschema.dataNames = [...it.dataNames, _nextData];
		  }
		}
		subschema.extendSubschemaData = extendSubschemaData;
		function extendSubschemaMode(subschema, {
		  jtdDiscriminator,
		  jtdMetadata,
		  compositeRule,
		  createErrors,
		  allErrors
		}) {
		  if (compositeRule !== undefined) subschema.compositeRule = compositeRule;
		  if (createErrors !== undefined) subschema.createErrors = createErrors;
		  if (allErrors !== undefined) subschema.allErrors = allErrors;
		  subschema.jtdDiscriminator = jtdDiscriminator; // not inherited
		  subschema.jtdMetadata = jtdMetadata; // not inherited
		}
		subschema.extendSubschemaMode = extendSubschemaMode;
		return subschema;
	}

	var resolve$1 = {};

	// do not edit .js files directly - edit src/index.jst
	var fastDeepEqual = function equal(a, b) {
	  if (a === b) return true;
	  if (a && b && typeof a == 'object' && typeof b == 'object') {
	    if (a.constructor !== b.constructor) return false;
	    var length, i, keys;
	    if (Array.isArray(a)) {
	      length = a.length;
	      if (length != b.length) return false;
	      for (i = length; i-- !== 0;) if (!equal(a[i], b[i])) return false;
	      return true;
	    }
	    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
	    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
	    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();
	    keys = Object.keys(a);
	    length = keys.length;
	    if (length !== Object.keys(b).length) return false;
	    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;
	    for (i = length; i-- !== 0;) {
	      var key = keys[i];
	      if (!equal(a[key], b[key])) return false;
	    }
	    return true;
	  }

	  // true if both NaN, false otherwise
	  return a !== a && b !== b;
	};

	var jsonSchemaTraverse = {exports: {}};

	var traverse$2 = jsonSchemaTraverse.exports = function (schema, opts, cb) {
	  // Legacy support for v0.3.1 and earlier.
	  if (typeof opts == 'function') {
	    cb = opts;
	    opts = {};
	  }
	  cb = opts.cb || cb;
	  var pre = typeof cb == 'function' ? cb : cb.pre || function () {};
	  var post = cb.post || function () {};
	  _traverse(opts, pre, post, schema, '', schema);
	};
	traverse$2.keywords = {
	  additionalItems: true,
	  items: true,
	  contains: true,
	  additionalProperties: true,
	  propertyNames: true,
	  not: true,
	  if: true,
	  then: true,
	  else: true
	};
	traverse$2.arrayKeywords = {
	  items: true,
	  allOf: true,
	  anyOf: true,
	  oneOf: true
	};
	traverse$2.propsKeywords = {
	  $defs: true,
	  definitions: true,
	  properties: true,
	  patternProperties: true,
	  dependencies: true
	};
	traverse$2.skipKeywords = {
	  default: true,
	  enum: true,
	  const: true,
	  required: true,
	  maximum: true,
	  minimum: true,
	  exclusiveMaximum: true,
	  exclusiveMinimum: true,
	  multipleOf: true,
	  maxLength: true,
	  minLength: true,
	  pattern: true,
	  format: true,
	  maxItems: true,
	  minItems: true,
	  uniqueItems: true,
	  maxProperties: true,
	  minProperties: true
	};
	function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
	  if (schema && typeof schema == 'object' && !Array.isArray(schema)) {
	    pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
	    for (var key in schema) {
	      var sch = schema[key];
	      if (Array.isArray(sch)) {
	        if (key in traverse$2.arrayKeywords) {
	          for (var i = 0; i < sch.length; i++) _traverse(opts, pre, post, sch[i], jsonPtr + '/' + key + '/' + i, rootSchema, jsonPtr, key, schema, i);
	        }
	      } else if (key in traverse$2.propsKeywords) {
	        if (sch && typeof sch == 'object') {
	          for (var prop in sch) _traverse(opts, pre, post, sch[prop], jsonPtr + '/' + key + '/' + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
	        }
	      } else if (key in traverse$2.keywords || opts.allKeys && !(key in traverse$2.skipKeywords)) {
	        _traverse(opts, pre, post, sch, jsonPtr + '/' + key, rootSchema, jsonPtr, key, schema);
	      }
	    }
	    post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
	  }
	}
	function escapeJsonPtr(str) {
	  return str.replace(/~/g, '~0').replace(/\//g, '~1');
	}

	var jsonSchemaTraverseExports = jsonSchemaTraverse.exports;

	Object.defineProperty(resolve$1, "__esModule", {
	  value: true
	});
	resolve$1.getSchemaRefs = resolve$1.resolveUrl = resolve$1.normalizeId = resolve$1._getFullPath = resolve$1.getFullPath = resolve$1.inlineRef = void 0;
	const util_1$l = util;
	const equal$2 = fastDeepEqual;
	const traverse$1 = jsonSchemaTraverseExports;
	// TODO refactor to use keyword definitions
	const SIMPLE_INLINED = new Set(["type", "format", "pattern", "maxLength", "minLength", "maxProperties", "minProperties", "maxItems", "minItems", "maximum", "minimum", "uniqueItems", "multipleOf", "required", "enum", "const"]);
	function inlineRef(schema, limit = true) {
	  if (typeof schema == "boolean") return true;
	  if (limit === true) return !hasRef(schema);
	  if (!limit) return false;
	  return countKeys(schema) <= limit;
	}
	resolve$1.inlineRef = inlineRef;
	const REF_KEYWORDS = new Set(["$ref", "$recursiveRef", "$recursiveAnchor", "$dynamicRef", "$dynamicAnchor"]);
	function hasRef(schema) {
	  for (const key in schema) {
	    if (REF_KEYWORDS.has(key)) return true;
	    const sch = schema[key];
	    if (Array.isArray(sch) && sch.some(hasRef)) return true;
	    if (typeof sch == "object" && hasRef(sch)) return true;
	  }
	  return false;
	}
	function countKeys(schema) {
	  let count = 0;
	  for (const key in schema) {
	    if (key === "$ref") return Infinity;
	    count++;
	    if (SIMPLE_INLINED.has(key)) continue;
	    if (typeof schema[key] == "object") {
	      (0, util_1$l.eachItem)(schema[key], sch => count += countKeys(sch));
	    }
	    if (count === Infinity) return Infinity;
	  }
	  return count;
	}
	function getFullPath(resolver, id = "", normalize) {
	  if (normalize !== false) id = normalizeId(id);
	  const p = resolver.parse(id);
	  return _getFullPath(resolver, p);
	}
	resolve$1.getFullPath = getFullPath;
	function _getFullPath(resolver, p) {
	  const serialized = resolver.serialize(p);
	  return serialized.split("#")[0] + "#";
	}
	resolve$1._getFullPath = _getFullPath;
	const TRAILING_SLASH_HASH = /#\/?$/;
	function normalizeId(id) {
	  return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
	}
	resolve$1.normalizeId = normalizeId;
	function resolveUrl(resolver, baseId, id) {
	  id = normalizeId(id);
	  return resolver.resolve(baseId, id);
	}
	resolve$1.resolveUrl = resolveUrl;
	const ANCHOR = /^[a-z_][-a-z0-9._]*$/i;
	function getSchemaRefs(schema, baseId) {
	  if (typeof schema == "boolean") return {};
	  const {
	    schemaId,
	    uriResolver
	  } = this.opts;
	  const schId = normalizeId(schema[schemaId] || baseId);
	  const baseIds = {
	    "": schId
	  };
	  const pathPrefix = getFullPath(uriResolver, schId, false);
	  const localRefs = {};
	  const schemaRefs = new Set();
	  traverse$1(schema, {
	    allKeys: true
	  }, (sch, jsonPtr, _, parentJsonPtr) => {
	    if (parentJsonPtr === undefined) return;
	    const fullPath = pathPrefix + jsonPtr;
	    let baseId = baseIds[parentJsonPtr];
	    if (typeof sch[schemaId] == "string") baseId = addRef.call(this, sch[schemaId]);
	    addAnchor.call(this, sch.$anchor);
	    addAnchor.call(this, sch.$dynamicAnchor);
	    baseIds[jsonPtr] = baseId;
	    function addRef(ref) {
	      // eslint-disable-next-line @typescript-eslint/unbound-method
	      const _resolve = this.opts.uriResolver.resolve;
	      ref = normalizeId(baseId ? _resolve(baseId, ref) : ref);
	      if (schemaRefs.has(ref)) throw ambiguos(ref);
	      schemaRefs.add(ref);
	      let schOrRef = this.refs[ref];
	      if (typeof schOrRef == "string") schOrRef = this.refs[schOrRef];
	      if (typeof schOrRef == "object") {
	        checkAmbiguosRef(sch, schOrRef.schema, ref);
	      } else if (ref !== normalizeId(fullPath)) {
	        if (ref[0] === "#") {
	          checkAmbiguosRef(sch, localRefs[ref], ref);
	          localRefs[ref] = sch;
	        } else {
	          this.refs[ref] = fullPath;
	        }
	      }
	      return ref;
	    }
	    function addAnchor(anchor) {
	      if (typeof anchor == "string") {
	        if (!ANCHOR.test(anchor)) throw new Error(`invalid anchor "${anchor}"`);
	        addRef.call(this, `#${anchor}`);
	      }
	    }
	  });
	  return localRefs;
	  function checkAmbiguosRef(sch1, sch2, ref) {
	    if (sch2 !== undefined && !equal$2(sch1, sch2)) throw ambiguos(ref);
	  }
	  function ambiguos(ref) {
	    return new Error(`reference "${ref}" resolves to more than one schema`);
	  }
	}
	resolve$1.getSchemaRefs = getSchemaRefs;

	var hasRequiredValidate;

	function requireValidate () {
		if (hasRequiredValidate) return validate$1;
		hasRequiredValidate = 1;

		Object.defineProperty(validate$1, "__esModule", {
		  value: true
		});
		validate$1.getData = validate$1.KeywordCxt = validate$1.validateFunctionCode = void 0;
		const boolSchema_1 = requireBoolSchema();
		const dataType_1 = dataType;
		const applicability_1 = requireApplicability();
		const dataType_2 = dataType;
		const defaults_1 = requireDefaults();
		const keyword_1 = requireKeyword();
		const subschema_1 = requireSubschema();
		const codegen_1 = codegen;
		const names_1 = requireNames();
		const resolve_1 = resolve$1;
		const util_1 = util;
		const errors_1 = requireErrors();
		// schema compilation - generates validation function, subschemaCode (below) is used for subschemas
		function validateFunctionCode(it) {
		  if (isSchemaObj(it)) {
		    checkKeywords(it);
		    if (schemaCxtHasRules(it)) {
		      topSchemaObjCode(it);
		      return;
		    }
		  }
		  validateFunction(it, () => (0, boolSchema_1.topBoolOrEmptySchema)(it));
		}
		validate$1.validateFunctionCode = validateFunctionCode;
		function validateFunction({
		  gen,
		  validateName,
		  schema,
		  schemaEnv,
		  opts
		}, body) {
		  if (opts.code.es5) {
		    gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${names_1.default.valCxt}`, schemaEnv.$async, () => {
		      gen.code((0, codegen_1._)`"use strict"; ${funcSourceUrl(schema, opts)}`);
		      destructureValCxtES5(gen, opts);
		      gen.code(body);
		    });
		  } else {
		    gen.func(validateName, (0, codegen_1._)`${names_1.default.data}, ${destructureValCxt(opts)}`, schemaEnv.$async, () => gen.code(funcSourceUrl(schema, opts)).code(body));
		  }
		}
		function destructureValCxt(opts) {
		  return (0, codegen_1._)`{${names_1.default.instancePath}="", ${names_1.default.parentData}, ${names_1.default.parentDataProperty}, ${names_1.default.rootData}=${names_1.default.data}${opts.dynamicRef ? (0, codegen_1._)`, ${names_1.default.dynamicAnchors}={}` : codegen_1.nil}}={}`;
		}
		function destructureValCxtES5(gen, opts) {
		  gen.if(names_1.default.valCxt, () => {
		    gen.var(names_1.default.instancePath, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.instancePath}`);
		    gen.var(names_1.default.parentData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentData}`);
		    gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.parentDataProperty}`);
		    gen.var(names_1.default.rootData, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.rootData}`);
		    if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`${names_1.default.valCxt}.${names_1.default.dynamicAnchors}`);
		  }, () => {
		    gen.var(names_1.default.instancePath, (0, codegen_1._)`""`);
		    gen.var(names_1.default.parentData, (0, codegen_1._)`undefined`);
		    gen.var(names_1.default.parentDataProperty, (0, codegen_1._)`undefined`);
		    gen.var(names_1.default.rootData, names_1.default.data);
		    if (opts.dynamicRef) gen.var(names_1.default.dynamicAnchors, (0, codegen_1._)`{}`);
		  });
		}
		function topSchemaObjCode(it) {
		  const {
		    schema,
		    opts,
		    gen
		  } = it;
		  validateFunction(it, () => {
		    if (opts.$comment && schema.$comment) commentKeyword(it);
		    checkNoDefault(it);
		    gen.let(names_1.default.vErrors, null);
		    gen.let(names_1.default.errors, 0);
		    if (opts.unevaluated) resetEvaluated(it);
		    typeAndKeywords(it);
		    returnResults(it);
		  });
		  return;
		}
		function resetEvaluated(it) {
		  // TODO maybe some hook to execute it in the end to check whether props/items are Name, as in assignEvaluated
		  const {
		    gen,
		    validateName
		  } = it;
		  it.evaluated = gen.const("evaluated", (0, codegen_1._)`${validateName}.evaluated`);
		  gen.if((0, codegen_1._)`${it.evaluated}.dynamicProps`, () => gen.assign((0, codegen_1._)`${it.evaluated}.props`, (0, codegen_1._)`undefined`));
		  gen.if((0, codegen_1._)`${it.evaluated}.dynamicItems`, () => gen.assign((0, codegen_1._)`${it.evaluated}.items`, (0, codegen_1._)`undefined`));
		}
		function funcSourceUrl(schema, opts) {
		  const schId = typeof schema == "object" && schema[opts.schemaId];
		  return schId && (opts.code.source || opts.code.process) ? (0, codegen_1._)`/*# sourceURL=${schId} */` : codegen_1.nil;
		}
		// schema compilation - this function is used recursively to generate code for sub-schemas
		function subschemaCode(it, valid) {
		  if (isSchemaObj(it)) {
		    checkKeywords(it);
		    if (schemaCxtHasRules(it)) {
		      subSchemaObjCode(it, valid);
		      return;
		    }
		  }
		  (0, boolSchema_1.boolOrEmptySchema)(it, valid);
		}
		function schemaCxtHasRules({
		  schema,
		  self
		}) {
		  if (typeof schema == "boolean") return !schema;
		  for (const key in schema) if (self.RULES.all[key]) return true;
		  return false;
		}
		function isSchemaObj(it) {
		  return typeof it.schema != "boolean";
		}
		function subSchemaObjCode(it, valid) {
		  const {
		    schema,
		    gen,
		    opts
		  } = it;
		  if (opts.$comment && schema.$comment) commentKeyword(it);
		  updateContext(it);
		  checkAsyncSchema(it);
		  const errsCount = gen.const("_errs", names_1.default.errors);
		  typeAndKeywords(it, errsCount);
		  // TODO var
		  gen.var(valid, (0, codegen_1._)`${errsCount} === ${names_1.default.errors}`);
		}
		function checkKeywords(it) {
		  (0, util_1.checkUnknownRules)(it);
		  checkRefsAndKeywords(it);
		}
		function typeAndKeywords(it, errsCount) {
		  if (it.opts.jtd) return schemaKeywords(it, [], false, errsCount);
		  const types = (0, dataType_1.getSchemaTypes)(it.schema);
		  const checkedTypes = (0, dataType_1.coerceAndCheckDataType)(it, types);
		  schemaKeywords(it, types, !checkedTypes, errsCount);
		}
		function checkRefsAndKeywords(it) {
		  const {
		    schema,
		    errSchemaPath,
		    opts,
		    self
		  } = it;
		  if (schema.$ref && opts.ignoreKeywordsWithRef && (0, util_1.schemaHasRulesButRef)(schema, self.RULES)) {
		    self.logger.warn(`$ref: keywords ignored in schema at path "${errSchemaPath}"`);
		  }
		}
		function checkNoDefault(it) {
		  const {
		    schema,
		    opts
		  } = it;
		  if (schema.default !== undefined && opts.useDefaults && opts.strictSchema) {
		    (0, util_1.checkStrictMode)(it, "default is ignored in the schema root");
		  }
		}
		function updateContext(it) {
		  const schId = it.schema[it.opts.schemaId];
		  if (schId) it.baseId = (0, resolve_1.resolveUrl)(it.opts.uriResolver, it.baseId, schId);
		}
		function checkAsyncSchema(it) {
		  if (it.schema.$async && !it.schemaEnv.$async) throw new Error("async schema in sync schema");
		}
		function commentKeyword({
		  gen,
		  schemaEnv,
		  schema,
		  errSchemaPath,
		  opts
		}) {
		  const msg = schema.$comment;
		  if (opts.$comment === true) {
		    gen.code((0, codegen_1._)`${names_1.default.self}.logger.log(${msg})`);
		  } else if (typeof opts.$comment == "function") {
		    const schemaPath = (0, codegen_1.str)`${errSchemaPath}/$comment`;
		    const rootName = gen.scopeValue("root", {
		      ref: schemaEnv.root
		    });
		    gen.code((0, codegen_1._)`${names_1.default.self}.opts.$comment(${msg}, ${schemaPath}, ${rootName}.schema)`);
		  }
		}
		function returnResults(it) {
		  const {
		    gen,
		    schemaEnv,
		    validateName,
		    ValidationError,
		    opts
		  } = it;
		  if (schemaEnv.$async) {
		    // TODO assign unevaluated
		    gen.if((0, codegen_1._)`${names_1.default.errors} === 0`, () => gen.return(names_1.default.data), () => gen.throw((0, codegen_1._)`new ${ValidationError}(${names_1.default.vErrors})`));
		  } else {
		    gen.assign((0, codegen_1._)`${validateName}.errors`, names_1.default.vErrors);
		    if (opts.unevaluated) assignEvaluated(it);
		    gen.return((0, codegen_1._)`${names_1.default.errors} === 0`);
		  }
		}
		function assignEvaluated({
		  gen,
		  evaluated,
		  props,
		  items
		}) {
		  if (props instanceof codegen_1.Name) gen.assign((0, codegen_1._)`${evaluated}.props`, props);
		  if (items instanceof codegen_1.Name) gen.assign((0, codegen_1._)`${evaluated}.items`, items);
		}
		function schemaKeywords(it, types, typeErrors, errsCount) {
		  const {
		    gen,
		    schema,
		    data,
		    allErrors,
		    opts,
		    self
		  } = it;
		  const {
		    RULES
		  } = self;
		  if (schema.$ref && (opts.ignoreKeywordsWithRef || !(0, util_1.schemaHasRulesButRef)(schema, RULES))) {
		    gen.block(() => keywordCode(it, "$ref", RULES.all.$ref.definition)); // TODO typecast
		    return;
		  }
		  if (!opts.jtd) checkStrictTypes(it, types);
		  gen.block(() => {
		    for (const group of RULES.rules) groupKeywords(group);
		    groupKeywords(RULES.post);
		  });
		  function groupKeywords(group) {
		    if (!(0, applicability_1.shouldUseGroup)(schema, group)) return;
		    if (group.type) {
		      gen.if((0, dataType_2.checkDataType)(group.type, data, opts.strictNumbers));
		      iterateKeywords(it, group);
		      if (types.length === 1 && types[0] === group.type && typeErrors) {
		        gen.else();
		        (0, dataType_2.reportTypeError)(it);
		      }
		      gen.endIf();
		    } else {
		      iterateKeywords(it, group);
		    }
		    // TODO make it "ok" call?
		    if (!allErrors) gen.if((0, codegen_1._)`${names_1.default.errors} === ${errsCount || 0}`);
		  }
		}
		function iterateKeywords(it, group) {
		  const {
		    gen,
		    schema,
		    opts: {
		      useDefaults
		    }
		  } = it;
		  if (useDefaults) (0, defaults_1.assignDefaults)(it, group.type);
		  gen.block(() => {
		    for (const rule of group.rules) {
		      if ((0, applicability_1.shouldUseRule)(schema, rule)) {
		        keywordCode(it, rule.keyword, rule.definition, group.type);
		      }
		    }
		  });
		}
		function checkStrictTypes(it, types) {
		  if (it.schemaEnv.meta || !it.opts.strictTypes) return;
		  checkContextTypes(it, types);
		  if (!it.opts.allowUnionTypes) checkMultipleTypes(it, types);
		  checkKeywordTypes(it, it.dataTypes);
		}
		function checkContextTypes(it, types) {
		  if (!types.length) return;
		  if (!it.dataTypes.length) {
		    it.dataTypes = types;
		    return;
		  }
		  types.forEach(t => {
		    if (!includesType(it.dataTypes, t)) {
		      strictTypesError(it, `type "${t}" not allowed by context "${it.dataTypes.join(",")}"`);
		    }
		  });
		  narrowSchemaTypes(it, types);
		}
		function checkMultipleTypes(it, ts) {
		  if (ts.length > 1 && !(ts.length === 2 && ts.includes("null"))) {
		    strictTypesError(it, "use allowUnionTypes to allow union type keyword");
		  }
		}
		function checkKeywordTypes(it, ts) {
		  const rules = it.self.RULES.all;
		  for (const keyword in rules) {
		    const rule = rules[keyword];
		    if (typeof rule == "object" && (0, applicability_1.shouldUseRule)(it.schema, rule)) {
		      const {
		        type
		      } = rule.definition;
		      if (type.length && !type.some(t => hasApplicableType(ts, t))) {
		        strictTypesError(it, `missing type "${type.join(",")}" for keyword "${keyword}"`);
		      }
		    }
		  }
		}
		function hasApplicableType(schTs, kwdT) {
		  return schTs.includes(kwdT) || kwdT === "number" && schTs.includes("integer");
		}
		function includesType(ts, t) {
		  return ts.includes(t) || t === "integer" && ts.includes("number");
		}
		function narrowSchemaTypes(it, withTypes) {
		  const ts = [];
		  for (const t of it.dataTypes) {
		    if (includesType(withTypes, t)) ts.push(t);else if (withTypes.includes("integer") && t === "number") ts.push("integer");
		  }
		  it.dataTypes = ts;
		}
		function strictTypesError(it, msg) {
		  const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
		  msg += ` at "${schemaPath}" (strictTypes)`;
		  (0, util_1.checkStrictMode)(it, msg, it.opts.strictTypes);
		}
		class KeywordCxt {
		  constructor(it, def, keyword) {
		    (0, keyword_1.validateKeywordUsage)(it, def, keyword);
		    this.gen = it.gen;
		    this.allErrors = it.allErrors;
		    this.keyword = keyword;
		    this.data = it.data;
		    this.schema = it.schema[keyword];
		    this.$data = def.$data && it.opts.$data && this.schema && this.schema.$data;
		    this.schemaValue = (0, util_1.schemaRefOrVal)(it, this.schema, keyword, this.$data);
		    this.schemaType = def.schemaType;
		    this.parentSchema = it.schema;
		    this.params = {};
		    this.it = it;
		    this.def = def;
		    if (this.$data) {
		      this.schemaCode = it.gen.const("vSchema", getData(this.$data, it));
		    } else {
		      this.schemaCode = this.schemaValue;
		      if (!(0, keyword_1.validSchemaType)(this.schema, def.schemaType, def.allowUndefined)) {
		        throw new Error(`${keyword} value must be ${JSON.stringify(def.schemaType)}`);
		      }
		    }
		    if ("code" in def ? def.trackErrors : def.errors !== false) {
		      this.errsCount = it.gen.const("_errs", names_1.default.errors);
		    }
		  }
		  result(condition, successAction, failAction) {
		    this.failResult((0, codegen_1.not)(condition), successAction, failAction);
		  }
		  failResult(condition, successAction, failAction) {
		    this.gen.if(condition);
		    if (failAction) failAction();else this.error();
		    if (successAction) {
		      this.gen.else();
		      successAction();
		      if (this.allErrors) this.gen.endIf();
		    } else {
		      if (this.allErrors) this.gen.endIf();else this.gen.else();
		    }
		  }
		  pass(condition, failAction) {
		    this.failResult((0, codegen_1.not)(condition), undefined, failAction);
		  }
		  fail(condition) {
		    if (condition === undefined) {
		      this.error();
		      if (!this.allErrors) this.gen.if(false); // this branch will be removed by gen.optimize
		      return;
		    }
		    this.gen.if(condition);
		    this.error();
		    if (this.allErrors) this.gen.endIf();else this.gen.else();
		  }
		  fail$data(condition) {
		    if (!this.$data) return this.fail(condition);
		    const {
		      schemaCode
		    } = this;
		    this.fail((0, codegen_1._)`${schemaCode} !== undefined && (${(0, codegen_1.or)(this.invalid$data(), condition)})`);
		  }
		  error(append, errorParams, errorPaths) {
		    if (errorParams) {
		      this.setParams(errorParams);
		      this._error(append, errorPaths);
		      this.setParams({});
		      return;
		    }
		    this._error(append, errorPaths);
		  }
		  _error(append, errorPaths) {
		    (append ? errors_1.reportExtraError : errors_1.reportError)(this, this.def.error, errorPaths);
		  }
		  $dataError() {
		    (0, errors_1.reportError)(this, this.def.$dataError || errors_1.keyword$DataError);
		  }
		  reset() {
		    if (this.errsCount === undefined) throw new Error('add "trackErrors" to keyword definition');
		    (0, errors_1.resetErrorsCount)(this.gen, this.errsCount);
		  }
		  ok(cond) {
		    if (!this.allErrors) this.gen.if(cond);
		  }
		  setParams(obj, assign) {
		    if (assign) Object.assign(this.params, obj);else this.params = obj;
		  }
		  block$data(valid, codeBlock, $dataValid = codegen_1.nil) {
		    this.gen.block(() => {
		      this.check$data(valid, $dataValid);
		      codeBlock();
		    });
		  }
		  check$data(valid = codegen_1.nil, $dataValid = codegen_1.nil) {
		    if (!this.$data) return;
		    const {
		      gen,
		      schemaCode,
		      schemaType,
		      def
		    } = this;
		    gen.if((0, codegen_1.or)((0, codegen_1._)`${schemaCode} === undefined`, $dataValid));
		    if (valid !== codegen_1.nil) gen.assign(valid, true);
		    if (schemaType.length || def.validateSchema) {
		      gen.elseIf(this.invalid$data());
		      this.$dataError();
		      if (valid !== codegen_1.nil) gen.assign(valid, false);
		    }
		    gen.else();
		  }
		  invalid$data() {
		    const {
		      gen,
		      schemaCode,
		      schemaType,
		      def,
		      it
		    } = this;
		    return (0, codegen_1.or)(wrong$DataType(), invalid$DataSchema());
		    function wrong$DataType() {
		      if (schemaType.length) {
		        /* istanbul ignore if */
		        if (!(schemaCode instanceof codegen_1.Name)) throw new Error("ajv implementation error");
		        const st = Array.isArray(schemaType) ? schemaType : [schemaType];
		        return (0, codegen_1._)`${(0, dataType_2.checkDataTypes)(st, schemaCode, it.opts.strictNumbers, dataType_2.DataType.Wrong)}`;
		      }
		      return codegen_1.nil;
		    }
		    function invalid$DataSchema() {
		      if (def.validateSchema) {
		        const validateSchemaRef = gen.scopeValue("validate$data", {
		          ref: def.validateSchema
		        }); // TODO value.code for standalone
		        return (0, codegen_1._)`!${validateSchemaRef}(${schemaCode})`;
		      }
		      return codegen_1.nil;
		    }
		  }
		  subschema(appl, valid) {
		    const subschema = (0, subschema_1.getSubschema)(this.it, appl);
		    (0, subschema_1.extendSubschemaData)(subschema, this.it, appl);
		    (0, subschema_1.extendSubschemaMode)(subschema, appl);
		    const nextContext = {
		      ...this.it,
		      ...subschema,
		      items: undefined,
		      props: undefined
		    };
		    subschemaCode(nextContext, valid);
		    return nextContext;
		  }
		  mergeEvaluated(schemaCxt, toName) {
		    const {
		      it,
		      gen
		    } = this;
		    if (!it.opts.unevaluated) return;
		    if (it.props !== true && schemaCxt.props !== undefined) {
		      it.props = util_1.mergeEvaluated.props(gen, schemaCxt.props, it.props, toName);
		    }
		    if (it.items !== true && schemaCxt.items !== undefined) {
		      it.items = util_1.mergeEvaluated.items(gen, schemaCxt.items, it.items, toName);
		    }
		  }
		  mergeValidEvaluated(schemaCxt, valid) {
		    const {
		      it,
		      gen
		    } = this;
		    if (it.opts.unevaluated && (it.props !== true || it.items !== true)) {
		      gen.if(valid, () => this.mergeEvaluated(schemaCxt, codegen_1.Name));
		      return true;
		    }
		  }
		}
		validate$1.KeywordCxt = KeywordCxt;
		function keywordCode(it, keyword, def, ruleType) {
		  const cxt = new KeywordCxt(it, def, keyword);
		  if ("code" in def) {
		    def.code(cxt, ruleType);
		  } else if (cxt.$data && def.validate) {
		    (0, keyword_1.funcKeywordCode)(cxt, def);
		  } else if ("macro" in def) {
		    (0, keyword_1.macroKeywordCode)(cxt, def);
		  } else if (def.compile || def.validate) {
		    (0, keyword_1.funcKeywordCode)(cxt, def);
		  }
		}
		const JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
		const RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
		function getData($data, {
		  dataLevel,
		  dataNames,
		  dataPathArr
		}) {
		  let jsonPointer;
		  let data;
		  if ($data === "") return names_1.default.rootData;
		  if ($data[0] === "/") {
		    if (!JSON_POINTER.test($data)) throw new Error(`Invalid JSON-pointer: ${$data}`);
		    jsonPointer = $data;
		    data = names_1.default.rootData;
		  } else {
		    const matches = RELATIVE_JSON_POINTER.exec($data);
		    if (!matches) throw new Error(`Invalid JSON-pointer: ${$data}`);
		    const up = +matches[1];
		    jsonPointer = matches[2];
		    if (jsonPointer === "#") {
		      if (up >= dataLevel) throw new Error(errorMsg("property/index", up));
		      return dataPathArr[dataLevel - up];
		    }
		    if (up > dataLevel) throw new Error(errorMsg("data", up));
		    data = dataNames[dataLevel - up];
		    if (!jsonPointer) return data;
		  }
		  let expr = data;
		  const segments = jsonPointer.split("/");
		  for (const segment of segments) {
		    if (segment) {
		      data = (0, codegen_1._)`${data}${(0, codegen_1.getProperty)((0, util_1.unescapeJsonPointer)(segment))}`;
		      expr = (0, codegen_1._)`${expr} && ${data}`;
		    }
		  }
		  return expr;
		  function errorMsg(pointerType, up) {
		    return `Cannot access ${pointerType} ${up} levels up, current level is ${dataLevel}`;
		  }
		}
		validate$1.getData = getData;
		return validate$1;
	}

	var validation_error = {};

	var hasRequiredValidation_error;

	function requireValidation_error () {
		if (hasRequiredValidation_error) return validation_error;
		hasRequiredValidation_error = 1;

		Object.defineProperty(validation_error, "__esModule", {
		  value: true
		});
		class ValidationError extends Error {
		  constructor(errors) {
		    super("validation failed");
		    this.errors = errors;
		    this.ajv = this.validation = true;
		  }
		}
		validation_error.default = ValidationError;
		return validation_error;
	}

	var ref_error = {};

	var hasRequiredRef_error;

	function requireRef_error () {
		if (hasRequiredRef_error) return ref_error;
		hasRequiredRef_error = 1;

		Object.defineProperty(ref_error, "__esModule", {
		  value: true
		});
		const resolve_1 = resolve$1;
		class MissingRefError extends Error {
		  constructor(resolver, baseId, ref, msg) {
		    super(msg || `can't resolve reference ${ref} from id ${baseId}`);
		    this.missingRef = (0, resolve_1.resolveUrl)(resolver, baseId, ref);
		    this.missingSchema = (0, resolve_1.normalizeId)((0, resolve_1.getFullPath)(resolver, this.missingRef));
		  }
		}
		ref_error.default = MissingRefError;
		return ref_error;
	}

	var compile$1 = {};

	Object.defineProperty(compile$1, "__esModule", {
	  value: true
	});
	compile$1.resolveSchema = compile$1.getCompilingSchema = compile$1.resolveRef = compile$1.compileSchema = compile$1.SchemaEnv = void 0;
	const codegen_1$m = codegen;
	const validation_error_1 = requireValidation_error();
	const names_1$2 = requireNames();
	const resolve_1 = resolve$1;
	const util_1$k = util;
	const validate_1$1 = requireValidate();
	class SchemaEnv {
	  constructor(env) {
	    var _a;
	    this.refs = {};
	    this.dynamicAnchors = {};
	    let schema;
	    if (typeof env.schema == "object") schema = env.schema;
	    this.schema = env.schema;
	    this.schemaId = env.schemaId;
	    this.root = env.root || this;
	    this.baseId = (_a = env.baseId) !== null && _a !== void 0 ? _a : (0, resolve_1.normalizeId)(schema === null || schema === void 0 ? void 0 : schema[env.schemaId || "$id"]);
	    this.schemaPath = env.schemaPath;
	    this.localRefs = env.localRefs;
	    this.meta = env.meta;
	    this.$async = schema === null || schema === void 0 ? void 0 : schema.$async;
	    this.refs = {};
	  }
	}
	compile$1.SchemaEnv = SchemaEnv;
	// let codeSize = 0
	// let nodeCount = 0
	// Compiles schema in SchemaEnv
	function compileSchema(sch) {
	  // TODO refactor - remove compilations
	  const _sch = getCompilingSchema.call(this, sch);
	  if (_sch) return _sch;
	  const rootId = (0, resolve_1.getFullPath)(this.opts.uriResolver, sch.root.baseId); // TODO if getFullPath removed 1 tests fails
	  const {
	    es5,
	    lines
	  } = this.opts.code;
	  const {
	    ownProperties
	  } = this.opts;
	  const gen = new codegen_1$m.CodeGen(this.scope, {
	    es5,
	    lines,
	    ownProperties
	  });
	  let _ValidationError;
	  if (sch.$async) {
	    _ValidationError = gen.scopeValue("Error", {
	      ref: validation_error_1.default,
	      code: (0, codegen_1$m._)`require("ajv/dist/runtime/validation_error").default`
	    });
	  }
	  const validateName = gen.scopeName("validate");
	  sch.validateName = validateName;
	  const schemaCxt = {
	    gen,
	    allErrors: this.opts.allErrors,
	    data: names_1$2.default.data,
	    parentData: names_1$2.default.parentData,
	    parentDataProperty: names_1$2.default.parentDataProperty,
	    dataNames: [names_1$2.default.data],
	    dataPathArr: [codegen_1$m.nil],
	    dataLevel: 0,
	    dataTypes: [],
	    definedProperties: new Set(),
	    topSchemaRef: gen.scopeValue("schema", this.opts.code.source === true ? {
	      ref: sch.schema,
	      code: (0, codegen_1$m.stringify)(sch.schema)
	    } : {
	      ref: sch.schema
	    }),
	    validateName,
	    ValidationError: _ValidationError,
	    schema: sch.schema,
	    schemaEnv: sch,
	    rootId,
	    baseId: sch.baseId || rootId,
	    schemaPath: codegen_1$m.nil,
	    errSchemaPath: sch.schemaPath || (this.opts.jtd ? "" : "#"),
	    errorPath: (0, codegen_1$m._)`""`,
	    opts: this.opts,
	    self: this
	  };
	  let sourceCode;
	  try {
	    this._compilations.add(sch);
	    (0, validate_1$1.validateFunctionCode)(schemaCxt);
	    gen.optimize(this.opts.code.optimize);
	    // gen.optimize(1)
	    const validateCode = gen.toString();
	    sourceCode = `${gen.scopeRefs(names_1$2.default.scope)}return ${validateCode}`;
	    // console.log((codeSize += sourceCode.length), (nodeCount += gen.nodeCount))
	    if (this.opts.code.process) sourceCode = this.opts.code.process(sourceCode, sch);
	    // console.log("\n\n\n *** \n", sourceCode)
	    const makeValidate = new Function(`${names_1$2.default.self}`, `${names_1$2.default.scope}`, sourceCode);
	    const validate = makeValidate(this, this.scope.get());
	    this.scope.value(validateName, {
	      ref: validate
	    });
	    validate.errors = null;
	    validate.schema = sch.schema;
	    validate.schemaEnv = sch;
	    if (sch.$async) validate.$async = true;
	    if (this.opts.code.source === true) {
	      validate.source = {
	        validateName,
	        validateCode,
	        scopeValues: gen._values
	      };
	    }
	    if (this.opts.unevaluated) {
	      const {
	        props,
	        items
	      } = schemaCxt;
	      validate.evaluated = {
	        props: props instanceof codegen_1$m.Name ? undefined : props,
	        items: items instanceof codegen_1$m.Name ? undefined : items,
	        dynamicProps: props instanceof codegen_1$m.Name,
	        dynamicItems: items instanceof codegen_1$m.Name
	      };
	      if (validate.source) validate.source.evaluated = (0, codegen_1$m.stringify)(validate.evaluated);
	    }
	    sch.validate = validate;
	    return sch;
	  } catch (e) {
	    delete sch.validate;
	    delete sch.validateName;
	    if (sourceCode) this.logger.error("Error compiling schema, function code:", sourceCode);
	    // console.log("\n\n\n *** \n", sourceCode, this.opts)
	    throw e;
	  } finally {
	    this._compilations.delete(sch);
	  }
	}
	compile$1.compileSchema = compileSchema;
	function resolveRef(root, baseId, ref) {
	  var _a;
	  ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, ref);
	  const schOrFunc = root.refs[ref];
	  if (schOrFunc) return schOrFunc;
	  let _sch = resolve.call(this, root, ref);
	  if (_sch === undefined) {
	    const schema = (_a = root.localRefs) === null || _a === void 0 ? void 0 : _a[ref]; // TODO maybe localRefs should hold SchemaEnv
	    const {
	      schemaId
	    } = this.opts;
	    if (schema) _sch = new SchemaEnv({
	      schema,
	      schemaId,
	      root,
	      baseId
	    });
	  }
	  if (_sch === undefined) return;
	  return root.refs[ref] = inlineOrCompile.call(this, _sch);
	}
	compile$1.resolveRef = resolveRef;
	function inlineOrCompile(sch) {
	  if ((0, resolve_1.inlineRef)(sch.schema, this.opts.inlineRefs)) return sch.schema;
	  return sch.validate ? sch : compileSchema.call(this, sch);
	}
	// Index of schema compilation in the currently compiled list
	function getCompilingSchema(schEnv) {
	  for (const sch of this._compilations) {
	    if (sameSchemaEnv(sch, schEnv)) return sch;
	  }
	}
	compile$1.getCompilingSchema = getCompilingSchema;
	function sameSchemaEnv(s1, s2) {
	  return s1.schema === s2.schema && s1.root === s2.root && s1.baseId === s2.baseId;
	}
	// resolve and compile the references ($ref)
	// TODO returns AnySchemaObject (if the schema can be inlined) or validation function
	function resolve(root,
	// information about the root schema for the current schema
	ref // reference to resolve
	) {
	  let sch;
	  while (typeof (sch = this.refs[ref]) == "string") ref = sch;
	  return sch || this.schemas[ref] || resolveSchema$1.call(this, root, ref);
	}
	// Resolve schema, its root and baseId
	function resolveSchema$1(root,
	// root object with properties schema, refs TODO below SchemaEnv is assigned to it
	ref // reference to resolve
	) {
	  const p = this.opts.uriResolver.parse(ref);
	  const refPath = (0, resolve_1._getFullPath)(this.opts.uriResolver, p);
	  let baseId = (0, resolve_1.getFullPath)(this.opts.uriResolver, root.baseId, undefined);
	  // TODO `Object.keys(root.schema).length > 0` should not be needed - but removing breaks 2 tests
	  if (Object.keys(root.schema).length > 0 && refPath === baseId) {
	    return getJsonPointer.call(this, p, root);
	  }
	  const id = (0, resolve_1.normalizeId)(refPath);
	  const schOrRef = this.refs[id] || this.schemas[id];
	  if (typeof schOrRef == "string") {
	    const sch = resolveSchema$1.call(this, root, schOrRef);
	    if (typeof (sch === null || sch === void 0 ? void 0 : sch.schema) !== "object") return;
	    return getJsonPointer.call(this, p, sch);
	  }
	  if (typeof (schOrRef === null || schOrRef === void 0 ? void 0 : schOrRef.schema) !== "object") return;
	  if (!schOrRef.validate) compileSchema.call(this, schOrRef);
	  if (id === (0, resolve_1.normalizeId)(ref)) {
	    const {
	      schema
	    } = schOrRef;
	    const {
	      schemaId
	    } = this.opts;
	    const schId = schema[schemaId];
	    if (schId) baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
	    return new SchemaEnv({
	      schema,
	      schemaId,
	      root,
	      baseId
	    });
	  }
	  return getJsonPointer.call(this, p, schOrRef);
	}
	compile$1.resolveSchema = resolveSchema$1;
	const PREVENT_SCOPE_CHANGE = new Set(["properties", "patternProperties", "enum", "dependencies", "definitions"]);
	function getJsonPointer(parsedRef, {
	  baseId,
	  schema,
	  root
	}) {
	  var _a;
	  if (((_a = parsedRef.fragment) === null || _a === void 0 ? void 0 : _a[0]) !== "/") return;
	  for (const part of parsedRef.fragment.slice(1).split("/")) {
	    if (typeof schema === "boolean") return;
	    const partSchema = schema[(0, util_1$k.unescapeFragment)(part)];
	    if (partSchema === undefined) return;
	    schema = partSchema;
	    // TODO PREVENT_SCOPE_CHANGE could be defined in keyword def?
	    const schId = typeof schema === "object" && schema[this.opts.schemaId];
	    if (!PREVENT_SCOPE_CHANGE.has(part) && schId) {
	      baseId = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schId);
	    }
	  }
	  let env;
	  if (typeof schema != "boolean" && schema.$ref && !(0, util_1$k.schemaHasRulesButRef)(schema, this.RULES)) {
	    const $ref = (0, resolve_1.resolveUrl)(this.opts.uriResolver, baseId, schema.$ref);
	    env = resolveSchema$1.call(this, root, $ref);
	  }
	  // even though resolution failed we need to return SchemaEnv to throw exception
	  // so that compileAsync loads missing schema.
	  const {
	    schemaId
	  } = this.opts;
	  env = env || new SchemaEnv({
	    schema,
	    schemaId,
	    root,
	    baseId
	  });
	  if (env.schema !== env.root.schema) return env;
	  return undefined;
	}

	var $id$1 = "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#";
	var description = "Meta-schema for $data reference (JSON AnySchema extension proposal)";
	var type$1 = "object";
	var required$1 = [
		"$data"
	];
	var properties$3 = {
		$data: {
			type: "string",
			anyOf: [
				{
					format: "relative-json-pointer"
				},
				{
					format: "json-pointer"
				}
			]
		}
	};
	var additionalProperties$1 = false;
	var require$$9 = {
		$id: $id$1,
		description: description,
		type: type$1,
		required: required$1,
		properties: properties$3,
		additionalProperties: additionalProperties$1
	};

	var uri$1 = {};

	var uri_all = {exports: {}};

	/** @license URI.js v4.4.1 (c) 2011 Gary Court. License: http://github.com/garycourt/uri-js */

	(function (module, exports) {
		(function (global, factory) {
		  factory(exports) ;
		})(commonjsGlobal, function (exports) {

		  function merge() {
		    for (var _len = arguments.length, sets = Array(_len), _key = 0; _key < _len; _key++) {
		      sets[_key] = arguments[_key];
		    }
		    if (sets.length > 1) {
		      sets[0] = sets[0].slice(0, -1);
		      var xl = sets.length - 1;
		      for (var x = 1; x < xl; ++x) {
		        sets[x] = sets[x].slice(1, -1);
		      }
		      sets[xl] = sets[xl].slice(1);
		      return sets.join('');
		    } else {
		      return sets[0];
		    }
		  }
		  function subexp(str) {
		    return "(?:" + str + ")";
		  }
		  function typeOf(o) {
		    return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
		  }
		  function toUpperCase(str) {
		    return str.toUpperCase();
		  }
		  function toArray(obj) {
		    return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
		  }
		  function assign(target, source) {
		    var obj = target;
		    if (source) {
		      for (var key in source) {
		        obj[key] = source[key];
		      }
		    }
		    return obj;
		  }
		  function buildExps(isIRI) {
		    var ALPHA$$ = "[A-Za-z]",
		      DIGIT$$ = "[0-9]",
		      HEXDIG$$ = merge(DIGIT$$, "[A-Fa-f]"),
		      PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)),
		      //expanded
		      GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]",
		      SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",
		      RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$),
		      UCSCHAR$$ = isIRI ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]",
		      //subset, excludes bidi control characters
		      IPRIVATE$$ = isIRI ? "[\\uE000-\\uF8FF]" : "[]",
		      //subset
		      UNRESERVED$$ = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$);
		      subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*");
		      subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]")) + "*");
		      var DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$),
		      //relaxed parsing rules
		      IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$),
		      H16$ = subexp(HEXDIG$$ + "{1,4}"),
		      LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$),
		      IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$),
		      //                           6( h16 ":" ) ls32
		      IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$),
		      //                      "::" 5( h16 ":" ) ls32
		      IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$),
		      //[               h16 ] "::" 4( h16 ":" ) ls32
		      IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$),
		      //[ *1( h16 ":" ) h16 ] "::" 3( h16 ":" ) ls32
		      IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$),
		      //[ *2( h16 ":" ) h16 ] "::" 2( h16 ":" ) ls32
		      IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$),
		      //[ *3( h16 ":" ) h16 ] "::"    h16 ":"   ls32
		      IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$),
		      //[ *4( h16 ":" ) h16 ] "::"              ls32
		      IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$),
		      //[ *5( h16 ":" ) h16 ] "::"              h16
		      IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"),
		      //[ *6( h16 ":" ) h16 ] "::"
		      IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")),
		      ZONEID$ = subexp(subexp(UNRESERVED$$ + "|" + PCT_ENCODED$) + "+");
		      //RFC 6874, with relaxed parsing rules
		      subexp("[vV]" + HEXDIG$$ + "+\\." + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:]") + "+");
		      //RFC 6874
		      subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$)) + "*");
		      var PCHAR$ = subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@]"));
		      subexp(subexp(PCT_ENCODED$ + "|" + merge(UNRESERVED$$, SUB_DELIMS$$, "[\\@]")) + "+");
		      subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*");
		    return {
		      NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
		      NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
		      NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$, SUB_DELIMS$$), "g"),
		      NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
		      NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$, SUB_DELIMS$$), "g"),
		      NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
		      NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
		      ESCAPE: new RegExp(merge("[^]", UNRESERVED$$, SUB_DELIMS$$), "g"),
		      UNRESERVED: new RegExp(UNRESERVED$$, "g"),
		      OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$, RESERVED$$), "g"),
		      PCT_ENCODED: new RegExp(PCT_ENCODED$, "g"),
		      IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
		      IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$ + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$") //RFC 6874, with relaxed parsing rules
		    };
		  }
		  var URI_PROTOCOL = buildExps(false);
		  var IRI_PROTOCOL = buildExps(true);
		  var slicedToArray = function () {
		    function sliceIterator(arr, i) {
		      var _arr = [];
		      var _n = true;
		      var _d = false;
		      var _e = undefined;
		      try {
		        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
		          _arr.push(_s.value);
		          if (i && _arr.length === i) break;
		        }
		      } catch (err) {
		        _d = true;
		        _e = err;
		      } finally {
		        try {
		          if (!_n && _i["return"]) _i["return"]();
		        } finally {
		          if (_d) throw _e;
		        }
		      }
		      return _arr;
		    }
		    return function (arr, i) {
		      if (Array.isArray(arr)) {
		        return arr;
		      } else if (Symbol.iterator in Object(arr)) {
		        return sliceIterator(arr, i);
		      } else {
		        throw new TypeError("Invalid attempt to destructure non-iterable instance");
		      }
		    };
		  }();
		  var toConsumableArray = function (arr) {
		    if (Array.isArray(arr)) {
		      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
		      return arr2;
		    } else {
		      return Array.from(arr);
		    }
		  };

		  /** Highest positive signed 32-bit float value */

		  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

		  /** Bootstring parameters */
		  var base = 36;
		  var tMin = 1;
		  var tMax = 26;
		  var skew = 38;
		  var damp = 700;
		  var initialBias = 72;
		  var initialN = 128; // 0x80
		  var delimiter = '-'; // '\x2D'

		  /** Regular expressions */
		  var regexPunycode = /^xn--/;
		  var regexNonASCII = /[^\0-\x7E]/; // non-ASCII chars
		  var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

		  /** Error messages */
		  var errors = {
		    'overflow': 'Overflow: input needs wider integers to process',
		    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		    'invalid-input': 'Invalid input'
		  };

		  /** Convenience shortcuts */
		  var baseMinusTMin = base - tMin;
		  var floor = Math.floor;
		  var stringFromCharCode = String.fromCharCode;

		  /*--------------------------------------------------------------------------*/

		  /**
		   * A generic error utility function.
		   * @private
		   * @param {String} type The error type.
		   * @returns {Error} Throws a `RangeError` with the applicable error message.
		   */
		  function error$1(type) {
		    throw new RangeError(errors[type]);
		  }

		  /**
		   * A generic `Array#map` utility function.
		   * @private
		   * @param {Array} array The array to iterate over.
		   * @param {Function} callback The function that gets called for every array
		   * item.
		   * @returns {Array} A new array of values returned by the callback function.
		   */
		  function map(array, fn) {
		    var result = [];
		    var length = array.length;
		    while (length--) {
		      result[length] = fn(array[length]);
		    }
		    return result;
		  }

		  /**
		   * A simple `Array#map`-like wrapper to work with domain name strings or email
		   * addresses.
		   * @private
		   * @param {String} domain The domain name or email address.
		   * @param {Function} callback The function that gets called for every
		   * character.
		   * @returns {Array} A new string of characters returned by the callback
		   * function.
		   */
		  function mapDomain(string, fn) {
		    var parts = string.split('@');
		    var result = '';
		    if (parts.length > 1) {
		      // In email addresses, only the domain name should be punycoded. Leave
		      // the local part (i.e. everything up to `@`) intact.
		      result = parts[0] + '@';
		      string = parts[1];
		    }
		    // Avoid `split(regex)` for IE8 compatibility. See #17.
		    string = string.replace(regexSeparators, '\x2E');
		    var labels = string.split('.');
		    var encoded = map(labels, fn).join('.');
		    return result + encoded;
		  }

		  /**
		   * Creates an array containing the numeric code points of each Unicode
		   * character in the string. While JavaScript uses UCS-2 internally,
		   * this function will convert a pair of surrogate halves (each of which
		   * UCS-2 exposes as separate characters) into a single code point,
		   * matching UTF-16.
		   * @see `punycode.ucs2.encode`
		   * @see <https://mathiasbynens.be/notes/javascript-encoding>
		   * @memberOf punycode.ucs2
		   * @name decode
		   * @param {String} string The Unicode input string (UCS-2).
		   * @returns {Array} The new array of code points.
		   */
		  function ucs2decode(string) {
		    var output = [];
		    var counter = 0;
		    var length = string.length;
		    while (counter < length) {
		      var value = string.charCodeAt(counter++);
		      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
		        // It's a high surrogate, and there is a next character.
		        var extra = string.charCodeAt(counter++);
		        if ((extra & 0xFC00) == 0xDC00) {
		          // Low surrogate.
		          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
		        } else {
		          // It's an unmatched surrogate; only append this code unit, in case the
		          // next code unit is the high surrogate of a surrogate pair.
		          output.push(value);
		          counter--;
		        }
		      } else {
		        output.push(value);
		      }
		    }
		    return output;
		  }

		  /**
		   * Creates a string based on an array of numeric code points.
		   * @see `punycode.ucs2.decode`
		   * @memberOf punycode.ucs2
		   * @name encode
		   * @param {Array} codePoints The array of numeric code points.
		   * @returns {String} The new Unicode string (UCS-2).
		   */
		  var ucs2encode = function ucs2encode(array) {
		    return String.fromCodePoint.apply(String, toConsumableArray(array));
		  };

		  /**
		   * Converts a basic code point into a digit/integer.
		   * @see `digitToBasic()`
		   * @private
		   * @param {Number} codePoint The basic numeric code point value.
		   * @returns {Number} The numeric value of a basic code point (for use in
		   * representing integers) in the range `0` to `base - 1`, or `base` if
		   * the code point does not represent a value.
		   */
		  var basicToDigit = function basicToDigit(codePoint) {
		    if (codePoint - 0x30 < 0x0A) {
		      return codePoint - 0x16;
		    }
		    if (codePoint - 0x41 < 0x1A) {
		      return codePoint - 0x41;
		    }
		    if (codePoint - 0x61 < 0x1A) {
		      return codePoint - 0x61;
		    }
		    return base;
		  };

		  /**
		   * Converts a digit/integer into a basic code point.
		   * @see `basicToDigit()`
		   * @private
		   * @param {Number} digit The numeric value of a basic code point.
		   * @returns {Number} The basic code point whose value (when used for
		   * representing integers) is `digit`, which needs to be in the range
		   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		   * used; else, the lowercase form is used. The behavior is undefined
		   * if `flag` is non-zero and `digit` has no uppercase form.
		   */
		  var digitToBasic = function digitToBasic(digit, flag) {
		    //  0..25 map to ASCII a..z or A..Z
		    // 26..35 map to ASCII 0..9
		    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		  };

		  /**
		   * Bias adaptation function as per section 3.4 of RFC 3492.
		   * https://tools.ietf.org/html/rfc3492#section-3.4
		   * @private
		   */
		  var adapt = function adapt(delta, numPoints, firstTime) {
		    var k = 0;
		    delta = firstTime ? floor(delta / damp) : delta >> 1;
		    delta += floor(delta / numPoints);
		    for (; /* no initialization */delta > baseMinusTMin * tMax >> 1; k += base) {
		      delta = floor(delta / baseMinusTMin);
		    }
		    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		  };

		  /**
		   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		   * symbols.
		   * @memberOf punycode
		   * @param {String} input The Punycode string of ASCII-only symbols.
		   * @returns {String} The resulting string of Unicode symbols.
		   */
		  var decode = function decode(input) {
		    // Don't use UCS-2.
		    var output = [];
		    var inputLength = input.length;
		    var i = 0;
		    var n = initialN;
		    var bias = initialBias;

		    // Handle the basic code points: let `basic` be the number of input code
		    // points before the last delimiter, or `0` if there is none, then copy
		    // the first basic code points to the output.

		    var basic = input.lastIndexOf(delimiter);
		    if (basic < 0) {
		      basic = 0;
		    }
		    for (var j = 0; j < basic; ++j) {
		      // if it's not a basic code point
		      if (input.charCodeAt(j) >= 0x80) {
		        error$1('not-basic');
		      }
		      output.push(input.charCodeAt(j));
		    }

		    // Main decoding loop: start just after the last delimiter if any basic code
		    // points were copied; start at the beginning otherwise.

		    for (var index = basic > 0 ? basic + 1 : 0; index < inputLength;) /* no final expression */{
		      // `index` is the index of the next character to be consumed.
		      // Decode a generalized variable-length integer into `delta`,
		      // which gets added to `i`. The overflow checking is easier
		      // if we increase `i` as we go, then subtract off its starting
		      // value at the end to obtain `delta`.
		      var oldi = i;
		      for (var w = 1, k = base;; /* no condition */k += base) {
		        if (index >= inputLength) {
		          error$1('invalid-input');
		        }
		        var digit = basicToDigit(input.charCodeAt(index++));
		        if (digit >= base || digit > floor((maxInt - i) / w)) {
		          error$1('overflow');
		        }
		        i += digit * w;
		        var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
		        if (digit < t) {
		          break;
		        }
		        var baseMinusT = base - t;
		        if (w > floor(maxInt / baseMinusT)) {
		          error$1('overflow');
		        }
		        w *= baseMinusT;
		      }
		      var out = output.length + 1;
		      bias = adapt(i - oldi, out, oldi == 0);

		      // `i` was supposed to wrap around from `out` to `0`,
		      // incrementing `n` each time, so we'll fix that now:
		      if (floor(i / out) > maxInt - n) {
		        error$1('overflow');
		      }
		      n += floor(i / out);
		      i %= out;

		      // Insert `n` at position `i` of the output.
		      output.splice(i++, 0, n);
		    }
		    return String.fromCodePoint.apply(String, output);
		  };

		  /**
		   * Converts a string of Unicode symbols (e.g. a domain name label) to a
		   * Punycode string of ASCII-only symbols.
		   * @memberOf punycode
		   * @param {String} input The string of Unicode symbols.
		   * @returns {String} The resulting Punycode string of ASCII-only symbols.
		   */
		  var encode = function encode(input) {
		    var output = [];

		    // Convert the input in UCS-2 to an array of Unicode code points.
		    input = ucs2decode(input);

		    // Cache the length.
		    var inputLength = input.length;

		    // Initialize the state.
		    var n = initialN;
		    var delta = 0;
		    var bias = initialBias;

		    // Handle the basic code points.
		    var _iteratorNormalCompletion = true;
		    var _didIteratorError = false;
		    var _iteratorError = undefined;
		    try {
		      for (var _iterator = input[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
		        var _currentValue2 = _step.value;
		        if (_currentValue2 < 0x80) {
		          output.push(stringFromCharCode(_currentValue2));
		        }
		      }
		    } catch (err) {
		      _didIteratorError = true;
		      _iteratorError = err;
		    } finally {
		      try {
		        if (!_iteratorNormalCompletion && _iterator.return) {
		          _iterator.return();
		        }
		      } finally {
		        if (_didIteratorError) {
		          throw _iteratorError;
		        }
		      }
		    }
		    var basicLength = output.length;
		    var handledCPCount = basicLength;

		    // `handledCPCount` is the number of code points that have been handled;
		    // `basicLength` is the number of basic code points.

		    // Finish the basic string with a delimiter unless it's empty.
		    if (basicLength) {
		      output.push(delimiter);
		    }

		    // Main encoding loop:
		    while (handledCPCount < inputLength) {
		      // All non-basic code points < n have been handled already. Find the next
		      // larger one:
		      var m = maxInt;
		      var _iteratorNormalCompletion2 = true;
		      var _didIteratorError2 = false;
		      var _iteratorError2 = undefined;
		      try {
		        for (var _iterator2 = input[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
		          var currentValue = _step2.value;
		          if (currentValue >= n && currentValue < m) {
		            m = currentValue;
		          }
		        }

		        // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
		        // but guard against overflow.
		      } catch (err) {
		        _didIteratorError2 = true;
		        _iteratorError2 = err;
		      } finally {
		        try {
		          if (!_iteratorNormalCompletion2 && _iterator2.return) {
		            _iterator2.return();
		          }
		        } finally {
		          if (_didIteratorError2) {
		            throw _iteratorError2;
		          }
		        }
		      }
		      var handledCPCountPlusOne = handledCPCount + 1;
		      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
		        error$1('overflow');
		      }
		      delta += (m - n) * handledCPCountPlusOne;
		      n = m;
		      var _iteratorNormalCompletion3 = true;
		      var _didIteratorError3 = false;
		      var _iteratorError3 = undefined;
		      try {
		        for (var _iterator3 = input[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
		          var _currentValue = _step3.value;
		          if (_currentValue < n && ++delta > maxInt) {
		            error$1('overflow');
		          }
		          if (_currentValue == n) {
		            // Represent delta as a generalized variable-length integer.
		            var q = delta;
		            for (var k = base;; /* no condition */k += base) {
		              var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
		              if (q < t) {
		                break;
		              }
		              var qMinusT = q - t;
		              var baseMinusT = base - t;
		              output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
		              q = floor(qMinusT / baseMinusT);
		            }
		            output.push(stringFromCharCode(digitToBasic(q, 0)));
		            bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
		            delta = 0;
		            ++handledCPCount;
		          }
		        }
		      } catch (err) {
		        _didIteratorError3 = true;
		        _iteratorError3 = err;
		      } finally {
		        try {
		          if (!_iteratorNormalCompletion3 && _iterator3.return) {
		            _iterator3.return();
		          }
		        } finally {
		          if (_didIteratorError3) {
		            throw _iteratorError3;
		          }
		        }
		      }
		      ++delta;
		      ++n;
		    }
		    return output.join('');
		  };

		  /**
		   * Converts a Punycode string representing a domain name or an email address
		   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		   * it doesn't matter if you call it on a string that has already been
		   * converted to Unicode.
		   * @memberOf punycode
		   * @param {String} input The Punycoded domain name or email address to
		   * convert to Unicode.
		   * @returns {String} The Unicode representation of the given Punycode
		   * string.
		   */
		  var toUnicode = function toUnicode(input) {
		    return mapDomain(input, function (string) {
		      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
		    });
		  };

		  /**
		   * Converts a Unicode string representing a domain name or an email address to
		   * Punycode. Only the non-ASCII parts of the domain name will be converted,
		   * i.e. it doesn't matter if you call it with a domain that's already in
		   * ASCII.
		   * @memberOf punycode
		   * @param {String} input The domain name or email address to convert, as a
		   * Unicode string.
		   * @returns {String} The Punycode representation of the given domain name or
		   * email address.
		   */
		  var toASCII = function toASCII(input) {
		    return mapDomain(input, function (string) {
		      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
		    });
		  };

		  /*--------------------------------------------------------------------------*/

		  /** Define the public API */
		  var punycode = {
		    /**
		     * A string representing the current Punycode.js version number.
		     * @memberOf punycode
		     * @type String
		     */
		    'version': '2.1.0',
		    /**
		     * An object of methods to convert from JavaScript's internal character
		     * representation (UCS-2) to Unicode code points, and back.
		     * @see <https://mathiasbynens.be/notes/javascript-encoding>
		     * @memberOf punycode
		     * @type Object
		     */
		    'ucs2': {
		      'decode': ucs2decode,
		      'encode': ucs2encode
		    },
		    'decode': decode,
		    'encode': encode,
		    'toASCII': toASCII,
		    'toUnicode': toUnicode
		  };

		  /**
		   * URI.js
		   *
		   * @fileoverview An RFC 3986 compliant, scheme extendable URI parsing/validating/resolving library for JavaScript.
		   * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
		   * @see http://github.com/garycourt/uri-js
		   */
		  /**
		   * Copyright 2011 Gary Court. All rights reserved.
		   *
		   * Redistribution and use in source and binary forms, with or without modification, are
		   * permitted provided that the following conditions are met:
		   *
		   *    1. Redistributions of source code must retain the above copyright notice, this list of
		   *       conditions and the following disclaimer.
		   *
		   *    2. Redistributions in binary form must reproduce the above copyright notice, this list
		   *       of conditions and the following disclaimer in the documentation and/or other materials
		   *       provided with the distribution.
		   *
		   * THIS SOFTWARE IS PROVIDED BY GARY COURT ``AS IS'' AND ANY EXPRESS OR IMPLIED
		   * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
		   * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL GARY COURT OR
		   * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
		   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
		   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
		   * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
		   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
		   * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
		   *
		   * The views and conclusions contained in the software and documentation are those of the
		   * authors and should not be interpreted as representing official policies, either expressed
		   * or implied, of Gary Court.
		   */
		  var SCHEMES = {};
		  function pctEncChar(chr) {
		    var c = chr.charCodeAt(0);
		    var e = void 0;
		    if (c < 16) e = "%0" + c.toString(16).toUpperCase();else if (c < 128) e = "%" + c.toString(16).toUpperCase();else if (c < 2048) e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();else e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
		    return e;
		  }
		  function pctDecChars(str) {
		    var newStr = "";
		    var i = 0;
		    var il = str.length;
		    while (i < il) {
		      var c = parseInt(str.substr(i + 1, 2), 16);
		      if (c < 128) {
		        newStr += String.fromCharCode(c);
		        i += 3;
		      } else if (c >= 194 && c < 224) {
		        if (il - i >= 6) {
		          var c2 = parseInt(str.substr(i + 4, 2), 16);
		          newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
		        } else {
		          newStr += str.substr(i, 6);
		        }
		        i += 6;
		      } else if (c >= 224) {
		        if (il - i >= 9) {
		          var _c = parseInt(str.substr(i + 4, 2), 16);
		          var c3 = parseInt(str.substr(i + 7, 2), 16);
		          newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
		        } else {
		          newStr += str.substr(i, 9);
		        }
		        i += 9;
		      } else {
		        newStr += str.substr(i, 3);
		        i += 3;
		      }
		    }
		    return newStr;
		  }
		  function _normalizeComponentEncoding(components, protocol) {
		    function decodeUnreserved(str) {
		      var decStr = pctDecChars(str);
		      return !decStr.match(protocol.UNRESERVED) ? str : decStr;
		    }
		    if (components.scheme) components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_SCHEME, "");
		    if (components.userinfo !== undefined) components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
		    if (components.host !== undefined) components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
		    if (components.path !== undefined) components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
		    if (components.query !== undefined) components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
		    if (components.fragment !== undefined) components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
		    return components;
		  }
		  function _stripLeadingZeros(str) {
		    return str.replace(/^0*(.*)/, "$1") || "0";
		  }
		  function _normalizeIPv4(host, protocol) {
		    var matches = host.match(protocol.IPV4ADDRESS) || [];
		    var _matches = slicedToArray(matches, 2),
		      address = _matches[1];
		    if (address) {
		      return address.split(".").map(_stripLeadingZeros).join(".");
		    } else {
		      return host;
		    }
		  }
		  function _normalizeIPv6(host, protocol) {
		    var matches = host.match(protocol.IPV6ADDRESS) || [];
		    var _matches2 = slicedToArray(matches, 3),
		      address = _matches2[1],
		      zone = _matches2[2];
		    if (address) {
		      var _address$toLowerCase$ = address.toLowerCase().split('::').reverse(),
		        _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2),
		        last = _address$toLowerCase$2[0],
		        first = _address$toLowerCase$2[1];
		      var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
		      var lastFields = last.split(":").map(_stripLeadingZeros);
		      var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
		      var fieldCount = isLastFieldIPv4Address ? 7 : 8;
		      var lastFieldsStart = lastFields.length - fieldCount;
		      var fields = Array(fieldCount);
		      for (var x = 0; x < fieldCount; ++x) {
		        fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || '';
		      }
		      if (isLastFieldIPv4Address) {
		        fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
		      }
		      var allZeroFields = fields.reduce(function (acc, field, index) {
		        if (!field || field === "0") {
		          var lastLongest = acc[acc.length - 1];
		          if (lastLongest && lastLongest.index + lastLongest.length === index) {
		            lastLongest.length++;
		          } else {
		            acc.push({
		              index: index,
		              length: 1
		            });
		          }
		        }
		        return acc;
		      }, []);
		      var longestZeroFields = allZeroFields.sort(function (a, b) {
		        return b.length - a.length;
		      })[0];
		      var newHost = void 0;
		      if (longestZeroFields && longestZeroFields.length > 1) {
		        var newFirst = fields.slice(0, longestZeroFields.index);
		        var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
		        newHost = newFirst.join(":") + "::" + newLast.join(":");
		      } else {
		        newHost = fields.join(":");
		      }
		      if (zone) {
		        newHost += "%" + zone;
		      }
		      return newHost;
		    } else {
		      return host;
		    }
		  }
		  var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
		  var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;
		  function parse(uriString) {
		    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		    var components = {};
		    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
		    if (options.reference === "suffix") uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
		    var matches = uriString.match(URI_PARSE);
		    if (matches) {
		      if (NO_MATCH_IS_UNDEFINED) {
		        //store each component
		        components.scheme = matches[1];
		        components.userinfo = matches[3];
		        components.host = matches[4];
		        components.port = parseInt(matches[5], 10);
		        components.path = matches[6] || "";
		        components.query = matches[7];
		        components.fragment = matches[8];
		        //fix port number
		        if (isNaN(components.port)) {
		          components.port = matches[5];
		        }
		      } else {
		        //IE FIX for improper RegExp matching
		        //store each component
		        components.scheme = matches[1] || undefined;
		        components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
		        components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
		        components.port = parseInt(matches[5], 10);
		        components.path = matches[6] || "";
		        components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
		        components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined;
		        //fix port number
		        if (isNaN(components.port)) {
		          components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
		        }
		      }
		      if (components.host) {
		        //normalize IP hosts
		        components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
		      }
		      //determine reference type
		      if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
		        components.reference = "same-document";
		      } else if (components.scheme === undefined) {
		        components.reference = "relative";
		      } else if (components.fragment === undefined) {
		        components.reference = "absolute";
		      } else {
		        components.reference = "uri";
		      }
		      //check for reference errors
		      if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
		        components.error = components.error || "URI is not a " + options.reference + " reference.";
		      }
		      //find scheme handler
		      var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
		      //check if scheme can't handle IRIs
		      if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
		        //if host component is a domain name
		        if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
		          //convert Unicode IDN -> ASCII IDN
		          try {
		            components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
		          } catch (e) {
		            components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
		          }
		        }
		        //convert IRI -> URI
		        _normalizeComponentEncoding(components, URI_PROTOCOL);
		      } else {
		        //normalize encodings
		        _normalizeComponentEncoding(components, protocol);
		      }
		      //perform scheme specific parsing
		      if (schemeHandler && schemeHandler.parse) {
		        schemeHandler.parse(components, options);
		      }
		    } else {
		      components.error = components.error || "URI can not be parsed.";
		    }
		    return components;
		  }
		  function _recomposeAuthority(components, options) {
		    var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
		    var uriTokens = [];
		    if (components.userinfo !== undefined) {
		      uriTokens.push(components.userinfo);
		      uriTokens.push("@");
		    }
		    if (components.host !== undefined) {
		      //normalize IP hosts, add brackets and escape zone separator for IPv6
		      uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function (_, $1, $2) {
		        return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
		      }));
		    }
		    if (typeof components.port === "number" || typeof components.port === "string") {
		      uriTokens.push(":");
		      uriTokens.push(String(components.port));
		    }
		    return uriTokens.length ? uriTokens.join("") : undefined;
		  }
		  var RDS1 = /^\.\.?\//;
		  var RDS2 = /^\/\.(\/|$)/;
		  var RDS3 = /^\/\.\.(\/|$)/;
		  var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
		  function removeDotSegments(input) {
		    var output = [];
		    while (input.length) {
		      if (input.match(RDS1)) {
		        input = input.replace(RDS1, "");
		      } else if (input.match(RDS2)) {
		        input = input.replace(RDS2, "/");
		      } else if (input.match(RDS3)) {
		        input = input.replace(RDS3, "/");
		        output.pop();
		      } else if (input === "." || input === "..") {
		        input = "";
		      } else {
		        var im = input.match(RDS5);
		        if (im) {
		          var s = im[0];
		          input = input.slice(s.length);
		          output.push(s);
		        } else {
		          throw new Error("Unexpected dot segment condition");
		        }
		      }
		    }
		    return output.join("");
		  }
		  function serialize(components) {
		    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		    var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
		    var uriTokens = [];
		    //find scheme handler
		    var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
		    //perform scheme specific serialization
		    if (schemeHandler && schemeHandler.serialize) schemeHandler.serialize(components, options);
		    if (components.host) {
		      //if host component is an IPv6 address
		      if (protocol.IPV6ADDRESS.test(components.host)) ;
		      //TODO: normalize IPv6 address as per RFC 5952

		      //if host component is a domain name
		      else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
		        //convert IDN via punycode
		        try {
		          components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
		        } catch (e) {
		          components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
		        }
		      }
		    }
		    //normalize encoding
		    _normalizeComponentEncoding(components, protocol);
		    if (options.reference !== "suffix" && components.scheme) {
		      uriTokens.push(components.scheme);
		      uriTokens.push(":");
		    }
		    var authority = _recomposeAuthority(components, options);
		    if (authority !== undefined) {
		      if (options.reference !== "suffix") {
		        uriTokens.push("//");
		      }
		      uriTokens.push(authority);
		      if (components.path && components.path.charAt(0) !== "/") {
		        uriTokens.push("/");
		      }
		    }
		    if (components.path !== undefined) {
		      var s = components.path;
		      if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
		        s = removeDotSegments(s);
		      }
		      if (authority === undefined) {
		        s = s.replace(/^\/\//, "/%2F"); //don't allow the path to start with "//"
		      }
		      uriTokens.push(s);
		    }
		    if (components.query !== undefined) {
		      uriTokens.push("?");
		      uriTokens.push(components.query);
		    }
		    if (components.fragment !== undefined) {
		      uriTokens.push("#");
		      uriTokens.push(components.fragment);
		    }
		    return uriTokens.join(""); //merge tokens into a string
		  }
		  function resolveComponents(base, relative) {
		    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
		    var skipNormalization = arguments[3];
		    var target = {};
		    if (!skipNormalization) {
		      base = parse(serialize(base, options), options); //normalize base components
		      relative = parse(serialize(relative, options), options); //normalize relative components
		    }
		    options = options || {};
		    if (!options.tolerant && relative.scheme) {
		      target.scheme = relative.scheme;
		      //target.authority = relative.authority;
		      target.userinfo = relative.userinfo;
		      target.host = relative.host;
		      target.port = relative.port;
		      target.path = removeDotSegments(relative.path || "");
		      target.query = relative.query;
		    } else {
		      if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
		        //target.authority = relative.authority;
		        target.userinfo = relative.userinfo;
		        target.host = relative.host;
		        target.port = relative.port;
		        target.path = removeDotSegments(relative.path || "");
		        target.query = relative.query;
		      } else {
		        if (!relative.path) {
		          target.path = base.path;
		          if (relative.query !== undefined) {
		            target.query = relative.query;
		          } else {
		            target.query = base.query;
		          }
		        } else {
		          if (relative.path.charAt(0) === "/") {
		            target.path = removeDotSegments(relative.path);
		          } else {
		            if ((base.userinfo !== undefined || base.host !== undefined || base.port !== undefined) && !base.path) {
		              target.path = "/" + relative.path;
		            } else if (!base.path) {
		              target.path = relative.path;
		            } else {
		              target.path = base.path.slice(0, base.path.lastIndexOf("/") + 1) + relative.path;
		            }
		            target.path = removeDotSegments(target.path);
		          }
		          target.query = relative.query;
		        }
		        //target.authority = base.authority;
		        target.userinfo = base.userinfo;
		        target.host = base.host;
		        target.port = base.port;
		      }
		      target.scheme = base.scheme;
		    }
		    target.fragment = relative.fragment;
		    return target;
		  }
		  function resolve(baseURI, relativeURI, options) {
		    var schemelessOptions = assign({
		      scheme: 'null'
		    }, options);
		    return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
		  }
		  function normalize(uri, options) {
		    if (typeof uri === "string") {
		      uri = serialize(parse(uri, options), options);
		    } else if (typeOf(uri) === "object") {
		      uri = parse(serialize(uri, options), options);
		    }
		    return uri;
		  }
		  function equal(uriA, uriB, options) {
		    if (typeof uriA === "string") {
		      uriA = serialize(parse(uriA, options), options);
		    } else if (typeOf(uriA) === "object") {
		      uriA = serialize(uriA, options);
		    }
		    if (typeof uriB === "string") {
		      uriB = serialize(parse(uriB, options), options);
		    } else if (typeOf(uriB) === "object") {
		      uriB = serialize(uriB, options);
		    }
		    return uriA === uriB;
		  }
		  function escapeComponent(str, options) {
		    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
		  }
		  function unescapeComponent(str, options) {
		    return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
		  }
		  var handler = {
		    scheme: "http",
		    domainHost: true,
		    parse: function parse(components, options) {
		      //report missing host
		      if (!components.host) {
		        components.error = components.error || "HTTP URIs must have a host.";
		      }
		      return components;
		    },
		    serialize: function serialize(components, options) {
		      var secure = String(components.scheme).toLowerCase() === "https";
		      //normalize the default port
		      if (components.port === (secure ? 443 : 80) || components.port === "") {
		        components.port = undefined;
		      }
		      //normalize the empty path
		      if (!components.path) {
		        components.path = "/";
		      }
		      //NOTE: We do not parse query strings for HTTP URIs
		      //as WWW Form Url Encoded query strings are part of the HTML4+ spec,
		      //and not the HTTP spec.
		      return components;
		    }
		  };
		  var handler$1 = {
		    scheme: "https",
		    domainHost: handler.domainHost,
		    parse: handler.parse,
		    serialize: handler.serialize
		  };
		  function isSecure(wsComponents) {
		    return typeof wsComponents.secure === 'boolean' ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
		  }
		  //RFC 6455
		  var handler$2 = {
		    scheme: "ws",
		    domainHost: true,
		    parse: function parse(components, options) {
		      var wsComponents = components;
		      //indicate if the secure flag is set
		      wsComponents.secure = isSecure(wsComponents);
		      //construct resouce name
		      wsComponents.resourceName = (wsComponents.path || '/') + (wsComponents.query ? '?' + wsComponents.query : '');
		      wsComponents.path = undefined;
		      wsComponents.query = undefined;
		      return wsComponents;
		    },
		    serialize: function serialize(wsComponents, options) {
		      //normalize the default port
		      if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
		        wsComponents.port = undefined;
		      }
		      //ensure scheme matches secure flag
		      if (typeof wsComponents.secure === 'boolean') {
		        wsComponents.scheme = wsComponents.secure ? 'wss' : 'ws';
		        wsComponents.secure = undefined;
		      }
		      //reconstruct path from resource name
		      if (wsComponents.resourceName) {
		        var _wsComponents$resourc = wsComponents.resourceName.split('?'),
		          _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2),
		          path = _wsComponents$resourc2[0],
		          query = _wsComponents$resourc2[1];
		        wsComponents.path = path && path !== '/' ? path : undefined;
		        wsComponents.query = query;
		        wsComponents.resourceName = undefined;
		      }
		      //forbid fragment component
		      wsComponents.fragment = undefined;
		      return wsComponents;
		    }
		  };
		  var handler$3 = {
		    scheme: "wss",
		    domainHost: handler$2.domainHost,
		    parse: handler$2.parse,
		    serialize: handler$2.serialize
		  };
		  var O = {};
		  //RFC 3986
		  var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + ("\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" ) + "]";
		  var HEXDIG$$ = "[0-9A-Fa-f]"; //case-insensitive
		  var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$)); //expanded
		  //RFC 5322, except these symbols as per RFC 6068: @ : / ? # [ ] & ; =
		  //const ATEXT$$ = "[A-Za-z0-9\\!\\#\\$\\%\\&\\'\\*\\+\\-\\/\\=\\?\\^\\_\\`\\{\\|\\}\\~]";
		  //const WSP$$ = "[\\x20\\x09]";
		  //const OBS_QTEXT$$ = "[\\x01-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]";  //(%d1-8 / %d11-12 / %d14-31 / %d127)
		  //const QTEXT$$ = merge("[\\x21\\x23-\\x5B\\x5D-\\x7E]", OBS_QTEXT$$);  //%d33 / %d35-91 / %d93-126 / obs-qtext
		  //const VCHAR$$ = "[\\x21-\\x7E]";
		  //const WSP$$ = "[\\x20\\x09]";
		  //const OBS_QP$ = subexp("\\\\" + merge("[\\x00\\x0D\\x0A]", OBS_QTEXT$$));  //%d0 / CR / LF / obs-qtext
		  //const FWS$ = subexp(subexp(WSP$$ + "*" + "\\x0D\\x0A") + "?" + WSP$$ + "+");
		  //const QUOTED_PAIR$ = subexp(subexp("\\\\" + subexp(VCHAR$$ + "|" + WSP$$)) + "|" + OBS_QP$);
		  //const QUOTED_STRING$ = subexp('\\"' + subexp(FWS$ + "?" + QCONTENT$) + "*" + FWS$ + "?" + '\\"');
		  var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
		  var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
		  var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
		  var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
		  var UNRESERVED = new RegExp(UNRESERVED$$, "g");
		  var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
		  var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", '[\\"]', VCHAR$$), "g");
		  var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
		  var NOT_HFVALUE = NOT_HFNAME;
		  function decodeUnreserved(str) {
		    var decStr = pctDecChars(str);
		    return !decStr.match(UNRESERVED) ? str : decStr;
		  }
		  var handler$4 = {
		    scheme: "mailto",
		    parse: function parse$$1(components, options) {
		      var mailtoComponents = components;
		      var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
		      mailtoComponents.path = undefined;
		      if (mailtoComponents.query) {
		        var unknownHeaders = false;
		        var headers = {};
		        var hfields = mailtoComponents.query.split("&");
		        for (var x = 0, xl = hfields.length; x < xl; ++x) {
		          var hfield = hfields[x].split("=");
		          switch (hfield[0]) {
		            case "to":
		              var toAddrs = hfield[1].split(",");
		              for (var _x = 0, _xl = toAddrs.length; _x < _xl; ++_x) {
		                to.push(toAddrs[_x]);
		              }
		              break;
		            case "subject":
		              mailtoComponents.subject = unescapeComponent(hfield[1], options);
		              break;
		            case "body":
		              mailtoComponents.body = unescapeComponent(hfield[1], options);
		              break;
		            default:
		              unknownHeaders = true;
		              headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
		              break;
		          }
		        }
		        if (unknownHeaders) mailtoComponents.headers = headers;
		      }
		      mailtoComponents.query = undefined;
		      for (var _x2 = 0, _xl2 = to.length; _x2 < _xl2; ++_x2) {
		        var addr = to[_x2].split("@");
		        addr[0] = unescapeComponent(addr[0]);
		        if (!options.unicodeSupport) {
		          //convert Unicode IDN -> ASCII IDN
		          try {
		            addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
		          } catch (e) {
		            mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
		          }
		        } else {
		          addr[1] = unescapeComponent(addr[1], options).toLowerCase();
		        }
		        to[_x2] = addr.join("@");
		      }
		      return mailtoComponents;
		    },
		    serialize: function serialize$$1(mailtoComponents, options) {
		      var components = mailtoComponents;
		      var to = toArray(mailtoComponents.to);
		      if (to) {
		        for (var x = 0, xl = to.length; x < xl; ++x) {
		          var toAddr = String(to[x]);
		          var atIdx = toAddr.lastIndexOf("@");
		          var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
		          var domain = toAddr.slice(atIdx + 1);
		          //convert IDN via punycode
		          try {
		            domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
		          } catch (e) {
		            components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
		          }
		          to[x] = localPart + "@" + domain;
		        }
		        components.path = to.join(",");
		      }
		      var headers = mailtoComponents.headers = mailtoComponents.headers || {};
		      if (mailtoComponents.subject) headers["subject"] = mailtoComponents.subject;
		      if (mailtoComponents.body) headers["body"] = mailtoComponents.body;
		      var fields = [];
		      for (var name in headers) {
		        if (headers[name] !== O[name]) {
		          fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
		        }
		      }
		      if (fields.length) {
		        components.query = fields.join("&");
		      }
		      return components;
		    }
		  };
		  var URN_PARSE = /^([^\:]+)\:(.*)/;
		  //RFC 2141
		  var handler$5 = {
		    scheme: "urn",
		    parse: function parse$$1(components, options) {
		      var matches = components.path && components.path.match(URN_PARSE);
		      var urnComponents = components;
		      if (matches) {
		        var scheme = options.scheme || urnComponents.scheme || "urn";
		        var nid = matches[1].toLowerCase();
		        var nss = matches[2];
		        var urnScheme = scheme + ":" + (options.nid || nid);
		        var schemeHandler = SCHEMES[urnScheme];
		        urnComponents.nid = nid;
		        urnComponents.nss = nss;
		        urnComponents.path = undefined;
		        if (schemeHandler) {
		          urnComponents = schemeHandler.parse(urnComponents, options);
		        }
		      } else {
		        urnComponents.error = urnComponents.error || "URN can not be parsed.";
		      }
		      return urnComponents;
		    },
		    serialize: function serialize$$1(urnComponents, options) {
		      var scheme = options.scheme || urnComponents.scheme || "urn";
		      var nid = urnComponents.nid;
		      var urnScheme = scheme + ":" + (options.nid || nid);
		      var schemeHandler = SCHEMES[urnScheme];
		      if (schemeHandler) {
		        urnComponents = schemeHandler.serialize(urnComponents, options);
		      }
		      var uriComponents = urnComponents;
		      var nss = urnComponents.nss;
		      uriComponents.path = (nid || options.nid) + ":" + nss;
		      return uriComponents;
		    }
		  };
		  var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
		  //RFC 4122
		  var handler$6 = {
		    scheme: "urn:uuid",
		    parse: function parse(urnComponents, options) {
		      var uuidComponents = urnComponents;
		      uuidComponents.uuid = uuidComponents.nss;
		      uuidComponents.nss = undefined;
		      if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
		        uuidComponents.error = uuidComponents.error || "UUID is not valid.";
		      }
		      return uuidComponents;
		    },
		    serialize: function serialize(uuidComponents, options) {
		      var urnComponents = uuidComponents;
		      //normalize UUID
		      urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
		      return urnComponents;
		    }
		  };
		  SCHEMES[handler.scheme] = handler;
		  SCHEMES[handler$1.scheme] = handler$1;
		  SCHEMES[handler$2.scheme] = handler$2;
		  SCHEMES[handler$3.scheme] = handler$3;
		  SCHEMES[handler$4.scheme] = handler$4;
		  SCHEMES[handler$5.scheme] = handler$5;
		  SCHEMES[handler$6.scheme] = handler$6;
		  exports.SCHEMES = SCHEMES;
		  exports.pctEncChar = pctEncChar;
		  exports.pctDecChars = pctDecChars;
		  exports.parse = parse;
		  exports.removeDotSegments = removeDotSegments;
		  exports.serialize = serialize;
		  exports.resolveComponents = resolveComponents;
		  exports.resolve = resolve;
		  exports.normalize = normalize;
		  exports.equal = equal;
		  exports.escapeComponent = escapeComponent;
		  exports.unescapeComponent = unescapeComponent;
		  Object.defineProperty(exports, '__esModule', {
		    value: true
		  });
		}); 
	} (uri_all, uri_all.exports));

	var uri_allExports = uri_all.exports;

	Object.defineProperty(uri$1, "__esModule", {
	  value: true
	});
	const uri = uri_allExports;
	uri.code = 'require("ajv/dist/runtime/uri").default';
	uri$1.default = uri;

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
		var validate_1 = requireValidate();
		Object.defineProperty(exports, "KeywordCxt", {
		  enumerable: true,
		  get: function () {
		    return validate_1.KeywordCxt;
		  }
		});
		var codegen_1 = codegen;
		Object.defineProperty(exports, "_", {
		  enumerable: true,
		  get: function () {
		    return codegen_1._;
		  }
		});
		Object.defineProperty(exports, "str", {
		  enumerable: true,
		  get: function () {
		    return codegen_1.str;
		  }
		});
		Object.defineProperty(exports, "stringify", {
		  enumerable: true,
		  get: function () {
		    return codegen_1.stringify;
		  }
		});
		Object.defineProperty(exports, "nil", {
		  enumerable: true,
		  get: function () {
		    return codegen_1.nil;
		  }
		});
		Object.defineProperty(exports, "Name", {
		  enumerable: true,
		  get: function () {
		    return codegen_1.Name;
		  }
		});
		Object.defineProperty(exports, "CodeGen", {
		  enumerable: true,
		  get: function () {
		    return codegen_1.CodeGen;
		  }
		});
		const validation_error_1 = requireValidation_error();
		const ref_error_1 = requireRef_error();
		const rules_1 = rules;
		const compile_1 = compile$1;
		const codegen_2 = codegen;
		const resolve_1 = resolve$1;
		const dataType_1 = dataType;
		const util_1 = util;
		const $dataRefSchema = require$$9;
		const uri_1 = uri$1;
		const defaultRegExp = (str, flags) => new RegExp(str, flags);
		defaultRegExp.code = "new RegExp";
		const META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes"];
		const EXT_SCOPE_NAMES = new Set(["validate", "serialize", "parse", "wrapper", "root", "schema", "keyword", "pattern", "formats", "validate$data", "func", "obj", "Error"]);
		const removedOptions = {
		  errorDataPath: "",
		  format: "`validateFormats: false` can be used instead.",
		  nullable: '"nullable" keyword is supported by default.',
		  jsonPointers: "Deprecated jsPropertySyntax can be used instead.",
		  extendRefs: "Deprecated ignoreKeywordsWithRef can be used instead.",
		  missingRefs: "Pass empty schema with $id that should be ignored to ajv.addSchema.",
		  processCode: "Use option `code: {process: (code, schemaEnv: object) => string}`",
		  sourceCode: "Use option `code: {source: true}`",
		  strictDefaults: "It is default now, see option `strict`.",
		  strictKeywords: "It is default now, see option `strict`.",
		  uniqueItems: '"uniqueItems" keyword is always validated.',
		  unknownFormats: "Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",
		  cache: "Map is used as cache, schema object as key.",
		  serialize: "Map is used as cache, schema object as key.",
		  ajvErrors: "It is default now."
		};
		const deprecatedOptions = {
		  ignoreKeywordsWithRef: "",
		  jsPropertySyntax: "",
		  unicode: '"minLength"/"maxLength" account for unicode characters by default.'
		};
		const MAX_EXPRESSION = 200;
		// eslint-disable-next-line complexity
		function requiredOptions(o) {
		  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0;
		  const s = o.strict;
		  const _optz = (_a = o.code) === null || _a === void 0 ? void 0 : _a.optimize;
		  const optimize = _optz === true || _optz === undefined ? 1 : _optz || 0;
		  const regExp = (_c = (_b = o.code) === null || _b === void 0 ? void 0 : _b.regExp) !== null && _c !== void 0 ? _c : defaultRegExp;
		  const uriResolver = (_d = o.uriResolver) !== null && _d !== void 0 ? _d : uri_1.default;
		  return {
		    strictSchema: (_f = (_e = o.strictSchema) !== null && _e !== void 0 ? _e : s) !== null && _f !== void 0 ? _f : true,
		    strictNumbers: (_h = (_g = o.strictNumbers) !== null && _g !== void 0 ? _g : s) !== null && _h !== void 0 ? _h : true,
		    strictTypes: (_k = (_j = o.strictTypes) !== null && _j !== void 0 ? _j : s) !== null && _k !== void 0 ? _k : "log",
		    strictTuples: (_m = (_l = o.strictTuples) !== null && _l !== void 0 ? _l : s) !== null && _m !== void 0 ? _m : "log",
		    strictRequired: (_p = (_o = o.strictRequired) !== null && _o !== void 0 ? _o : s) !== null && _p !== void 0 ? _p : false,
		    code: o.code ? {
		      ...o.code,
		      optimize,
		      regExp
		    } : {
		      optimize,
		      regExp
		    },
		    loopRequired: (_q = o.loopRequired) !== null && _q !== void 0 ? _q : MAX_EXPRESSION,
		    loopEnum: (_r = o.loopEnum) !== null && _r !== void 0 ? _r : MAX_EXPRESSION,
		    meta: (_s = o.meta) !== null && _s !== void 0 ? _s : true,
		    messages: (_t = o.messages) !== null && _t !== void 0 ? _t : true,
		    inlineRefs: (_u = o.inlineRefs) !== null && _u !== void 0 ? _u : true,
		    schemaId: (_v = o.schemaId) !== null && _v !== void 0 ? _v : "$id",
		    addUsedSchema: (_w = o.addUsedSchema) !== null && _w !== void 0 ? _w : true,
		    validateSchema: (_x = o.validateSchema) !== null && _x !== void 0 ? _x : true,
		    validateFormats: (_y = o.validateFormats) !== null && _y !== void 0 ? _y : true,
		    unicodeRegExp: (_z = o.unicodeRegExp) !== null && _z !== void 0 ? _z : true,
		    int32range: (_0 = o.int32range) !== null && _0 !== void 0 ? _0 : true,
		    uriResolver: uriResolver
		  };
		}
		class Ajv {
		  constructor(opts = {}) {
		    this.schemas = {};
		    this.refs = {};
		    this.formats = {};
		    this._compilations = new Set();
		    this._loading = {};
		    this._cache = new Map();
		    opts = this.opts = {
		      ...opts,
		      ...requiredOptions(opts)
		    };
		    const {
		      es5,
		      lines
		    } = this.opts.code;
		    this.scope = new codegen_2.ValueScope({
		      scope: {},
		      prefixes: EXT_SCOPE_NAMES,
		      es5,
		      lines
		    });
		    this.logger = getLogger(opts.logger);
		    const formatOpt = opts.validateFormats;
		    opts.validateFormats = false;
		    this.RULES = (0, rules_1.getRules)();
		    checkOptions.call(this, removedOptions, opts, "NOT SUPPORTED");
		    checkOptions.call(this, deprecatedOptions, opts, "DEPRECATED", "warn");
		    this._metaOpts = getMetaSchemaOptions.call(this);
		    if (opts.formats) addInitialFormats.call(this);
		    this._addVocabularies();
		    this._addDefaultMetaSchema();
		    if (opts.keywords) addInitialKeywords.call(this, opts.keywords);
		    if (typeof opts.meta == "object") this.addMetaSchema(opts.meta);
		    addInitialSchemas.call(this);
		    opts.validateFormats = formatOpt;
		  }
		  _addVocabularies() {
		    this.addKeyword("$async");
		  }
		  _addDefaultMetaSchema() {
		    const {
		      $data,
		      meta,
		      schemaId
		    } = this.opts;
		    let _dataRefSchema = $dataRefSchema;
		    if (schemaId === "id") {
		      _dataRefSchema = {
		        ...$dataRefSchema
		      };
		      _dataRefSchema.id = _dataRefSchema.$id;
		      delete _dataRefSchema.$id;
		    }
		    if (meta && $data) this.addMetaSchema(_dataRefSchema, _dataRefSchema[schemaId], false);
		  }
		  defaultMeta() {
		    const {
		      meta,
		      schemaId
		    } = this.opts;
		    return this.opts.defaultMeta = typeof meta == "object" ? meta[schemaId] || meta : undefined;
		  }
		  validate(schemaKeyRef,
		  // key, ref or schema object
		  data // to be validated
		  ) {
		    let v;
		    if (typeof schemaKeyRef == "string") {
		      v = this.getSchema(schemaKeyRef);
		      if (!v) throw new Error(`no schema with key or ref "${schemaKeyRef}"`);
		    } else {
		      v = this.compile(schemaKeyRef);
		    }
		    const valid = v(data);
		    if (!("$async" in v)) this.errors = v.errors;
		    return valid;
		  }
		  compile(schema, _meta) {
		    const sch = this._addSchema(schema, _meta);
		    return sch.validate || this._compileSchemaEnv(sch);
		  }
		  compileAsync(schema, meta) {
		    if (typeof this.opts.loadSchema != "function") {
		      throw new Error("options.loadSchema should be a function");
		    }
		    const {
		      loadSchema
		    } = this.opts;
		    return runCompileAsync.call(this, schema, meta);
		    async function runCompileAsync(_schema, _meta) {
		      await loadMetaSchema.call(this, _schema.$schema);
		      const sch = this._addSchema(_schema, _meta);
		      return sch.validate || _compileAsync.call(this, sch);
		    }
		    async function loadMetaSchema($ref) {
		      if ($ref && !this.getSchema($ref)) {
		        await runCompileAsync.call(this, {
		          $ref
		        }, true);
		      }
		    }
		    async function _compileAsync(sch) {
		      try {
		        return this._compileSchemaEnv(sch);
		      } catch (e) {
		        if (!(e instanceof ref_error_1.default)) throw e;
		        checkLoaded.call(this, e);
		        await loadMissingSchema.call(this, e.missingSchema);
		        return _compileAsync.call(this, sch);
		      }
		    }
		    function checkLoaded({
		      missingSchema: ref,
		      missingRef
		    }) {
		      if (this.refs[ref]) {
		        throw new Error(`AnySchema ${ref} is loaded but ${missingRef} cannot be resolved`);
		      }
		    }
		    async function loadMissingSchema(ref) {
		      const _schema = await _loadSchema.call(this, ref);
		      if (!this.refs[ref]) await loadMetaSchema.call(this, _schema.$schema);
		      if (!this.refs[ref]) this.addSchema(_schema, ref, meta);
		    }
		    async function _loadSchema(ref) {
		      const p = this._loading[ref];
		      if (p) return p;
		      try {
		        return await (this._loading[ref] = loadSchema(ref));
		      } finally {
		        delete this._loading[ref];
		      }
		    }
		  }
		  // Adds schema to the instance
		  addSchema(schema,
		  // If array is passed, `key` will be ignored
		  key,
		  // Optional schema key. Can be passed to `validate` method instead of schema object or id/ref. One schema per instance can have empty `id` and `key`.
		  _meta,
		  // true if schema is a meta-schema. Used internally, addMetaSchema should be used instead.
		  _validateSchema = this.opts.validateSchema // false to skip schema validation. Used internally, option validateSchema should be used instead.
		  ) {
		    if (Array.isArray(schema)) {
		      for (const sch of schema) this.addSchema(sch, undefined, _meta, _validateSchema);
		      return this;
		    }
		    let id;
		    if (typeof schema === "object") {
		      const {
		        schemaId
		      } = this.opts;
		      id = schema[schemaId];
		      if (id !== undefined && typeof id != "string") {
		        throw new Error(`schema ${schemaId} must be string`);
		      }
		    }
		    key = (0, resolve_1.normalizeId)(key || id);
		    this._checkUnique(key);
		    this.schemas[key] = this._addSchema(schema, _meta, key, _validateSchema, true);
		    return this;
		  }
		  // Add schema that will be used to validate other schemas
		  // options in META_IGNORE_OPTIONS are alway set to false
		  addMetaSchema(schema, key,
		  // schema key
		  _validateSchema = this.opts.validateSchema // false to skip schema validation, can be used to override validateSchema option for meta-schema
		  ) {
		    this.addSchema(schema, key, true, _validateSchema);
		    return this;
		  }
		  //  Validate schema against its meta-schema
		  validateSchema(schema, throwOrLogError) {
		    if (typeof schema == "boolean") return true;
		    let $schema;
		    $schema = schema.$schema;
		    if ($schema !== undefined && typeof $schema != "string") {
		      throw new Error("$schema must be a string");
		    }
		    $schema = $schema || this.opts.defaultMeta || this.defaultMeta();
		    if (!$schema) {
		      this.logger.warn("meta-schema not available");
		      this.errors = null;
		      return true;
		    }
		    const valid = this.validate($schema, schema);
		    if (!valid && throwOrLogError) {
		      const message = "schema is invalid: " + this.errorsText();
		      if (this.opts.validateSchema === "log") this.logger.error(message);else throw new Error(message);
		    }
		    return valid;
		  }
		  // Get compiled schema by `key` or `ref`.
		  // (`key` that was passed to `addSchema` or full schema reference - `schema.$id` or resolved id)
		  getSchema(keyRef) {
		    let sch;
		    while (typeof (sch = getSchEnv.call(this, keyRef)) == "string") keyRef = sch;
		    if (sch === undefined) {
		      const {
		        schemaId
		      } = this.opts;
		      const root = new compile_1.SchemaEnv({
		        schema: {},
		        schemaId
		      });
		      sch = compile_1.resolveSchema.call(this, root, keyRef);
		      if (!sch) return;
		      this.refs[keyRef] = sch;
		    }
		    return sch.validate || this._compileSchemaEnv(sch);
		  }
		  // Remove cached schema(s).
		  // If no parameter is passed all schemas but meta-schemas are removed.
		  // If RegExp is passed all schemas with key/id matching pattern but meta-schemas are removed.
		  // Even if schema is referenced by other schemas it still can be removed as other schemas have local references.
		  removeSchema(schemaKeyRef) {
		    if (schemaKeyRef instanceof RegExp) {
		      this._removeAllSchemas(this.schemas, schemaKeyRef);
		      this._removeAllSchemas(this.refs, schemaKeyRef);
		      return this;
		    }
		    switch (typeof schemaKeyRef) {
		      case "undefined":
		        this._removeAllSchemas(this.schemas);
		        this._removeAllSchemas(this.refs);
		        this._cache.clear();
		        return this;
		      case "string":
		        {
		          const sch = getSchEnv.call(this, schemaKeyRef);
		          if (typeof sch == "object") this._cache.delete(sch.schema);
		          delete this.schemas[schemaKeyRef];
		          delete this.refs[schemaKeyRef];
		          return this;
		        }
		      case "object":
		        {
		          const cacheKey = schemaKeyRef;
		          this._cache.delete(cacheKey);
		          let id = schemaKeyRef[this.opts.schemaId];
		          if (id) {
		            id = (0, resolve_1.normalizeId)(id);
		            delete this.schemas[id];
		            delete this.refs[id];
		          }
		          return this;
		        }
		      default:
		        throw new Error("ajv.removeSchema: invalid parameter");
		    }
		  }
		  // add "vocabulary" - a collection of keywords
		  addVocabulary(definitions) {
		    for (const def of definitions) this.addKeyword(def);
		    return this;
		  }
		  addKeyword(kwdOrDef, def // deprecated
		  ) {
		    let keyword;
		    if (typeof kwdOrDef == "string") {
		      keyword = kwdOrDef;
		      if (typeof def == "object") {
		        this.logger.warn("these parameters are deprecated, see docs for addKeyword");
		        def.keyword = keyword;
		      }
		    } else if (typeof kwdOrDef == "object" && def === undefined) {
		      def = kwdOrDef;
		      keyword = def.keyword;
		      if (Array.isArray(keyword) && !keyword.length) {
		        throw new Error("addKeywords: keyword must be string or non-empty array");
		      }
		    } else {
		      throw new Error("invalid addKeywords parameters");
		    }
		    checkKeyword.call(this, keyword, def);
		    if (!def) {
		      (0, util_1.eachItem)(keyword, kwd => addRule.call(this, kwd));
		      return this;
		    }
		    keywordMetaschema.call(this, def);
		    const definition = {
		      ...def,
		      type: (0, dataType_1.getJSONTypes)(def.type),
		      schemaType: (0, dataType_1.getJSONTypes)(def.schemaType)
		    };
		    (0, util_1.eachItem)(keyword, definition.type.length === 0 ? k => addRule.call(this, k, definition) : k => definition.type.forEach(t => addRule.call(this, k, definition, t)));
		    return this;
		  }
		  getKeyword(keyword) {
		    const rule = this.RULES.all[keyword];
		    return typeof rule == "object" ? rule.definition : !!rule;
		  }
		  // Remove keyword
		  removeKeyword(keyword) {
		    // TODO return type should be Ajv
		    const {
		      RULES
		    } = this;
		    delete RULES.keywords[keyword];
		    delete RULES.all[keyword];
		    for (const group of RULES.rules) {
		      const i = group.rules.findIndex(rule => rule.keyword === keyword);
		      if (i >= 0) group.rules.splice(i, 1);
		    }
		    return this;
		  }
		  // Add format
		  addFormat(name, format) {
		    if (typeof format == "string") format = new RegExp(format);
		    this.formats[name] = format;
		    return this;
		  }
		  errorsText(errors = this.errors,
		  // optional array of validation errors
		  {
		    separator = ", ",
		    dataVar = "data"
		  } = {} // optional options with properties `separator` and `dataVar`
		  ) {
		    if (!errors || errors.length === 0) return "No errors";
		    return errors.map(e => `${dataVar}${e.instancePath} ${e.message}`).reduce((text, msg) => text + separator + msg);
		  }
		  $dataMetaSchema(metaSchema, keywordsJsonPointers) {
		    const rules = this.RULES.all;
		    metaSchema = JSON.parse(JSON.stringify(metaSchema));
		    for (const jsonPointer of keywordsJsonPointers) {
		      const segments = jsonPointer.split("/").slice(1); // first segment is an empty string
		      let keywords = metaSchema;
		      for (const seg of segments) keywords = keywords[seg];
		      for (const key in rules) {
		        const rule = rules[key];
		        if (typeof rule != "object") continue;
		        const {
		          $data
		        } = rule.definition;
		        const schema = keywords[key];
		        if ($data && schema) keywords[key] = schemaOrData(schema);
		      }
		    }
		    return metaSchema;
		  }
		  _removeAllSchemas(schemas, regex) {
		    for (const keyRef in schemas) {
		      const sch = schemas[keyRef];
		      if (!regex || regex.test(keyRef)) {
		        if (typeof sch == "string") {
		          delete schemas[keyRef];
		        } else if (sch && !sch.meta) {
		          this._cache.delete(sch.schema);
		          delete schemas[keyRef];
		        }
		      }
		    }
		  }
		  _addSchema(schema, meta, baseId, validateSchema = this.opts.validateSchema, addSchema = this.opts.addUsedSchema) {
		    let id;
		    const {
		      schemaId
		    } = this.opts;
		    if (typeof schema == "object") {
		      id = schema[schemaId];
		    } else {
		      if (this.opts.jtd) throw new Error("schema must be object");else if (typeof schema != "boolean") throw new Error("schema must be object or boolean");
		    }
		    let sch = this._cache.get(schema);
		    if (sch !== undefined) return sch;
		    baseId = (0, resolve_1.normalizeId)(id || baseId);
		    const localRefs = resolve_1.getSchemaRefs.call(this, schema, baseId);
		    sch = new compile_1.SchemaEnv({
		      schema,
		      schemaId,
		      meta,
		      baseId,
		      localRefs
		    });
		    this._cache.set(sch.schema, sch);
		    if (addSchema && !baseId.startsWith("#")) {
		      // TODO atm it is allowed to overwrite schemas without id (instead of not adding them)
		      if (baseId) this._checkUnique(baseId);
		      this.refs[baseId] = sch;
		    }
		    if (validateSchema) this.validateSchema(schema, true);
		    return sch;
		  }
		  _checkUnique(id) {
		    if (this.schemas[id] || this.refs[id]) {
		      throw new Error(`schema with key or id "${id}" already exists`);
		    }
		  }
		  _compileSchemaEnv(sch) {
		    if (sch.meta) this._compileMetaSchema(sch);else compile_1.compileSchema.call(this, sch);
		    /* istanbul ignore if */
		    if (!sch.validate) throw new Error("ajv implementation error");
		    return sch.validate;
		  }
		  _compileMetaSchema(sch) {
		    const currentOpts = this.opts;
		    this.opts = this._metaOpts;
		    try {
		      compile_1.compileSchema.call(this, sch);
		    } finally {
		      this.opts = currentOpts;
		    }
		  }
		}
		exports.default = Ajv;
		Ajv.ValidationError = validation_error_1.default;
		Ajv.MissingRefError = ref_error_1.default;
		function checkOptions(checkOpts, options, msg, log = "error") {
		  for (const key in checkOpts) {
		    const opt = key;
		    if (opt in options) this.logger[log](`${msg}: option ${key}. ${checkOpts[opt]}`);
		  }
		}
		function getSchEnv(keyRef) {
		  keyRef = (0, resolve_1.normalizeId)(keyRef); // TODO tests fail without this line
		  return this.schemas[keyRef] || this.refs[keyRef];
		}
		function addInitialSchemas() {
		  const optsSchemas = this.opts.schemas;
		  if (!optsSchemas) return;
		  if (Array.isArray(optsSchemas)) this.addSchema(optsSchemas);else for (const key in optsSchemas) this.addSchema(optsSchemas[key], key);
		}
		function addInitialFormats() {
		  for (const name in this.opts.formats) {
		    const format = this.opts.formats[name];
		    if (format) this.addFormat(name, format);
		  }
		}
		function addInitialKeywords(defs) {
		  if (Array.isArray(defs)) {
		    this.addVocabulary(defs);
		    return;
		  }
		  this.logger.warn("keywords option as map is deprecated, pass array");
		  for (const keyword in defs) {
		    const def = defs[keyword];
		    if (!def.keyword) def.keyword = keyword;
		    this.addKeyword(def);
		  }
		}
		function getMetaSchemaOptions() {
		  const metaOpts = {
		    ...this.opts
		  };
		  for (const opt of META_IGNORE_OPTIONS) delete metaOpts[opt];
		  return metaOpts;
		}
		const noLogs = {
		  log() {},
		  warn() {},
		  error() {}
		};
		function getLogger(logger) {
		  if (logger === false) return noLogs;
		  if (logger === undefined) return console;
		  if (logger.log && logger.warn && logger.error) return logger;
		  throw new Error("logger must implement log, warn and error methods");
		}
		const KEYWORD_NAME = /^[a-z_$][a-z0-9_$:-]*$/i;
		function checkKeyword(keyword, def) {
		  const {
		    RULES
		  } = this;
		  (0, util_1.eachItem)(keyword, kwd => {
		    if (RULES.keywords[kwd]) throw new Error(`Keyword ${kwd} is already defined`);
		    if (!KEYWORD_NAME.test(kwd)) throw new Error(`Keyword ${kwd} has invalid name`);
		  });
		  if (!def) return;
		  if (def.$data && !("code" in def || "validate" in def)) {
		    throw new Error('$data keyword must have "code" or "validate" function');
		  }
		}
		function addRule(keyword, definition, dataType) {
		  var _a;
		  const post = definition === null || definition === void 0 ? void 0 : definition.post;
		  if (dataType && post) throw new Error('keyword with "post" flag cannot have "type"');
		  const {
		    RULES
		  } = this;
		  let ruleGroup = post ? RULES.post : RULES.rules.find(({
		    type: t
		  }) => t === dataType);
		  if (!ruleGroup) {
		    ruleGroup = {
		      type: dataType,
		      rules: []
		    };
		    RULES.rules.push(ruleGroup);
		  }
		  RULES.keywords[keyword] = true;
		  if (!definition) return;
		  const rule = {
		    keyword,
		    definition: {
		      ...definition,
		      type: (0, dataType_1.getJSONTypes)(definition.type),
		      schemaType: (0, dataType_1.getJSONTypes)(definition.schemaType)
		    }
		  };
		  if (definition.before) addBeforeRule.call(this, ruleGroup, rule, definition.before);else ruleGroup.rules.push(rule);
		  RULES.all[keyword] = rule;
		  (_a = definition.implements) === null || _a === void 0 ? void 0 : _a.forEach(kwd => this.addKeyword(kwd));
		}
		function addBeforeRule(ruleGroup, rule, before) {
		  const i = ruleGroup.rules.findIndex(_rule => _rule.keyword === before);
		  if (i >= 0) {
		    ruleGroup.rules.splice(i, 0, rule);
		  } else {
		    ruleGroup.rules.push(rule);
		    this.logger.warn(`rule ${before} is not defined`);
		  }
		}
		function keywordMetaschema(def) {
		  let {
		    metaSchema
		  } = def;
		  if (metaSchema === undefined) return;
		  if (def.$data && this.opts.$data) metaSchema = schemaOrData(metaSchema);
		  def.validateSchema = this.compile(metaSchema, true);
		}
		const $dataRef = {
		  $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"
		};
		function schemaOrData(schema) {
		  return {
		    anyOf: [schema, $dataRef]
		  };
		} 
	} (core$2));

	var draft7 = {};

	var core$1 = {};

	var id = {};

	Object.defineProperty(id, "__esModule", {
	  value: true
	});
	const def$s = {
	  keyword: "id",
	  code() {
	    throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID');
	  }
	};
	id.default = def$s;

	var ref = {};

	Object.defineProperty(ref, "__esModule", {
	  value: true
	});
	ref.callRef = ref.getValidate = void 0;
	const ref_error_1 = requireRef_error();
	const code_1$8 = requireCode();
	const codegen_1$l = codegen;
	const names_1$1 = requireNames();
	const compile_1$1 = compile$1;
	const util_1$j = util;
	const def$r = {
	  keyword: "$ref",
	  schemaType: "string",
	  code(cxt) {
	    const {
	      gen,
	      schema: $ref,
	      it
	    } = cxt;
	    const {
	      baseId,
	      schemaEnv: env,
	      validateName,
	      opts,
	      self
	    } = it;
	    const {
	      root
	    } = env;
	    if (($ref === "#" || $ref === "#/") && baseId === root.baseId) return callRootRef();
	    const schOrEnv = compile_1$1.resolveRef.call(self, root, baseId, $ref);
	    if (schOrEnv === undefined) throw new ref_error_1.default(it.opts.uriResolver, baseId, $ref);
	    if (schOrEnv instanceof compile_1$1.SchemaEnv) return callValidate(schOrEnv);
	    return inlineRefSchema(schOrEnv);
	    function callRootRef() {
	      if (env === root) return callRef(cxt, validateName, env, env.$async);
	      const rootName = gen.scopeValue("root", {
	        ref: root
	      });
	      return callRef(cxt, (0, codegen_1$l._)`${rootName}.validate`, root, root.$async);
	    }
	    function callValidate(sch) {
	      const v = getValidate(cxt, sch);
	      callRef(cxt, v, sch, sch.$async);
	    }
	    function inlineRefSchema(sch) {
	      const schName = gen.scopeValue("schema", opts.code.source === true ? {
	        ref: sch,
	        code: (0, codegen_1$l.stringify)(sch)
	      } : {
	        ref: sch
	      });
	      const valid = gen.name("valid");
	      const schCxt = cxt.subschema({
	        schema: sch,
	        dataTypes: [],
	        schemaPath: codegen_1$l.nil,
	        topSchemaRef: schName,
	        errSchemaPath: $ref
	      }, valid);
	      cxt.mergeEvaluated(schCxt);
	      cxt.ok(valid);
	    }
	  }
	};
	function getValidate(cxt, sch) {
	  const {
	    gen
	  } = cxt;
	  return sch.validate ? gen.scopeValue("validate", {
	    ref: sch.validate
	  }) : (0, codegen_1$l._)`${gen.scopeValue("wrapper", {
    ref: sch
  })}.validate`;
	}
	ref.getValidate = getValidate;
	function callRef(cxt, v, sch, $async) {
	  const {
	    gen,
	    it
	  } = cxt;
	  const {
	    allErrors,
	    schemaEnv: env,
	    opts
	  } = it;
	  const passCxt = opts.passContext ? names_1$1.default.this : codegen_1$l.nil;
	  if ($async) callAsyncRef();else callSyncRef();
	  function callAsyncRef() {
	    if (!env.$async) throw new Error("async schema referenced by sync schema");
	    const valid = gen.let("valid");
	    gen.try(() => {
	      gen.code((0, codegen_1$l._)`await ${(0, code_1$8.callValidateCode)(cxt, v, passCxt)}`);
	      addEvaluatedFrom(v); // TODO will not work with async, it has to be returned with the result
	      if (!allErrors) gen.assign(valid, true);
	    }, e => {
	      gen.if((0, codegen_1$l._)`!(${e} instanceof ${it.ValidationError})`, () => gen.throw(e));
	      addErrorsFrom(e);
	      if (!allErrors) gen.assign(valid, false);
	    });
	    cxt.ok(valid);
	  }
	  function callSyncRef() {
	    cxt.result((0, code_1$8.callValidateCode)(cxt, v, passCxt), () => addEvaluatedFrom(v), () => addErrorsFrom(v));
	  }
	  function addErrorsFrom(source) {
	    const errs = (0, codegen_1$l._)`${source}.errors`;
	    gen.assign(names_1$1.default.vErrors, (0, codegen_1$l._)`${names_1$1.default.vErrors} === null ? ${errs} : ${names_1$1.default.vErrors}.concat(${errs})`); // TODO tagged
	    gen.assign(names_1$1.default.errors, (0, codegen_1$l._)`${names_1$1.default.vErrors}.length`);
	  }
	  function addEvaluatedFrom(source) {
	    var _a;
	    if (!it.opts.unevaluated) return;
	    const schEvaluated = (_a = sch === null || sch === void 0 ? void 0 : sch.validate) === null || _a === void 0 ? void 0 : _a.evaluated;
	    // TODO refactor
	    if (it.props !== true) {
	      if (schEvaluated && !schEvaluated.dynamicProps) {
	        if (schEvaluated.props !== undefined) {
	          it.props = util_1$j.mergeEvaluated.props(gen, schEvaluated.props, it.props);
	        }
	      } else {
	        const props = gen.var("props", (0, codegen_1$l._)`${source}.evaluated.props`);
	        it.props = util_1$j.mergeEvaluated.props(gen, props, it.props, codegen_1$l.Name);
	      }
	    }
	    if (it.items !== true) {
	      if (schEvaluated && !schEvaluated.dynamicItems) {
	        if (schEvaluated.items !== undefined) {
	          it.items = util_1$j.mergeEvaluated.items(gen, schEvaluated.items, it.items);
	        }
	      } else {
	        const items = gen.var("items", (0, codegen_1$l._)`${source}.evaluated.items`);
	        it.items = util_1$j.mergeEvaluated.items(gen, items, it.items, codegen_1$l.Name);
	      }
	    }
	  }
	}
	ref.callRef = callRef;
	ref.default = def$r;

	Object.defineProperty(core$1, "__esModule", {
	  value: true
	});
	const id_1 = id;
	const ref_1 = ref;
	const core = ["$schema", "$id", "$defs", "$vocabulary", {
	  keyword: "$comment"
	}, "definitions", id_1.default, ref_1.default];
	core$1.default = core;

	var validation$1 = {};

	var limitNumber = {};

	Object.defineProperty(limitNumber, "__esModule", {
	  value: true
	});
	const codegen_1$k = codegen;
	const ops = codegen_1$k.operators;
	const KWDs = {
	  maximum: {
	    okStr: "<=",
	    ok: ops.LTE,
	    fail: ops.GT
	  },
	  minimum: {
	    okStr: ">=",
	    ok: ops.GTE,
	    fail: ops.LT
	  },
	  exclusiveMaximum: {
	    okStr: "<",
	    ok: ops.LT,
	    fail: ops.GTE
	  },
	  exclusiveMinimum: {
	    okStr: ">",
	    ok: ops.GT,
	    fail: ops.LTE
	  }
	};
	const error$i = {
	  message: ({
	    keyword,
	    schemaCode
	  }) => (0, codegen_1$k.str)`must be ${KWDs[keyword].okStr} ${schemaCode}`,
	  params: ({
	    keyword,
	    schemaCode
	  }) => (0, codegen_1$k._)`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
	};
	const def$q = {
	  keyword: Object.keys(KWDs),
	  type: "number",
	  schemaType: "number",
	  $data: true,
	  error: error$i,
	  code(cxt) {
	    const {
	      keyword,
	      data,
	      schemaCode
	    } = cxt;
	    cxt.fail$data((0, codegen_1$k._)`${data} ${KWDs[keyword].fail} ${schemaCode} || isNaN(${data})`);
	  }
	};
	limitNumber.default = def$q;

	var multipleOf = {};

	Object.defineProperty(multipleOf, "__esModule", {
	  value: true
	});
	const codegen_1$j = codegen;
	const error$h = {
	  message: ({
	    schemaCode
	  }) => (0, codegen_1$j.str)`must be multiple of ${schemaCode}`,
	  params: ({
	    schemaCode
	  }) => (0, codegen_1$j._)`{multipleOf: ${schemaCode}}`
	};
	const def$p = {
	  keyword: "multipleOf",
	  type: "number",
	  schemaType: "number",
	  $data: true,
	  error: error$h,
	  code(cxt) {
	    const {
	      gen,
	      data,
	      schemaCode,
	      it
	    } = cxt;
	    // const bdt = bad$DataType(schemaCode, <string>def.schemaType, $data)
	    const prec = it.opts.multipleOfPrecision;
	    const res = gen.let("res");
	    const invalid = prec ? (0, codegen_1$j._)`Math.abs(Math.round(${res}) - ${res}) > 1e-${prec}` : (0, codegen_1$j._)`${res} !== parseInt(${res})`;
	    cxt.fail$data((0, codegen_1$j._)`(${schemaCode} === 0 || (${res} = ${data}/${schemaCode}, ${invalid}))`);
	  }
	};
	multipleOf.default = def$p;

	var limitLength = {};

	var ucs2length$1 = {};

	Object.defineProperty(ucs2length$1, "__esModule", {
	  value: true
	});
	// https://mathiasbynens.be/notes/javascript-encoding
	// https://github.com/bestiejs/punycode.js - punycode.ucs2.decode
	function ucs2length(str) {
	  const len = str.length;
	  let length = 0;
	  let pos = 0;
	  let value;
	  while (pos < len) {
	    length++;
	    value = str.charCodeAt(pos++);
	    if (value >= 0xd800 && value <= 0xdbff && pos < len) {
	      // high surrogate, and there is a next character
	      value = str.charCodeAt(pos);
	      if ((value & 0xfc00) === 0xdc00) pos++; // low surrogate
	    }
	  }
	  return length;
	}
	ucs2length$1.default = ucs2length;
	ucs2length.code = 'require("ajv/dist/runtime/ucs2length").default';

	Object.defineProperty(limitLength, "__esModule", {
	  value: true
	});
	const codegen_1$i = codegen;
	const util_1$i = util;
	const ucs2length_1 = ucs2length$1;
	const error$g = {
	  message({
	    keyword,
	    schemaCode
	  }) {
	    const comp = keyword === "maxLength" ? "more" : "fewer";
	    return (0, codegen_1$i.str)`must NOT have ${comp} than ${schemaCode} characters`;
	  },
	  params: ({
	    schemaCode
	  }) => (0, codegen_1$i._)`{limit: ${schemaCode}}`
	};
	const def$o = {
	  keyword: ["maxLength", "minLength"],
	  type: "string",
	  schemaType: "number",
	  $data: true,
	  error: error$g,
	  code(cxt) {
	    const {
	      keyword,
	      data,
	      schemaCode,
	      it
	    } = cxt;
	    const op = keyword === "maxLength" ? codegen_1$i.operators.GT : codegen_1$i.operators.LT;
	    const len = it.opts.unicode === false ? (0, codegen_1$i._)`${data}.length` : (0, codegen_1$i._)`${(0, util_1$i.useFunc)(cxt.gen, ucs2length_1.default)}(${data})`;
	    cxt.fail$data((0, codegen_1$i._)`${len} ${op} ${schemaCode}`);
	  }
	};
	limitLength.default = def$o;

	var pattern = {};

	Object.defineProperty(pattern, "__esModule", {
	  value: true
	});
	const code_1$7 = requireCode();
	const codegen_1$h = codegen;
	const error$f = {
	  message: ({
	    schemaCode
	  }) => (0, codegen_1$h.str)`must match pattern "${schemaCode}"`,
	  params: ({
	    schemaCode
	  }) => (0, codegen_1$h._)`{pattern: ${schemaCode}}`
	};
	const def$n = {
	  keyword: "pattern",
	  type: "string",
	  schemaType: "string",
	  $data: true,
	  error: error$f,
	  code(cxt) {
	    const {
	      data,
	      $data,
	      schema,
	      schemaCode,
	      it
	    } = cxt;
	    // TODO regexp should be wrapped in try/catchs
	    const u = it.opts.unicodeRegExp ? "u" : "";
	    const regExp = $data ? (0, codegen_1$h._)`(new RegExp(${schemaCode}, ${u}))` : (0, code_1$7.usePattern)(cxt, schema);
	    cxt.fail$data((0, codegen_1$h._)`!${regExp}.test(${data})`);
	  }
	};
	pattern.default = def$n;

	var limitProperties = {};

	Object.defineProperty(limitProperties, "__esModule", {
	  value: true
	});
	const codegen_1$g = codegen;
	const error$e = {
	  message({
	    keyword,
	    schemaCode
	  }) {
	    const comp = keyword === "maxProperties" ? "more" : "fewer";
	    return (0, codegen_1$g.str)`must NOT have ${comp} than ${schemaCode} properties`;
	  },
	  params: ({
	    schemaCode
	  }) => (0, codegen_1$g._)`{limit: ${schemaCode}}`
	};
	const def$m = {
	  keyword: ["maxProperties", "minProperties"],
	  type: "object",
	  schemaType: "number",
	  $data: true,
	  error: error$e,
	  code(cxt) {
	    const {
	      keyword,
	      data,
	      schemaCode
	    } = cxt;
	    const op = keyword === "maxProperties" ? codegen_1$g.operators.GT : codegen_1$g.operators.LT;
	    cxt.fail$data((0, codegen_1$g._)`Object.keys(${data}).length ${op} ${schemaCode}`);
	  }
	};
	limitProperties.default = def$m;

	var required = {};

	Object.defineProperty(required, "__esModule", {
	  value: true
	});
	const code_1$6 = requireCode();
	const codegen_1$f = codegen;
	const util_1$h = util;
	const error$d = {
	  message: ({
	    params: {
	      missingProperty
	    }
	  }) => (0, codegen_1$f.str)`must have required property '${missingProperty}'`,
	  params: ({
	    params: {
	      missingProperty
	    }
	  }) => (0, codegen_1$f._)`{missingProperty: ${missingProperty}}`
	};
	const def$l = {
	  keyword: "required",
	  type: "object",
	  schemaType: "array",
	  $data: true,
	  error: error$d,
	  code(cxt) {
	    const {
	      gen,
	      schema,
	      schemaCode,
	      data,
	      $data,
	      it
	    } = cxt;
	    const {
	      opts
	    } = it;
	    if (!$data && schema.length === 0) return;
	    const useLoop = schema.length >= opts.loopRequired;
	    if (it.allErrors) allErrorsMode();else exitOnErrorMode();
	    if (opts.strictRequired) {
	      const props = cxt.parentSchema.properties;
	      const {
	        definedProperties
	      } = cxt.it;
	      for (const requiredKey of schema) {
	        if ((props === null || props === void 0 ? void 0 : props[requiredKey]) === undefined && !definedProperties.has(requiredKey)) {
	          const schemaPath = it.schemaEnv.baseId + it.errSchemaPath;
	          const msg = `required property "${requiredKey}" is not defined at "${schemaPath}" (strictRequired)`;
	          (0, util_1$h.checkStrictMode)(it, msg, it.opts.strictRequired);
	        }
	      }
	    }
	    function allErrorsMode() {
	      if (useLoop || $data) {
	        cxt.block$data(codegen_1$f.nil, loopAllRequired);
	      } else {
	        for (const prop of schema) {
	          (0, code_1$6.checkReportMissingProp)(cxt, prop);
	        }
	      }
	    }
	    function exitOnErrorMode() {
	      const missing = gen.let("missing");
	      if (useLoop || $data) {
	        const valid = gen.let("valid", true);
	        cxt.block$data(valid, () => loopUntilMissing(missing, valid));
	        cxt.ok(valid);
	      } else {
	        gen.if((0, code_1$6.checkMissingProp)(cxt, schema, missing));
	        (0, code_1$6.reportMissingProp)(cxt, missing);
	        gen.else();
	      }
	    }
	    function loopAllRequired() {
	      gen.forOf("prop", schemaCode, prop => {
	        cxt.setParams({
	          missingProperty: prop
	        });
	        gen.if((0, code_1$6.noPropertyInData)(gen, data, prop, opts.ownProperties), () => cxt.error());
	      });
	    }
	    function loopUntilMissing(missing, valid) {
	      cxt.setParams({
	        missingProperty: missing
	      });
	      gen.forOf(missing, schemaCode, () => {
	        gen.assign(valid, (0, code_1$6.propertyInData)(gen, data, missing, opts.ownProperties));
	        gen.if((0, codegen_1$f.not)(valid), () => {
	          cxt.error();
	          gen.break();
	        });
	      }, codegen_1$f.nil);
	    }
	  }
	};
	required.default = def$l;

	var limitItems = {};

	Object.defineProperty(limitItems, "__esModule", {
	  value: true
	});
	const codegen_1$e = codegen;
	const error$c = {
	  message({
	    keyword,
	    schemaCode
	  }) {
	    const comp = keyword === "maxItems" ? "more" : "fewer";
	    return (0, codegen_1$e.str)`must NOT have ${comp} than ${schemaCode} items`;
	  },
	  params: ({
	    schemaCode
	  }) => (0, codegen_1$e._)`{limit: ${schemaCode}}`
	};
	const def$k = {
	  keyword: ["maxItems", "minItems"],
	  type: "array",
	  schemaType: "number",
	  $data: true,
	  error: error$c,
	  code(cxt) {
	    const {
	      keyword,
	      data,
	      schemaCode
	    } = cxt;
	    const op = keyword === "maxItems" ? codegen_1$e.operators.GT : codegen_1$e.operators.LT;
	    cxt.fail$data((0, codegen_1$e._)`${data}.length ${op} ${schemaCode}`);
	  }
	};
	limitItems.default = def$k;

	var uniqueItems = {};

	var equal$1 = {};

	Object.defineProperty(equal$1, "__esModule", {
	  value: true
	});
	// https://github.com/ajv-validator/ajv/issues/889
	const equal = fastDeepEqual;
	equal.code = 'require("ajv/dist/runtime/equal").default';
	equal$1.default = equal;

	Object.defineProperty(uniqueItems, "__esModule", {
	  value: true
	});
	const dataType_1 = dataType;
	const codegen_1$d = codegen;
	const util_1$g = util;
	const equal_1$2 = equal$1;
	const error$b = {
	  message: ({
	    params: {
	      i,
	      j
	    }
	  }) => (0, codegen_1$d.str)`must NOT have duplicate items (items ## ${j} and ${i} are identical)`,
	  params: ({
	    params: {
	      i,
	      j
	    }
	  }) => (0, codegen_1$d._)`{i: ${i}, j: ${j}}`
	};
	const def$j = {
	  keyword: "uniqueItems",
	  type: "array",
	  schemaType: "boolean",
	  $data: true,
	  error: error$b,
	  code(cxt) {
	    const {
	      gen,
	      data,
	      $data,
	      schema,
	      parentSchema,
	      schemaCode,
	      it
	    } = cxt;
	    if (!$data && !schema) return;
	    const valid = gen.let("valid");
	    const itemTypes = parentSchema.items ? (0, dataType_1.getSchemaTypes)(parentSchema.items) : [];
	    cxt.block$data(valid, validateUniqueItems, (0, codegen_1$d._)`${schemaCode} === false`);
	    cxt.ok(valid);
	    function validateUniqueItems() {
	      const i = gen.let("i", (0, codegen_1$d._)`${data}.length`);
	      const j = gen.let("j");
	      cxt.setParams({
	        i,
	        j
	      });
	      gen.assign(valid, true);
	      gen.if((0, codegen_1$d._)`${i} > 1`, () => (canOptimize() ? loopN : loopN2)(i, j));
	    }
	    function canOptimize() {
	      return itemTypes.length > 0 && !itemTypes.some(t => t === "object" || t === "array");
	    }
	    function loopN(i, j) {
	      const item = gen.name("item");
	      const wrongType = (0, dataType_1.checkDataTypes)(itemTypes, item, it.opts.strictNumbers, dataType_1.DataType.Wrong);
	      const indices = gen.const("indices", (0, codegen_1$d._)`{}`);
	      gen.for((0, codegen_1$d._)`;${i}--;`, () => {
	        gen.let(item, (0, codegen_1$d._)`${data}[${i}]`);
	        gen.if(wrongType, (0, codegen_1$d._)`continue`);
	        if (itemTypes.length > 1) gen.if((0, codegen_1$d._)`typeof ${item} == "string"`, (0, codegen_1$d._)`${item} += "_"`);
	        gen.if((0, codegen_1$d._)`typeof ${indices}[${item}] == "number"`, () => {
	          gen.assign(j, (0, codegen_1$d._)`${indices}[${item}]`);
	          cxt.error();
	          gen.assign(valid, false).break();
	        }).code((0, codegen_1$d._)`${indices}[${item}] = ${i}`);
	      });
	    }
	    function loopN2(i, j) {
	      const eql = (0, util_1$g.useFunc)(gen, equal_1$2.default);
	      const outer = gen.name("outer");
	      gen.label(outer).for((0, codegen_1$d._)`;${i}--;`, () => gen.for((0, codegen_1$d._)`${j} = ${i}; ${j}--;`, () => gen.if((0, codegen_1$d._)`${eql}(${data}[${i}], ${data}[${j}])`, () => {
	        cxt.error();
	        gen.assign(valid, false).break(outer);
	      })));
	    }
	  }
	};
	uniqueItems.default = def$j;

	var _const = {};

	Object.defineProperty(_const, "__esModule", {
	  value: true
	});
	const codegen_1$c = codegen;
	const util_1$f = util;
	const equal_1$1 = equal$1;
	const error$a = {
	  message: "must be equal to constant",
	  params: ({
	    schemaCode
	  }) => (0, codegen_1$c._)`{allowedValue: ${schemaCode}}`
	};
	const def$i = {
	  keyword: "const",
	  $data: true,
	  error: error$a,
	  code(cxt) {
	    const {
	      gen,
	      data,
	      $data,
	      schemaCode,
	      schema
	    } = cxt;
	    if ($data || schema && typeof schema == "object") {
	      cxt.fail$data((0, codegen_1$c._)`!${(0, util_1$f.useFunc)(gen, equal_1$1.default)}(${data}, ${schemaCode})`);
	    } else {
	      cxt.fail((0, codegen_1$c._)`${schema} !== ${data}`);
	    }
	  }
	};
	_const.default = def$i;

	var _enum = {};

	Object.defineProperty(_enum, "__esModule", {
	  value: true
	});
	const codegen_1$b = codegen;
	const util_1$e = util;
	const equal_1 = equal$1;
	const error$9 = {
	  message: "must be equal to one of the allowed values",
	  params: ({
	    schemaCode
	  }) => (0, codegen_1$b._)`{allowedValues: ${schemaCode}}`
	};
	const def$h = {
	  keyword: "enum",
	  schemaType: "array",
	  $data: true,
	  error: error$9,
	  code(cxt) {
	    const {
	      gen,
	      data,
	      $data,
	      schema,
	      schemaCode,
	      it
	    } = cxt;
	    if (!$data && schema.length === 0) throw new Error("enum must have non-empty array");
	    const useLoop = schema.length >= it.opts.loopEnum;
	    let eql;
	    const getEql = () => eql !== null && eql !== void 0 ? eql : eql = (0, util_1$e.useFunc)(gen, equal_1.default);
	    let valid;
	    if (useLoop || $data) {
	      valid = gen.let("valid");
	      cxt.block$data(valid, loopEnum);
	    } else {
	      /* istanbul ignore if */
	      if (!Array.isArray(schema)) throw new Error("ajv implementation error");
	      const vSchema = gen.const("vSchema", schemaCode);
	      valid = (0, codegen_1$b.or)(...schema.map((_x, i) => equalCode(vSchema, i)));
	    }
	    cxt.pass(valid);
	    function loopEnum() {
	      gen.assign(valid, false);
	      gen.forOf("v", schemaCode, v => gen.if((0, codegen_1$b._)`${getEql()}(${data}, ${v})`, () => gen.assign(valid, true).break()));
	    }
	    function equalCode(vSchema, i) {
	      const sch = schema[i];
	      return typeof sch === "object" && sch !== null ? (0, codegen_1$b._)`${getEql()}(${data}, ${vSchema}[${i}])` : (0, codegen_1$b._)`${data} === ${sch}`;
	    }
	  }
	};
	_enum.default = def$h;

	Object.defineProperty(validation$1, "__esModule", {
	  value: true
	});
	const limitNumber_1 = limitNumber;
	const multipleOf_1 = multipleOf;
	const limitLength_1 = limitLength;
	const pattern_1 = pattern;
	const limitProperties_1 = limitProperties;
	const required_1 = required;
	const limitItems_1 = limitItems;
	const uniqueItems_1 = uniqueItems;
	const const_1 = _const;
	const enum_1 = _enum;
	const validation = [
	// number
	limitNumber_1.default, multipleOf_1.default,
	// string
	limitLength_1.default, pattern_1.default,
	// object
	limitProperties_1.default, required_1.default,
	// array
	limitItems_1.default, uniqueItems_1.default,
	// any
	{
	  keyword: "type",
	  schemaType: ["string", "array"]
	}, {
	  keyword: "nullable",
	  schemaType: "boolean"
	}, const_1.default, enum_1.default];
	validation$1.default = validation;

	var applicator = {};

	var additionalItems = {};

	Object.defineProperty(additionalItems, "__esModule", {
	  value: true
	});
	additionalItems.validateAdditionalItems = void 0;
	const codegen_1$a = codegen;
	const util_1$d = util;
	const error$8 = {
	  message: ({
	    params: {
	      len
	    }
	  }) => (0, codegen_1$a.str)`must NOT have more than ${len} items`,
	  params: ({
	    params: {
	      len
	    }
	  }) => (0, codegen_1$a._)`{limit: ${len}}`
	};
	const def$g = {
	  keyword: "additionalItems",
	  type: "array",
	  schemaType: ["boolean", "object"],
	  before: "uniqueItems",
	  error: error$8,
	  code(cxt) {
	    const {
	      parentSchema,
	      it
	    } = cxt;
	    const {
	      items
	    } = parentSchema;
	    if (!Array.isArray(items)) {
	      (0, util_1$d.checkStrictMode)(it, '"additionalItems" is ignored when "items" is not an array of schemas');
	      return;
	    }
	    validateAdditionalItems(cxt, items);
	  }
	};
	function validateAdditionalItems(cxt, items) {
	  const {
	    gen,
	    schema,
	    data,
	    keyword,
	    it
	  } = cxt;
	  it.items = true;
	  const len = gen.const("len", (0, codegen_1$a._)`${data}.length`);
	  if (schema === false) {
	    cxt.setParams({
	      len: items.length
	    });
	    cxt.pass((0, codegen_1$a._)`${len} <= ${items.length}`);
	  } else if (typeof schema == "object" && !(0, util_1$d.alwaysValidSchema)(it, schema)) {
	    const valid = gen.var("valid", (0, codegen_1$a._)`${len} <= ${items.length}`); // TODO var
	    gen.if((0, codegen_1$a.not)(valid), () => validateItems(valid));
	    cxt.ok(valid);
	  }
	  function validateItems(valid) {
	    gen.forRange("i", items.length, len, i => {
	      cxt.subschema({
	        keyword,
	        dataProp: i,
	        dataPropType: util_1$d.Type.Num
	      }, valid);
	      if (!it.allErrors) gen.if((0, codegen_1$a.not)(valid), () => gen.break());
	    });
	  }
	}
	additionalItems.validateAdditionalItems = validateAdditionalItems;
	additionalItems.default = def$g;

	var prefixItems = {};

	var items = {};

	Object.defineProperty(items, "__esModule", {
	  value: true
	});
	items.validateTuple = void 0;
	const codegen_1$9 = codegen;
	const util_1$c = util;
	const code_1$5 = requireCode();
	const def$f = {
	  keyword: "items",
	  type: "array",
	  schemaType: ["object", "array", "boolean"],
	  before: "uniqueItems",
	  code(cxt) {
	    const {
	      schema,
	      it
	    } = cxt;
	    if (Array.isArray(schema)) return validateTuple(cxt, "additionalItems", schema);
	    it.items = true;
	    if ((0, util_1$c.alwaysValidSchema)(it, schema)) return;
	    cxt.ok((0, code_1$5.validateArray)(cxt));
	  }
	};
	function validateTuple(cxt, extraItems, schArr = cxt.schema) {
	  const {
	    gen,
	    parentSchema,
	    data,
	    keyword,
	    it
	  } = cxt;
	  checkStrictTuple(parentSchema);
	  if (it.opts.unevaluated && schArr.length && it.items !== true) {
	    it.items = util_1$c.mergeEvaluated.items(gen, schArr.length, it.items);
	  }
	  const valid = gen.name("valid");
	  const len = gen.const("len", (0, codegen_1$9._)`${data}.length`);
	  schArr.forEach((sch, i) => {
	    if ((0, util_1$c.alwaysValidSchema)(it, sch)) return;
	    gen.if((0, codegen_1$9._)`${len} > ${i}`, () => cxt.subschema({
	      keyword,
	      schemaProp: i,
	      dataProp: i
	    }, valid));
	    cxt.ok(valid);
	  });
	  function checkStrictTuple(sch) {
	    const {
	      opts,
	      errSchemaPath
	    } = it;
	    const l = schArr.length;
	    const fullTuple = l === sch.minItems && (l === sch.maxItems || sch[extraItems] === false);
	    if (opts.strictTuples && !fullTuple) {
	      const msg = `"${keyword}" is ${l}-tuple, but minItems or maxItems/${extraItems} are not specified or different at path "${errSchemaPath}"`;
	      (0, util_1$c.checkStrictMode)(it, msg, opts.strictTuples);
	    }
	  }
	}
	items.validateTuple = validateTuple;
	items.default = def$f;

	Object.defineProperty(prefixItems, "__esModule", {
	  value: true
	});
	const items_1$1 = items;
	const def$e = {
	  keyword: "prefixItems",
	  type: "array",
	  schemaType: ["array"],
	  before: "uniqueItems",
	  code: cxt => (0, items_1$1.validateTuple)(cxt, "items")
	};
	prefixItems.default = def$e;

	var items2020 = {};

	Object.defineProperty(items2020, "__esModule", {
	  value: true
	});
	const codegen_1$8 = codegen;
	const util_1$b = util;
	const code_1$4 = requireCode();
	const additionalItems_1$1 = additionalItems;
	const error$7 = {
	  message: ({
	    params: {
	      len
	    }
	  }) => (0, codegen_1$8.str)`must NOT have more than ${len} items`,
	  params: ({
	    params: {
	      len
	    }
	  }) => (0, codegen_1$8._)`{limit: ${len}}`
	};
	const def$d = {
	  keyword: "items",
	  type: "array",
	  schemaType: ["object", "boolean"],
	  before: "uniqueItems",
	  error: error$7,
	  code(cxt) {
	    const {
	      schema,
	      parentSchema,
	      it
	    } = cxt;
	    const {
	      prefixItems
	    } = parentSchema;
	    it.items = true;
	    if ((0, util_1$b.alwaysValidSchema)(it, schema)) return;
	    if (prefixItems) (0, additionalItems_1$1.validateAdditionalItems)(cxt, prefixItems);else cxt.ok((0, code_1$4.validateArray)(cxt));
	  }
	};
	items2020.default = def$d;

	var contains$1 = {};

	Object.defineProperty(contains$1, "__esModule", {
	  value: true
	});
	const codegen_1$7 = codegen;
	const util_1$a = util;
	const error$6 = {
	  message: ({
	    params: {
	      min,
	      max
	    }
	  }) => max === undefined ? (0, codegen_1$7.str)`must contain at least ${min} valid item(s)` : (0, codegen_1$7.str)`must contain at least ${min} and no more than ${max} valid item(s)`,
	  params: ({
	    params: {
	      min,
	      max
	    }
	  }) => max === undefined ? (0, codegen_1$7._)`{minContains: ${min}}` : (0, codegen_1$7._)`{minContains: ${min}, maxContains: ${max}}`
	};
	const def$c = {
	  keyword: "contains",
	  type: "array",
	  schemaType: ["object", "boolean"],
	  before: "uniqueItems",
	  trackErrors: true,
	  error: error$6,
	  code(cxt) {
	    const {
	      gen,
	      schema,
	      parentSchema,
	      data,
	      it
	    } = cxt;
	    let min;
	    let max;
	    const {
	      minContains,
	      maxContains
	    } = parentSchema;
	    if (it.opts.next) {
	      min = minContains === undefined ? 1 : minContains;
	      max = maxContains;
	    } else {
	      min = 1;
	    }
	    const len = gen.const("len", (0, codegen_1$7._)`${data}.length`);
	    cxt.setParams({
	      min,
	      max
	    });
	    if (max === undefined && min === 0) {
	      (0, util_1$a.checkStrictMode)(it, `"minContains" == 0 without "maxContains": "contains" keyword ignored`);
	      return;
	    }
	    if (max !== undefined && min > max) {
	      (0, util_1$a.checkStrictMode)(it, `"minContains" > "maxContains" is always invalid`);
	      cxt.fail();
	      return;
	    }
	    if ((0, util_1$a.alwaysValidSchema)(it, schema)) {
	      let cond = (0, codegen_1$7._)`${len} >= ${min}`;
	      if (max !== undefined) cond = (0, codegen_1$7._)`${cond} && ${len} <= ${max}`;
	      cxt.pass(cond);
	      return;
	    }
	    it.items = true;
	    const valid = gen.name("valid");
	    if (max === undefined && min === 1) {
	      validateItems(valid, () => gen.if(valid, () => gen.break()));
	    } else if (min === 0) {
	      gen.let(valid, true);
	      if (max !== undefined) gen.if((0, codegen_1$7._)`${data}.length > 0`, validateItemsWithCount);
	    } else {
	      gen.let(valid, false);
	      validateItemsWithCount();
	    }
	    cxt.result(valid, () => cxt.reset());
	    function validateItemsWithCount() {
	      const schValid = gen.name("_valid");
	      const count = gen.let("count", 0);
	      validateItems(schValid, () => gen.if(schValid, () => checkLimits(count)));
	    }
	    function validateItems(_valid, block) {
	      gen.forRange("i", 0, len, i => {
	        cxt.subschema({
	          keyword: "contains",
	          dataProp: i,
	          dataPropType: util_1$a.Type.Num,
	          compositeRule: true
	        }, _valid);
	        block();
	      });
	    }
	    function checkLimits(count) {
	      gen.code((0, codegen_1$7._)`${count}++`);
	      if (max === undefined) {
	        gen.if((0, codegen_1$7._)`${count} >= ${min}`, () => gen.assign(valid, true).break());
	      } else {
	        gen.if((0, codegen_1$7._)`${count} > ${max}`, () => gen.assign(valid, false).break());
	        if (min === 1) gen.assign(valid, true);else gen.if((0, codegen_1$7._)`${count} >= ${min}`, () => gen.assign(valid, true));
	      }
	    }
	  }
	};
	contains$1.default = def$c;

	var dependencies = {};

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.validateSchemaDeps = exports.validatePropertyDeps = exports.error = void 0;
		const codegen_1 = codegen;
		const util_1 = util;
		const code_1 = requireCode();
		exports.error = {
		  message: ({
		    params: {
		      property,
		      depsCount,
		      deps
		    }
		  }) => {
		    const property_ies = depsCount === 1 ? "property" : "properties";
		    return (0, codegen_1.str)`must have ${property_ies} ${deps} when property ${property} is present`;
		  },
		  params: ({
		    params: {
		      property,
		      depsCount,
		      deps,
		      missingProperty
		    }
		  }) => (0, codegen_1._)`{property: ${property},
    missingProperty: ${missingProperty},
    depsCount: ${depsCount},
    deps: ${deps}}` // TODO change to reference
		};
		const def = {
		  keyword: "dependencies",
		  type: "object",
		  schemaType: "object",
		  error: exports.error,
		  code(cxt) {
		    const [propDeps, schDeps] = splitDependencies(cxt);
		    validatePropertyDeps(cxt, propDeps);
		    validateSchemaDeps(cxt, schDeps);
		  }
		};
		function splitDependencies({
		  schema
		}) {
		  const propertyDeps = {};
		  const schemaDeps = {};
		  for (const key in schema) {
		    if (key === "__proto__") continue;
		    const deps = Array.isArray(schema[key]) ? propertyDeps : schemaDeps;
		    deps[key] = schema[key];
		  }
		  return [propertyDeps, schemaDeps];
		}
		function validatePropertyDeps(cxt, propertyDeps = cxt.schema) {
		  const {
		    gen,
		    data,
		    it
		  } = cxt;
		  if (Object.keys(propertyDeps).length === 0) return;
		  const missing = gen.let("missing");
		  for (const prop in propertyDeps) {
		    const deps = propertyDeps[prop];
		    if (deps.length === 0) continue;
		    const hasProperty = (0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties);
		    cxt.setParams({
		      property: prop,
		      depsCount: deps.length,
		      deps: deps.join(", ")
		    });
		    if (it.allErrors) {
		      gen.if(hasProperty, () => {
		        for (const depProp of deps) {
		          (0, code_1.checkReportMissingProp)(cxt, depProp);
		        }
		      });
		    } else {
		      gen.if((0, codegen_1._)`${hasProperty} && (${(0, code_1.checkMissingProp)(cxt, deps, missing)})`);
		      (0, code_1.reportMissingProp)(cxt, missing);
		      gen.else();
		    }
		  }
		}
		exports.validatePropertyDeps = validatePropertyDeps;
		function validateSchemaDeps(cxt, schemaDeps = cxt.schema) {
		  const {
		    gen,
		    data,
		    keyword,
		    it
		  } = cxt;
		  const valid = gen.name("valid");
		  for (const prop in schemaDeps) {
		    if ((0, util_1.alwaysValidSchema)(it, schemaDeps[prop])) continue;
		    gen.if((0, code_1.propertyInData)(gen, data, prop, it.opts.ownProperties), () => {
		      const schCxt = cxt.subschema({
		        keyword,
		        schemaProp: prop
		      }, valid);
		      cxt.mergeValidEvaluated(schCxt, valid);
		    }, () => gen.var(valid, true) // TODO var
		    );
		    cxt.ok(valid);
		  }
		}
		exports.validateSchemaDeps = validateSchemaDeps;
		exports.default = def; 
	} (dependencies));

	var propertyNames = {};

	Object.defineProperty(propertyNames, "__esModule", {
	  value: true
	});
	const codegen_1$6 = codegen;
	const util_1$9 = util;
	const error$5 = {
	  message: "property name must be valid",
	  params: ({
	    params
	  }) => (0, codegen_1$6._)`{propertyName: ${params.propertyName}}`
	};
	const def$b = {
	  keyword: "propertyNames",
	  type: "object",
	  schemaType: ["object", "boolean"],
	  error: error$5,
	  code(cxt) {
	    const {
	      gen,
	      schema,
	      data,
	      it
	    } = cxt;
	    if ((0, util_1$9.alwaysValidSchema)(it, schema)) return;
	    const valid = gen.name("valid");
	    gen.forIn("key", data, key => {
	      cxt.setParams({
	        propertyName: key
	      });
	      cxt.subschema({
	        keyword: "propertyNames",
	        data: key,
	        dataTypes: ["string"],
	        propertyName: key,
	        compositeRule: true
	      }, valid);
	      gen.if((0, codegen_1$6.not)(valid), () => {
	        cxt.error(true);
	        if (!it.allErrors) gen.break();
	      });
	    });
	    cxt.ok(valid);
	  }
	};
	propertyNames.default = def$b;

	var additionalProperties = {};

	Object.defineProperty(additionalProperties, "__esModule", {
	  value: true
	});
	const code_1$3 = requireCode();
	const codegen_1$5 = codegen;
	const names_1 = requireNames();
	const util_1$8 = util;
	const error$4 = {
	  message: "must NOT have additional properties",
	  params: ({
	    params
	  }) => (0, codegen_1$5._)`{additionalProperty: ${params.additionalProperty}}`
	};
	const def$a = {
	  keyword: "additionalProperties",
	  type: ["object"],
	  schemaType: ["boolean", "object"],
	  allowUndefined: true,
	  trackErrors: true,
	  error: error$4,
	  code(cxt) {
	    const {
	      gen,
	      schema,
	      parentSchema,
	      data,
	      errsCount,
	      it
	    } = cxt;
	    /* istanbul ignore if */
	    if (!errsCount) throw new Error("ajv implementation error");
	    const {
	      allErrors,
	      opts
	    } = it;
	    it.props = true;
	    if (opts.removeAdditional !== "all" && (0, util_1$8.alwaysValidSchema)(it, schema)) return;
	    const props = (0, code_1$3.allSchemaProperties)(parentSchema.properties);
	    const patProps = (0, code_1$3.allSchemaProperties)(parentSchema.patternProperties);
	    checkAdditionalProperties();
	    cxt.ok((0, codegen_1$5._)`${errsCount} === ${names_1.default.errors}`);
	    function checkAdditionalProperties() {
	      gen.forIn("key", data, key => {
	        if (!props.length && !patProps.length) additionalPropertyCode(key);else gen.if(isAdditional(key), () => additionalPropertyCode(key));
	      });
	    }
	    function isAdditional(key) {
	      let definedProp;
	      if (props.length > 8) {
	        // TODO maybe an option instead of hard-coded 8?
	        const propsSchema = (0, util_1$8.schemaRefOrVal)(it, parentSchema.properties, "properties");
	        definedProp = (0, code_1$3.isOwnProperty)(gen, propsSchema, key);
	      } else if (props.length) {
	        definedProp = (0, codegen_1$5.or)(...props.map(p => (0, codegen_1$5._)`${key} === ${p}`));
	      } else {
	        definedProp = codegen_1$5.nil;
	      }
	      if (patProps.length) {
	        definedProp = (0, codegen_1$5.or)(definedProp, ...patProps.map(p => (0, codegen_1$5._)`${(0, code_1$3.usePattern)(cxt, p)}.test(${key})`));
	      }
	      return (0, codegen_1$5.not)(definedProp);
	    }
	    function deleteAdditional(key) {
	      gen.code((0, codegen_1$5._)`delete ${data}[${key}]`);
	    }
	    function additionalPropertyCode(key) {
	      if (opts.removeAdditional === "all" || opts.removeAdditional && schema === false) {
	        deleteAdditional(key);
	        return;
	      }
	      if (schema === false) {
	        cxt.setParams({
	          additionalProperty: key
	        });
	        cxt.error();
	        if (!allErrors) gen.break();
	        return;
	      }
	      if (typeof schema == "object" && !(0, util_1$8.alwaysValidSchema)(it, schema)) {
	        const valid = gen.name("valid");
	        if (opts.removeAdditional === "failing") {
	          applyAdditionalSchema(key, valid, false);
	          gen.if((0, codegen_1$5.not)(valid), () => {
	            cxt.reset();
	            deleteAdditional(key);
	          });
	        } else {
	          applyAdditionalSchema(key, valid);
	          if (!allErrors) gen.if((0, codegen_1$5.not)(valid), () => gen.break());
	        }
	      }
	    }
	    function applyAdditionalSchema(key, valid, errors) {
	      const subschema = {
	        keyword: "additionalProperties",
	        dataProp: key,
	        dataPropType: util_1$8.Type.Str
	      };
	      if (errors === false) {
	        Object.assign(subschema, {
	          compositeRule: true,
	          createErrors: false,
	          allErrors: false
	        });
	      }
	      cxt.subschema(subschema, valid);
	    }
	  }
	};
	additionalProperties.default = def$a;

	var properties$2 = {};

	Object.defineProperty(properties$2, "__esModule", {
	  value: true
	});
	const validate_1 = requireValidate();
	const code_1$2 = requireCode();
	const util_1$7 = util;
	const additionalProperties_1$1 = additionalProperties;
	const def$9 = {
	  keyword: "properties",
	  type: "object",
	  schemaType: "object",
	  code(cxt) {
	    const {
	      gen,
	      schema,
	      parentSchema,
	      data,
	      it
	    } = cxt;
	    if (it.opts.removeAdditional === "all" && parentSchema.additionalProperties === undefined) {
	      additionalProperties_1$1.default.code(new validate_1.KeywordCxt(it, additionalProperties_1$1.default, "additionalProperties"));
	    }
	    const allProps = (0, code_1$2.allSchemaProperties)(schema);
	    for (const prop of allProps) {
	      it.definedProperties.add(prop);
	    }
	    if (it.opts.unevaluated && allProps.length && it.props !== true) {
	      it.props = util_1$7.mergeEvaluated.props(gen, (0, util_1$7.toHash)(allProps), it.props);
	    }
	    const properties = allProps.filter(p => !(0, util_1$7.alwaysValidSchema)(it, schema[p]));
	    if (properties.length === 0) return;
	    const valid = gen.name("valid");
	    for (const prop of properties) {
	      if (hasDefault(prop)) {
	        applyPropertySchema(prop);
	      } else {
	        gen.if((0, code_1$2.propertyInData)(gen, data, prop, it.opts.ownProperties));
	        applyPropertySchema(prop);
	        if (!it.allErrors) gen.else().var(valid, true);
	        gen.endIf();
	      }
	      cxt.it.definedProperties.add(prop);
	      cxt.ok(valid);
	    }
	    function hasDefault(prop) {
	      return it.opts.useDefaults && !it.compositeRule && schema[prop].default !== undefined;
	    }
	    function applyPropertySchema(prop) {
	      cxt.subschema({
	        keyword: "properties",
	        schemaProp: prop,
	        dataProp: prop
	      }, valid);
	    }
	  }
	};
	properties$2.default = def$9;

	var patternProperties = {};

	Object.defineProperty(patternProperties, "__esModule", {
	  value: true
	});
	const code_1$1 = requireCode();
	const codegen_1$4 = codegen;
	const util_1$6 = util;
	const util_2 = util;
	const def$8 = {
	  keyword: "patternProperties",
	  type: "object",
	  schemaType: "object",
	  code(cxt) {
	    const {
	      gen,
	      schema,
	      data,
	      parentSchema,
	      it
	    } = cxt;
	    const {
	      opts
	    } = it;
	    const patterns = (0, code_1$1.allSchemaProperties)(schema);
	    const alwaysValidPatterns = patterns.filter(p => (0, util_1$6.alwaysValidSchema)(it, schema[p]));
	    if (patterns.length === 0 || alwaysValidPatterns.length === patterns.length && (!it.opts.unevaluated || it.props === true)) {
	      return;
	    }
	    const checkProperties = opts.strictSchema && !opts.allowMatchingProperties && parentSchema.properties;
	    const valid = gen.name("valid");
	    if (it.props !== true && !(it.props instanceof codegen_1$4.Name)) {
	      it.props = (0, util_2.evaluatedPropsToName)(gen, it.props);
	    }
	    const {
	      props
	    } = it;
	    validatePatternProperties();
	    function validatePatternProperties() {
	      for (const pat of patterns) {
	        if (checkProperties) checkMatchingProperties(pat);
	        if (it.allErrors) {
	          validateProperties(pat);
	        } else {
	          gen.var(valid, true); // TODO var
	          validateProperties(pat);
	          gen.if(valid);
	        }
	      }
	    }
	    function checkMatchingProperties(pat) {
	      for (const prop in checkProperties) {
	        if (new RegExp(pat).test(prop)) {
	          (0, util_1$6.checkStrictMode)(it, `property ${prop} matches pattern ${pat} (use allowMatchingProperties)`);
	        }
	      }
	    }
	    function validateProperties(pat) {
	      gen.forIn("key", data, key => {
	        gen.if((0, codegen_1$4._)`${(0, code_1$1.usePattern)(cxt, pat)}.test(${key})`, () => {
	          const alwaysValid = alwaysValidPatterns.includes(pat);
	          if (!alwaysValid) {
	            cxt.subschema({
	              keyword: "patternProperties",
	              schemaProp: pat,
	              dataProp: key,
	              dataPropType: util_2.Type.Str
	            }, valid);
	          }
	          if (it.opts.unevaluated && props !== true) {
	            gen.assign((0, codegen_1$4._)`${props}[${key}]`, true);
	          } else if (!alwaysValid && !it.allErrors) {
	            // can short-circuit if `unevaluatedProperties` is not supported (opts.next === false)
	            // or if all properties were evaluated (props === true)
	            gen.if((0, codegen_1$4.not)(valid), () => gen.break());
	          }
	        });
	      });
	    }
	  }
	};
	patternProperties.default = def$8;

	var not = {};

	Object.defineProperty(not, "__esModule", {
	  value: true
	});
	const util_1$5 = util;
	const def$7 = {
	  keyword: "not",
	  schemaType: ["object", "boolean"],
	  trackErrors: true,
	  code(cxt) {
	    const {
	      gen,
	      schema,
	      it
	    } = cxt;
	    if ((0, util_1$5.alwaysValidSchema)(it, schema)) {
	      cxt.fail();
	      return;
	    }
	    const valid = gen.name("valid");
	    cxt.subschema({
	      keyword: "not",
	      compositeRule: true,
	      createErrors: false,
	      allErrors: false
	    }, valid);
	    cxt.failResult(valid, () => cxt.reset(), () => cxt.error());
	  },
	  error: {
	    message: "must NOT be valid"
	  }
	};
	not.default = def$7;

	var anyOf = {};

	Object.defineProperty(anyOf, "__esModule", {
	  value: true
	});
	const code_1 = requireCode();
	const def$6 = {
	  keyword: "anyOf",
	  schemaType: "array",
	  trackErrors: true,
	  code: code_1.validateUnion,
	  error: {
	    message: "must match a schema in anyOf"
	  }
	};
	anyOf.default = def$6;

	var oneOf = {};

	Object.defineProperty(oneOf, "__esModule", {
	  value: true
	});
	const codegen_1$3 = codegen;
	const util_1$4 = util;
	const error$3 = {
	  message: "must match exactly one schema in oneOf",
	  params: ({
	    params
	  }) => (0, codegen_1$3._)`{passingSchemas: ${params.passing}}`
	};
	const def$5 = {
	  keyword: "oneOf",
	  schemaType: "array",
	  trackErrors: true,
	  error: error$3,
	  code(cxt) {
	    const {
	      gen,
	      schema,
	      parentSchema,
	      it
	    } = cxt;
	    /* istanbul ignore if */
	    if (!Array.isArray(schema)) throw new Error("ajv implementation error");
	    if (it.opts.discriminator && parentSchema.discriminator) return;
	    const schArr = schema;
	    const valid = gen.let("valid", false);
	    const passing = gen.let("passing", null);
	    const schValid = gen.name("_valid");
	    cxt.setParams({
	      passing
	    });
	    // TODO possibly fail straight away (with warning or exception) if there are two empty always valid schemas
	    gen.block(validateOneOf);
	    cxt.result(valid, () => cxt.reset(), () => cxt.error(true));
	    function validateOneOf() {
	      schArr.forEach((sch, i) => {
	        let schCxt;
	        if ((0, util_1$4.alwaysValidSchema)(it, sch)) {
	          gen.var(schValid, true);
	        } else {
	          schCxt = cxt.subschema({
	            keyword: "oneOf",
	            schemaProp: i,
	            compositeRule: true
	          }, schValid);
	        }
	        if (i > 0) {
	          gen.if((0, codegen_1$3._)`${schValid} && ${valid}`).assign(valid, false).assign(passing, (0, codegen_1$3._)`[${passing}, ${i}]`).else();
	        }
	        gen.if(schValid, () => {
	          gen.assign(valid, true);
	          gen.assign(passing, i);
	          if (schCxt) cxt.mergeEvaluated(schCxt, codegen_1$3.Name);
	        });
	      });
	    }
	  }
	};
	oneOf.default = def$5;

	var allOf = {};

	Object.defineProperty(allOf, "__esModule", {
	  value: true
	});
	const util_1$3 = util;
	const def$4 = {
	  keyword: "allOf",
	  schemaType: "array",
	  code(cxt) {
	    const {
	      gen,
	      schema,
	      it
	    } = cxt;
	    /* istanbul ignore if */
	    if (!Array.isArray(schema)) throw new Error("ajv implementation error");
	    const valid = gen.name("valid");
	    schema.forEach((sch, i) => {
	      if ((0, util_1$3.alwaysValidSchema)(it, sch)) return;
	      const schCxt = cxt.subschema({
	        keyword: "allOf",
	        schemaProp: i
	      }, valid);
	      cxt.ok(valid);
	      cxt.mergeEvaluated(schCxt);
	    });
	  }
	};
	allOf.default = def$4;

	var _if = {};

	Object.defineProperty(_if, "__esModule", {
	  value: true
	});
	const codegen_1$2 = codegen;
	const util_1$2 = util;
	const error$2 = {
	  message: ({
	    params
	  }) => (0, codegen_1$2.str)`must match "${params.ifClause}" schema`,
	  params: ({
	    params
	  }) => (0, codegen_1$2._)`{failingKeyword: ${params.ifClause}}`
	};
	const def$3 = {
	  keyword: "if",
	  schemaType: ["object", "boolean"],
	  trackErrors: true,
	  error: error$2,
	  code(cxt) {
	    const {
	      gen,
	      parentSchema,
	      it
	    } = cxt;
	    if (parentSchema.then === undefined && parentSchema.else === undefined) {
	      (0, util_1$2.checkStrictMode)(it, '"if" without "then" and "else" is ignored');
	    }
	    const hasThen = hasSchema(it, "then");
	    const hasElse = hasSchema(it, "else");
	    if (!hasThen && !hasElse) return;
	    const valid = gen.let("valid", true);
	    const schValid = gen.name("_valid");
	    validateIf();
	    cxt.reset();
	    if (hasThen && hasElse) {
	      const ifClause = gen.let("ifClause");
	      cxt.setParams({
	        ifClause
	      });
	      gen.if(schValid, validateClause("then", ifClause), validateClause("else", ifClause));
	    } else if (hasThen) {
	      gen.if(schValid, validateClause("then"));
	    } else {
	      gen.if((0, codegen_1$2.not)(schValid), validateClause("else"));
	    }
	    cxt.pass(valid, () => cxt.error(true));
	    function validateIf() {
	      const schCxt = cxt.subschema({
	        keyword: "if",
	        compositeRule: true,
	        createErrors: false,
	        allErrors: false
	      }, schValid);
	      cxt.mergeEvaluated(schCxt);
	    }
	    function validateClause(keyword, ifClause) {
	      return () => {
	        const schCxt = cxt.subschema({
	          keyword
	        }, schValid);
	        gen.assign(valid, schValid);
	        cxt.mergeValidEvaluated(schCxt, valid);
	        if (ifClause) gen.assign(ifClause, (0, codegen_1$2._)`${keyword}`);else cxt.setParams({
	          ifClause: keyword
	        });
	      };
	    }
	  }
	};
	function hasSchema(it, keyword) {
	  const schema = it.schema[keyword];
	  return schema !== undefined && !(0, util_1$2.alwaysValidSchema)(it, schema);
	}
	_if.default = def$3;

	var thenElse = {};

	Object.defineProperty(thenElse, "__esModule", {
	  value: true
	});
	const util_1$1 = util;
	const def$2 = {
	  keyword: ["then", "else"],
	  schemaType: ["object", "boolean"],
	  code({
	    keyword,
	    parentSchema,
	    it
	  }) {
	    if (parentSchema.if === undefined) (0, util_1$1.checkStrictMode)(it, `"${keyword}" without "if" is ignored`);
	  }
	};
	thenElse.default = def$2;

	Object.defineProperty(applicator, "__esModule", {
	  value: true
	});
	const additionalItems_1 = additionalItems;
	const prefixItems_1 = prefixItems;
	const items_1 = items;
	const items2020_1 = items2020;
	const contains_1 = contains$1;
	const dependencies_1 = dependencies;
	const propertyNames_1 = propertyNames;
	const additionalProperties_1 = additionalProperties;
	const properties_1 = properties$2;
	const patternProperties_1 = patternProperties;
	const not_1 = not;
	const anyOf_1 = anyOf;
	const oneOf_1 = oneOf;
	const allOf_1 = allOf;
	const if_1 = _if;
	const thenElse_1 = thenElse;
	function getApplicator(draft2020 = false) {
	  const applicator = [
	  // any
	  not_1.default, anyOf_1.default, oneOf_1.default, allOf_1.default, if_1.default, thenElse_1.default,
	  // object
	  propertyNames_1.default, additionalProperties_1.default, dependencies_1.default, properties_1.default, patternProperties_1.default];
	  // array
	  if (draft2020) applicator.push(prefixItems_1.default, items2020_1.default);else applicator.push(additionalItems_1.default, items_1.default);
	  applicator.push(contains_1.default);
	  return applicator;
	}
	applicator.default = getApplicator;

	var format$2 = {};

	var format$1 = {};

	Object.defineProperty(format$1, "__esModule", {
	  value: true
	});
	const codegen_1$1 = codegen;
	const error$1 = {
	  message: ({
	    schemaCode
	  }) => (0, codegen_1$1.str)`must match format "${schemaCode}"`,
	  params: ({
	    schemaCode
	  }) => (0, codegen_1$1._)`{format: ${schemaCode}}`
	};
	const def$1 = {
	  keyword: "format",
	  type: ["number", "string"],
	  schemaType: "string",
	  $data: true,
	  error: error$1,
	  code(cxt, ruleType) {
	    const {
	      gen,
	      data,
	      $data,
	      schema,
	      schemaCode,
	      it
	    } = cxt;
	    const {
	      opts,
	      errSchemaPath,
	      schemaEnv,
	      self
	    } = it;
	    if (!opts.validateFormats) return;
	    if ($data) validate$DataFormat();else validateFormat();
	    function validate$DataFormat() {
	      const fmts = gen.scopeValue("formats", {
	        ref: self.formats,
	        code: opts.code.formats
	      });
	      const fDef = gen.const("fDef", (0, codegen_1$1._)`${fmts}[${schemaCode}]`);
	      const fType = gen.let("fType");
	      const format = gen.let("format");
	      // TODO simplify
	      gen.if((0, codegen_1$1._)`typeof ${fDef} == "object" && !(${fDef} instanceof RegExp)`, () => gen.assign(fType, (0, codegen_1$1._)`${fDef}.type || "string"`).assign(format, (0, codegen_1$1._)`${fDef}.validate`), () => gen.assign(fType, (0, codegen_1$1._)`"string"`).assign(format, fDef));
	      cxt.fail$data((0, codegen_1$1.or)(unknownFmt(), invalidFmt()));
	      function unknownFmt() {
	        if (opts.strictSchema === false) return codegen_1$1.nil;
	        return (0, codegen_1$1._)`${schemaCode} && !${format}`;
	      }
	      function invalidFmt() {
	        const callFormat = schemaEnv.$async ? (0, codegen_1$1._)`(${fDef}.async ? await ${format}(${data}) : ${format}(${data}))` : (0, codegen_1$1._)`${format}(${data})`;
	        const validData = (0, codegen_1$1._)`(typeof ${format} == "function" ? ${callFormat} : ${format}.test(${data}))`;
	        return (0, codegen_1$1._)`${format} && ${format} !== true && ${fType} === ${ruleType} && !${validData}`;
	      }
	    }
	    function validateFormat() {
	      const formatDef = self.formats[schema];
	      if (!formatDef) {
	        unknownFormat();
	        return;
	      }
	      if (formatDef === true) return;
	      const [fmtType, format, fmtRef] = getFormat(formatDef);
	      if (fmtType === ruleType) cxt.pass(validCondition());
	      function unknownFormat() {
	        if (opts.strictSchema === false) {
	          self.logger.warn(unknownMsg());
	          return;
	        }
	        throw new Error(unknownMsg());
	        function unknownMsg() {
	          return `unknown format "${schema}" ignored in schema at path "${errSchemaPath}"`;
	        }
	      }
	      function getFormat(fmtDef) {
	        const code = fmtDef instanceof RegExp ? (0, codegen_1$1.regexpCode)(fmtDef) : opts.code.formats ? (0, codegen_1$1._)`${opts.code.formats}${(0, codegen_1$1.getProperty)(schema)}` : undefined;
	        const fmt = gen.scopeValue("formats", {
	          key: schema,
	          ref: fmtDef,
	          code
	        });
	        if (typeof fmtDef == "object" && !(fmtDef instanceof RegExp)) {
	          return [fmtDef.type || "string", fmtDef.validate, (0, codegen_1$1._)`${fmt}.validate`];
	        }
	        return ["string", fmtDef, fmt];
	      }
	      function validCondition() {
	        if (typeof formatDef == "object" && !(formatDef instanceof RegExp) && formatDef.async) {
	          if (!schemaEnv.$async) throw new Error("async format in sync schema");
	          return (0, codegen_1$1._)`await ${fmtRef}(${data})`;
	        }
	        return typeof format == "function" ? (0, codegen_1$1._)`${fmtRef}(${data})` : (0, codegen_1$1._)`${fmtRef}.test(${data})`;
	      }
	    }
	  }
	};
	format$1.default = def$1;

	Object.defineProperty(format$2, "__esModule", {
	  value: true
	});
	const format_1$1 = format$1;
	const format = [format_1$1.default];
	format$2.default = format;

	var metadata = {};

	Object.defineProperty(metadata, "__esModule", {
	  value: true
	});
	metadata.contentVocabulary = metadata.metadataVocabulary = void 0;
	metadata.metadataVocabulary = ["title", "description", "default", "deprecated", "readOnly", "writeOnly", "examples"];
	metadata.contentVocabulary = ["contentMediaType", "contentEncoding", "contentSchema"];

	Object.defineProperty(draft7, "__esModule", {
	  value: true
	});
	const core_1 = core$1;
	const validation_1 = validation$1;
	const applicator_1 = applicator;
	const format_1 = format$2;
	const metadata_1 = metadata;
	const draft7Vocabularies = [core_1.default, validation_1.default, (0, applicator_1.default)(), format_1.default, metadata_1.metadataVocabulary, metadata_1.contentVocabulary];
	draft7.default = draft7Vocabularies;

	var discriminator = {};

	var types = {};

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.DiscrError = void 0;
		(function (DiscrError) {
		  DiscrError["Tag"] = "tag";
		  DiscrError["Mapping"] = "mapping";
		})(exports.DiscrError || (exports.DiscrError = {})); 
	} (types));

	Object.defineProperty(discriminator, "__esModule", {
	  value: true
	});
	const codegen_1 = codegen;
	const types_1 = types;
	const compile_1 = compile$1;
	const util_1 = util;
	const error = {
	  message: ({
	    params: {
	      discrError,
	      tagName
	    }
	  }) => discrError === types_1.DiscrError.Tag ? `tag "${tagName}" must be string` : `value of tag "${tagName}" must be in oneOf`,
	  params: ({
	    params: {
	      discrError,
	      tag,
	      tagName
	    }
	  }) => (0, codegen_1._)`{error: ${discrError}, tag: ${tagName}, tagValue: ${tag}}`
	};
	const def = {
	  keyword: "discriminator",
	  type: "object",
	  schemaType: "object",
	  error,
	  code(cxt) {
	    const {
	      gen,
	      data,
	      schema,
	      parentSchema,
	      it
	    } = cxt;
	    const {
	      oneOf
	    } = parentSchema;
	    if (!it.opts.discriminator) {
	      throw new Error("discriminator: requires discriminator option");
	    }
	    const tagName = schema.propertyName;
	    if (typeof tagName != "string") throw new Error("discriminator: requires propertyName");
	    if (schema.mapping) throw new Error("discriminator: mapping is not supported");
	    if (!oneOf) throw new Error("discriminator: requires oneOf keyword");
	    const valid = gen.let("valid", false);
	    const tag = gen.const("tag", (0, codegen_1._)`${data}${(0, codegen_1.getProperty)(tagName)}`);
	    gen.if((0, codegen_1._)`typeof ${tag} == "string"`, () => validateMapping(), () => cxt.error(false, {
	      discrError: types_1.DiscrError.Tag,
	      tag,
	      tagName
	    }));
	    cxt.ok(valid);
	    function validateMapping() {
	      const mapping = getMapping();
	      gen.if(false);
	      for (const tagValue in mapping) {
	        gen.elseIf((0, codegen_1._)`${tag} === ${tagValue}`);
	        gen.assign(valid, applyTagSchema(mapping[tagValue]));
	      }
	      gen.else();
	      cxt.error(false, {
	        discrError: types_1.DiscrError.Mapping,
	        tag,
	        tagName
	      });
	      gen.endIf();
	    }
	    function applyTagSchema(schemaProp) {
	      const _valid = gen.name("valid");
	      const schCxt = cxt.subschema({
	        keyword: "oneOf",
	        schemaProp
	      }, _valid);
	      cxt.mergeEvaluated(schCxt, codegen_1.Name);
	      return _valid;
	    }
	    function getMapping() {
	      var _a;
	      const oneOfMapping = {};
	      const topRequired = hasRequired(parentSchema);
	      let tagRequired = true;
	      for (let i = 0; i < oneOf.length; i++) {
	        let sch = oneOf[i];
	        if ((sch === null || sch === void 0 ? void 0 : sch.$ref) && !(0, util_1.schemaHasRulesButRef)(sch, it.self.RULES)) {
	          sch = compile_1.resolveRef.call(it.self, it.schemaEnv.root, it.baseId, sch === null || sch === void 0 ? void 0 : sch.$ref);
	          if (sch instanceof compile_1.SchemaEnv) sch = sch.schema;
	        }
	        const propSch = (_a = sch === null || sch === void 0 ? void 0 : sch.properties) === null || _a === void 0 ? void 0 : _a[tagName];
	        if (typeof propSch != "object") {
	          throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${tagName}"`);
	        }
	        tagRequired = tagRequired && (topRequired || hasRequired(sch));
	        addMappings(propSch, i);
	      }
	      if (!tagRequired) throw new Error(`discriminator: "${tagName}" must be required`);
	      return oneOfMapping;
	      function hasRequired({
	        required
	      }) {
	        return Array.isArray(required) && required.includes(tagName);
	      }
	      function addMappings(sch, i) {
	        if (sch.const) {
	          addMapping(sch.const, i);
	        } else if (sch.enum) {
	          for (const tagValue of sch.enum) {
	            addMapping(tagValue, i);
	          }
	        } else {
	          throw new Error(`discriminator: "properties/${tagName}" must have "const" or "enum"`);
	        }
	      }
	      function addMapping(tagValue, i) {
	        if (typeof tagValue != "string" || tagValue in oneOfMapping) {
	          throw new Error(`discriminator: "${tagName}" values must be unique strings`);
	        }
	        oneOfMapping[tagValue] = i;
	      }
	    }
	  }
	};
	discriminator.default = def;

	var $schema = "http://json-schema.org/draft-07/schema#";
	var $id = "http://json-schema.org/draft-07/schema#";
	var title = "Core schema meta-schema";
	var definitions = {
		schemaArray: {
			type: "array",
			minItems: 1,
			items: {
				$ref: "#"
			}
		},
		nonNegativeInteger: {
			type: "integer",
			minimum: 0
		},
		nonNegativeIntegerDefault0: {
			allOf: [
				{
					$ref: "#/definitions/nonNegativeInteger"
				},
				{
					"default": 0
				}
			]
		},
		simpleTypes: {
			"enum": [
				"array",
				"boolean",
				"integer",
				"null",
				"number",
				"object",
				"string"
			]
		},
		stringArray: {
			type: "array",
			items: {
				type: "string"
			},
			uniqueItems: true,
			"default": [
			]
		}
	};
	var type = [
		"object",
		"boolean"
	];
	var properties$1 = {
		$id: {
			type: "string",
			format: "uri-reference"
		},
		$schema: {
			type: "string",
			format: "uri"
		},
		$ref: {
			type: "string",
			format: "uri-reference"
		},
		$comment: {
			type: "string"
		},
		title: {
			type: "string"
		},
		description: {
			type: "string"
		},
		"default": true,
		readOnly: {
			type: "boolean",
			"default": false
		},
		examples: {
			type: "array",
			items: true
		},
		multipleOf: {
			type: "number",
			exclusiveMinimum: 0
		},
		maximum: {
			type: "number"
		},
		exclusiveMaximum: {
			type: "number"
		},
		minimum: {
			type: "number"
		},
		exclusiveMinimum: {
			type: "number"
		},
		maxLength: {
			$ref: "#/definitions/nonNegativeInteger"
		},
		minLength: {
			$ref: "#/definitions/nonNegativeIntegerDefault0"
		},
		pattern: {
			type: "string",
			format: "regex"
		},
		additionalItems: {
			$ref: "#"
		},
		items: {
			anyOf: [
				{
					$ref: "#"
				},
				{
					$ref: "#/definitions/schemaArray"
				}
			],
			"default": true
		},
		maxItems: {
			$ref: "#/definitions/nonNegativeInteger"
		},
		minItems: {
			$ref: "#/definitions/nonNegativeIntegerDefault0"
		},
		uniqueItems: {
			type: "boolean",
			"default": false
		},
		contains: {
			$ref: "#"
		},
		maxProperties: {
			$ref: "#/definitions/nonNegativeInteger"
		},
		minProperties: {
			$ref: "#/definitions/nonNegativeIntegerDefault0"
		},
		required: {
			$ref: "#/definitions/stringArray"
		},
		additionalProperties: {
			$ref: "#"
		},
		definitions: {
			type: "object",
			additionalProperties: {
				$ref: "#"
			},
			"default": {
			}
		},
		properties: {
			type: "object",
			additionalProperties: {
				$ref: "#"
			},
			"default": {
			}
		},
		patternProperties: {
			type: "object",
			additionalProperties: {
				$ref: "#"
			},
			propertyNames: {
				format: "regex"
			},
			"default": {
			}
		},
		dependencies: {
			type: "object",
			additionalProperties: {
				anyOf: [
					{
						$ref: "#"
					},
					{
						$ref: "#/definitions/stringArray"
					}
				]
			}
		},
		propertyNames: {
			$ref: "#"
		},
		"const": true,
		"enum": {
			type: "array",
			items: true,
			minItems: 1,
			uniqueItems: true
		},
		type: {
			anyOf: [
				{
					$ref: "#/definitions/simpleTypes"
				},
				{
					type: "array",
					items: {
						$ref: "#/definitions/simpleTypes"
					},
					minItems: 1,
					uniqueItems: true
				}
			]
		},
		format: {
			type: "string"
		},
		contentMediaType: {
			type: "string"
		},
		contentEncoding: {
			type: "string"
		},
		"if": {
			$ref: "#"
		},
		then: {
			$ref: "#"
		},
		"else": {
			$ref: "#"
		},
		allOf: {
			$ref: "#/definitions/schemaArray"
		},
		anyOf: {
			$ref: "#/definitions/schemaArray"
		},
		oneOf: {
			$ref: "#/definitions/schemaArray"
		},
		not: {
			$ref: "#"
		}
	};
	var require$$3 = {
		$schema: $schema,
		$id: $id,
		title: title,
		definitions: definitions,
		type: type,
		properties: properties$1,
		"default": true
	};

	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.MissingRefError = exports.ValidationError = exports.CodeGen = exports.Name = exports.nil = exports.stringify = exports.str = exports._ = exports.KeywordCxt = void 0;
		const core_1 = core$2;
		const draft7_1 = draft7;
		const discriminator_1 = discriminator;
		const draft7MetaSchema = require$$3;
		const META_SUPPORT_DATA = ["/properties"];
		const META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
		class Ajv extends core_1.default {
		  _addVocabularies() {
		    super._addVocabularies();
		    draft7_1.default.forEach(v => this.addVocabulary(v));
		    if (this.opts.discriminator) this.addKeyword(discriminator_1.default);
		  }
		  _addDefaultMetaSchema() {
		    super._addDefaultMetaSchema();
		    if (!this.opts.meta) return;
		    const metaSchema = this.opts.$data ? this.$dataMetaSchema(draft7MetaSchema, META_SUPPORT_DATA) : draft7MetaSchema;
		    this.addMetaSchema(metaSchema, META_SCHEMA_ID, false);
		    this.refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
		  }
		  defaultMeta() {
		    return this.opts.defaultMeta = super.defaultMeta() || (this.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined);
		  }
		}
		module.exports = exports = Ajv;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = Ajv;
		var validate_1 = requireValidate();
		Object.defineProperty(exports, "KeywordCxt", {
		  enumerable: true,
		  get: function () {
		    return validate_1.KeywordCxt;
		  }
		});
		var codegen_1 = codegen;
		Object.defineProperty(exports, "_", {
		  enumerable: true,
		  get: function () {
		    return codegen_1._;
		  }
		});
		Object.defineProperty(exports, "str", {
		  enumerable: true,
		  get: function () {
		    return codegen_1.str;
		  }
		});
		Object.defineProperty(exports, "stringify", {
		  enumerable: true,
		  get: function () {
		    return codegen_1.stringify;
		  }
		});
		Object.defineProperty(exports, "nil", {
		  enumerable: true,
		  get: function () {
		    return codegen_1.nil;
		  }
		});
		Object.defineProperty(exports, "Name", {
		  enumerable: true,
		  get: function () {
		    return codegen_1.Name;
		  }
		});
		Object.defineProperty(exports, "CodeGen", {
		  enumerable: true,
		  get: function () {
		    return codegen_1.CodeGen;
		  }
		});
		var validation_error_1 = requireValidation_error();
		Object.defineProperty(exports, "ValidationError", {
		  enumerable: true,
		  get: function () {
		    return validation_error_1.default;
		  }
		});
		var ref_error_1 = requireRef_error();
		Object.defineProperty(exports, "MissingRefError", {
		  enumerable: true,
		  get: function () {
		    return ref_error_1.default;
		  }
		}); 
	} (ajv, ajv.exports));

	var ajvExports = ajv.exports;
	var Ajv = /*@__PURE__*/getDefaultExportFromCjs(ajvExports);

	var dist = {exports: {}};

	var formats = {};

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.formatNames = exports.fastFormats = exports.fullFormats = void 0;
		function fmtDef(validate, compare) {
		  return {
		    validate,
		    compare
		  };
		}
		exports.fullFormats = {
		  // date: http://tools.ietf.org/html/rfc3339#section-5.6
		  date: fmtDef(date, compareDate),
		  // date-time: http://tools.ietf.org/html/rfc3339#section-5.6
		  time: fmtDef(time, compareTime),
		  "date-time": fmtDef(date_time, compareDateTime),
		  // duration: https://tools.ietf.org/html/rfc3339#appendix-A
		  duration: /^P(?!$)((\d+Y)?(\d+M)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?|(\d+W)?)$/,
		  uri,
		  "uri-reference": /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i,
		  // uri-template: https://tools.ietf.org/html/rfc6570
		  "uri-template": /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i,
		  // For the source: https://gist.github.com/dperini/729294
		  // For test cases: https://mathiasbynens.be/demo/url-regex
		  url: /^(?:https?|ftp):\/\/(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)(?:\.(?:[a-z0-9\u{00a1}-\u{ffff}]+-)*[a-z0-9\u{00a1}-\u{ffff}]+)*(?:\.(?:[a-z\u{00a1}-\u{ffff}]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/iu,
		  email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
		  hostname: /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i,
		  // optimized https://www.safaribooksonline.com/library/view/regular-expressions-cookbook/9780596802837/ch07s16.html
		  ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
		  ipv6: /^((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))$/i,
		  regex,
		  // uuid: http://tools.ietf.org/html/rfc4122
		  uuid: /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i,
		  // JSON-pointer: https://tools.ietf.org/html/rfc6901
		  // uri fragment: https://tools.ietf.org/html/rfc3986#appendix-A
		  "json-pointer": /^(?:\/(?:[^~/]|~0|~1)*)*$/,
		  "json-pointer-uri-fragment": /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i,
		  // relative JSON-pointer: http://tools.ietf.org/html/draft-luff-relative-json-pointer-00
		  "relative-json-pointer": /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/,
		  // the following formats are used by the openapi specification: https://spec.openapis.org/oas/v3.0.0#data-types
		  // byte: https://github.com/miguelmota/is-base64
		  byte,
		  // signed 32 bit integer
		  int32: {
		    type: "number",
		    validate: validateInt32
		  },
		  // signed 64 bit integer
		  int64: {
		    type: "number",
		    validate: validateInt64
		  },
		  // C-type float
		  float: {
		    type: "number",
		    validate: validateNumber
		  },
		  // C-type double
		  double: {
		    type: "number",
		    validate: validateNumber
		  },
		  // hint to the UI to hide input strings
		  password: true,
		  // unchecked string payload
		  binary: true
		};
		exports.fastFormats = {
		  ...exports.fullFormats,
		  date: fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d$/, compareDate),
		  time: fmtDef(/^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i, compareTime),
		  "date-time": fmtDef(/^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i, compareDateTime),
		  // uri: https://github.com/mafintosh/is-my-json-valid/blob/master/formats.js
		  uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
		  "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
		  // email (sources from jsen validator):
		  // http://stackoverflow.com/questions/201323/using-a-regular-expression-to-validate-an-email-address#answer-8829363
		  // http://www.w3.org/TR/html5/forms.html#valid-e-mail-address (search for 'wilful violation')
		  email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i
		};
		exports.formatNames = Object.keys(exports.fullFormats);
		function isLeapYear(year) {
		  // https://tools.ietf.org/html/rfc3339#appendix-C
		  return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
		}
		const DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
		const DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
		function date(str) {
		  // full-date from http://tools.ietf.org/html/rfc3339#section-5.6
		  const matches = DATE.exec(str);
		  if (!matches) return false;
		  const year = +matches[1];
		  const month = +matches[2];
		  const day = +matches[3];
		  return month >= 1 && month <= 12 && day >= 1 && day <= (month === 2 && isLeapYear(year) ? 29 : DAYS[month]);
		}
		function compareDate(d1, d2) {
		  if (!(d1 && d2)) return undefined;
		  if (d1 > d2) return 1;
		  if (d1 < d2) return -1;
		  return 0;
		}
		const TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
		function time(str, withTimeZone) {
		  const matches = TIME.exec(str);
		  if (!matches) return false;
		  const hour = +matches[1];
		  const minute = +matches[2];
		  const second = +matches[3];
		  const timeZone = matches[5];
		  return (hour <= 23 && minute <= 59 && second <= 59 || hour === 23 && minute === 59 && second === 60) && (!withTimeZone || timeZone !== "");
		}
		function compareTime(t1, t2) {
		  if (!(t1 && t2)) return undefined;
		  const a1 = TIME.exec(t1);
		  const a2 = TIME.exec(t2);
		  if (!(a1 && a2)) return undefined;
		  t1 = a1[1] + a1[2] + a1[3] + (a1[4] || "");
		  t2 = a2[1] + a2[2] + a2[3] + (a2[4] || "");
		  if (t1 > t2) return 1;
		  if (t1 < t2) return -1;
		  return 0;
		}
		const DATE_TIME_SEPARATOR = /t|\s/i;
		function date_time(str) {
		  // http://tools.ietf.org/html/rfc3339#section-5.6
		  const dateTime = str.split(DATE_TIME_SEPARATOR);
		  return dateTime.length === 2 && date(dateTime[0]) && time(dateTime[1], true);
		}
		function compareDateTime(dt1, dt2) {
		  if (!(dt1 && dt2)) return undefined;
		  const [d1, t1] = dt1.split(DATE_TIME_SEPARATOR);
		  const [d2, t2] = dt2.split(DATE_TIME_SEPARATOR);
		  const res = compareDate(d1, d2);
		  if (res === undefined) return undefined;
		  return res || compareTime(t1, t2);
		}
		const NOT_URI_FRAGMENT = /\/|:/;
		const URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
		function uri(str) {
		  // http://jmrware.com/articles/2009/uri_regexp/URI_regex.html + optional protocol + required "."
		  return NOT_URI_FRAGMENT.test(str) && URI.test(str);
		}
		const BYTE = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/gm;
		function byte(str) {
		  BYTE.lastIndex = 0;
		  return BYTE.test(str);
		}
		const MIN_INT32 = -(2 ** 31);
		const MAX_INT32 = 2 ** 31 - 1;
		function validateInt32(value) {
		  return Number.isInteger(value) && value <= MAX_INT32 && value >= MIN_INT32;
		}
		function validateInt64(value) {
		  // JSON and javascript max Int is 2**53, so any int that passes isInteger is valid for Int64
		  return Number.isInteger(value);
		}
		function validateNumber() {
		  return true;
		}
		const Z_ANCHOR = /[^\\]\\Z/;
		function regex(str) {
		  if (Z_ANCHOR.test(str)) return false;
		  try {
		    new RegExp(str);
		    return true;
		  } catch (e) {
		    return false;
		  }
		} 
	} (formats));

	var limit = {};

	(function (exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.formatLimitDefinition = void 0;
		const ajv_1 = ajvExports;
		const codegen_1 = codegen;
		const ops = codegen_1.operators;
		const KWDs = {
		  formatMaximum: {
		    okStr: "<=",
		    ok: ops.LTE,
		    fail: ops.GT
		  },
		  formatMinimum: {
		    okStr: ">=",
		    ok: ops.GTE,
		    fail: ops.LT
		  },
		  formatExclusiveMaximum: {
		    okStr: "<",
		    ok: ops.LT,
		    fail: ops.GTE
		  },
		  formatExclusiveMinimum: {
		    okStr: ">",
		    ok: ops.GT,
		    fail: ops.LTE
		  }
		};
		const error = {
		  message: ({
		    keyword,
		    schemaCode
		  }) => codegen_1.str`should be ${KWDs[keyword].okStr} ${schemaCode}`,
		  params: ({
		    keyword,
		    schemaCode
		  }) => codegen_1._`{comparison: ${KWDs[keyword].okStr}, limit: ${schemaCode}}`
		};
		exports.formatLimitDefinition = {
		  keyword: Object.keys(KWDs),
		  type: "string",
		  schemaType: "string",
		  $data: true,
		  error,
		  code(cxt) {
		    const {
		      gen,
		      data,
		      schemaCode,
		      keyword,
		      it
		    } = cxt;
		    const {
		      opts,
		      self
		    } = it;
		    if (!opts.validateFormats) return;
		    const fCxt = new ajv_1.KeywordCxt(it, self.RULES.all.format.definition, "format");
		    if (fCxt.$data) validate$DataFormat();else validateFormat();
		    function validate$DataFormat() {
		      const fmts = gen.scopeValue("formats", {
		        ref: self.formats,
		        code: opts.code.formats
		      });
		      const fmt = gen.const("fmt", codegen_1._`${fmts}[${fCxt.schemaCode}]`);
		      cxt.fail$data(codegen_1.or(codegen_1._`typeof ${fmt} != "object"`, codegen_1._`${fmt} instanceof RegExp`, codegen_1._`typeof ${fmt}.compare != "function"`, compareCode(fmt)));
		    }
		    function validateFormat() {
		      const format = fCxt.schema;
		      const fmtDef = self.formats[format];
		      if (!fmtDef || fmtDef === true) return;
		      if (typeof fmtDef != "object" || fmtDef instanceof RegExp || typeof fmtDef.compare != "function") {
		        throw new Error(`"${keyword}": format "${format}" does not define "compare" function`);
		      }
		      const fmt = gen.scopeValue("formats", {
		        key: format,
		        ref: fmtDef,
		        code: opts.code.formats ? codegen_1._`${opts.code.formats}${codegen_1.getProperty(format)}` : undefined
		      });
		      cxt.fail$data(compareCode(fmt));
		    }
		    function compareCode(fmt) {
		      return codegen_1._`${fmt}.compare(${data}, ${schemaCode}) ${KWDs[keyword].fail} 0`;
		    }
		  },
		  dependencies: ["format"]
		};
		const formatLimitPlugin = ajv => {
		  ajv.addKeyword(exports.formatLimitDefinition);
		  return ajv;
		};
		exports.default = formatLimitPlugin; 
	} (limit));

	(function (module, exports) {

		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		const formats_1 = formats;
		const limit_1 = limit;
		const codegen_1 = codegen;
		const fullName = new codegen_1.Name("fullFormats");
		const fastName = new codegen_1.Name("fastFormats");
		const formatsPlugin = (ajv, opts = {
		  keywords: true
		}) => {
		  if (Array.isArray(opts)) {
		    addFormats(ajv, opts, formats_1.fullFormats, fullName);
		    return ajv;
		  }
		  const [formats, exportName] = opts.mode === "fast" ? [formats_1.fastFormats, fastName] : [formats_1.fullFormats, fullName];
		  const list = opts.formats || formats_1.formatNames;
		  addFormats(ajv, list, formats, exportName);
		  if (opts.keywords) limit_1.default(ajv);
		  return ajv;
		};
		formatsPlugin.get = (name, mode = "full") => {
		  const formats = mode === "fast" ? formats_1.fastFormats : formats_1.fullFormats;
		  const f = formats[name];
		  if (!f) throw new Error(`Unknown format "${name}"`);
		  return f;
		};
		function addFormats(ajv, list, fs, exportName) {
		  var _a;
		  var _b;
		  (_a = (_b = ajv.opts.code).formats) !== null && _a !== void 0 ? _a : _b.formats = codegen_1._`require("ajv-formats/dist/formats").${exportName}`;
		  for (const f of list) ajv.addFormat(f, fs[f]);
		}
		module.exports = exports = formatsPlugin;
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.default = formatsPlugin; 
	} (dist, dist.exports));

	var distExports = dist.exports;
	var addFormats = /*@__PURE__*/getDefaultExportFromCjs(distExports);

	const ADDITIONAL_PROPERTIES = 'additionalProperties';
	const REQUIRED_PROPERTIES = 'required';
	const distinct = (properties, discriminator) => {
	  const known = {};
	  return properties.filter(item => {
	    const discriminatorValue = discriminator(item);
	    if (Object.prototype.hasOwnProperty.call(known, discriminatorValue)) {
	      return false;
	    } else {
	      known[discriminatorValue] = true;
	      return true;
	    }
	  });
	};
	class Gen {
	  constructor(findOption) {
	    this.findOption = findOption;
	    this.schemaObject = data => {
	      const props = this.properties(data);
	      const schema = {
	        type: 'object',
	        properties: props,
	        additionalProperties: this.findOption(props)(ADDITIONAL_PROPERTIES)
	      };
	      const required = this.findOption(props)(REQUIRED_PROPERTIES);
	      if (required.length > 0) {
	        schema.required = required;
	      }
	      return schema;
	    };
	    this.properties = data => {
	      const emptyProps = {};
	      return Object.keys(data).reduce((acc, propName) => {
	        acc[propName] = this.property(data[propName]);
	        return acc;
	      }, emptyProps);
	    };
	    this.property = data => {
	      switch (typeof data) {
	        case 'string':
	          return {
	            type: 'string'
	          };
	        case 'boolean':
	          return {
	            type: 'boolean'
	          };
	        case 'number':
	          if (Number.isInteger(data)) {
	            return {
	              type: 'integer'
	            };
	          }
	          return {
	            type: 'number'
	          };
	        case 'object':
	          if (data == null) {
	            return {
	              type: 'null'
	            };
	          }
	          return this.schemaObjectOrArray(data);
	        default:
	          return {};
	      }
	    };
	    this.schemaObjectOrArray = data => {
	      if (data instanceof Array) {
	        return this.schemaArray(data);
	      } else {
	        return this.schemaObject(data);
	      }
	    };
	    this.schemaArray = data => {
	      if (data.length > 0) {
	        const allProperties = data.map(this.property);
	        const uniqueProperties = distinct(allProperties, prop => JSON.stringify(prop));
	        if (uniqueProperties.length === 1) {
	          return {
	            type: 'array',
	            items: uniqueProperties[0]
	          };
	        } else {
	          return {
	            type: 'array',
	            items: {
	              oneOf: uniqueProperties
	            }
	          };
	        }
	      } else {
	        return {
	          type: 'array',
	          items: {}
	        };
	      }
	    };
	  }
	}
	const generateJsonSchema = (instance, options = {}) => {
	  const findOption = props => optionName => {
	    switch (optionName) {
	      case ADDITIONAL_PROPERTIES:
	        if (Object.prototype.hasOwnProperty.call(options, ADDITIONAL_PROPERTIES)) {
	          return options[ADDITIONAL_PROPERTIES];
	        }
	        return true;
	      case REQUIRED_PROPERTIES:
	        if (Object.prototype.hasOwnProperty.call(options, REQUIRED_PROPERTIES)) {
	          return options[REQUIRED_PROPERTIES](props);
	        }
	        return Object.keys(props);
	      default:
	        return;
	    }
	  };
	  const gen = new Gen(findOption);
	  return gen.schemaObject(instance);
	};
	var RuleEffect;
	(function (RuleEffect) {
	  RuleEffect["HIDE"] = "HIDE";
	  RuleEffect["SHOW"] = "SHOW";
	  RuleEffect["ENABLE"] = "ENABLE";
	  RuleEffect["DISABLE"] = "DISABLE";
	})(RuleEffect || (RuleEffect = {}));
	const isInternationalized = element => typeof element === 'object' && element !== null && typeof element.i18n === 'string';
	const isGroup = layout => layout.type === 'Group';
	const isLayout = uischema => uischema.elements !== undefined;
	const isScopable = obj => !!obj && typeof obj === 'object';
	const isScoped = obj => isScopable(obj) && typeof obj.scope === 'string';
	const isLabelable = obj => !!obj && typeof obj === 'object';
	const move = (array, index, delta) => {
	  const newIndex = index + delta;
	  if (newIndex < 0 || newIndex >= array.length) {
	    return;
	  }
	  const indexes = [index, newIndex].sort((a, b) => a - b);
	  array.splice(indexes[0], 2, array[indexes[1]], array[indexes[0]]);
	};
	const moveUp = (array, toMove) => {
	  move(array, toMove, -1);
	};
	const moveDown = (array, toMove) => {
	  move(array, toMove, 1);
	};
	const configDefault = {
	  restrict: false,
	  trim: false,
	  showUnfocusedDescription: false,
	  hideRequiredAsterisk: false
	};
	const applyDefaultConfiguration = (config = {}) => merge$2({}, configDefault, config);
	const configReducer = (state = applyDefaultConfiguration(), action) => {
	  switch (action.type) {
	    case SET_CONFIG:
	      return applyDefaultConfiguration(action.config);
	    default:
	      return state;
	  }
	};
	const validate = (validator, data) => {
	  if (validator === undefined) {
	    return [];
	  }
	  const valid = validator(data);
	  if (valid) {
	    return [];
	  }
	  return validator.errors;
	};
	const initState = {
	  data: {},
	  schema: {},
	  uischema: undefined,
	  errors: [],
	  validator: undefined,
	  ajv: undefined,
	  validationMode: 'ValidateAndShow',
	  additionalErrors: []
	};
	const reuseAjvForSchema = (ajv, schema) => {
	  if (Object.prototype.hasOwnProperty.call(schema, 'id') || Object.prototype.hasOwnProperty.call(schema, '$id')) {
	    ajv.removeSchema(schema);
	  }
	  return ajv;
	};
	const getOrCreateAjv = (state, action) => {
	  if (action) {
	    if (hasAjvOption(action.options)) {
	      return action.options.ajv;
	    } else if (action.options !== undefined) {
	      if (isFunction$4(action.options.compile)) {
	        return action.options;
	      }
	    }
	  }
	  if (state.ajv) {
	    return action?.schema ? reuseAjvForSchema(state.ajv, action.schema) : state.ajv;
	  }
	  return createAjv();
	};
	const hasAjvOption = option => {
	  if (option) {
	    return option.ajv !== undefined;
	  }
	  return false;
	};
	const getValidationMode = (state, action) => {
	  if (action && hasValidationModeOption(action.options)) {
	    return action.options.validationMode;
	  }
	  return state.validationMode;
	};
	const hasValidationModeOption = option => {
	  if (option) {
	    return option.validationMode !== undefined;
	  }
	  return false;
	};
	const hasAdditionalErrorsOption = option => {
	  if (option) {
	    return option.additionalErrors !== undefined;
	  }
	  return false;
	};
	const getAdditionalErrors = (state, action) => {
	  if (action && hasAdditionalErrorsOption(action.options)) {
	    return action.options.additionalErrors;
	  }
	  return state.additionalErrors;
	};
	const coreReducer = (state = initState, action) => {
	  switch (action.type) {
	    case INIT:
	      {
	        const thisAjv = getOrCreateAjv(state, action);
	        const validationMode = getValidationMode(state, action);
	        const v = validationMode === 'NoValidation' ? undefined : thisAjv.compile(action.schema);
	        const e = validate(v, action.data);
	        const additionalErrors = getAdditionalErrors(state, action);
	        return {
	          ...state,
	          data: action.data,
	          schema: action.schema,
	          uischema: action.uischema,
	          additionalErrors,
	          errors: e,
	          validator: v,
	          ajv: thisAjv,
	          validationMode
	        };
	      }
	    case UPDATE_CORE:
	      {
	        const thisAjv = getOrCreateAjv(state, action);
	        const validationMode = getValidationMode(state, action);
	        let validator = state.validator;
	        let errors = state.errors;
	        if (state.schema !== action.schema || state.validationMode !== validationMode || state.ajv !== thisAjv) {
	          validator = validationMode === 'NoValidation' ? undefined : thisAjv.compile(action.schema);
	          errors = validate(validator, action.data);
	        } else if (state.data !== action.data) {
	          errors = validate(validator, action.data);
	        }
	        const additionalErrors = getAdditionalErrors(state, action);
	        const stateChanged = state.data !== action.data || state.schema !== action.schema || state.uischema !== action.uischema || state.ajv !== thisAjv || state.errors !== errors || state.validator !== validator || state.validationMode !== validationMode || state.additionalErrors !== additionalErrors;
	        return stateChanged ? {
	          ...state,
	          data: action.data,
	          schema: action.schema,
	          uischema: action.uischema,
	          ajv: thisAjv,
	          errors: isEqual$1(errors, state.errors) ? state.errors : errors,
	          validator: validator,
	          validationMode: validationMode,
	          additionalErrors
	        } : state;
	      }
	    case SET_AJV:
	      {
	        const currentAjv = action.ajv;
	        const validator = state.validationMode === 'NoValidation' ? undefined : currentAjv.compile(state.schema);
	        const errors = validate(validator, state.data);
	        return {
	          ...state,
	          validator,
	          errors
	        };
	      }
	    case SET_SCHEMA:
	      {
	        const needsNewValidator = action.schema && state.ajv && state.validationMode !== 'NoValidation';
	        const v = needsNewValidator ? reuseAjvForSchema(state.ajv, action.schema).compile(action.schema) : state.validator;
	        const errors = validate(v, state.data);
	        return {
	          ...state,
	          validator: v,
	          schema: action.schema,
	          errors
	        };
	      }
	    case SET_UISCHEMA:
	      {
	        return {
	          ...state,
	          uischema: action.uischema
	        };
	      }
	    case UPDATE_DATA:
	      {
	        if (action.path === undefined || action.path === null) {
	          return state;
	        } else if (action.path === '') {
	          const result = action.updater(cloneDeep$1(state.data));
	          const errors = validate(state.validator, result);
	          return {
	            ...state,
	            data: result,
	            errors
	          };
	        } else {
	          const oldData = get$2(state.data, action.path);
	          const newData = action.updater(cloneDeep$1(oldData));
	          const newState = setFp(action.path, newData, state.data === undefined ? {} : state.data);
	          const errors = validate(state.validator, newState);
	          return {
	            ...state,
	            data: newState,
	            errors
	          };
	        }
	      }
	    case UPDATE_ERRORS:
	      {
	        return {
	          ...state,
	          errors: action.errors
	        };
	      }
	    case SET_VALIDATION_MODE:
	      {
	        if (state.validationMode === action.validationMode) {
	          return state;
	        }
	        if (action.validationMode === 'NoValidation') {
	          const errors = validate(undefined, state.data);
	          return {
	            ...state,
	            errors,
	            validationMode: action.validationMode
	          };
	        }
	        if (state.validationMode === 'NoValidation') {
	          const validator = reuseAjvForSchema(state.ajv, state.schema).compile(state.schema);
	          const errors = validate(validator, state.data);
	          return {
	            ...state,
	            validator,
	            errors,
	            validationMode: action.validationMode
	          };
	        }
	        return {
	          ...state,
	          validationMode: action.validationMode
	        };
	      }
	    default:
	      return state;
	  }
	};
	const extractData = state => get$2(state, 'data');
	const extractSchema = state => get$2(state, 'schema');
	const extractUiSchema = state => get$2(state, 'uischema');
	const extractAjv = state => get$2(state, 'ajv');
	const getInvalidProperty = error => {
	  switch (error.keyword) {
	    case 'required':
	    case 'dependencies':
	      return error.params.missingProperty;
	    case 'additionalProperties':
	      return error.params.additionalProperty;
	    default:
	      return undefined;
	  }
	};
	const getControlPath = error => {
	  let controlPath = error.dataPath || error.instancePath || '';
	  controlPath = controlPath.replace(/\//g, '.');
	  const invalidProperty = getInvalidProperty(error);
	  if (invalidProperty !== undefined && !controlPath.endsWith(invalidProperty)) {
	    controlPath = `${controlPath}.${invalidProperty}`;
	  }
	  controlPath = controlPath.replace(/^./, '');
	  controlPath = decode(controlPath);
	  return controlPath;
	};
	const errorsAt = (instancePath, schema, matchPath) => errors => {
	  const combinatorPaths = filter$1(errors, error => error.keyword === 'oneOf' || error.keyword === 'anyOf').map(error => getControlPath(error));
	  return filter$1(errors, error => {
	    if (filteredErrorKeywords.indexOf(error.keyword) !== -1 && !isOneOfEnumSchema(error.parentSchema)) {
	      return false;
	    }
	    const controlPath = getControlPath(error);
	    let result = matchPath(controlPath);
	    const parentSchema = error.parentSchema;
	    if (result && !isObjectSchema$1(parentSchema) && !isOneOfEnumSchema(parentSchema) && combinatorPaths.findIndex(p => instancePath.startsWith(p)) !== -1) {
	      result = result && isEqual$1(parentSchema, schema);
	    }
	    return result;
	  });
	};
	const isObjectSchema$1 = schema => {
	  return schema?.type === 'object' || !!schema?.properties;
	};
	const filteredErrorKeywords = ['additionalProperties', 'allOf', 'anyOf', 'oneOf'];
	const getErrorsAt = (instancePath, schema, matchPath) => state => {
	  const errors = state.errors ?? [];
	  const additionalErrors = state.additionalErrors ?? [];
	  return errorsAt(instancePath, schema, matchPath)(state.validationMode === 'ValidateAndHide' ? additionalErrors : [...errors, ...additionalErrors]);
	};
	const errorAt = (instancePath, schema) => getErrorsAt(instancePath, schema, path => path === instancePath);
	const subErrorsAt = (instancePath, schema) => getErrorsAt(instancePath, schema, path => path.startsWith(instancePath + '.'));
	const getI18nKeyPrefixBySchema = (schema, uischema) => {
	  if (isInternationalized(uischema)) {
	    return uischema.i18n;
	  }
	  return schema?.i18n ?? undefined;
	};
	const transformPathToI18nPrefix = path => {
	  return path?.split('.').filter(segment => !/^\d+$/.test(segment)).join('.') || 'root';
	};
	const getI18nKeyPrefix = (schema, uischema, path) => {
	  return getI18nKeyPrefixBySchema(schema, uischema) ?? transformPathToI18nPrefix(path);
	};
	const getI18nKey = (schema, uischema, path, key) => {
	  return `${getI18nKeyPrefix(schema, uischema, path)}.${key}`;
	};
	const addI18nKeyToPrefix = (i18nKeyPrefix, key) => {
	  return `${i18nKeyPrefix}.${key}`;
	};
	const defaultTranslator = (_id, defaultMessage) => defaultMessage;
	const defaultErrorTranslator = (error, t, uischema) => {
	  const i18nKey = getI18nKey(error.parentSchema, uischema, getControlPath(error), `error.${error.keyword}`);
	  const specializedKeywordMessage = t(i18nKey, undefined, {
	    error
	  });
	  if (specializedKeywordMessage !== undefined) {
	    return specializedKeywordMessage;
	  }
	  const genericKeywordMessage = t(`error.${error.keyword}`, undefined, {
	    error
	  });
	  if (genericKeywordMessage !== undefined) {
	    return genericKeywordMessage;
	  }
	  const messageCustomization = t(error.message, undefined, {
	    error
	  });
	  if (messageCustomization !== undefined) {
	    return messageCustomization;
	  }
	  if (error.keyword === 'required' && error.message?.startsWith('must have required property')) {
	    return t('is a required property', 'is a required property', {
	      error
	    });
	  }
	  return error.message;
	};
	const getCombinedErrorMessage = (errors, et, t, schema, uischema, path) => {
	  if (errors.length > 0 && t) {
	    const customErrorKey = getI18nKey(schema, uischema, path, 'error.custom');
	    const specializedErrorMessage = t(customErrorKey, undefined, {
	      schema,
	      uischema,
	      path,
	      errors
	    });
	    if (specializedErrorMessage !== undefined) {
	      return specializedErrorMessage;
	    }
	  }
	  return formatErrorMessage(errors.map(error => et(error, t, uischema)));
	};
	const deriveLabelForUISchemaElement = (uischema, t) => {
	  if (uischema.label === false) {
	    return undefined;
	  }
	  if ((uischema.label === undefined || uischema.label === null || uischema.label === true) && !isInternationalized(uischema)) {
	    return undefined;
	  }
	  const stringifiedLabel = typeof uischema.label === 'string' ? uischema.label : JSON.stringify(uischema.label);
	  const i18nKeyPrefix = getI18nKeyPrefixBySchema(undefined, uischema);
	  const i18nKey = typeof i18nKeyPrefix === 'string' ? `${i18nKeyPrefix}.label` : stringifiedLabel;
	  return t(i18nKey, stringifiedLabel, {
	    uischema: uischema
	  });
	};
	const getArrayTranslations = (t, defaultTranslations, i18nKeyPrefix, label) => {
	  const translations = {};
	  defaultTranslations.forEach(controlElement => {
	    const key = addI18nKeyToPrefix(i18nKeyPrefix, controlElement.key);
	    translations[controlElement.key] = t(key, controlElement.default(label));
	  });
	  return translations;
	};
	var ArrayTranslationEnum;
	(function (ArrayTranslationEnum) {
	  ArrayTranslationEnum["addTooltip"] = "addTooltip";
	  ArrayTranslationEnum["addAriaLabel"] = "addAriaLabel";
	  ArrayTranslationEnum["removeTooltip"] = "removeTooltip";
	  ArrayTranslationEnum["upAriaLabel"] = "upAriaLabel";
	  ArrayTranslationEnum["downAriaLabel"] = "downAriaLabel";
	  ArrayTranslationEnum["noSelection"] = "noSelection";
	  ArrayTranslationEnum["removeAriaLabel"] = "removeAriaLabel";
	  ArrayTranslationEnum["noDataMessage"] = "noDataMessage";
	  ArrayTranslationEnum["deleteDialogTitle"] = "deleteDialogTitle";
	  ArrayTranslationEnum["deleteDialogMessage"] = "deleteDialogMessage";
	  ArrayTranslationEnum["deleteDialogAccept"] = "deleteDialogAccept";
	  ArrayTranslationEnum["deleteDialogDecline"] = "deleteDialogDecline";
	  ArrayTranslationEnum["up"] = "up";
	  ArrayTranslationEnum["down"] = "down";
	})(ArrayTranslationEnum || (ArrayTranslationEnum = {}));
	const arrayDefaultTranslations = [{
	  key: ArrayTranslationEnum.addTooltip,
	  default: input => input ? `Add to ${input}` : 'Add'
	}, {
	  key: ArrayTranslationEnum.addAriaLabel,
	  default: input => input ? `Add to ${input} button` : 'Add button'
	}, {
	  key: ArrayTranslationEnum.removeTooltip,
	  default: () => 'Delete'
	}, {
	  key: ArrayTranslationEnum.removeAriaLabel,
	  default: () => 'Delete button'
	}, {
	  key: ArrayTranslationEnum.upAriaLabel,
	  default: () => `Move item up`
	}, {
	  key: ArrayTranslationEnum.up,
	  default: () => 'Up'
	}, {
	  key: ArrayTranslationEnum.down,
	  default: () => 'Down'
	}, {
	  key: ArrayTranslationEnum.downAriaLabel,
	  default: () => `Move item down`
	}, {
	  key: ArrayTranslationEnum.noDataMessage,
	  default: () => 'No data'
	}, {
	  key: ArrayTranslationEnum.noSelection,
	  default: () => 'No selection'
	}, {
	  key: ArrayTranslationEnum.deleteDialogTitle,
	  default: () => 'Confirm Deletion'
	}, {
	  key: ArrayTranslationEnum.deleteDialogMessage,
	  default: () => 'Are you sure you want to delete the selected entry?'
	}, {
	  key: ArrayTranslationEnum.deleteDialogAccept,
	  default: () => 'Yes'
	}, {
	  key: ArrayTranslationEnum.deleteDialogDecline,
	  default: () => 'No'
	}];
	const defaultJsonFormsI18nState = {
	  locale: 'en',
	  translate: defaultTranslator,
	  translateError: defaultErrorTranslator
	};
	const i18nReducer = (state = defaultJsonFormsI18nState, action) => {
	  switch (action.type) {
	    case UPDATE_I18N:
	      {
	        const locale = action.locale ?? defaultJsonFormsI18nState.locale;
	        const translate = action.translator ?? defaultJsonFormsI18nState.translate;
	        const translateError = action.errorTranslator ?? defaultJsonFormsI18nState.translateError;
	        if (locale !== state.locale || translate !== state.translate || translateError !== state.translateError) {
	          return {
	            ...state,
	            locale,
	            translate,
	            translateError
	          };
	        }
	        return state;
	      }
	    case SET_TRANSLATOR:
	      return {
	        ...state,
	        translate: action.translator ?? defaultTranslator,
	        translateError: action.errorTranslator ?? defaultErrorTranslator
	      };
	    case SET_LOCALE:
	      return {
	        ...state,
	        locale: action.locale ?? navigator.languages[0]
	      };
	    default:
	      return state;
	  }
	};
	const fetchTranslator = state => {
	  if (state === undefined) {
	    return defaultTranslator;
	  }
	  return state.translate;
	};
	const fetchErrorTranslator = state => {
	  if (state === undefined) {
	    return defaultErrorTranslator;
	  }
	  return state.translateError;
	};
	const NOT_APPLICABLE = -1;
	const isControl = uischema => !isEmpty$6(uischema) && uischema.scope !== undefined;
	const schemaMatches = predicate => (uischema, schema, context) => {
	  if (isEmpty$6(uischema) || !isControl(uischema)) {
	    return false;
	  }
	  if (isEmpty$6(schema)) {
	    return false;
	  }
	  const schemaPath = uischema.scope;
	  if (isEmpty$6(schemaPath)) {
	    return false;
	  }
	  let currentDataSchema = schema;
	  if (hasType(schema, 'object')) {
	    currentDataSchema = resolveSchema(schema, schemaPath, context?.rootSchema);
	  }
	  if (currentDataSchema === undefined) {
	    return false;
	  }
	  return predicate(currentDataSchema, context?.rootSchema);
	};
	const schemaSubPathMatches = (subPath, predicate) => (uischema, schema, context) => {
	  if (isEmpty$6(uischema) || !isControl(uischema)) {
	    return false;
	  }
	  const schemaPath = uischema.scope;
	  let currentDataSchema = schema;
	  if (hasType(schema, 'object')) {
	    currentDataSchema = resolveSchema(schema, schemaPath, context?.rootSchema);
	  }
	  currentDataSchema = get$2(currentDataSchema, subPath);
	  if (currentDataSchema === undefined) {
	    return false;
	  }
	  return predicate(currentDataSchema, context?.rootSchema);
	};
	const schemaTypeIs = expectedType => schemaMatches(schema => !isEmpty$6(schema) && hasType(schema, expectedType));
	const formatIs = expectedFormat => schemaMatches(schema => !isEmpty$6(schema) && schema.format === expectedFormat && hasType(schema, 'string'));
	const uiTypeIs = expected => uischema => !isEmpty$6(uischema) && uischema.type === expected;
	const optionIs = (optionName, optionValue) => uischema => {
	  if (isEmpty$6(uischema)) {
	    return false;
	  }
	  const options = uischema.options;
	  return !isEmpty$6(options) && options[optionName] === optionValue;
	};
	const and = (...testers) => (uischema, schema, context) => testers.reduce((acc, tester) => acc && tester(uischema, schema, context), true);
	const or = (...testers) => (uischema, schema, context) => testers.reduce((acc, tester) => acc || tester(uischema, schema, context), false);
	const rankWith = (rank, tester) => (uischema, schema, context) => {
	  if (tester(uischema, schema, context)) {
	    return rank;
	  }
	  return NOT_APPLICABLE;
	};
	const withIncreasedRank = (by, rankedTester) => (uischema, schema, context) => {
	  const rank = rankedTester(uischema, schema, context);
	  if (rank === NOT_APPLICABLE) {
	    return NOT_APPLICABLE;
	  }
	  return rank + by;
	};
	const isBooleanControl = and(uiTypeIs('Control'), schemaTypeIs('boolean'));
	const isObjectControl = and(uiTypeIs('Control'), schemaTypeIs('object'));
	const isAllOfControl = and(uiTypeIs('Control'), schemaMatches(schema => Object.prototype.hasOwnProperty.call(schema, 'allOf')));
	const isAnyOfControl = and(uiTypeIs('Control'), schemaMatches(schema => Object.prototype.hasOwnProperty.call(schema, 'anyOf')));
	const isOneOfControl = and(uiTypeIs('Control'), schemaMatches(schema => Object.prototype.hasOwnProperty.call(schema, 'oneOf')));
	const isEnumControl = and(uiTypeIs('Control'), or(schemaMatches(schema => Object.prototype.hasOwnProperty.call(schema, 'enum')), schemaMatches(schema => Object.prototype.hasOwnProperty.call(schema, 'const'))));
	const isOneOfEnumControl = and(uiTypeIs('Control'), schemaMatches(schema => isOneOfEnumSchema(schema)));
	const isIntegerControl = and(uiTypeIs('Control'), schemaTypeIs('integer'));
	const isNumberControl = and(uiTypeIs('Control'), schemaTypeIs('number'));
	const isStringControl = and(uiTypeIs('Control'), schemaTypeIs('string'));
	const isDateControl = and(uiTypeIs('Control'), or(formatIs('date'), optionIs('format', 'date')));
	const isTimeControl = and(uiTypeIs('Control'), or(formatIs('time'), optionIs('format', 'time')));
	const isDateTimeControl = and(uiTypeIs('Control'), or(formatIs('date-time'), optionIs('format', 'date-time')));
	const isObjectArray = and(schemaMatches((schema, rootSchema) => hasType(schema, 'array') && !Array.isArray(resolveSchema(schema, 'items', rootSchema))), schemaSubPathMatches('items', (schema, rootSchema) => {
	  const resolvedSchema = schema.$ref ? resolveSchema(rootSchema, schema.$ref, rootSchema) : schema;
	  return hasType(resolvedSchema, 'object');
	}));
	const isObjectArrayControl = and(uiTypeIs('Control'), isObjectArray);
	const traverse = (any, pred, rootSchema) => {
	  if (isArray$j(any)) {
	    return reduce$1(any, (acc, el) => acc || traverse(el, pred, rootSchema), false);
	  }
	  if (pred(any)) {
	    return true;
	  }
	  if (any.$ref) {
	    const toTraverse = resolveSchema(rootSchema, any.$ref, rootSchema);
	    if (toTraverse && !toTraverse.$ref) {
	      return traverse(toTraverse, pred, rootSchema);
	    }
	  }
	  if (any.items) {
	    return traverse(any.items, pred, rootSchema);
	  }
	  if (any.properties) {
	    return reduce$1(toPairs$1(any.properties), (acc, [_key, val]) => acc || traverse(val, pred, rootSchema), false);
	  }
	  return false;
	};
	const isObjectArrayWithNesting = (uischema, schema, context) => {
	  if (!uiTypeIs('Control')(uischema, schema, context)) {
	    return false;
	  }
	  const schemaPath = uischema.scope;
	  const resolvedSchema = resolveSchema(schema, schemaPath, context?.rootSchema ?? schema);
	  let objectDepth = 0;
	  if (resolvedSchema !== undefined && resolvedSchema.items !== undefined) {
	    if (traverse(resolvedSchema.items, val => {
	      if (val === schema) {
	        return false;
	      }
	      if (val.$ref !== undefined) {
	        return false;
	      }
	      if (val.anyOf || val.allOf) {
	        return true;
	      }
	      if (val.oneOf && !isOneOfEnumSchema(val)) {
	        return true;
	      }
	      if (hasType(val, 'object')) {
	        objectDepth++;
	        if (objectDepth === 2) {
	          return true;
	        }
	      }
	      if (hasType(val, 'array')) {
	        return true;
	      }
	      return false;
	    }, context?.rootSchema)) {
	      return true;
	    }
	    if (uischema.options && uischema.options.detail) {
	      if (typeof uischema.options.detail === 'string') {
	        return uischema.options.detail.toUpperCase() !== 'DEFAULT';
	      } else if (typeof uischema.options.detail === 'object' && uischema.options.detail.type) {
	        return true;
	      }
	    }
	  }
	  return false;
	};
	const isPrimitiveArrayControl = and(uiTypeIs('Control'), schemaMatches((schema, rootSchema) => deriveTypes(schema).length !== 0 && !Array.isArray(resolveSchema(schema, 'items', rootSchema))), schemaSubPathMatches('items', (schema, rootSchema) => {
	  const resolvedSchema = schema.$ref ? resolveSchema(rootSchema, schema.$ref, rootSchema) : schema;
	  const types = deriveTypes(resolvedSchema);
	  return types.length === 1 && includes$1(['integer', 'number', 'boolean', 'string'], types[0]);
	}));
	const isRangeControl = and(uiTypeIs('Control'), or(schemaTypeIs('number'), schemaTypeIs('integer')), schemaMatches(schema => Object.prototype.hasOwnProperty.call(schema, 'maximum') && Object.prototype.hasOwnProperty.call(schema, 'minimum') && Object.prototype.hasOwnProperty.call(schema, 'default')), optionIs('slider', true));
	const isNumberFormatControl = and(uiTypeIs('Control'), schemaTypeIs('integer'), optionIs('format', true));
	const isCategorization = category => category.type === 'Categorization';
	const isCategory = uischema => uischema.type === 'Category';
	const hasCategory = categorization => {
	  if (isEmpty$6(categorization.elements)) {
	    return false;
	  }
	  return categorization.elements.map(elem => isCategorization(elem) ? hasCategory(elem) : isCategory(elem)).reduce((prev, curr) => prev && curr, true);
	};
	const categorizationHasCategory = uischema => hasCategory(uischema);
	const findMatchingUISchema = state => (jsonSchema, schemaPath, path) => {
	  const match = maxBy$1(state, entry => entry.tester(jsonSchema, schemaPath, path));
	  if (match !== undefined && match.tester(jsonSchema, schemaPath, path) !== NOT_APPLICABLE) {
	    return match.uischema;
	  }
	  return undefined;
	};
	const findUISchema = (uischemas, schema, schemaPath, path, fallback = 'VerticalLayout', control, rootSchema) => {
	  if (control && control.options && control.options.detail) {
	    if (typeof control.options.detail === 'string') {
	      if (control.options.detail.toUpperCase() === 'GENERATE') {
	        if (typeof fallback === 'function') {
	          return fallback();
	        }
	        return Generate.uiSchema(schema, fallback);
	      }
	    } else if (typeof control.options.detail === 'object') {
	      if (control.options.detail.type && typeof control.options.detail.type === 'string') {
	        return control.options.detail;
	      }
	    }
	  }
	  const uiSchema = findMatchingUISchema(uischemas)(schema, schemaPath, path);
	  if (uiSchema === undefined) {
	    if (typeof fallback === 'function') {
	      return fallback();
	    }
	    return Generate.uiSchema(schema, fallback, '#', rootSchema);
	  }
	  return uiSchema;
	};
	const getErrorAt = (instancePath, schema) => state => {
	  return errorAt(instancePath, schema)(state.jsonforms.core);
	};
	const getSubErrorsAt = (instancePath, schema) => state => subErrorsAt(instancePath, schema)(state.jsonforms.core);
	const getConfig = state => state.jsonforms.config;
	const getTranslator = () => state => fetchTranslator(get$2(state, 'jsonforms.i18n'));
	const getErrorTranslator = () => state => fetchErrorTranslator(get$2(state, 'jsonforms.i18n'));
	const getData$1 = state => extractData(get$2(state, 'jsonforms.core'));
	const getSchema = state => extractSchema(get$2(state, 'jsonforms.core'));
	const getUiSchema = state => extractUiSchema(get$2(state, 'jsonforms.core'));
	const getAjv = state => extractAjv(get$2(state, 'jsonforms.core'));
	const getRenderers = state => get$2(state, 'jsonforms.renderers');
	const getCells = state => get$2(state, 'jsonforms.cells');
	const getUISchemas = state => get$2(state, 'jsonforms.uischemas');
	const compose$1 = (path1, path2) => {
	  let p1 = path1;
	  if (!isEmpty$6(path1) && !isEmpty$6(path2) && !path2.startsWith('[')) {
	    p1 = path1 + '.';
	  }
	  if (isEmpty$6(p1)) {
	    return path2;
	  } else if (isEmpty$6(path2)) {
	    return p1;
	  } else {
	    return `${p1}${path2}`;
	  }
	};
	const toDataPathSegments = schemaPath => {
	  const s = schemaPath.replace(/(anyOf|allOf|oneOf)\/[\d]\//g, '').replace(/(then|else)\//g, '');
	  const segments = s.split('/');
	  const decodedSegments = segments.map(decode);
	  const startFromRoot = decodedSegments[0] === '#' || decodedSegments[0] === '';
	  const startIndex = startFromRoot ? 2 : 1;
	  return range$1(startIndex, decodedSegments.length, 2).map(idx => decodedSegments[idx]);
	};
	const composeWithUi = (scopableUi, path) => {
	  if (!isScoped(scopableUi)) {
	    return path ?? '';
	  }
	  const segments = toDataPathSegments(scopableUi.scope);
	  if (isEmpty$6(segments)) {
	    return path ?? '';
	  }
	  return compose$1(path, segments.join('.'));
	};
	const encode = segment => segment?.replace(/~/g, '~0').replace(/\//g, '~1');
	const decode = pointerSegment => pointerSegment?.replace(/~1/g, '/').replace(/~0/, '~');
	const resolveData = (instance, dataPath) => {
	  if (isEmpty$6(dataPath)) {
	    return instance;
	  }
	  const dataPathSegments = dataPath.split('.');
	  return dataPathSegments.reduce((curInstance, decodedSegment) => {
	    if (!curInstance || !Object.prototype.hasOwnProperty.call(curInstance, decodedSegment)) {
	      return undefined;
	    }
	    return curInstance[decodedSegment];
	  }, instance);
	};
	const invalidSegment = pathSegment => pathSegment === '#' || pathSegment === undefined || pathSegment === '';
	const resolveSchema = (schema, schemaPath, rootSchema) => {
	  const segments = schemaPath?.split('/').map(decode);
	  return resolveSchemaWithSegments(schema, segments, rootSchema);
	};
	const resolveSchemaWithSegments = (schema, pathSegments, rootSchema) => {
	  if (isEmpty$6(schema)) {
	    return undefined;
	  }
	  if (schema.$ref) {
	    schema = resolveSchema(rootSchema, schema.$ref, rootSchema);
	  }
	  if (!pathSegments || pathSegments.length === 0) {
	    return schema;
	  }
	  const [segment, ...remainingSegments] = pathSegments;
	  if (invalidSegment(segment)) {
	    return resolveSchemaWithSegments(schema, remainingSegments, rootSchema);
	  }
	  const singleSegmentResolveSchema = get$2(schema, segment);
	  const resolvedSchema = resolveSchemaWithSegments(singleSegmentResolveSchema, remainingSegments, rootSchema);
	  if (resolvedSchema) {
	    return resolvedSchema;
	  }
	  if (segment === 'properties' || segment === 'items') {
	    let alternativeResolveResult = undefined;
	    const subSchemas = [].concat(schema.oneOf ?? [], schema.allOf ?? [], schema.anyOf ?? [], schema.then ?? [], schema.else ?? []);
	    for (const subSchema of subSchemas) {
	      alternativeResolveResult = resolveSchemaWithSegments(subSchema, [segment, ...remainingSegments], rootSchema);
	      if (alternativeResolveResult) {
	        break;
	      }
	    }
	    return alternativeResolveResult;
	  }
	  return undefined;
	};
	const isOrCondition = condition => condition.type === 'OR';
	const isAndCondition = condition => condition.type === 'AND';
	const isLeafCondition = condition => condition.type === 'LEAF';
	const isSchemaCondition = condition => has$1(condition, 'schema');
	const getConditionScope = (condition, path) => {
	  return composeWithUi(condition, path);
	};
	const evaluateCondition = (data, condition, path, ajv) => {
	  if (isAndCondition(condition)) {
	    return condition.conditions.reduce((acc, cur) => acc && evaluateCondition(data, cur, path, ajv), true);
	  } else if (isOrCondition(condition)) {
	    return condition.conditions.reduce((acc, cur) => acc || evaluateCondition(data, cur, path, ajv), false);
	  } else if (isLeafCondition(condition)) {
	    const value = resolveData(data, getConditionScope(condition, path));
	    return value === condition.expectedValue;
	  } else if (isSchemaCondition(condition)) {
	    const value = resolveData(data, getConditionScope(condition, path));
	    return ajv.validate(condition.schema, value);
	  } else {
	    return true;
	  }
	};
	const isRuleFulfilled = (uischema, data, path, ajv) => {
	  const condition = uischema.rule.condition;
	  return evaluateCondition(data, condition, path, ajv);
	};
	const evalVisibility = (uischema, data, path = undefined, ajv) => {
	  const fulfilled = isRuleFulfilled(uischema, data, path, ajv);
	  switch (uischema.rule.effect) {
	    case RuleEffect.HIDE:
	      return !fulfilled;
	    case RuleEffect.SHOW:
	      return fulfilled;
	    default:
	      return true;
	  }
	};
	const evalEnablement = (uischema, data, path = undefined, ajv) => {
	  const fulfilled = isRuleFulfilled(uischema, data, path, ajv);
	  switch (uischema.rule.effect) {
	    case RuleEffect.DISABLE:
	      return !fulfilled;
	    case RuleEffect.ENABLE:
	      return fulfilled;
	    default:
	      return true;
	  }
	};
	const hasShowRule = uischema => {
	  if (uischema.rule && (uischema.rule.effect === RuleEffect.SHOW || uischema.rule.effect === RuleEffect.HIDE)) {
	    return true;
	  }
	  return false;
	};
	const hasEnableRule = uischema => {
	  if (uischema.rule && (uischema.rule.effect === RuleEffect.ENABLE || uischema.rule.effect === RuleEffect.DISABLE)) {
	    return true;
	  }
	  return false;
	};
	const isVisible = (uischema, data, path = undefined, ajv) => {
	  if (uischema.rule) {
	    return evalVisibility(uischema, data, path, ajv);
	  }
	  return true;
	};
	const isEnabled = (uischema, data, path = undefined, ajv) => {
	  if (uischema.rule) {
	    return evalEnablement(uischema, data, path, ajv);
	  }
	  return true;
	};
	const isInherentlyEnabled = (state, ownProps, uischema, schema, rootData, config) => {
	  if (state?.jsonforms?.readonly) {
	    return false;
	  }
	  if (uischema && hasEnableRule(uischema)) {
	    return isEnabled(uischema, rootData, ownProps?.path, getAjv(state));
	  }
	  if (typeof uischema?.options?.readonly === 'boolean') {
	    return !uischema.options.readonly;
	  }
	  if (typeof uischema?.options?.readOnly === 'boolean') {
	    return !uischema.options.readOnly;
	  }
	  if (typeof config?.readonly === 'boolean') {
	    return !config.readonly;
	  }
	  if (typeof config?.readOnly === 'boolean') {
	    return !config.readOnly;
	  }
	  if (schema?.readOnly === true) {
	    return false;
	  }
	  if (typeof ownProps?.enabled === 'boolean') {
	    return ownProps.enabled;
	  }
	  return true;
	};
	const formatErrorMessage = errors => {
	  if (errors === undefined || errors === null) {
	    return '';
	  }
	  return errors.join('\n');
	};
	const hasType = (jsonSchema, expected) => {
	  return includes$1(deriveTypes(jsonSchema), expected);
	};
	const deriveTypes = jsonSchema => {
	  if (isEmpty$6(jsonSchema)) {
	    return [];
	  }
	  if (!isEmpty$6(jsonSchema.type) && typeof jsonSchema.type === 'string') {
	    return [jsonSchema.type];
	  }
	  if (isArray$j(jsonSchema.type)) {
	    return jsonSchema.type;
	  }
	  if (!isEmpty$6(jsonSchema.properties) || !isEmpty$6(jsonSchema.additionalProperties)) {
	    return ['object'];
	  }
	  if (!isEmpty$6(jsonSchema.items)) {
	    return ['array'];
	  }
	  if (!isEmpty$6(jsonSchema.allOf)) {
	    const allOfType = find$1(jsonSchema.allOf, schema => deriveTypes(schema).length !== 0);
	    if (allOfType) {
	      return deriveTypes(allOfType);
	    }
	  }
	  return [];
	};
	const Resolve = {
	  schema: resolveSchema,
	  data: resolveData
	};
	const fromScoped = scopable => toDataPathSegments(scopable.scope).join('.');
	const Paths = {
	  compose: compose$1,
	  fromScoped
	};
	const deriveLabel = (controlElement, schemaElement) => {
	  if (schemaElement && typeof schemaElement.title === 'string') {
	    return schemaElement.title;
	  }
	  if (typeof controlElement.scope === 'string') {
	    const ref = controlElement.scope;
	    const label = decode(ref.substr(ref.lastIndexOf('/') + 1));
	    return startCase$1(label);
	  }
	  return '';
	};
	const createLabelDescriptionFrom = (withLabel, schema) => {
	  const labelProperty = withLabel.label;
	  if (typeof labelProperty === 'boolean') {
	    return labelDescription(deriveLabel(withLabel, schema), labelProperty);
	  }
	  if (typeof labelProperty === 'string') {
	    return labelDescription(labelProperty, true);
	  }
	  if (typeof labelProperty === 'object') {
	    const label = typeof labelProperty.text === 'string' ? labelProperty.text : deriveLabel(withLabel, schema);
	    const show = typeof labelProperty.show === 'boolean' ? labelProperty.show : true;
	    return labelDescription(label, show);
	  }
	  return labelDescription(deriveLabel(withLabel, schema), true);
	};
	const labelDescription = (text, show) => ({
	  text: text,
	  show: show
	});
	const isRequired = (schema, schemaPath, rootSchema) => {
	  const pathSegments = schemaPath.split('/');
	  const lastSegment = pathSegments[pathSegments.length - 1];
	  const nextHigherSchemaSegments = pathSegments.slice(0, pathSegments.length - 2);
	  const nextHigherSchemaPath = nextHigherSchemaSegments.join('/');
	  const nextHigherSchema = Resolve.schema(schema, nextHigherSchemaPath, rootSchema);
	  return nextHigherSchema !== undefined && nextHigherSchema.required !== undefined && nextHigherSchema.required.indexOf(lastSegment) !== -1;
	};
	const computeLabel = (label, required, hideRequiredAsterisk) => {
	  return `${label ?? ''}${required && !hideRequiredAsterisk ? '*' : ''}`;
	};
	const showAsRequired = (required, hideRequiredAsterisk) => {
	  return required && !hideRequiredAsterisk;
	};
	const createDefaultValue = schema => {
	  switch (schema.type) {
	    case 'string':
	      if (schema.format === 'date-time' || schema.format === 'date' || schema.format === 'time') {
	        return new Date();
	      }
	      return '';
	    case 'integer':
	    case 'number':
	      return 0;
	    case 'boolean':
	      return false;
	    case 'array':
	      return [];
	    case 'null':
	      return null;
	    default:
	      return {};
	  }
	};
	const isDescriptionHidden = (visible, description, isFocused, showUnfocusedDescription) => {
	  return description === undefined || description !== undefined && !visible || !showUnfocusedDescription && !isFocused;
	};
	const enumToEnumOptionMapper = (e, t, i18nKey) => {
	  let label = typeof e === 'string' ? e : JSON.stringify(e);
	  if (t) {
	    if (i18nKey) {
	      label = t(`${i18nKey}.${label}`, label);
	    } else {
	      label = t(label, label);
	    }
	  }
	  return {
	    label,
	    value: e
	  };
	};
	const oneOfToEnumOptionMapper = (e, t, fallbackI18nKey) => {
	  let label = e.title ?? (typeof e.const === 'string' ? e.const : JSON.stringify(e.const));
	  if (t) {
	    if (e.i18n) {
	      label = t(e.i18n, label);
	    } else if (fallbackI18nKey) {
	      label = t(`${fallbackI18nKey}.${label}`, label);
	    } else {
	      label = t(label, label);
	    }
	  }
	  return {
	    label,
	    value: e.const
	  };
	};
	const mapStateToControlProps = (state, ownProps) => {
	  const {
	    uischema
	  } = ownProps;
	  const rootData = getData$1(state);
	  const path = composeWithUi(uischema, ownProps.path);
	  const visible = ownProps.visible === undefined || hasShowRule(uischema) ? isVisible(uischema, rootData, ownProps.path, getAjv(state)) : ownProps.visible;
	  const controlElement = uischema;
	  const id = ownProps.id;
	  const rootSchema = getSchema(state);
	  const required = controlElement.scope !== undefined && isRequired(ownProps.schema, controlElement.scope, rootSchema);
	  const resolvedSchema = Resolve.schema(ownProps.schema || rootSchema, controlElement.scope, rootSchema);
	  const errors = getErrorAt(path, resolvedSchema)(state);
	  const description = resolvedSchema !== undefined ? resolvedSchema.description : '';
	  const data = Resolve.data(rootData, path);
	  const labelDesc = createLabelDescriptionFrom(uischema, resolvedSchema);
	  const label = labelDesc.show ? labelDesc.text : '';
	  const config = getConfig(state);
	  const enabled = isInherentlyEnabled(state, ownProps, uischema, resolvedSchema || rootSchema, rootData, config);
	  const schema = resolvedSchema ?? rootSchema;
	  const t = getTranslator()(state);
	  const te = getErrorTranslator()(state);
	  const i18nKeyPrefix = getI18nKeyPrefix(schema, uischema, path);
	  const i18nLabel = t(getI18nKey(schema, uischema, path, 'label'), label, {
	    schema,
	    uischema,
	    path,
	    errors
	  });
	  const i18nDescription = t(getI18nKey(schema, uischema, path, 'description'), description, {
	    schema,
	    uischema,
	    path,
	    errors
	  });
	  const i18nErrorMessage = getCombinedErrorMessage(errors, te, t, schema, uischema, path);
	  return {
	    data,
	    description: i18nDescription,
	    errors: i18nErrorMessage,
	    label: i18nLabel,
	    visible,
	    enabled,
	    id,
	    path,
	    required,
	    uischema,
	    schema,
	    config: getConfig(state),
	    cells: ownProps.cells || state.jsonforms.cells,
	    rootSchema,
	    i18nKeyPrefix
	  };
	};
	const mapDispatchToControlProps = dispatch => ({
	  handleChange(path, value) {
	    dispatch(update(path, () => value));
	  }
	});
	const mapStateToEnumControlProps = (state, ownProps) => {
	  const props = mapStateToControlProps(state, ownProps);
	  const options = ownProps.options || props.schema.enum?.map(e => enumToEnumOptionMapper(e, getTranslator()(state), getI18nKeyPrefix(props.schema, props.uischema, props.path))) || props.schema.const && [enumToEnumOptionMapper(props.schema.const, getTranslator()(state), getI18nKeyPrefix(props.schema, props.uischema, props.path))];
	  return {
	    ...props,
	    options
	  };
	};
	const mapStateToOneOfEnumControlProps = (state, ownProps) => {
	  const props = mapStateToControlProps(state, ownProps);
	  const options = ownProps.options || props.schema.oneOf?.map(oneOfSubSchema => oneOfToEnumOptionMapper(oneOfSubSchema, getTranslator()(state), getI18nKeyPrefix(props.schema, props.uischema, props.path)));
	  return {
	    ...props,
	    options
	  };
	};
	const mapStateToMultiEnumControlProps = (state, ownProps) => {
	  const props = mapStateToControlProps(state, ownProps);
	  const items = props.schema.items;
	  const options = ownProps.options || items?.oneOf && items.oneOf.map(oneOfSubSchema => oneOfToEnumOptionMapper(oneOfSubSchema, state.jsonforms.i18n?.translate, getI18nKeyPrefix(props.schema, props.uischema, props.path))) || items?.enum?.map(e => enumToEnumOptionMapper(e, state.jsonforms.i18n?.translate, getI18nKeyPrefix(props.schema, props.uischema, props.path)));
	  return {
	    ...props,
	    options
	  };
	};
	const mapStateToMasterListItemProps = (state, ownProps) => {
	  const {
	    schema,
	    path,
	    index
	  } = ownProps;
	  const firstPrimitiveProp = schema.properties ? find$1(Object.keys(schema.properties), propName => {
	    const prop = schema.properties[propName];
	    return prop.type === 'string' || prop.type === 'number' || prop.type === 'integer';
	  }) : undefined;
	  const childPath = compose$1(path, `${index}`);
	  const childData = Resolve.data(getData$1(state), childPath);
	  const childLabel = firstPrimitiveProp ? childData[firstPrimitiveProp] : '';
	  return {
	    ...ownProps,
	    childLabel
	  };
	};
	const mapStateToControlWithDetailProps = (state, ownProps) => {
	  const {
	    ...props
	  } = mapStateToControlProps(state, ownProps);
	  return {
	    ...props,
	    uischemas: state.jsonforms.uischemas
	  };
	};
	const mapDispatchToArrayControlProps = dispatch => ({
	  addItem: (path, value) => () => {
	    dispatch(update(path, array => {
	      if (array === undefined || array === null) {
	        return [value];
	      }
	      array.push(value);
	      return array;
	    }));
	  },
	  removeItems: (path, toDelete) => () => {
	    dispatch(update(path, array => {
	      toDelete.sort().reverse().forEach(s => array.splice(s, 1));
	      return array;
	    }));
	  },
	  moveUp: (path, toMove) => () => {
	    dispatch(update(path, array => {
	      moveUp(array, toMove);
	      return array;
	    }));
	  },
	  moveDown: (path, toMove) => () => {
	    dispatch(update(path, array => {
	      moveDown(array, toMove);
	      return array;
	    }));
	  }
	});
	const mapDispatchToMultiEnumProps = dispatch => ({
	  addItem: (path, value) => {
	    dispatch(update(path, data => {
	      if (data === undefined || data === null) {
	        return [value];
	      }
	      data.push(value);
	      return data;
	    }));
	  },
	  removeItem: (path, toDelete) => {
	    dispatch(update(path, data => {
	      const indexInData = data.indexOf(toDelete);
	      data.splice(indexInData, 1);
	      return data;
	    }));
	  }
	});
	const layoutDefaultProps = {
	  visible: true,
	  enabled: true,
	  path: '',
	  direction: 'column'
	};
	const getDirection = uischema => {
	  if (uischema.type === 'HorizontalLayout') {
	    return 'row';
	  }
	  if (uischema.type === 'VerticalLayout') {
	    return 'column';
	  }
	  return layoutDefaultProps.direction;
	};
	const mapStateToLayoutProps = (state, ownProps) => {
	  const rootData = getData$1(state);
	  const {
	    uischema
	  } = ownProps;
	  const visible = ownProps.visible === undefined || hasShowRule(uischema) ? isVisible(ownProps.uischema, rootData, ownProps.path, getAjv(state)) : ownProps.visible;
	  const data = Resolve.data(rootData, ownProps.path);
	  const config = getConfig(state);
	  const enabled = isInherentlyEnabled(state, ownProps, uischema, undefined, rootData, config);
	  const t = getTranslator()(state);
	  const label = isLabelable(uischema) ? deriveLabelForUISchemaElement(uischema, t) : undefined;
	  return {
	    ...layoutDefaultProps,
	    renderers: ownProps.renderers || getRenderers(state),
	    cells: ownProps.cells || getCells(state),
	    visible,
	    enabled,
	    path: ownProps.path,
	    data,
	    uischema: ownProps.uischema,
	    schema: ownProps.schema,
	    direction: ownProps.direction ?? getDirection(uischema),
	    config,
	    label
	  };
	};
	const mapStateToJsonFormsRendererProps = (state, ownProps) => {
	  return {
	    renderers: ownProps.renderers || get$2(state.jsonforms, 'renderers'),
	    cells: ownProps.cells || get$2(state.jsonforms, 'cells'),
	    schema: ownProps.schema || getSchema(state),
	    rootSchema: getSchema(state),
	    uischema: ownProps.uischema || getUiSchema(state),
	    path: ownProps.path,
	    enabled: ownProps.enabled,
	    config: getConfig(state)
	  };
	};
	const mapStateToCombinatorRendererProps = (state, ownProps, keyword) => {
	  const {
	    data,
	    schema,
	    rootSchema,
	    ...props
	  } = mapStateToControlProps(state, ownProps);
	  const ajv = state.jsonforms.core.ajv;
	  const structuralKeywords = ['required', 'additionalProperties', 'type', 'enum', 'const'];
	  const dataIsValid = errors => {
	    return !errors || errors.length === 0 || !errors.find(e => structuralKeywords.indexOf(e.keyword) !== -1);
	  };
	  let indexOfFittingSchema;
	  for (let i = 0; i < schema[keyword]?.length; i++) {
	    try {
	      let _schema = schema[keyword][i];
	      if (_schema.$ref) {
	        _schema = Resolve.schema(rootSchema, _schema.$ref, rootSchema);
	      }
	      const valFn = ajv.compile(_schema);
	      valFn(data);
	      if (dataIsValid(valFn.errors)) {
	        indexOfFittingSchema = i;
	        break;
	      }
	    } catch (error) {
	      console.debug("Combinator subschema is not self contained, can't hand it over to AJV");
	    }
	  }
	  return {
	    data,
	    schema,
	    rootSchema,
	    ...props,
	    indexOfFittingSchema,
	    uischemas: getUISchemas(state)
	  };
	};
	const mapStateToAllOfProps = (state, ownProps) => mapStateToCombinatorRendererProps(state, ownProps, 'allOf');
	const mapStateToAnyOfProps = (state, ownProps) => {
	  return mapStateToCombinatorRendererProps(state, ownProps, 'anyOf');
	};
	const mapStateToOneOfProps = (state, ownProps) => {
	  return mapStateToCombinatorRendererProps(state, ownProps, 'oneOf');
	};
	const mapStateToArrayLayoutProps = (state, ownProps) => {
	  const {
	    path,
	    schema,
	    uischema,
	    errors,
	    i18nKeyPrefix,
	    label,
	    ...props
	  } = mapStateToControlWithDetailProps(state, ownProps);
	  const resolvedSchema = Resolve.schema(schema, 'items', props.rootSchema);
	  const t = getTranslator()(state);
	  const childErrors = getCombinedErrorMessage(getSubErrorsAt(path, resolvedSchema)(state), getErrorTranslator()(state), t, undefined, undefined, undefined);
	  const allErrors = errors + (errors.length > 0 && childErrors.length > 0 ? '\n' : '') + childErrors;
	  return {
	    ...props,
	    label,
	    path,
	    uischema,
	    schema: resolvedSchema,
	    data: props.data ? props.data.length : 0,
	    errors: allErrors,
	    minItems: schema.minItems,
	    translations: getArrayTranslations(t, arrayDefaultTranslations, i18nKeyPrefix, label)
	  };
	};
	const mapStateToLabelProps = (state, props) => {
	  const {
	    uischema
	  } = props;
	  const visible = props.visible === undefined || hasShowRule(uischema) ? isVisible(props.uischema, getData$1(state), props.path, getAjv(state)) : props.visible;
	  const text = uischema.text;
	  const t = getTranslator()(state);
	  const i18nKeyPrefix = getI18nKeyPrefixBySchema(undefined, uischema);
	  const i18nKey = i18nKeyPrefix ? `${i18nKeyPrefix}.text` : text ?? '';
	  const i18nText = t(i18nKey, text, {
	    uischema
	  });
	  return {
	    text: i18nText,
	    visible,
	    config: getConfig(state),
	    renderers: props.renderers || getRenderers(state),
	    cells: props.cells || getCells(state)
	  };
	};
	const mapStateToCellProps = (state, ownProps) => {
	  const {
	    id,
	    schema,
	    path,
	    uischema,
	    renderers,
	    cells
	  } = ownProps;
	  const rootData = getData$1(state);
	  const visible = ownProps.visible !== undefined ? ownProps.visible : isVisible(uischema, rootData, undefined, getAjv(state));
	  const rootSchema = getSchema(state);
	  const config = getConfig(state);
	  let enabled;
	  if (state.jsonforms.readonly === true) {
	    enabled = false;
	  } else if (typeof ownProps.enabled === 'boolean') {
	    enabled = ownProps.enabled;
	  } else {
	    enabled = isInherentlyEnabled(state, ownProps, uischema, schema || rootSchema, rootData, config);
	  }
	  const t = getTranslator()(state);
	  const te = getErrorTranslator()(state);
	  const errors = getCombinedErrorMessage(getErrorAt(path, schema)(state), te, t, schema, uischema, path);
	  const isValid = isEmpty$6(errors);
	  return {
	    data: Resolve.data(rootData, path),
	    visible,
	    enabled,
	    id,
	    path,
	    errors,
	    isValid,
	    schema,
	    uischema,
	    config: getConfig(state),
	    rootSchema,
	    renderers,
	    cells
	  };
	};
	const mapStateToDispatchCellProps = (state, ownProps) => {
	  const props = mapStateToCellProps(state, ownProps);
	  const {
	    renderers: _renderers,
	    cells,
	    ...otherOwnProps
	  } = ownProps;
	  return {
	    ...props,
	    ...otherOwnProps,
	    cells: cells || state.jsonforms.cells || []
	  };
	};
	const defaultMapStateToEnumCellProps = (state, ownProps) => {
	  const props = mapStateToCellProps(state, ownProps);
	  const options = ownProps.options || props.schema.enum?.map(e => enumToEnumOptionMapper(e, getTranslator()(state), getI18nKeyPrefix(props.schema, props.uischema, props.path))) || props.schema.const && [enumToEnumOptionMapper(props.schema.const, getTranslator()(state), getI18nKeyPrefix(props.schema, props.uischema, props.path))];
	  return {
	    ...props,
	    options
	  };
	};
	const mapStateToOneOfEnumCellProps = (state, ownProps) => {
	  const props = mapStateToCellProps(state, ownProps);
	  const options = ownProps.options || props.schema.oneOf?.map(oneOfSubSchema => oneOfToEnumOptionMapper(oneOfSubSchema, getTranslator()(state), getI18nKeyPrefix(props.schema, props.uischema, props.path)));
	  return {
	    ...props,
	    options
	  };
	};
	const createLabel = (subSchema, subSchemaIndex, keyword) => {
	  if (subSchema.title) {
	    return subSchema.title;
	  } else {
	    return keyword + '-' + subSchemaIndex;
	  }
	};
	const createCombinatorRenderInfos = (combinatorSubSchemas, rootSchema, keyword, control, path, uischemas) => combinatorSubSchemas.map((subSchema, subSchemaIndex) => {
	  const schema = subSchema.$ref ? Resolve.schema(rootSchema, subSchema.$ref, rootSchema) : subSchema;
	  return {
	    schema,
	    uischema: findUISchema(uischemas, schema, control.scope, path, undefined, control, rootSchema),
	    label: createLabel(subSchema, subSchemaIndex, keyword)
	  };
	});
	const usedIds = new Set();
	const makeId = (idBase, iteration) => iteration <= 1 ? idBase : idBase + iteration.toString();
	const isUniqueId = (idBase, iteration) => {
	  const newID = makeId(idBase, iteration);
	  return !usedIds.has(newID);
	};
	const createId = proposedId => {
	  if (proposedId === undefined) {
	    proposedId = 'undefined';
	  }
	  let tries = 0;
	  while (!isUniqueId(proposedId, tries)) {
	    tries++;
	  }
	  const newID = makeId(proposedId, tries);
	  usedIds.add(newID);
	  return newID;
	};
	const removeId = id => usedIds.delete(id);
	const getFirstPrimitiveProp = schema => {
	  if (schema.properties) {
	    return find$1(Object.keys(schema.properties), propName => {
	      const prop = schema.properties[propName];
	      return prop.type === 'string' || prop.type === 'number' || prop.type === 'integer';
	    });
	  }
	  return undefined;
	};
	const isOneOfEnumSchema = schema => !!schema && Object.prototype.hasOwnProperty.call(schema, 'oneOf') && schema.oneOf && schema.oneOf.every(s => s.const !== undefined);
	const createAjv = options => {
	  const ajv = new Ajv({
	    allErrors: true,
	    verbose: true,
	    strict: false,
	    ...options
	  });
	  addFormats(ajv);
	  return ajv;
	};
	const createLayout = layoutType => ({
	  type: layoutType,
	  elements: []
	});
	const createControlElement = ref => ({
	  type: 'Control',
	  scope: ref
	});
	const wrapInLayoutIfNecessary = (uischema, layoutType) => {
	  if (!isEmpty$6(uischema) && !isLayout(uischema)) {
	    const verticalLayout = createLayout(layoutType);
	    verticalLayout.elements.push(uischema);
	    return verticalLayout;
	  }
	  return uischema;
	};
	const addLabel = (layout, labelName) => {
	  if (!isEmpty$6(labelName)) {
	    const fixedLabel = startCase$1(labelName);
	    if (isGroup(layout)) {
	      layout.label = fixedLabel;
	    } else {
	      const label = {
	        type: 'Label',
	        text: fixedLabel
	      };
	      layout.elements.push(label);
	    }
	  }
	};
	const isCombinator = jsonSchema => {
	  return !isEmpty$6(jsonSchema) && (!isEmpty$6(jsonSchema.oneOf) || !isEmpty$6(jsonSchema.anyOf) || !isEmpty$6(jsonSchema.allOf));
	};
	const generateUISchema = (jsonSchema, schemaElements, currentRef, schemaName, layoutType, rootSchema) => {
	  if (!isEmpty$6(jsonSchema) && jsonSchema.$ref !== undefined) {
	    return generateUISchema(resolveSchema(rootSchema, jsonSchema.$ref, rootSchema), schemaElements, currentRef, schemaName, layoutType, rootSchema);
	  }
	  if (isCombinator(jsonSchema)) {
	    const controlObject = createControlElement(currentRef);
	    schemaElements.push(controlObject);
	    return controlObject;
	  }
	  const types = deriveTypes(jsonSchema);
	  if (types.length === 0) {
	    return null;
	  }
	  if (types.length > 1) {
	    const controlObject = createControlElement(currentRef);
	    schemaElements.push(controlObject);
	    return controlObject;
	  }
	  if (currentRef === '#' && types[0] === 'object') {
	    const layout = createLayout(layoutType);
	    schemaElements.push(layout);
	    if (jsonSchema.properties && keys$9(jsonSchema.properties).length > 1) {
	      addLabel(layout, schemaName);
	    }
	    if (!isEmpty$6(jsonSchema.properties)) {
	      const nextRef = currentRef + '/properties';
	      Object.keys(jsonSchema.properties).map(propName => {
	        let value = jsonSchema.properties[propName];
	        const ref = `${nextRef}/${encode(propName)}`;
	        if (value.$ref !== undefined) {
	          value = resolveSchema(rootSchema, value.$ref, rootSchema);
	        }
	        generateUISchema(value, layout.elements, ref, propName, layoutType, rootSchema);
	      });
	    }
	    return layout;
	  }
	  switch (types[0]) {
	    case 'object':
	    case 'array':
	    case 'string':
	    case 'number':
	    case 'integer':
	    case 'boolean':
	      {
	        const controlObject = createControlElement(currentRef);
	        schemaElements.push(controlObject);
	        return controlObject;
	      }
	    default:
	      throw new Error('Unknown type: ' + JSON.stringify(jsonSchema));
	  }
	};
	const generateDefaultUISchema = (jsonSchema, layoutType = 'VerticalLayout', prefix = '#', rootSchema = jsonSchema) => wrapInLayoutIfNecessary(generateUISchema(jsonSchema, [], prefix, '', layoutType, rootSchema), layoutType);
	const Generate = {
	  jsonSchema: generateJsonSchema,
	  uiSchema: generateDefaultUISchema,
	  controlElement: createControlElement
	};
	const INIT = 'jsonforms/INIT';
	const UPDATE_CORE = 'jsonforms/UPDATE_CORE';
	const SET_AJV = 'jsonforms/SET_AJV';
	const UPDATE_DATA = 'jsonforms/UPDATE';
	const UPDATE_ERRORS = 'jsonforms/UPDATE_ERRORS';
	const VALIDATE = 'jsonforms/VALIDATE';
	const ADD_RENDERER = 'jsonforms/ADD_RENDERER';
	const REMOVE_RENDERER = 'jsonforms/REMOVE_RENDERER';
	const ADD_CELL = 'jsonforms/ADD_CELL';
	const REMOVE_CELL = 'jsonforms/REMOVE_CELL';
	const SET_CONFIG = 'jsonforms/SET_CONFIG';
	const ADD_UI_SCHEMA = 'jsonforms/ADD_UI_SCHEMA';
	const REMOVE_UI_SCHEMA = 'jsonforms/REMOVE_UI_SCHEMA';
	const SET_SCHEMA = 'jsonforms/SET_SCHEMA';
	const SET_UISCHEMA = 'jsonforms/SET_UISCHEMA';
	const SET_VALIDATION_MODE = 'jsonforms/SET_VALIDATION_MODE';
	const SET_LOCALE = 'jsonforms/SET_LOCALE';
	const SET_TRANSLATOR = 'jsonforms/SET_TRANSLATOR';
	const UPDATE_I18N = 'jsonforms/UPDATE_I18N';
	const ADD_DEFAULT_DATA = 'jsonforms/ADD_DEFAULT_DATA';
	const REMOVE_DEFAULT_DATA = 'jsonforms/REMOVE_DEFAULT_DATA';
	const init = (data, schema = generateJsonSchema(data), uischema, options) => ({
	  type: INIT,
	  data,
	  schema,
	  uischema: typeof uischema === 'object' ? uischema : generateDefaultUISchema(schema),
	  options
	});
	const updateCore = (data, schema, uischema, options) => ({
	  type: UPDATE_CORE,
	  data,
	  schema,
	  uischema,
	  options
	});
	const registerDefaultData = (schemaPath, data) => ({
	  type: ADD_DEFAULT_DATA,
	  schemaPath,
	  data
	});
	const unregisterDefaultData = schemaPath => ({
	  type: REMOVE_DEFAULT_DATA,
	  schemaPath
	});
	const setAjv = ajv => ({
	  type: SET_AJV,
	  ajv
	});
	const update = (path, updater) => ({
	  type: UPDATE_DATA,
	  path,
	  updater
	});
	const updateErrors = errors => ({
	  type: UPDATE_ERRORS,
	  errors
	});
	const registerRenderer = (tester, renderer) => ({
	  type: ADD_RENDERER,
	  tester,
	  renderer
	});
	const registerCell = (tester, cell) => ({
	  type: ADD_CELL,
	  tester,
	  cell
	});
	const unregisterCell = (tester, cell) => ({
	  type: REMOVE_CELL,
	  tester,
	  cell
	});
	const unregisterRenderer = (tester, renderer) => ({
	  type: REMOVE_RENDERER,
	  tester,
	  renderer
	});
	const setConfig = config => ({
	  type: SET_CONFIG,
	  config
	});
	const setValidationMode = validationMode => ({
	  type: SET_VALIDATION_MODE,
	  validationMode
	});
	const registerUISchema = (tester, uischema) => {
	  return {
	    type: ADD_UI_SCHEMA,
	    tester,
	    uischema
	  };
	};
	const unregisterUISchema = tester => {
	  return {
	    type: REMOVE_UI_SCHEMA,
	    tester
	  };
	};
	const setLocale = locale => ({
	  type: SET_LOCALE,
	  locale
	});
	const setSchema = schema => ({
	  type: SET_SCHEMA,
	  schema
	});
	const setTranslator = (translator, errorTranslator) => ({
	  type: SET_TRANSLATOR,
	  translator,
	  errorTranslator
	});
	const updateI18n = (locale, translator, errorTranslator) => ({
	  type: UPDATE_I18N,
	  locale,
	  translator,
	  errorTranslator
	});
	const setUISchema = uischema => ({
	  type: SET_UISCHEMA,
	  uischema
	});
	var index = /*#__PURE__*/Object.freeze({
	  __proto__: null,
	  INIT: INIT,
	  UPDATE_CORE: UPDATE_CORE,
	  SET_AJV: SET_AJV,
	  UPDATE_DATA: UPDATE_DATA,
	  UPDATE_ERRORS: UPDATE_ERRORS,
	  VALIDATE: VALIDATE,
	  ADD_RENDERER: ADD_RENDERER,
	  REMOVE_RENDERER: REMOVE_RENDERER,
	  ADD_CELL: ADD_CELL,
	  REMOVE_CELL: REMOVE_CELL,
	  SET_CONFIG: SET_CONFIG,
	  ADD_UI_SCHEMA: ADD_UI_SCHEMA,
	  REMOVE_UI_SCHEMA: REMOVE_UI_SCHEMA,
	  SET_SCHEMA: SET_SCHEMA,
	  SET_UISCHEMA: SET_UISCHEMA,
	  SET_VALIDATION_MODE: SET_VALIDATION_MODE,
	  SET_LOCALE: SET_LOCALE,
	  SET_TRANSLATOR: SET_TRANSLATOR,
	  UPDATE_I18N: UPDATE_I18N,
	  ADD_DEFAULT_DATA: ADD_DEFAULT_DATA,
	  REMOVE_DEFAULT_DATA: REMOVE_DEFAULT_DATA,
	  init: init,
	  updateCore: updateCore,
	  registerDefaultData: registerDefaultData,
	  unregisterDefaultData: unregisterDefaultData,
	  setAjv: setAjv,
	  update: update,
	  updateErrors: updateErrors,
	  registerRenderer: registerRenderer,
	  registerCell: registerCell,
	  unregisterCell: unregisterCell,
	  unregisterRenderer: unregisterRenderer,
	  setConfig: setConfig,
	  setValidationMode: setValidationMode,
	  registerUISchema: registerUISchema,
	  unregisterUISchema: unregisterUISchema,
	  setLocale: setLocale,
	  setSchema: setSchema,
	  setTranslator: setTranslator,
	  updateI18n: updateI18n,
	  setUISchema: setUISchema
	});

	var root = _root;

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now$1 = function () {
	  return root.Date.now();
	};
	var now_1 = now$1;

	var isObject = isObject_1,
	  now = now_1,
	  toNumber$2 = toNumber_1;

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	  nativeMin = Math.min;

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce$2(func, wait, options) {
	  var lastArgs,
	    lastThis,
	    maxWait,
	    result,
	    timerId,
	    lastCallTime,
	    lastInvokeTime = 0,
	    leading = false,
	    maxing = false,
	    trailing = true;
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = toNumber$2(wait) || 0;
	  if (isObject(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber$2(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	  function invokeFunc(time) {
	    var args = lastArgs,
	      thisArg = lastThis;
	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }
	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }
	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	      timeSinceLastInvoke = time - lastInvokeTime,
	      timeWaiting = wait - timeSinceLastCall;
	    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
	  }
	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	      timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
	  }
	  function timerExpired() {
	    var time = now();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }
	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }
	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }
	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now());
	  }
	  function debounced() {
	    var time = now(),
	      isInvoking = shouldInvoke(time);
	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;
	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        clearTimeout(timerId);
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}
	var debounce_1 = debounce$2;

	var debounce$3 = /*@__PURE__*/getDefaultExportFromCjs(debounce_1);

	class RendererComponent extends React.Component {
	  constructor(props) {
	    super(props);
	  }
	}
	class Control extends RendererComponent {
	  constructor(props) {
	    super(props);
	    this.handleChange = value => {
	      this.setState({
	        value
	      });
	      this.updateData(value);
	    };
	    this.onFocus = () => {
	      this.setState({
	        isFocused: true
	      });
	    };
	    this.onBlur = () => {
	      this.setState({
	        isFocused: false
	      });
	    };
	    this.updateData = value => {
	      this.props.handleChange(this.props.path, value);
	    };
	    this.state = {
	      value: props.data ? props.data : '',
	      isFocused: false
	    };
	  }
	}
	class UnknownRenderer extends reactExports.Component {
	  render() {
	    return /*#__PURE__*/React.createElement("div", {
	      style: {
	        color: 'red'
	      }
	    }, "No applicable ", this.props.type, " found.");
	  }
	}
	const initialCoreState = {
	  data: {},
	  schema: {},
	  uischema: undefined,
	  errors: [],
	  additionalErrors: [],
	  validator: undefined,
	  ajv: undefined
	};
	const JsonFormsContext = /*#__PURE__*/React.createContext({
	  core: initialCoreState,
	  renderers: []
	});
	const useEffectAfterFirstRender = (effect, dependencies) => {
	  const firstExecution = reactExports.useRef(true);
	  reactExports.useEffect(() => {
	    if (firstExecution.current) {
	      firstExecution.current = false;
	      return;
	    }
	    effect();
	  }, dependencies);
	};
	const JsonFormsStateProvider = ({
	  children,
	  initState,
	  onChange
	}) => {
	  const {
	    data,
	    schema,
	    uischema,
	    ajv,
	    validationMode,
	    additionalErrors
	  } = initState.core;
	  const [core, coreDispatch] = reactExports.useReducer(coreReducer, undefined, () => coreReducer(initState.core, index.init(data, schema, uischema, {
	    ajv,
	    validationMode,
	    additionalErrors
	  })));
	  reactExports.useEffect(() => {
	    coreDispatch(index.updateCore(data, schema, uischema, {
	      ajv,
	      validationMode,
	      additionalErrors
	    }));
	  }, [data, schema, uischema, ajv, validationMode, additionalErrors]);
	  const [config, configDispatch] = reactExports.useReducer(configReducer, undefined, () => configReducer(undefined, index.setConfig(initState.config)));
	  useEffectAfterFirstRender(() => {
	    configDispatch(index.setConfig(initState.config));
	  }, [initState.config]);
	  const [i18n, i18nDispatch] = reactExports.useReducer(i18nReducer, undefined, () => i18nReducer(initState.i18n, index.updateI18n(initState.i18n?.locale, initState.i18n?.translate, initState.i18n?.translateError)));
	  reactExports.useEffect(() => {
	    i18nDispatch(index.updateI18n(initState.i18n?.locale, initState.i18n?.translate, initState.i18n?.translateError));
	  }, [initState.i18n?.locale, initState.i18n?.translate, initState.i18n?.translateError]);
	  const contextValue = reactExports.useMemo(() => ({
	    core,
	    renderers: initState.renderers,
	    cells: initState.cells,
	    config: config,
	    uischemas: initState.uischemas,
	    readonly: initState.readonly,
	    i18n: i18n,
	    dispatch: coreDispatch
	  }), [core, initState.renderers, initState.cells, config, initState.uischemas, initState.readonly, i18n]);
	  const onChangeRef = reactExports.useRef(onChange);
	  reactExports.useEffect(() => {
	    onChangeRef.current = onChange;
	  }, [onChange]);
	  const debouncedEmit = reactExports.useCallback(debounce$3((...args) => onChangeRef.current?.(...args), 10), []);
	  reactExports.useEffect(() => {
	    debouncedEmit({
	      data: core.data,
	      errors: core.errors
	    });
	  }, [core.data, core.errors]);
	  return /*#__PURE__*/React.createElement(JsonFormsContext.Provider, {
	    value: contextValue
	  }, children);
	};
	const useJsonForms = () => reactExports.useContext(JsonFormsContext);
	const ctxToArrayLayoutProps = (ctx, props) => mapStateToArrayLayoutProps({
	  jsonforms: {
	    ...ctx
	  }
	}, props);
	const ctxToLayoutProps = (ctx, props) => mapStateToLayoutProps({
	  jsonforms: {
	    ...ctx
	  }
	}, props);
	const ctxToControlProps = (ctx, props) => mapStateToControlProps({
	  jsonforms: {
	    ...ctx
	  }
	}, props);
	const ctxToEnumControlProps = (ctx, props) => {
	  const enumProps = mapStateToEnumControlProps({
	    jsonforms: {
	      ...ctx
	    }
	  }, props);
	  const options = reactExports.useMemo(() => enumProps.options, [props.options, enumProps.schema, ctx.i18n?.translate]);
	  return {
	    ...enumProps,
	    options
	  };
	};
	const ctxToOneOfEnumControlProps = (ctx, props) => {
	  const enumProps = mapStateToOneOfEnumControlProps({
	    jsonforms: {
	      ...ctx
	    }
	  }, props);
	  const options = reactExports.useMemo(() => enumProps.options, [props.options, enumProps.schema, ctx.i18n?.translate]);
	  return {
	    ...enumProps,
	    options
	  };
	};
	const ctxToMultiEnumControlProps = (ctx, props) => {
	  const enumProps = mapStateToMultiEnumControlProps({
	    jsonforms: {
	      ...ctx
	    }
	  }, props);
	  const options = reactExports.useMemo(() => enumProps.options, [enumProps.schema, ctx.i18n?.translate]);
	  return {
	    ...enumProps,
	    options
	  };
	};
	const ctxToControlWithDetailProps = (ctx, props) => mapStateToControlWithDetailProps({
	  jsonforms: {
	    ...ctx
	  }
	}, props);
	const ctxToAllOfProps = (ctx, ownProps) => {
	  const props = mapStateToAllOfProps({
	    jsonforms: {
	      ...ctx
	    }
	  }, ownProps);
	  return {
	    ...props
	  };
	};
	const ctxDispatchToControlProps = dispatch => reactExports.useMemo(() => mapDispatchToControlProps(dispatch), [dispatch]);
	const ctxToAnyOfProps = (ctx, ownProps) => {
	  const props = mapStateToAnyOfProps({
	    jsonforms: {
	      ...ctx
	    }
	  }, ownProps);
	  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
	  return {
	    ...props,
	    ...dispatchProps
	  };
	};
	const ctxToOneOfProps = (ctx, ownProps) => {
	  const props = mapStateToOneOfProps({
	    jsonforms: {
	      ...ctx
	    }
	  }, ownProps);
	  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
	  return {
	    ...props,
	    ...dispatchProps
	  };
	};
	const ctxToJsonFormsRendererProps = (ctx, ownProps) => mapStateToJsonFormsRendererProps({
	  jsonforms: {
	    ...ctx
	  }
	}, ownProps);
	const ctxDispatchToArrayControlProps = dispatch => ({
	  ...ctxDispatchToControlProps(dispatch),
	  ...reactExports.useMemo(() => mapDispatchToArrayControlProps(dispatch), [dispatch])
	});
	const ctxToMasterListItemProps = (ctx, ownProps) => mapStateToMasterListItemProps({
	  jsonforms: {
	    ...ctx
	  }
	}, ownProps);
	const ctxToCellProps = (ctx, ownProps) => {
	  return mapStateToCellProps({
	    jsonforms: {
	      ...ctx
	    }
	  }, ownProps);
	};
	const ctxToEnumCellProps = (ctx, ownProps) => {
	  const cellProps = defaultMapStateToEnumCellProps({
	    jsonforms: {
	      ...ctx
	    }
	  }, ownProps);
	  const options = reactExports.useMemo(() => cellProps.options, [ownProps.options, cellProps.schema, ctx.i18n?.translate]);
	  return {
	    ...cellProps,
	    options
	  };
	};
	const ctxToOneOfEnumCellProps = (ctx, props) => {
	  const enumCellProps = mapStateToOneOfEnumCellProps({
	    jsonforms: {
	      ...ctx
	    }
	  }, props);
	  const options = reactExports.useMemo(() => enumCellProps.options, [props.options, enumCellProps.schema, ctx.i18n?.translate]);
	  return {
	    ...enumCellProps,
	    options
	  };
	};
	const ctxToDispatchCellProps = (ctx, ownProps) => {
	  return mapStateToDispatchCellProps({
	    jsonforms: {
	      ...ctx
	    }
	  }, ownProps);
	};
	const ctxDispatchToMultiEnumProps = dispatch => ({
	  ...ctxDispatchToControlProps(dispatch),
	  ...reactExports.useMemo(() => mapDispatchToMultiEnumProps(dispatch), [dispatch])
	});
	const ctxToLabelProps = (ctx, ownProps) => {
	  return mapStateToLabelProps({
	    jsonforms: {
	      ...ctx
	    }
	  }, ownProps);
	};
	const withJsonFormsContext = Component => function WithJsonFormsContext(props) {
	  const ctx = useJsonForms();
	  return /*#__PURE__*/React.createElement(Component, {
	    ctx: ctx,
	    props: props
	  });
	};
	const withContextToJsonFormsRendererProps = Component => function WithContextToJsonFormsRendererProps({
	  ctx,
	  props
	}) {
	  const contextProps = ctxToJsonFormsRendererProps(ctx, props);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, contextProps));
	};
	const withContextToControlProps = Component => function WithContextToControlProps({
	  ctx,
	  props
	}) {
	  const controlProps = ctxToControlProps(ctx, props);
	  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, controlProps, dispatchProps));
	};
	const withContextToLayoutProps = Component => function WithContextToLayoutProps({
	  ctx,
	  props
	}) {
	  const layoutProps = ctxToLayoutProps(ctx, props);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, layoutProps));
	};
	const withContextToOneOfProps = Component => function WithContextToOneOfProps({
	  ctx,
	  props
	}) {
	  const oneOfProps = ctxToOneOfProps(ctx, props);
	  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, oneOfProps, dispatchProps));
	};
	const withContextToAnyOfProps = Component => function WithContextToAnyOfProps({
	  ctx,
	  props
	}) {
	  const oneOfProps = ctxToAnyOfProps(ctx, props);
	  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, oneOfProps, dispatchProps));
	};
	const withContextToAllOfProps = Component => function WithContextToAllOfProps({
	  ctx,
	  props
	}) {
	  const allOfProps = ctxToAllOfProps(ctx, props);
	  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, allOfProps, dispatchProps));
	};
	const withContextToDetailProps = Component => function WithContextToDetailProps({
	  ctx,
	  props
	}) {
	  const detailProps = ctxToControlWithDetailProps(ctx, props);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, detailProps));
	};
	const withContextToArrayLayoutProps = Component => function WithContextToArrayLayoutProps({
	  ctx,
	  props
	}) {
	  const arrayLayoutProps = ctxToArrayLayoutProps(ctx, props);
	  const dispatchProps = ctxDispatchToArrayControlProps(ctx.dispatch);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, arrayLayoutProps, dispatchProps));
	};
	const withContextToMasterListItemProps = Component => function WithContextToMasterListItemProps({
	  ctx,
	  props
	}) {
	  const stateProps = ctxToMasterListItemProps(ctx, props);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, stateProps));
	};
	const withContextToCellProps = Component => function WithContextToCellProps({
	  ctx,
	  props
	}) {
	  const cellProps = ctxToCellProps(ctx, props);
	  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, dispatchProps, cellProps));
	};
	const withContextToDispatchCellProps = Component => function WithContextToDispatchCellProps({
	  ctx,
	  props
	}) {
	  const cellProps = ctxToDispatchCellProps(ctx, props);
	  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, dispatchProps, cellProps));
	};
	const withContextToEnumCellProps = Component => function WithContextToEnumCellProps({
	  ctx,
	  props
	}) {
	  const cellProps = ctxToEnumCellProps(ctx, props);
	  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, dispatchProps, cellProps));
	};
	const withContextToEnumProps = Component => function WithContextToEnumProps({
	  ctx,
	  props
	}) {
	  const stateProps = ctxToEnumControlProps(ctx, props);
	  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, dispatchProps, stateProps));
	};
	const withContextToOneOfEnumCellProps = Component => function WithContextToOneOfEnumCellProps({
	  ctx,
	  props
	}) {
	  const cellProps = ctxToOneOfEnumCellProps(ctx, props);
	  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, dispatchProps, cellProps));
	};
	const withContextToOneOfEnumProps = Component => function WithContextToOneOfEnumProps({
	  ctx,
	  props
	}) {
	  const stateProps = ctxToOneOfEnumControlProps(ctx, props);
	  const dispatchProps = ctxDispatchToControlProps(ctx.dispatch);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, dispatchProps, stateProps));
	};
	const withContextToMultiEnumProps = Component => function WithContextToMultiEnumProps({
	  ctx,
	  props
	}) {
	  const stateProps = ctxToMultiEnumControlProps(ctx, props);
	  const dispatchProps = ctxDispatchToMultiEnumProps(ctx.dispatch);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, dispatchProps, stateProps));
	};
	const withContextToLabelProps = Component => function WithContextToLabelProps({
	  ctx,
	  props
	}) {
	  const stateProps = ctxToLabelProps(ctx, props);
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, stateProps));
	};
	const withJsonFormsRendererProps = (Component, memoize = true) => withJsonFormsContext(withContextToJsonFormsRendererProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsControlProps = (Component, memoize = true) => withJsonFormsContext(withContextToControlProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsLayoutProps = (Component, memoize = true) => withJsonFormsContext(withContextToLayoutProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsOneOfProps = (Component, memoize = true) => withJsonFormsContext(withContextToOneOfProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsAnyOfProps = (Component, memoize = true) => withJsonFormsContext(withContextToAnyOfProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsAllOfProps = (Component, memoize = true) => withJsonFormsContext(withContextToAllOfProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsDetailProps = (Component, memoize = true) => withJsonFormsContext(withContextToDetailProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsArrayLayoutProps = (Component, memoize = true) => withJsonFormsContext(withContextToArrayLayoutProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsMasterListItemProps = (Component, memoize = true) => withJsonFormsContext(withContextToMasterListItemProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsCellProps = (Component, memoize = true) => withJsonFormsContext(withContextToCellProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsDispatchCellProps = (Component, memoize = true) => withJsonFormsContext(withContextToDispatchCellProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsEnumCellProps = (Component, memoize = true) => withJsonFormsContext(withContextToEnumCellProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsEnumProps = (Component, memoize = true) => withJsonFormsContext(withContextToEnumProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsOneOfEnumCellProps = (Component, memoize = true) => withJsonFormsContext(withContextToOneOfEnumCellProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsOneOfEnumProps = (Component, memoize = true) => withJsonFormsContext(withContextToOneOfEnumProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsMultiEnumProps = (Component, memoize = true) => withJsonFormsContext(withContextToMultiEnumProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withJsonFormsLabelProps = (Component, memoize = true) => withJsonFormsContext(withContextToLabelProps(memoize ? /*#__PURE__*/React.memo(Component) : Component));
	const withTranslateProps = Component => function WithTranslateProps(props) {
	  const ctx = useJsonForms();
	  const locale = ctx.i18n?.locale ?? defaultJsonFormsI18nState.locale;
	  const t = ctx.i18n?.translate ?? defaultJsonFormsI18nState.translate;
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
	    locale: locale,
	    t: t
	  }));
	};
	class JsonFormsDispatchRenderer extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      id: isControl(props.uischema) ? createId(props.uischema.scope) : undefined
	    };
	  }
	  componentWillUnmount() {
	    if (isControl(this.props.uischema)) {
	      removeId(this.state.id);
	    }
	  }
	  render() {
	    const {
	      schema,
	      rootSchema,
	      uischema,
	      path,
	      enabled,
	      renderers,
	      cells,
	      config
	    } = this.props;
	    return /*#__PURE__*/React.createElement(TestAndRender, {
	      uischema: uischema,
	      schema: schema,
	      rootSchema: rootSchema,
	      path: path,
	      enabled: enabled,
	      renderers: renderers,
	      cells: cells,
	      id: this.state.id,
	      config: config
	    });
	  }
	}
	const TestAndRender = /*#__PURE__*/React.memo(function TestAndRender(props) {
	  const testerContext = reactExports.useMemo(() => ({
	    rootSchema: props.rootSchema,
	    config: props.config
	  }), [props.rootSchema, props.config]);
	  const renderer = reactExports.useMemo(() => maxBy$1(props.renderers, r => r.tester(props.uischema, props.schema, testerContext)), [props.renderers, props.uischema, props.schema, testerContext]);
	  if (renderer === undefined || renderer.tester(props.uischema, props.schema, testerContext) === -1) {
	    return /*#__PURE__*/React.createElement(UnknownRenderer, {
	      type: 'renderer'
	    });
	  } else {
	    const Render = renderer.renderer;
	    return /*#__PURE__*/React.createElement(Render, {
	      uischema: props.uischema,
	      schema: props.schema,
	      path: props.path,
	      enabled: props.enabled,
	      renderers: props.renderers,
	      cells: props.cells,
	      id: props.id
	    });
	  }
	});
	const JsonFormsDispatch = withJsonFormsRendererProps(JsonFormsDispatchRenderer);
	const JsonForms = props => {
	  const {
	    ajv,
	    data,
	    schema,
	    uischema,
	    renderers,
	    cells,
	    onChange,
	    config,
	    uischemas,
	    readonly,
	    validationMode,
	    i18n,
	    additionalErrors
	  } = props;
	  const schemaToUse = reactExports.useMemo(() => schema !== undefined ? schema : Generate.jsonSchema(data), [schema, data]);
	  const uischemaToUse = reactExports.useMemo(() => typeof uischema === 'object' ? uischema : Generate.uiSchema(schemaToUse), [uischema, schemaToUse]);
	  return /*#__PURE__*/React.createElement(JsonFormsStateProvider, {
	    initState: {
	      core: {
	        ajv,
	        data,
	        schema: schemaToUse,
	        uischema: uischemaToUse,
	        validationMode: validationMode,
	        additionalErrors: additionalErrors
	      },
	      config,
	      uischemas,
	      renderers,
	      cells,
	      readonly,
	      i18n
	    },
	    onChange: onChange
	  }, /*#__PURE__*/React.createElement(JsonFormsDispatch, null));
	};
	const Dispatch = ({
	  uischema,
	  schema,
	  rootSchema,
	  path,
	  cells,
	  id,
	  enabled,
	  renderers,
	  config
	}) => {
	  const testerContext = reactExports.useMemo(() => ({
	    rootSchema: rootSchema,
	    config: config
	  }), [rootSchema, config]);
	  const cell = reactExports.useMemo(() => maxBy$1(cells, r => r.tester(uischema, schema, testerContext)), [cells, uischema, schema, testerContext]);
	  if (cell === undefined || cell.tester(uischema, schema, testerContext) === -1) {
	    return /*#__PURE__*/React.createElement(UnknownRenderer, {
	      type: 'cell'
	    });
	  } else {
	    const Cell = cell.cell;
	    return /*#__PURE__*/React.createElement(Cell, {
	      uischema: uischema,
	      schema: schema,
	      enabled: enabled,
	      path: path,
	      id: id,
	      renderers: renderers,
	      cells: cells
	    });
	  }
	};
	const DispatchCell = withJsonFormsDispatchCellProps(Dispatch);

	var reactDom = {exports: {}};

	var scheduler = {exports: {}};

	var scheduler_production_min = {};

	/**
	 * @license React
	 * scheduler.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredScheduler_production_min;

	function requireScheduler_production_min () {
		if (hasRequiredScheduler_production_min) return scheduler_production_min;
		hasRequiredScheduler_production_min = 1;
		(function (exports) {

			function f(a, b) {
			  var c = a.length;
			  a.push(b);
			  a: for (; 0 < c;) {
			    var d = c - 1 >>> 1,
			      e = a[d];
			    if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;else break a;
			  }
			}
			function h(a) {
			  return 0 === a.length ? null : a[0];
			}
			function k(a) {
			  if (0 === a.length) return null;
			  var b = a[0],
			    c = a.pop();
			  if (c !== b) {
			    a[0] = c;
			    a: for (var d = 0, e = a.length, w = e >>> 1; d < w;) {
			      var m = 2 * (d + 1) - 1,
			        C = a[m],
			        n = m + 1,
			        x = a[n];
			      if (0 > g(C, c)) n < e && 0 > g(x, C) ? (a[d] = x, a[n] = c, d = n) : (a[d] = C, a[m] = c, d = m);else if (n < e && 0 > g(x, c)) a[d] = x, a[n] = c, d = n;else break a;
			    }
			  }
			  return b;
			}
			function g(a, b) {
			  var c = a.sortIndex - b.sortIndex;
			  return 0 !== c ? c : a.id - b.id;
			}
			if ("object" === typeof performance && "function" === typeof performance.now) {
			  var l = performance;
			  exports.unstable_now = function () {
			    return l.now();
			  };
			} else {
			  var p = Date,
			    q = p.now();
			  exports.unstable_now = function () {
			    return p.now() - q;
			  };
			}
			var r = [],
			  t = [],
			  u = 1,
			  v = null,
			  y = 3,
			  z = !1,
			  A = !1,
			  B = !1,
			  D = "function" === typeof setTimeout ? setTimeout : null,
			  E = "function" === typeof clearTimeout ? clearTimeout : null,
			  F = "undefined" !== typeof setImmediate ? setImmediate : null;
			"undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
			function G(a) {
			  for (var b = h(t); null !== b;) {
			    if (null === b.callback) k(t);else if (b.startTime <= a) k(t), b.sortIndex = b.expirationTime, f(r, b);else break;
			    b = h(t);
			  }
			}
			function H(a) {
			  B = !1;
			  G(a);
			  if (!A) if (null !== h(r)) A = !0, I(J);else {
			    var b = h(t);
			    null !== b && K(H, b.startTime - a);
			  }
			}
			function J(a, b) {
			  A = !1;
			  B && (B = !1, E(L), L = -1);
			  z = !0;
			  var c = y;
			  try {
			    G(b);
			    for (v = h(r); null !== v && (!(v.expirationTime > b) || a && !M());) {
			      var d = v.callback;
			      if ("function" === typeof d) {
			        v.callback = null;
			        y = v.priorityLevel;
			        var e = d(v.expirationTime <= b);
			        b = exports.unstable_now();
			        "function" === typeof e ? v.callback = e : v === h(r) && k(r);
			        G(b);
			      } else k(r);
			      v = h(r);
			    }
			    if (null !== v) var w = !0;else {
			      var m = h(t);
			      null !== m && K(H, m.startTime - b);
			      w = !1;
			    }
			    return w;
			  } finally {
			    v = null, y = c, z = !1;
			  }
			}
			var N = !1,
			  O = null,
			  L = -1,
			  P = 5,
			  Q = -1;
			function M() {
			  return exports.unstable_now() - Q < P ? !1 : !0;
			}
			function R() {
			  if (null !== O) {
			    var a = exports.unstable_now();
			    Q = a;
			    var b = !0;
			    try {
			      b = O(!0, a);
			    } finally {
			      b ? S() : (N = !1, O = null);
			    }
			  } else N = !1;
			}
			var S;
			if ("function" === typeof F) S = function () {
			  F(R);
			};else if ("undefined" !== typeof MessageChannel) {
			  var T = new MessageChannel(),
			    U = T.port2;
			  T.port1.onmessage = R;
			  S = function () {
			    U.postMessage(null);
			  };
			} else S = function () {
			  D(R, 0);
			};
			function I(a) {
			  O = a;
			  N || (N = !0, S());
			}
			function K(a, b) {
			  L = D(function () {
			    a(exports.unstable_now());
			  }, b);
			}
			exports.unstable_IdlePriority = 5;
			exports.unstable_ImmediatePriority = 1;
			exports.unstable_LowPriority = 4;
			exports.unstable_NormalPriority = 3;
			exports.unstable_Profiling = null;
			exports.unstable_UserBlockingPriority = 2;
			exports.unstable_cancelCallback = function (a) {
			  a.callback = null;
			};
			exports.unstable_continueExecution = function () {
			  A || z || (A = !0, I(J));
			};
			exports.unstable_forceFrameRate = function (a) {
			  0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P = 0 < a ? Math.floor(1E3 / a) : 5;
			};
			exports.unstable_getCurrentPriorityLevel = function () {
			  return y;
			};
			exports.unstable_getFirstCallbackNode = function () {
			  return h(r);
			};
			exports.unstable_next = function (a) {
			  switch (y) {
			    case 1:
			    case 2:
			    case 3:
			      var b = 3;
			      break;
			    default:
			      b = y;
			  }
			  var c = y;
			  y = b;
			  try {
			    return a();
			  } finally {
			    y = c;
			  }
			};
			exports.unstable_pauseExecution = function () {};
			exports.unstable_requestPaint = function () {};
			exports.unstable_runWithPriority = function (a, b) {
			  switch (a) {
			    case 1:
			    case 2:
			    case 3:
			    case 4:
			    case 5:
			      break;
			    default:
			      a = 3;
			  }
			  var c = y;
			  y = a;
			  try {
			    return b();
			  } finally {
			    y = c;
			  }
			};
			exports.unstable_scheduleCallback = function (a, b, c) {
			  var d = exports.unstable_now();
			  "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
			  switch (a) {
			    case 1:
			      var e = -1;
			      break;
			    case 2:
			      e = 250;
			      break;
			    case 5:
			      e = 1073741823;
			      break;
			    case 4:
			      e = 1E4;
			      break;
			    default:
			      e = 5E3;
			  }
			  e = c + e;
			  a = {
			    id: u++,
			    callback: b,
			    priorityLevel: a,
			    startTime: c,
			    expirationTime: e,
			    sortIndex: -1
			  };
			  c > d ? (a.sortIndex = c, f(t, a), null === h(r) && a === h(t) && (B ? (E(L), L = -1) : B = !0, K(H, c - d))) : (a.sortIndex = e, f(r, a), A || z || (A = !0, I(J)));
			  return a;
			};
			exports.unstable_shouldYield = M;
			exports.unstable_wrapCallback = function (a) {
			  var b = y;
			  return function () {
			    var c = y;
			    y = b;
			    try {
			      return a.apply(this, arguments);
			    } finally {
			      y = c;
			    }
			  };
			}; 
		} (scheduler_production_min));
		return scheduler_production_min;
	}

	var hasRequiredScheduler;

	function requireScheduler () {
		if (hasRequiredScheduler) return scheduler.exports;
		hasRequiredScheduler = 1;

		{
		  scheduler.exports = requireScheduler_production_min();
		}
		return scheduler.exports;
	}

	var reactDom_production_min = {};

	/**
	 * @license React
	 * react-dom.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactDom_production_min;

	function requireReactDom_production_min () {
		if (hasRequiredReactDom_production_min) return reactDom_production_min;
		hasRequiredReactDom_production_min = 1;

		var aa = reactExports,
		  ca = requireScheduler();
		function p(a) {
		  for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);
		  return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
		}
		var da = new Set(),
		  ea = {};
		function fa(a, b) {
		  ha(a, b);
		  ha(a + "Capture", b);
		}
		function ha(a, b) {
		  ea[a] = b;
		  for (a = 0; a < b.length; a++) da.add(b[a]);
		}
		var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement),
		  ja = Object.prototype.hasOwnProperty,
		  ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,
		  la = {},
		  ma = {};
		function oa(a) {
		  if (ja.call(ma, a)) return !0;
		  if (ja.call(la, a)) return !1;
		  if (ka.test(a)) return ma[a] = !0;
		  la[a] = !0;
		  return !1;
		}
		function pa(a, b, c, d) {
		  if (null !== c && 0 === c.type) return !1;
		  switch (typeof b) {
		    case "function":
		    case "symbol":
		      return !0;
		    case "boolean":
		      if (d) return !1;
		      if (null !== c) return !c.acceptsBooleans;
		      a = a.toLowerCase().slice(0, 5);
		      return "data-" !== a && "aria-" !== a;
		    default:
		      return !1;
		  }
		}
		function qa(a, b, c, d) {
		  if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return !0;
		  if (d) return !1;
		  if (null !== c) switch (c.type) {
		    case 3:
		      return !b;
		    case 4:
		      return !1 === b;
		    case 5:
		      return isNaN(b);
		    case 6:
		      return isNaN(b) || 1 > b;
		  }
		  return !1;
		}
		function v(a, b, c, d, e, f, g) {
		  this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
		  this.attributeName = d;
		  this.attributeNamespace = e;
		  this.mustUseProperty = c;
		  this.propertyName = a;
		  this.type = b;
		  this.sanitizeURL = f;
		  this.removeEmptyString = g;
		}
		var z = {};
		"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function (a) {
		  z[a] = new v(a, 0, !1, a, null, !1, !1);
		});
		[["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function (a) {
		  var b = a[0];
		  z[b] = new v(b, 1, !1, a[1], null, !1, !1);
		});
		["contentEditable", "draggable", "spellCheck", "value"].forEach(function (a) {
		  z[a] = new v(a, 2, !1, a.toLowerCase(), null, !1, !1);
		});
		["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function (a) {
		  z[a] = new v(a, 2, !1, a, null, !1, !1);
		});
		"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function (a) {
		  z[a] = new v(a, 3, !1, a.toLowerCase(), null, !1, !1);
		});
		["checked", "multiple", "muted", "selected"].forEach(function (a) {
		  z[a] = new v(a, 3, !0, a, null, !1, !1);
		});
		["capture", "download"].forEach(function (a) {
		  z[a] = new v(a, 4, !1, a, null, !1, !1);
		});
		["cols", "rows", "size", "span"].forEach(function (a) {
		  z[a] = new v(a, 6, !1, a, null, !1, !1);
		});
		["rowSpan", "start"].forEach(function (a) {
		  z[a] = new v(a, 5, !1, a.toLowerCase(), null, !1, !1);
		});
		var ra = /[\-:]([a-z])/g;
		function sa(a) {
		  return a[1].toUpperCase();
		}
		"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function (a) {
		  var b = a.replace(ra, sa);
		  z[b] = new v(b, 1, !1, a, null, !1, !1);
		});
		"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function (a) {
		  var b = a.replace(ra, sa);
		  z[b] = new v(b, 1, !1, a, "http://www.w3.org/1999/xlink", !1, !1);
		});
		["xml:base", "xml:lang", "xml:space"].forEach(function (a) {
		  var b = a.replace(ra, sa);
		  z[b] = new v(b, 1, !1, a, "http://www.w3.org/XML/1998/namespace", !1, !1);
		});
		["tabIndex", "crossOrigin"].forEach(function (a) {
		  z[a] = new v(a, 1, !1, a.toLowerCase(), null, !1, !1);
		});
		z.xlinkHref = new v("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
		["src", "href", "action", "formAction"].forEach(function (a) {
		  z[a] = new v(a, 1, !1, a.toLowerCase(), null, !0, !0);
		});
		function ta(a, b, c, d) {
		  var e = z.hasOwnProperty(b) ? z[b] : null;
		  if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? !1 : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && !0 === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
		}
		var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
		  va = Symbol.for("react.element"),
		  wa = Symbol.for("react.portal"),
		  ya = Symbol.for("react.fragment"),
		  za = Symbol.for("react.strict_mode"),
		  Aa = Symbol.for("react.profiler"),
		  Ba = Symbol.for("react.provider"),
		  Ca = Symbol.for("react.context"),
		  Da = Symbol.for("react.forward_ref"),
		  Ea = Symbol.for("react.suspense"),
		  Fa = Symbol.for("react.suspense_list"),
		  Ga = Symbol.for("react.memo"),
		  Ha = Symbol.for("react.lazy");
		var Ia = Symbol.for("react.offscreen");
		var Ja = Symbol.iterator;
		function Ka(a) {
		  if (null === a || "object" !== typeof a) return null;
		  a = Ja && a[Ja] || a["@@iterator"];
		  return "function" === typeof a ? a : null;
		}
		var A = Object.assign,
		  La;
		function Ma(a) {
		  if (void 0 === La) try {
		    throw Error();
		  } catch (c) {
		    var b = c.stack.trim().match(/\n( *(at )?)/);
		    La = b && b[1] || "";
		  }
		  return "\n" + La + a;
		}
		var Na = !1;
		function Oa(a, b) {
		  if (!a || Na) return "";
		  Na = !0;
		  var c = Error.prepareStackTrace;
		  Error.prepareStackTrace = void 0;
		  try {
		    if (b) {
		      if (b = function () {
		        throw Error();
		      }, Object.defineProperty(b.prototype, "props", {
		        set: function () {
		          throw Error();
		        }
		      }), "object" === typeof Reflect && Reflect.construct) {
		        try {
		          Reflect.construct(b, []);
		        } catch (l) {
		          var d = l;
		        }
		        Reflect.construct(a, [], b);
		      } else {
		        try {
		          b.call();
		        } catch (l) {
		          d = l;
		        }
		        a.call(b.prototype);
		      }
		    } else {
		      try {
		        throw Error();
		      } catch (l) {
		        d = l;
		      }
		      a();
		    }
		  } catch (l) {
		    if (l && d && "string" === typeof l.stack) {
		      for (var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h];) h--;
		      for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f[h]) {
		        if (1 !== g || 1 !== h) {
		          do if (g--, h--, 0 > h || e[g] !== f[h]) {
		            var k = "\n" + e[g].replace(" at new ", " at ");
		            a.displayName && k.includes("<anonymous>") && (k = k.replace("<anonymous>", a.displayName));
		            return k;
		          } while (1 <= g && 0 <= h);
		        }
		        break;
		      }
		    }
		  } finally {
		    Na = !1, Error.prepareStackTrace = c;
		  }
		  return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
		}
		function Pa(a) {
		  switch (a.tag) {
		    case 5:
		      return Ma(a.type);
		    case 16:
		      return Ma("Lazy");
		    case 13:
		      return Ma("Suspense");
		    case 19:
		      return Ma("SuspenseList");
		    case 0:
		    case 2:
		    case 15:
		      return a = Oa(a.type, !1), a;
		    case 11:
		      return a = Oa(a.type.render, !1), a;
		    case 1:
		      return a = Oa(a.type, !0), a;
		    default:
		      return "";
		  }
		}
		function Qa(a) {
		  if (null == a) return null;
		  if ("function" === typeof a) return a.displayName || a.name || null;
		  if ("string" === typeof a) return a;
		  switch (a) {
		    case ya:
		      return "Fragment";
		    case wa:
		      return "Portal";
		    case Aa:
		      return "Profiler";
		    case za:
		      return "StrictMode";
		    case Ea:
		      return "Suspense";
		    case Fa:
		      return "SuspenseList";
		  }
		  if ("object" === typeof a) switch (a.$$typeof) {
		    case Ca:
		      return (a.displayName || "Context") + ".Consumer";
		    case Ba:
		      return (a._context.displayName || "Context") + ".Provider";
		    case Da:
		      var b = a.render;
		      a = a.displayName;
		      a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
		      return a;
		    case Ga:
		      return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";
		    case Ha:
		      b = a._payload;
		      a = a._init;
		      try {
		        return Qa(a(b));
		      } catch (c) {}
		  }
		  return null;
		}
		function Ra(a) {
		  var b = a.type;
		  switch (a.tag) {
		    case 24:
		      return "Cache";
		    case 9:
		      return (b.displayName || "Context") + ".Consumer";
		    case 10:
		      return (b._context.displayName || "Context") + ".Provider";
		    case 18:
		      return "DehydratedFragment";
		    case 11:
		      return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
		    case 7:
		      return "Fragment";
		    case 5:
		      return b;
		    case 4:
		      return "Portal";
		    case 3:
		      return "Root";
		    case 6:
		      return "Text";
		    case 16:
		      return Qa(b);
		    case 8:
		      return b === za ? "StrictMode" : "Mode";
		    case 22:
		      return "Offscreen";
		    case 12:
		      return "Profiler";
		    case 21:
		      return "Scope";
		    case 13:
		      return "Suspense";
		    case 19:
		      return "SuspenseList";
		    case 25:
		      return "TracingMarker";
		    case 1:
		    case 0:
		    case 17:
		    case 2:
		    case 14:
		    case 15:
		      if ("function" === typeof b) return b.displayName || b.name || null;
		      if ("string" === typeof b) return b;
		  }
		  return null;
		}
		function Sa(a) {
		  switch (typeof a) {
		    case "boolean":
		    case "number":
		    case "string":
		    case "undefined":
		      return a;
		    case "object":
		      return a;
		    default:
		      return "";
		  }
		}
		function Ta(a) {
		  var b = a.type;
		  return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
		}
		function Ua(a) {
		  var b = Ta(a) ? "checked" : "value",
		    c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b),
		    d = "" + a[b];
		  if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
		    var e = c.get,
		      f = c.set;
		    Object.defineProperty(a, b, {
		      configurable: !0,
		      get: function () {
		        return e.call(this);
		      },
		      set: function (a) {
		        d = "" + a;
		        f.call(this, a);
		      }
		    });
		    Object.defineProperty(a, b, {
		      enumerable: c.enumerable
		    });
		    return {
		      getValue: function () {
		        return d;
		      },
		      setValue: function (a) {
		        d = "" + a;
		      },
		      stopTracking: function () {
		        a._valueTracker = null;
		        delete a[b];
		      }
		    };
		  }
		}
		function Va(a) {
		  a._valueTracker || (a._valueTracker = Ua(a));
		}
		function Wa(a) {
		  if (!a) return !1;
		  var b = a._valueTracker;
		  if (!b) return !0;
		  var c = b.getValue();
		  var d = "";
		  a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
		  a = d;
		  return a !== c ? (b.setValue(a), !0) : !1;
		}
		function Xa(a) {
		  a = a || ("undefined" !== typeof document ? document : void 0);
		  if ("undefined" === typeof a) return null;
		  try {
		    return a.activeElement || a.body;
		  } catch (b) {
		    return a.body;
		  }
		}
		function Ya(a, b) {
		  var c = b.checked;
		  return A({}, b, {
		    defaultChecked: void 0,
		    defaultValue: void 0,
		    value: void 0,
		    checked: null != c ? c : a._wrapperState.initialChecked
		  });
		}
		function Za(a, b) {
		  var c = null == b.defaultValue ? "" : b.defaultValue,
		    d = null != b.checked ? b.checked : b.defaultChecked;
		  c = Sa(null != b.value ? b.value : c);
		  a._wrapperState = {
		    initialChecked: d,
		    initialValue: c,
		    controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value
		  };
		}
		function ab(a, b) {
		  b = b.checked;
		  null != b && ta(a, "checked", b, !1);
		}
		function bb(a, b) {
		  ab(a, b);
		  var c = Sa(b.value),
		    d = b.type;
		  if (null != c) {
		    if ("number" === d) {
		      if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
		    } else a.value !== "" + c && (a.value = "" + c);
		  } else if ("submit" === d || "reset" === d) {
		    a.removeAttribute("value");
		    return;
		  }
		  b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));
		  null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
		}
		function db(a, b, c) {
		  if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
		    var d = b.type;
		    if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
		    b = "" + a._wrapperState.initialValue;
		    c || b === a.value || (a.value = b);
		    a.defaultValue = b;
		  }
		  c = a.name;
		  "" !== c && (a.name = "");
		  a.defaultChecked = !!a._wrapperState.initialChecked;
		  "" !== c && (a.name = c);
		}
		function cb(a, b, c) {
		  if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
		}
		var eb = Array.isArray;
		function fb(a, b, c, d) {
		  a = a.options;
		  if (b) {
		    b = {};
		    for (var e = 0; e < c.length; e++) b["$" + c[e]] = !0;
		    for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = !0);
		  } else {
		    c = "" + Sa(c);
		    b = null;
		    for (e = 0; e < a.length; e++) {
		      if (a[e].value === c) {
		        a[e].selected = !0;
		        d && (a[e].defaultSelected = !0);
		        return;
		      }
		      null !== b || a[e].disabled || (b = a[e]);
		    }
		    null !== b && (b.selected = !0);
		  }
		}
		function gb(a, b) {
		  if (null != b.dangerouslySetInnerHTML) throw Error(p(91));
		  return A({}, b, {
		    value: void 0,
		    defaultValue: void 0,
		    children: "" + a._wrapperState.initialValue
		  });
		}
		function hb(a, b) {
		  var c = b.value;
		  if (null == c) {
		    c = b.children;
		    b = b.defaultValue;
		    if (null != c) {
		      if (null != b) throw Error(p(92));
		      if (eb(c)) {
		        if (1 < c.length) throw Error(p(93));
		        c = c[0];
		      }
		      b = c;
		    }
		    null == b && (b = "");
		    c = b;
		  }
		  a._wrapperState = {
		    initialValue: Sa(c)
		  };
		}
		function ib(a, b) {
		  var c = Sa(b.value),
		    d = Sa(b.defaultValue);
		  null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
		  null != d && (a.defaultValue = "" + d);
		}
		function jb(a) {
		  var b = a.textContent;
		  b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
		}
		function kb(a) {
		  switch (a) {
		    case "svg":
		      return "http://www.w3.org/2000/svg";
		    case "math":
		      return "http://www.w3.org/1998/Math/MathML";
		    default:
		      return "http://www.w3.org/1999/xhtml";
		  }
		}
		function lb(a, b) {
		  return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
		}
		var mb,
		  nb = function (a) {
		    return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function (b, c, d, e) {
		      MSApp.execUnsafeLocalFunction(function () {
		        return a(b, c, d, e);
		      });
		    } : a;
		  }(function (a, b) {
		    if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;else {
		      mb = mb || document.createElement("div");
		      mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
		      for (b = mb.firstChild; a.firstChild;) a.removeChild(a.firstChild);
		      for (; b.firstChild;) a.appendChild(b.firstChild);
		    }
		  });
		function ob(a, b) {
		  if (b) {
		    var c = a.firstChild;
		    if (c && c === a.lastChild && 3 === c.nodeType) {
		      c.nodeValue = b;
		      return;
		    }
		  }
		  a.textContent = b;
		}
		var pb = {
		    animationIterationCount: !0,
		    aspectRatio: !0,
		    borderImageOutset: !0,
		    borderImageSlice: !0,
		    borderImageWidth: !0,
		    boxFlex: !0,
		    boxFlexGroup: !0,
		    boxOrdinalGroup: !0,
		    columnCount: !0,
		    columns: !0,
		    flex: !0,
		    flexGrow: !0,
		    flexPositive: !0,
		    flexShrink: !0,
		    flexNegative: !0,
		    flexOrder: !0,
		    gridArea: !0,
		    gridRow: !0,
		    gridRowEnd: !0,
		    gridRowSpan: !0,
		    gridRowStart: !0,
		    gridColumn: !0,
		    gridColumnEnd: !0,
		    gridColumnSpan: !0,
		    gridColumnStart: !0,
		    fontWeight: !0,
		    lineClamp: !0,
		    lineHeight: !0,
		    opacity: !0,
		    order: !0,
		    orphans: !0,
		    tabSize: !0,
		    widows: !0,
		    zIndex: !0,
		    zoom: !0,
		    fillOpacity: !0,
		    floodOpacity: !0,
		    stopOpacity: !0,
		    strokeDasharray: !0,
		    strokeDashoffset: !0,
		    strokeMiterlimit: !0,
		    strokeOpacity: !0,
		    strokeWidth: !0
		  },
		  qb = ["Webkit", "ms", "Moz", "O"];
		Object.keys(pb).forEach(function (a) {
		  qb.forEach(function (b) {
		    b = b + a.charAt(0).toUpperCase() + a.substring(1);
		    pb[b] = pb[a];
		  });
		});
		function rb(a, b, c) {
		  return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";
		}
		function sb(a, b) {
		  a = a.style;
		  for (var c in b) if (b.hasOwnProperty(c)) {
		    var d = 0 === c.indexOf("--"),
		      e = rb(c, b[c], d);
		    "float" === c && (c = "cssFloat");
		    d ? a.setProperty(c, e) : a[c] = e;
		  }
		}
		var tb = A({
		  menuitem: !0
		}, {
		  area: !0,
		  base: !0,
		  br: !0,
		  col: !0,
		  embed: !0,
		  hr: !0,
		  img: !0,
		  input: !0,
		  keygen: !0,
		  link: !0,
		  meta: !0,
		  param: !0,
		  source: !0,
		  track: !0,
		  wbr: !0
		});
		function ub(a, b) {
		  if (b) {
		    if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p(137, a));
		    if (null != b.dangerouslySetInnerHTML) {
		      if (null != b.children) throw Error(p(60));
		      if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p(61));
		    }
		    if (null != b.style && "object" !== typeof b.style) throw Error(p(62));
		  }
		}
		function vb(a, b) {
		  if (-1 === a.indexOf("-")) return "string" === typeof b.is;
		  switch (a) {
		    case "annotation-xml":
		    case "color-profile":
		    case "font-face":
		    case "font-face-src":
		    case "font-face-uri":
		    case "font-face-format":
		    case "font-face-name":
		    case "missing-glyph":
		      return !1;
		    default:
		      return !0;
		  }
		}
		var wb = null;
		function xb(a) {
		  a = a.target || a.srcElement || window;
		  a.correspondingUseElement && (a = a.correspondingUseElement);
		  return 3 === a.nodeType ? a.parentNode : a;
		}
		var yb = null,
		  zb = null,
		  Ab = null;
		function Bb(a) {
		  if (a = Cb(a)) {
		    if ("function" !== typeof yb) throw Error(p(280));
		    var b = a.stateNode;
		    b && (b = Db(b), yb(a.stateNode, a.type, b));
		  }
		}
		function Eb(a) {
		  zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
		}
		function Fb() {
		  if (zb) {
		    var a = zb,
		      b = Ab;
		    Ab = zb = null;
		    Bb(a);
		    if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
		  }
		}
		function Gb(a, b) {
		  return a(b);
		}
		function Hb() {}
		var Ib = !1;
		function Jb(a, b, c) {
		  if (Ib) return a(b, c);
		  Ib = !0;
		  try {
		    return Gb(a, b, c);
		  } finally {
		    if (Ib = !1, null !== zb || null !== Ab) Hb(), Fb();
		  }
		}
		function Kb(a, b) {
		  var c = a.stateNode;
		  if (null === c) return null;
		  var d = Db(c);
		  if (null === d) return null;
		  c = d[b];
		  a: switch (b) {
		    case "onClick":
		    case "onClickCapture":
		    case "onDoubleClick":
		    case "onDoubleClickCapture":
		    case "onMouseDown":
		    case "onMouseDownCapture":
		    case "onMouseMove":
		    case "onMouseMoveCapture":
		    case "onMouseUp":
		    case "onMouseUpCapture":
		    case "onMouseEnter":
		      (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
		      a = !d;
		      break a;
		    default:
		      a = !1;
		  }
		  if (a) return null;
		  if (c && "function" !== typeof c) throw Error(p(231, b, typeof c));
		  return c;
		}
		var Lb = !1;
		if (ia) try {
		  var Mb = {};
		  Object.defineProperty(Mb, "passive", {
		    get: function () {
		      Lb = !0;
		    }
		  });
		  window.addEventListener("test", Mb, Mb);
		  window.removeEventListener("test", Mb, Mb);
		} catch (a) {
		  Lb = !1;
		}
		function Nb(a, b, c, d, e, f, g, h, k) {
		  var l = Array.prototype.slice.call(arguments, 3);
		  try {
		    b.apply(c, l);
		  } catch (m) {
		    this.onError(m);
		  }
		}
		var Ob = !1,
		  Pb = null,
		  Qb = !1,
		  Rb = null,
		  Sb = {
		    onError: function (a) {
		      Ob = !0;
		      Pb = a;
		    }
		  };
		function Tb(a, b, c, d, e, f, g, h, k) {
		  Ob = !1;
		  Pb = null;
		  Nb.apply(Sb, arguments);
		}
		function Ub(a, b, c, d, e, f, g, h, k) {
		  Tb.apply(this, arguments);
		  if (Ob) {
		    if (Ob) {
		      var l = Pb;
		      Ob = !1;
		      Pb = null;
		    } else throw Error(p(198));
		    Qb || (Qb = !0, Rb = l);
		  }
		}
		function Vb(a) {
		  var b = a,
		    c = a;
		  if (a.alternate) for (; b.return;) b = b.return;else {
		    a = b;
		    do b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return; while (a);
		  }
		  return 3 === b.tag ? c : null;
		}
		function Wb(a) {
		  if (13 === a.tag) {
		    var b = a.memoizedState;
		    null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
		    if (null !== b) return b.dehydrated;
		  }
		  return null;
		}
		function Xb(a) {
		  if (Vb(a) !== a) throw Error(p(188));
		}
		function Yb(a) {
		  var b = a.alternate;
		  if (!b) {
		    b = Vb(a);
		    if (null === b) throw Error(p(188));
		    return b !== a ? null : a;
		  }
		  for (var c = a, d = b;;) {
		    var e = c.return;
		    if (null === e) break;
		    var f = e.alternate;
		    if (null === f) {
		      d = e.return;
		      if (null !== d) {
		        c = d;
		        continue;
		      }
		      break;
		    }
		    if (e.child === f.child) {
		      for (f = e.child; f;) {
		        if (f === c) return Xb(e), a;
		        if (f === d) return Xb(e), b;
		        f = f.sibling;
		      }
		      throw Error(p(188));
		    }
		    if (c.return !== d.return) c = e, d = f;else {
		      for (var g = !1, h = e.child; h;) {
		        if (h === c) {
		          g = !0;
		          c = e;
		          d = f;
		          break;
		        }
		        if (h === d) {
		          g = !0;
		          d = e;
		          c = f;
		          break;
		        }
		        h = h.sibling;
		      }
		      if (!g) {
		        for (h = f.child; h;) {
		          if (h === c) {
		            g = !0;
		            c = f;
		            d = e;
		            break;
		          }
		          if (h === d) {
		            g = !0;
		            d = f;
		            c = e;
		            break;
		          }
		          h = h.sibling;
		        }
		        if (!g) throw Error(p(189));
		      }
		    }
		    if (c.alternate !== d) throw Error(p(190));
		  }
		  if (3 !== c.tag) throw Error(p(188));
		  return c.stateNode.current === c ? a : b;
		}
		function Zb(a) {
		  a = Yb(a);
		  return null !== a ? $b(a) : null;
		}
		function $b(a) {
		  if (5 === a.tag || 6 === a.tag) return a;
		  for (a = a.child; null !== a;) {
		    var b = $b(a);
		    if (null !== b) return b;
		    a = a.sibling;
		  }
		  return null;
		}
		var ac = ca.unstable_scheduleCallback,
		  bc = ca.unstable_cancelCallback,
		  cc = ca.unstable_shouldYield,
		  dc = ca.unstable_requestPaint,
		  B = ca.unstable_now,
		  ec = ca.unstable_getCurrentPriorityLevel,
		  fc = ca.unstable_ImmediatePriority,
		  gc = ca.unstable_UserBlockingPriority,
		  hc = ca.unstable_NormalPriority,
		  ic = ca.unstable_LowPriority,
		  jc = ca.unstable_IdlePriority,
		  kc = null,
		  lc = null;
		function mc(a) {
		  if (lc && "function" === typeof lc.onCommitFiberRoot) try {
		    lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
		  } catch (b) {}
		}
		var oc = Math.clz32 ? Math.clz32 : nc,
		  pc = Math.log,
		  qc = Math.LN2;
		function nc(a) {
		  a >>>= 0;
		  return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
		}
		var rc = 64,
		  sc = 4194304;
		function tc(a) {
		  switch (a & -a) {
		    case 1:
		      return 1;
		    case 2:
		      return 2;
		    case 4:
		      return 4;
		    case 8:
		      return 8;
		    case 16:
		      return 16;
		    case 32:
		      return 32;
		    case 64:
		    case 128:
		    case 256:
		    case 512:
		    case 1024:
		    case 2048:
		    case 4096:
		    case 8192:
		    case 16384:
		    case 32768:
		    case 65536:
		    case 131072:
		    case 262144:
		    case 524288:
		    case 1048576:
		    case 2097152:
		      return a & 4194240;
		    case 4194304:
		    case 8388608:
		    case 16777216:
		    case 33554432:
		    case 67108864:
		      return a & 130023424;
		    case 134217728:
		      return 134217728;
		    case 268435456:
		      return 268435456;
		    case 536870912:
		      return 536870912;
		    case 1073741824:
		      return 1073741824;
		    default:
		      return a;
		  }
		}
		function uc(a, b) {
		  var c = a.pendingLanes;
		  if (0 === c) return 0;
		  var d = 0,
		    e = a.suspendedLanes,
		    f = a.pingedLanes,
		    g = c & 268435455;
		  if (0 !== g) {
		    var h = g & ~e;
		    0 !== h ? d = tc(h) : (f &= g, 0 !== f && (d = tc(f)));
		  } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f && (d = tc(f));
		  if (0 === d) return 0;
		  if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;
		  0 !== (d & 4) && (d |= c & 16);
		  b = a.entangledLanes;
		  if (0 !== b) for (a = a.entanglements, b &= d; 0 < b;) c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;
		  return d;
		}
		function vc(a, b) {
		  switch (a) {
		    case 1:
		    case 2:
		    case 4:
		      return b + 250;
		    case 8:
		    case 16:
		    case 32:
		    case 64:
		    case 128:
		    case 256:
		    case 512:
		    case 1024:
		    case 2048:
		    case 4096:
		    case 8192:
		    case 16384:
		    case 32768:
		    case 65536:
		    case 131072:
		    case 262144:
		    case 524288:
		    case 1048576:
		    case 2097152:
		      return b + 5E3;
		    case 4194304:
		    case 8388608:
		    case 16777216:
		    case 33554432:
		    case 67108864:
		      return -1;
		    case 134217728:
		    case 268435456:
		    case 536870912:
		    case 1073741824:
		      return -1;
		    default:
		      return -1;
		  }
		}
		function wc(a, b) {
		  for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f;) {
		    var g = 31 - oc(f),
		      h = 1 << g,
		      k = e[g];
		    if (-1 === k) {
		      if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);
		    } else k <= b && (a.expiredLanes |= h);
		    f &= ~h;
		  }
		}
		function xc(a) {
		  a = a.pendingLanes & -1073741825;
		  return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
		}
		function yc() {
		  var a = rc;
		  rc <<= 1;
		  0 === (rc & 4194240) && (rc = 64);
		  return a;
		}
		function zc(a) {
		  for (var b = [], c = 0; 31 > c; c++) b.push(a);
		  return b;
		}
		function Ac(a, b, c) {
		  a.pendingLanes |= b;
		  536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
		  a = a.eventTimes;
		  b = 31 - oc(b);
		  a[b] = c;
		}
		function Bc(a, b) {
		  var c = a.pendingLanes & ~b;
		  a.pendingLanes = b;
		  a.suspendedLanes = 0;
		  a.pingedLanes = 0;
		  a.expiredLanes &= b;
		  a.mutableReadLanes &= b;
		  a.entangledLanes &= b;
		  b = a.entanglements;
		  var d = a.eventTimes;
		  for (a = a.expirationTimes; 0 < c;) {
		    var e = 31 - oc(c),
		      f = 1 << e;
		    b[e] = 0;
		    d[e] = -1;
		    a[e] = -1;
		    c &= ~f;
		  }
		}
		function Cc(a, b) {
		  var c = a.entangledLanes |= b;
		  for (a = a.entanglements; c;) {
		    var d = 31 - oc(c),
		      e = 1 << d;
		    e & b | a[d] & b && (a[d] |= b);
		    c &= ~e;
		  }
		}
		var C = 0;
		function Dc(a) {
		  a &= -a;
		  return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
		}
		var Ec,
		  Fc,
		  Gc,
		  Hc,
		  Ic,
		  Jc = !1,
		  Kc = [],
		  Lc = null,
		  Mc = null,
		  Nc = null,
		  Oc = new Map(),
		  Pc = new Map(),
		  Qc = [],
		  Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
		function Sc(a, b) {
		  switch (a) {
		    case "focusin":
		    case "focusout":
		      Lc = null;
		      break;
		    case "dragenter":
		    case "dragleave":
		      Mc = null;
		      break;
		    case "mouseover":
		    case "mouseout":
		      Nc = null;
		      break;
		    case "pointerover":
		    case "pointerout":
		      Oc.delete(b.pointerId);
		      break;
		    case "gotpointercapture":
		    case "lostpointercapture":
		      Pc.delete(b.pointerId);
		  }
		}
		function Tc(a, b, c, d, e, f) {
		  if (null === a || a.nativeEvent !== f) return a = {
		    blockedOn: b,
		    domEventName: c,
		    eventSystemFlags: d,
		    nativeEvent: f,
		    targetContainers: [e]
		  }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;
		  a.eventSystemFlags |= d;
		  b = a.targetContainers;
		  null !== e && -1 === b.indexOf(e) && b.push(e);
		  return a;
		}
		function Uc(a, b, c, d, e) {
		  switch (b) {
		    case "focusin":
		      return Lc = Tc(Lc, a, b, c, d, e), !0;
		    case "dragenter":
		      return Mc = Tc(Mc, a, b, c, d, e), !0;
		    case "mouseover":
		      return Nc = Tc(Nc, a, b, c, d, e), !0;
		    case "pointerover":
		      var f = e.pointerId;
		      Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e));
		      return !0;
		    case "gotpointercapture":
		      return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)), !0;
		  }
		  return !1;
		}
		function Vc(a) {
		  var b = Wc(a.target);
		  if (null !== b) {
		    var c = Vb(b);
		    if (null !== c) if (b = c.tag, 13 === b) {
		      if (b = Wb(c), null !== b) {
		        a.blockedOn = b;
		        Ic(a.priority, function () {
		          Gc(c);
		        });
		        return;
		      }
		    } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
		      a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
		      return;
		    }
		  }
		  a.blockedOn = null;
		}
		function Xc(a) {
		  if (null !== a.blockedOn) return !1;
		  for (var b = a.targetContainers; 0 < b.length;) {
		    var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
		    if (null === c) {
		      c = a.nativeEvent;
		      var d = new c.constructor(c.type, c);
		      wb = d;
		      c.target.dispatchEvent(d);
		      wb = null;
		    } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, !1;
		    b.shift();
		  }
		  return !0;
		}
		function Zc(a, b, c) {
		  Xc(a) && c.delete(b);
		}
		function $c() {
		  Jc = !1;
		  null !== Lc && Xc(Lc) && (Lc = null);
		  null !== Mc && Xc(Mc) && (Mc = null);
		  null !== Nc && Xc(Nc) && (Nc = null);
		  Oc.forEach(Zc);
		  Pc.forEach(Zc);
		}
		function ad(a, b) {
		  a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = !0, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
		}
		function bd(a) {
		  function b(b) {
		    return ad(b, a);
		  }
		  if (0 < Kc.length) {
		    ad(Kc[0], a);
		    for (var c = 1; c < Kc.length; c++) {
		      var d = Kc[c];
		      d.blockedOn === a && (d.blockedOn = null);
		    }
		  }
		  null !== Lc && ad(Lc, a);
		  null !== Mc && ad(Mc, a);
		  null !== Nc && ad(Nc, a);
		  Oc.forEach(b);
		  Pc.forEach(b);
		  for (c = 0; c < Qc.length; c++) d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
		  for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn);) Vc(c), null === c.blockedOn && Qc.shift();
		}
		var cd = ua.ReactCurrentBatchConfig,
		  dd = !0;
		function ed(a, b, c, d) {
		  var e = C,
		    f = cd.transition;
		  cd.transition = null;
		  try {
		    C = 1, fd(a, b, c, d);
		  } finally {
		    C = e, cd.transition = f;
		  }
		}
		function gd(a, b, c, d) {
		  var e = C,
		    f = cd.transition;
		  cd.transition = null;
		  try {
		    C = 4, fd(a, b, c, d);
		  } finally {
		    C = e, cd.transition = f;
		  }
		}
		function fd(a, b, c, d) {
		  if (dd) {
		    var e = Yc(a, b, c, d);
		    if (null === e) hd(a, b, d, id, c), Sc(a, d);else if (Uc(e, a, b, c, d)) d.stopPropagation();else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {
		      for (; null !== e;) {
		        var f = Cb(e);
		        null !== f && Ec(f);
		        f = Yc(a, b, c, d);
		        null === f && hd(a, b, d, id, c);
		        if (f === e) break;
		        e = f;
		      }
		      null !== e && d.stopPropagation();
		    } else hd(a, b, d, null, c);
		  }
		}
		var id = null;
		function Yc(a, b, c, d) {
		  id = null;
		  a = xb(d);
		  a = Wc(a);
		  if (null !== a) if (b = Vb(a), null === b) a = null;else if (c = b.tag, 13 === c) {
		    a = Wb(b);
		    if (null !== a) return a;
		    a = null;
		  } else if (3 === c) {
		    if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
		    a = null;
		  } else b !== a && (a = null);
		  id = a;
		  return null;
		}
		function jd(a) {
		  switch (a) {
		    case "cancel":
		    case "click":
		    case "close":
		    case "contextmenu":
		    case "copy":
		    case "cut":
		    case "auxclick":
		    case "dblclick":
		    case "dragend":
		    case "dragstart":
		    case "drop":
		    case "focusin":
		    case "focusout":
		    case "input":
		    case "invalid":
		    case "keydown":
		    case "keypress":
		    case "keyup":
		    case "mousedown":
		    case "mouseup":
		    case "paste":
		    case "pause":
		    case "play":
		    case "pointercancel":
		    case "pointerdown":
		    case "pointerup":
		    case "ratechange":
		    case "reset":
		    case "resize":
		    case "seeked":
		    case "submit":
		    case "touchcancel":
		    case "touchend":
		    case "touchstart":
		    case "volumechange":
		    case "change":
		    case "selectionchange":
		    case "textInput":
		    case "compositionstart":
		    case "compositionend":
		    case "compositionupdate":
		    case "beforeblur":
		    case "afterblur":
		    case "beforeinput":
		    case "blur":
		    case "fullscreenchange":
		    case "focus":
		    case "hashchange":
		    case "popstate":
		    case "select":
		    case "selectstart":
		      return 1;
		    case "drag":
		    case "dragenter":
		    case "dragexit":
		    case "dragleave":
		    case "dragover":
		    case "mousemove":
		    case "mouseout":
		    case "mouseover":
		    case "pointermove":
		    case "pointerout":
		    case "pointerover":
		    case "scroll":
		    case "toggle":
		    case "touchmove":
		    case "wheel":
		    case "mouseenter":
		    case "mouseleave":
		    case "pointerenter":
		    case "pointerleave":
		      return 4;
		    case "message":
		      switch (ec()) {
		        case fc:
		          return 1;
		        case gc:
		          return 4;
		        case hc:
		        case ic:
		          return 16;
		        case jc:
		          return 536870912;
		        default:
		          return 16;
		      }
		    default:
		      return 16;
		  }
		}
		var kd = null,
		  ld = null,
		  md = null;
		function nd() {
		  if (md) return md;
		  var a,
		    b = ld,
		    c = b.length,
		    d,
		    e = "value" in kd ? kd.value : kd.textContent,
		    f = e.length;
		  for (a = 0; a < c && b[a] === e[a]; a++);
		  var g = c - a;
		  for (d = 1; d <= g && b[c - d] === e[f - d]; d++);
		  return md = e.slice(a, 1 < d ? 1 - d : void 0);
		}
		function od(a) {
		  var b = a.keyCode;
		  "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
		  10 === a && (a = 13);
		  return 32 <= a || 13 === a ? a : 0;
		}
		function pd() {
		  return !0;
		}
		function qd() {
		  return !1;
		}
		function rd(a) {
		  function b(b, d, e, f, g) {
		    this._reactName = b;
		    this._targetInst = e;
		    this.type = d;
		    this.nativeEvent = f;
		    this.target = g;
		    this.currentTarget = null;
		    for (var c in a) a.hasOwnProperty(c) && (b = a[c], this[c] = b ? b(f) : f[c]);
		    this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : !1 === f.returnValue) ? pd : qd;
		    this.isPropagationStopped = qd;
		    return this;
		  }
		  A(b.prototype, {
		    preventDefault: function () {
		      this.defaultPrevented = !0;
		      var a = this.nativeEvent;
		      a && (a.preventDefault ? a.preventDefault() : "unknown" !== typeof a.returnValue && (a.returnValue = !1), this.isDefaultPrevented = pd);
		    },
		    stopPropagation: function () {
		      var a = this.nativeEvent;
		      a && (a.stopPropagation ? a.stopPropagation() : "unknown" !== typeof a.cancelBubble && (a.cancelBubble = !0), this.isPropagationStopped = pd);
		    },
		    persist: function () {},
		    isPersistent: pd
		  });
		  return b;
		}
		var sd = {
		    eventPhase: 0,
		    bubbles: 0,
		    cancelable: 0,
		    timeStamp: function (a) {
		      return a.timeStamp || Date.now();
		    },
		    defaultPrevented: 0,
		    isTrusted: 0
		  },
		  td = rd(sd),
		  ud = A({}, sd, {
		    view: 0,
		    detail: 0
		  }),
		  vd = rd(ud),
		  wd,
		  xd,
		  yd,
		  Ad = A({}, ud, {
		    screenX: 0,
		    screenY: 0,
		    clientX: 0,
		    clientY: 0,
		    pageX: 0,
		    pageY: 0,
		    ctrlKey: 0,
		    shiftKey: 0,
		    altKey: 0,
		    metaKey: 0,
		    getModifierState: zd,
		    button: 0,
		    buttons: 0,
		    relatedTarget: function (a) {
		      return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
		    },
		    movementX: function (a) {
		      if ("movementX" in a) return a.movementX;
		      a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
		      return wd;
		    },
		    movementY: function (a) {
		      return "movementY" in a ? a.movementY : xd;
		    }
		  }),
		  Bd = rd(Ad),
		  Cd = A({}, Ad, {
		    dataTransfer: 0
		  }),
		  Dd = rd(Cd),
		  Ed = A({}, ud, {
		    relatedTarget: 0
		  }),
		  Fd = rd(Ed),
		  Gd = A({}, sd, {
		    animationName: 0,
		    elapsedTime: 0,
		    pseudoElement: 0
		  }),
		  Hd = rd(Gd),
		  Id = A({}, sd, {
		    clipboardData: function (a) {
		      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
		    }
		  }),
		  Jd = rd(Id),
		  Kd = A({}, sd, {
		    data: 0
		  }),
		  Ld = rd(Kd),
		  Md = {
		    Esc: "Escape",
		    Spacebar: " ",
		    Left: "ArrowLeft",
		    Up: "ArrowUp",
		    Right: "ArrowRight",
		    Down: "ArrowDown",
		    Del: "Delete",
		    Win: "OS",
		    Menu: "ContextMenu",
		    Apps: "ContextMenu",
		    Scroll: "ScrollLock",
		    MozPrintableKey: "Unidentified"
		  },
		  Nd = {
		    8: "Backspace",
		    9: "Tab",
		    12: "Clear",
		    13: "Enter",
		    16: "Shift",
		    17: "Control",
		    18: "Alt",
		    19: "Pause",
		    20: "CapsLock",
		    27: "Escape",
		    32: " ",
		    33: "PageUp",
		    34: "PageDown",
		    35: "End",
		    36: "Home",
		    37: "ArrowLeft",
		    38: "ArrowUp",
		    39: "ArrowRight",
		    40: "ArrowDown",
		    45: "Insert",
		    46: "Delete",
		    112: "F1",
		    113: "F2",
		    114: "F3",
		    115: "F4",
		    116: "F5",
		    117: "F6",
		    118: "F7",
		    119: "F8",
		    120: "F9",
		    121: "F10",
		    122: "F11",
		    123: "F12",
		    144: "NumLock",
		    145: "ScrollLock",
		    224: "Meta"
		  },
		  Od = {
		    Alt: "altKey",
		    Control: "ctrlKey",
		    Meta: "metaKey",
		    Shift: "shiftKey"
		  };
		function Pd(a) {
		  var b = this.nativeEvent;
		  return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : !1;
		}
		function zd() {
		  return Pd;
		}
		var Qd = A({}, ud, {
		    key: function (a) {
		      if (a.key) {
		        var b = Md[a.key] || a.key;
		        if ("Unidentified" !== b) return b;
		      }
		      return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
		    },
		    code: 0,
		    location: 0,
		    ctrlKey: 0,
		    shiftKey: 0,
		    altKey: 0,
		    metaKey: 0,
		    repeat: 0,
		    locale: 0,
		    getModifierState: zd,
		    charCode: function (a) {
		      return "keypress" === a.type ? od(a) : 0;
		    },
		    keyCode: function (a) {
		      return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
		    },
		    which: function (a) {
		      return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
		    }
		  }),
		  Rd = rd(Qd),
		  Sd = A({}, Ad, {
		    pointerId: 0,
		    width: 0,
		    height: 0,
		    pressure: 0,
		    tangentialPressure: 0,
		    tiltX: 0,
		    tiltY: 0,
		    twist: 0,
		    pointerType: 0,
		    isPrimary: 0
		  }),
		  Td = rd(Sd),
		  Ud = A({}, ud, {
		    touches: 0,
		    targetTouches: 0,
		    changedTouches: 0,
		    altKey: 0,
		    metaKey: 0,
		    ctrlKey: 0,
		    shiftKey: 0,
		    getModifierState: zd
		  }),
		  Vd = rd(Ud),
		  Wd = A({}, sd, {
		    propertyName: 0,
		    elapsedTime: 0,
		    pseudoElement: 0
		  }),
		  Xd = rd(Wd),
		  Yd = A({}, Ad, {
		    deltaX: function (a) {
		      return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
		    },
		    deltaY: function (a) {
		      return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
		    },
		    deltaZ: 0,
		    deltaMode: 0
		  }),
		  Zd = rd(Yd),
		  $d = [9, 13, 27, 32],
		  ae = ia && "CompositionEvent" in window,
		  be = null;
		ia && "documentMode" in document && (be = document.documentMode);
		var ce = ia && "TextEvent" in window && !be,
		  de = ia && (!ae || be && 8 < be && 11 >= be),
		  ee = String.fromCharCode(32),
		  fe = !1;
		function ge(a, b) {
		  switch (a) {
		    case "keyup":
		      return -1 !== $d.indexOf(b.keyCode);
		    case "keydown":
		      return 229 !== b.keyCode;
		    case "keypress":
		    case "mousedown":
		    case "focusout":
		      return !0;
		    default:
		      return !1;
		  }
		}
		function he(a) {
		  a = a.detail;
		  return "object" === typeof a && "data" in a ? a.data : null;
		}
		var ie = !1;
		function je(a, b) {
		  switch (a) {
		    case "compositionend":
		      return he(b);
		    case "keypress":
		      if (32 !== b.which) return null;
		      fe = !0;
		      return ee;
		    case "textInput":
		      return a = b.data, a === ee && fe ? null : a;
		    default:
		      return null;
		  }
		}
		function ke(a, b) {
		  if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = !1, a) : null;
		  switch (a) {
		    case "paste":
		      return null;
		    case "keypress":
		      if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
		        if (b.char && 1 < b.char.length) return b.char;
		        if (b.which) return String.fromCharCode(b.which);
		      }
		      return null;
		    case "compositionend":
		      return de && "ko" !== b.locale ? null : b.data;
		    default:
		      return null;
		  }
		}
		var le = {
		  color: !0,
		  date: !0,
		  datetime: !0,
		  "datetime-local": !0,
		  email: !0,
		  month: !0,
		  number: !0,
		  password: !0,
		  range: !0,
		  search: !0,
		  tel: !0,
		  text: !0,
		  time: !0,
		  url: !0,
		  week: !0
		};
		function me(a) {
		  var b = a && a.nodeName && a.nodeName.toLowerCase();
		  return "input" === b ? !!le[a.type] : "textarea" === b ? !0 : !1;
		}
		function ne(a, b, c, d) {
		  Eb(d);
		  b = oe(b, "onChange");
		  0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({
		    event: c,
		    listeners: b
		  }));
		}
		var pe = null,
		  qe = null;
		function re(a) {
		  se(a, 0);
		}
		function te(a) {
		  var b = ue(a);
		  if (Wa(b)) return a;
		}
		function ve(a, b) {
		  if ("change" === a) return b;
		}
		var we = !1;
		if (ia) {
		  var xe;
		  if (ia) {
		    var ye = ("oninput" in document);
		    if (!ye) {
		      var ze = document.createElement("div");
		      ze.setAttribute("oninput", "return;");
		      ye = "function" === typeof ze.oninput;
		    }
		    xe = ye;
		  } else xe = !1;
		  we = xe && (!document.documentMode || 9 < document.documentMode);
		}
		function Ae() {
		  pe && (pe.detachEvent("onpropertychange", Be), qe = pe = null);
		}
		function Be(a) {
		  if ("value" === a.propertyName && te(qe)) {
		    var b = [];
		    ne(b, qe, a, xb(a));
		    Jb(re, b);
		  }
		}
		function Ce(a, b, c) {
		  "focusin" === a ? (Ae(), pe = b, qe = c, pe.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
		}
		function De(a) {
		  if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
		}
		function Ee(a, b) {
		  if ("click" === a) return te(b);
		}
		function Fe(a, b) {
		  if ("input" === a || "change" === a) return te(b);
		}
		function Ge(a, b) {
		  return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
		}
		var He = "function" === typeof Object.is ? Object.is : Ge;
		function Ie(a, b) {
		  if (He(a, b)) return !0;
		  if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return !1;
		  var c = Object.keys(a),
		    d = Object.keys(b);
		  if (c.length !== d.length) return !1;
		  for (d = 0; d < c.length; d++) {
		    var e = c[d];
		    if (!ja.call(b, e) || !He(a[e], b[e])) return !1;
		  }
		  return !0;
		}
		function Je(a) {
		  for (; a && a.firstChild;) a = a.firstChild;
		  return a;
		}
		function Ke(a, b) {
		  var c = Je(a);
		  a = 0;
		  for (var d; c;) {
		    if (3 === c.nodeType) {
		      d = a + c.textContent.length;
		      if (a <= b && d >= b) return {
		        node: c,
		        offset: b - a
		      };
		      a = d;
		    }
		    a: {
		      for (; c;) {
		        if (c.nextSibling) {
		          c = c.nextSibling;
		          break a;
		        }
		        c = c.parentNode;
		      }
		      c = void 0;
		    }
		    c = Je(c);
		  }
		}
		function Le(a, b) {
		  return a && b ? a === b ? !0 : a && 3 === a.nodeType ? !1 : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : !1 : !1;
		}
		function Me() {
		  for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement;) {
		    try {
		      var c = "string" === typeof b.contentWindow.location.href;
		    } catch (d) {
		      c = !1;
		    }
		    if (c) a = b.contentWindow;else break;
		    b = Xa(a.document);
		  }
		  return b;
		}
		function Ne(a) {
		  var b = a && a.nodeName && a.nodeName.toLowerCase();
		  return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
		}
		function Oe(a) {
		  var b = Me(),
		    c = a.focusedElem,
		    d = a.selectionRange;
		  if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
		    if (null !== d && Ne(c)) if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
		      a = a.getSelection();
		      var e = c.textContent.length,
		        f = Math.min(d.start, e);
		      d = void 0 === d.end ? f : Math.min(d.end, e);
		      !a.extend && f > d && (e = d, d = f, f = e);
		      e = Ke(c, f);
		      var g = Ke(c, d);
		      e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
		    }
		    b = [];
		    for (a = c; a = a.parentNode;) 1 === a.nodeType && b.push({
		      element: a,
		      left: a.scrollLeft,
		      top: a.scrollTop
		    });
		    "function" === typeof c.focus && c.focus();
		    for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
		  }
		}
		var Pe = ia && "documentMode" in document && 11 >= document.documentMode,
		  Qe = null,
		  Re = null,
		  Se = null,
		  Te = !1;
		function Ue(a, b, c) {
		  var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
		  Te || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = {
		    start: d.selectionStart,
		    end: d.selectionEnd
		  } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = {
		    anchorNode: d.anchorNode,
		    anchorOffset: d.anchorOffset,
		    focusNode: d.focusNode,
		    focusOffset: d.focusOffset
		  }), Se && Ie(Se, d) || (Se = d, d = oe(Re, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({
		    event: b,
		    listeners: d
		  }), b.target = Qe)));
		}
		function Ve(a, b) {
		  var c = {};
		  c[a.toLowerCase()] = b.toLowerCase();
		  c["Webkit" + a] = "webkit" + b;
		  c["Moz" + a] = "moz" + b;
		  return c;
		}
		var We = {
		    animationend: Ve("Animation", "AnimationEnd"),
		    animationiteration: Ve("Animation", "AnimationIteration"),
		    animationstart: Ve("Animation", "AnimationStart"),
		    transitionend: Ve("Transition", "TransitionEnd")
		  },
		  Xe = {},
		  Ye = {};
		ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
		function Ze(a) {
		  if (Xe[a]) return Xe[a];
		  if (!We[a]) return a;
		  var b = We[a],
		    c;
		  for (c in b) if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];
		  return a;
		}
		var $e = Ze("animationend"),
		  af = Ze("animationiteration"),
		  bf = Ze("animationstart"),
		  cf = Ze("transitionend"),
		  df = new Map(),
		  ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
		function ff(a, b) {
		  df.set(a, b);
		  fa(b, [a]);
		}
		for (var gf = 0; gf < ef.length; gf++) {
		  var hf = ef[gf],
		    jf = hf.toLowerCase(),
		    kf = hf[0].toUpperCase() + hf.slice(1);
		  ff(jf, "on" + kf);
		}
		ff($e, "onAnimationEnd");
		ff(af, "onAnimationIteration");
		ff(bf, "onAnimationStart");
		ff("dblclick", "onDoubleClick");
		ff("focusin", "onFocus");
		ff("focusout", "onBlur");
		ff(cf, "onTransitionEnd");
		ha("onMouseEnter", ["mouseout", "mouseover"]);
		ha("onMouseLeave", ["mouseout", "mouseover"]);
		ha("onPointerEnter", ["pointerout", "pointerover"]);
		ha("onPointerLeave", ["pointerout", "pointerover"]);
		fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
		fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
		fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
		fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
		fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
		fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
		var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),
		  mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
		function nf(a, b, c) {
		  var d = a.type || "unknown-event";
		  a.currentTarget = c;
		  Ub(d, b, void 0, a);
		  a.currentTarget = null;
		}
		function se(a, b) {
		  b = 0 !== (b & 4);
		  for (var c = 0; c < a.length; c++) {
		    var d = a[c],
		      e = d.event;
		    d = d.listeners;
		    a: {
		      var f = void 0;
		      if (b) for (var g = d.length - 1; 0 <= g; g--) {
		        var h = d[g],
		          k = h.instance,
		          l = h.currentTarget;
		        h = h.listener;
		        if (k !== f && e.isPropagationStopped()) break a;
		        nf(e, h, l);
		        f = k;
		      } else for (g = 0; g < d.length; g++) {
		        h = d[g];
		        k = h.instance;
		        l = h.currentTarget;
		        h = h.listener;
		        if (k !== f && e.isPropagationStopped()) break a;
		        nf(e, h, l);
		        f = k;
		      }
		    }
		  }
		  if (Qb) throw a = Rb, Qb = !1, Rb = null, a;
		}
		function D(a, b) {
		  var c = b[of];
		  void 0 === c && (c = b[of] = new Set());
		  var d = a + "__bubble";
		  c.has(d) || (pf(b, a, 2, !1), c.add(d));
		}
		function qf(a, b, c) {
		  var d = 0;
		  b && (d |= 4);
		  pf(c, a, d, b);
		}
		var rf = "_reactListening" + Math.random().toString(36).slice(2);
		function sf(a) {
		  if (!a[rf]) {
		    a[rf] = !0;
		    da.forEach(function (b) {
		      "selectionchange" !== b && (mf.has(b) || qf(b, !1, a), qf(b, !0, a));
		    });
		    var b = 9 === a.nodeType ? a : a.ownerDocument;
		    null === b || b[rf] || (b[rf] = !0, qf("selectionchange", !1, b));
		  }
		}
		function pf(a, b, c, d) {
		  switch (jd(b)) {
		    case 1:
		      var e = ed;
		      break;
		    case 4:
		      e = gd;
		      break;
		    default:
		      e = fd;
		  }
		  c = e.bind(null, b, c, a);
		  e = void 0;
		  !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = !0);
		  d ? void 0 !== e ? a.addEventListener(b, c, {
		    capture: !0,
		    passive: e
		  }) : a.addEventListener(b, c, !0) : void 0 !== e ? a.addEventListener(b, c, {
		    passive: e
		  }) : a.addEventListener(b, c, !1);
		}
		function hd(a, b, c, d, e) {
		  var f = d;
		  if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (;;) {
		    if (null === d) return;
		    var g = d.tag;
		    if (3 === g || 4 === g) {
		      var h = d.stateNode.containerInfo;
		      if (h === e || 8 === h.nodeType && h.parentNode === e) break;
		      if (4 === g) for (g = d.return; null !== g;) {
		        var k = g.tag;
		        if (3 === k || 4 === k) if (k = g.stateNode.containerInfo, k === e || 8 === k.nodeType && k.parentNode === e) return;
		        g = g.return;
		      }
		      for (; null !== h;) {
		        g = Wc(h);
		        if (null === g) return;
		        k = g.tag;
		        if (5 === k || 6 === k) {
		          d = f = g;
		          continue a;
		        }
		        h = h.parentNode;
		      }
		    }
		    d = d.return;
		  }
		  Jb(function () {
		    var d = f,
		      e = xb(c),
		      g = [];
		    a: {
		      var h = df.get(a);
		      if (void 0 !== h) {
		        var k = td,
		          n = a;
		        switch (a) {
		          case "keypress":
		            if (0 === od(c)) break a;
		          case "keydown":
		          case "keyup":
		            k = Rd;
		            break;
		          case "focusin":
		            n = "focus";
		            k = Fd;
		            break;
		          case "focusout":
		            n = "blur";
		            k = Fd;
		            break;
		          case "beforeblur":
		          case "afterblur":
		            k = Fd;
		            break;
		          case "click":
		            if (2 === c.button) break a;
		          case "auxclick":
		          case "dblclick":
		          case "mousedown":
		          case "mousemove":
		          case "mouseup":
		          case "mouseout":
		          case "mouseover":
		          case "contextmenu":
		            k = Bd;
		            break;
		          case "drag":
		          case "dragend":
		          case "dragenter":
		          case "dragexit":
		          case "dragleave":
		          case "dragover":
		          case "dragstart":
		          case "drop":
		            k = Dd;
		            break;
		          case "touchcancel":
		          case "touchend":
		          case "touchmove":
		          case "touchstart":
		            k = Vd;
		            break;
		          case $e:
		          case af:
		          case bf:
		            k = Hd;
		            break;
		          case cf:
		            k = Xd;
		            break;
		          case "scroll":
		            k = vd;
		            break;
		          case "wheel":
		            k = Zd;
		            break;
		          case "copy":
		          case "cut":
		          case "paste":
		            k = Jd;
		            break;
		          case "gotpointercapture":
		          case "lostpointercapture":
		          case "pointercancel":
		          case "pointerdown":
		          case "pointermove":
		          case "pointerout":
		          case "pointerover":
		          case "pointerup":
		            k = Td;
		        }
		        var t = 0 !== (b & 4),
		          J = !t && "scroll" === a,
		          x = t ? null !== h ? h + "Capture" : null : h;
		        t = [];
		        for (var w = d, u; null !== w;) {
		          u = w;
		          var F = u.stateNode;
		          5 === u.tag && null !== F && (u = F, null !== x && (F = Kb(w, x), null != F && t.push(tf(w, F, u))));
		          if (J) break;
		          w = w.return;
		        }
		        0 < t.length && (h = new k(h, n, null, c, e), g.push({
		          event: h,
		          listeners: t
		        }));
		      }
		    }
		    if (0 === (b & 7)) {
		      a: {
		        h = "mouseover" === a || "pointerover" === a;
		        k = "mouseout" === a || "pointerout" === a;
		        if (h && c !== wb && (n = c.relatedTarget || c.fromElement) && (Wc(n) || n[uf])) break a;
		        if (k || h) {
		          h = e.window === e ? e : (h = e.ownerDocument) ? h.defaultView || h.parentWindow : window;
		          if (k) {
		            if (n = c.relatedTarget || c.toElement, k = d, n = n ? Wc(n) : null, null !== n && (J = Vb(n), n !== J || 5 !== n.tag && 6 !== n.tag)) n = null;
		          } else k = null, n = d;
		          if (k !== n) {
		            t = Bd;
		            F = "onMouseLeave";
		            x = "onMouseEnter";
		            w = "mouse";
		            if ("pointerout" === a || "pointerover" === a) t = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";
		            J = null == k ? h : ue(k);
		            u = null == n ? h : ue(n);
		            h = new t(F, w + "leave", k, c, e);
		            h.target = J;
		            h.relatedTarget = u;
		            F = null;
		            Wc(e) === d && (t = new t(x, w + "enter", n, c, e), t.target = u, t.relatedTarget = J, F = t);
		            J = F;
		            if (k && n) b: {
		              t = k;
		              x = n;
		              w = 0;
		              for (u = t; u; u = vf(u)) w++;
		              u = 0;
		              for (F = x; F; F = vf(F)) u++;
		              for (; 0 < w - u;) t = vf(t), w--;
		              for (; 0 < u - w;) x = vf(x), u--;
		              for (; w--;) {
		                if (t === x || null !== x && t === x.alternate) break b;
		                t = vf(t);
		                x = vf(x);
		              }
		              t = null;
		            } else t = null;
		            null !== k && wf(g, h, k, t, !1);
		            null !== n && null !== J && wf(g, J, n, t, !0);
		          }
		        }
		      }
		      a: {
		        h = d ? ue(d) : window;
		        k = h.nodeName && h.nodeName.toLowerCase();
		        if ("select" === k || "input" === k && "file" === h.type) var na = ve;else if (me(h)) {
		          if (we) na = Fe;else {
		            na = De;
		            var xa = Ce;
		          }
		        } else (k = h.nodeName) && "input" === k.toLowerCase() && ("checkbox" === h.type || "radio" === h.type) && (na = Ee);
		        if (na && (na = na(a, d))) {
		          ne(g, na, c, e);
		          break a;
		        }
		        xa && xa(a, h, d);
		        "focusout" === a && (xa = h._wrapperState) && xa.controlled && "number" === h.type && cb(h, "number", h.value);
		      }
		      xa = d ? ue(d) : window;
		      switch (a) {
		        case "focusin":
		          if (me(xa) || "true" === xa.contentEditable) Qe = xa, Re = d, Se = null;
		          break;
		        case "focusout":
		          Se = Re = Qe = null;
		          break;
		        case "mousedown":
		          Te = !0;
		          break;
		        case "contextmenu":
		        case "mouseup":
		        case "dragend":
		          Te = !1;
		          Ue(g, c, e);
		          break;
		        case "selectionchange":
		          if (Pe) break;
		        case "keydown":
		        case "keyup":
		          Ue(g, c, e);
		      }
		      var $a;
		      if (ae) b: {
		        switch (a) {
		          case "compositionstart":
		            var ba = "onCompositionStart";
		            break b;
		          case "compositionend":
		            ba = "onCompositionEnd";
		            break b;
		          case "compositionupdate":
		            ba = "onCompositionUpdate";
		            break b;
		        }
		        ba = void 0;
		      } else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
		      ba && (de && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e, ld = "value" in kd ? kd.value : kd.textContent, ie = !0)), xa = oe(d, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e), g.push({
		        event: ba,
		        listeners: xa
		      }), $a ? ba.data = $a : ($a = he(c), null !== $a && (ba.data = $a))));
		      if ($a = ce ? je(a, c) : ke(a, c)) d = oe(d, "onBeforeInput"), 0 < d.length && (e = new Ld("onBeforeInput", "beforeinput", null, c, e), g.push({
		        event: e,
		        listeners: d
		      }), e.data = $a);
		    }
		    se(g, b);
		  });
		}
		function tf(a, b, c) {
		  return {
		    instance: a,
		    listener: b,
		    currentTarget: c
		  };
		}
		function oe(a, b) {
		  for (var c = b + "Capture", d = []; null !== a;) {
		    var e = a,
		      f = e.stateNode;
		    5 === e.tag && null !== f && (e = f, f = Kb(a, c), null != f && d.unshift(tf(a, f, e)), f = Kb(a, b), null != f && d.push(tf(a, f, e)));
		    a = a.return;
		  }
		  return d;
		}
		function vf(a) {
		  if (null === a) return null;
		  do a = a.return; while (a && 5 !== a.tag);
		  return a ? a : null;
		}
		function wf(a, b, c, d, e) {
		  for (var f = b._reactName, g = []; null !== c && c !== d;) {
		    var h = c,
		      k = h.alternate,
		      l = h.stateNode;
		    if (null !== k && k === d) break;
		    5 === h.tag && null !== l && (h = l, e ? (k = Kb(c, f), null != k && g.unshift(tf(c, k, h))) : e || (k = Kb(c, f), null != k && g.push(tf(c, k, h))));
		    c = c.return;
		  }
		  0 !== g.length && a.push({
		    event: b,
		    listeners: g
		  });
		}
		var xf = /\r\n?/g,
		  yf = /\u0000|\uFFFD/g;
		function zf(a) {
		  return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
		}
		function Af(a, b, c) {
		  b = zf(b);
		  if (zf(a) !== b && c) throw Error(p(425));
		}
		function Bf() {}
		var Cf = null,
		  Df = null;
		function Ef(a, b) {
		  return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
		}
		var Ff = "function" === typeof setTimeout ? setTimeout : void 0,
		  Gf = "function" === typeof clearTimeout ? clearTimeout : void 0,
		  Hf = "function" === typeof Promise ? Promise : void 0,
		  Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function (a) {
		    return Hf.resolve(null).then(a).catch(If);
		  } : Ff;
		function If(a) {
		  setTimeout(function () {
		    throw a;
		  });
		}
		function Kf(a, b) {
		  var c = b,
		    d = 0;
		  do {
		    var e = c.nextSibling;
		    a.removeChild(c);
		    if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {
		      if (0 === d) {
		        a.removeChild(e);
		        bd(b);
		        return;
		      }
		      d--;
		    } else "$" !== c && "$?" !== c && "$!" !== c || d++;
		    c = e;
		  } while (c);
		  bd(b);
		}
		function Lf(a) {
		  for (; null != a; a = a.nextSibling) {
		    var b = a.nodeType;
		    if (1 === b || 3 === b) break;
		    if (8 === b) {
		      b = a.data;
		      if ("$" === b || "$!" === b || "$?" === b) break;
		      if ("/$" === b) return null;
		    }
		  }
		  return a;
		}
		function Mf(a) {
		  a = a.previousSibling;
		  for (var b = 0; a;) {
		    if (8 === a.nodeType) {
		      var c = a.data;
		      if ("$" === c || "$!" === c || "$?" === c) {
		        if (0 === b) return a;
		        b--;
		      } else "/$" === c && b++;
		    }
		    a = a.previousSibling;
		  }
		  return null;
		}
		var Nf = Math.random().toString(36).slice(2),
		  Of = "__reactFiber$" + Nf,
		  Pf = "__reactProps$" + Nf,
		  uf = "__reactContainer$" + Nf,
		  of = "__reactEvents$" + Nf,
		  Qf = "__reactListeners$" + Nf,
		  Rf = "__reactHandles$" + Nf;
		function Wc(a) {
		  var b = a[Of];
		  if (b) return b;
		  for (var c = a.parentNode; c;) {
		    if (b = c[uf] || c[Of]) {
		      c = b.alternate;
		      if (null !== b.child || null !== c && null !== c.child) for (a = Mf(a); null !== a;) {
		        if (c = a[Of]) return c;
		        a = Mf(a);
		      }
		      return b;
		    }
		    a = c;
		    c = a.parentNode;
		  }
		  return null;
		}
		function Cb(a) {
		  a = a[Of] || a[uf];
		  return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
		}
		function ue(a) {
		  if (5 === a.tag || 6 === a.tag) return a.stateNode;
		  throw Error(p(33));
		}
		function Db(a) {
		  return a[Pf] || null;
		}
		var Sf = [],
		  Tf = -1;
		function Uf(a) {
		  return {
		    current: a
		  };
		}
		function E(a) {
		  0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
		}
		function G(a, b) {
		  Tf++;
		  Sf[Tf] = a.current;
		  a.current = b;
		}
		var Vf = {},
		  H = Uf(Vf),
		  Wf = Uf(!1),
		  Xf = Vf;
		function Yf(a, b) {
		  var c = a.type.contextTypes;
		  if (!c) return Vf;
		  var d = a.stateNode;
		  if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
		  var e = {},
		    f;
		  for (f in c) e[f] = b[f];
		  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
		  return e;
		}
		function Zf(a) {
		  a = a.childContextTypes;
		  return null !== a && void 0 !== a;
		}
		function $f() {
		  E(Wf);
		  E(H);
		}
		function ag(a, b, c) {
		  if (H.current !== Vf) throw Error(p(168));
		  G(H, b);
		  G(Wf, c);
		}
		function bg(a, b, c) {
		  var d = a.stateNode;
		  b = b.childContextTypes;
		  if ("function" !== typeof d.getChildContext) return c;
		  d = d.getChildContext();
		  for (var e in d) if (!(e in b)) throw Error(p(108, Ra(a) || "Unknown", e));
		  return A({}, c, d);
		}
		function cg(a) {
		  a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
		  Xf = H.current;
		  G(H, a);
		  G(Wf, Wf.current);
		  return !0;
		}
		function dg(a, b, c) {
		  var d = a.stateNode;
		  if (!d) throw Error(p(169));
		  c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H), G(H, a)) : E(Wf);
		  G(Wf, c);
		}
		var eg = null,
		  fg = !1,
		  gg = !1;
		function hg(a) {
		  null === eg ? eg = [a] : eg.push(a);
		}
		function ig(a) {
		  fg = !0;
		  hg(a);
		}
		function jg() {
		  if (!gg && null !== eg) {
		    gg = !0;
		    var a = 0,
		      b = C;
		    try {
		      var c = eg;
		      for (C = 1; a < c.length; a++) {
		        var d = c[a];
		        do d = d(!0); while (null !== d);
		      }
		      eg = null;
		      fg = !1;
		    } catch (e) {
		      throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
		    } finally {
		      C = b, gg = !1;
		    }
		  }
		  return null;
		}
		var kg = [],
		  lg = 0,
		  mg = null,
		  ng = 0,
		  og = [],
		  pg = 0,
		  qg = null,
		  rg = 1,
		  sg = "";
		function tg(a, b) {
		  kg[lg++] = ng;
		  kg[lg++] = mg;
		  mg = a;
		  ng = b;
		}
		function ug(a, b, c) {
		  og[pg++] = rg;
		  og[pg++] = sg;
		  og[pg++] = qg;
		  qg = a;
		  var d = rg;
		  a = sg;
		  var e = 32 - oc(d) - 1;
		  d &= ~(1 << e);
		  c += 1;
		  var f = 32 - oc(b) + e;
		  if (30 < f) {
		    var g = e - e % 5;
		    f = (d & (1 << g) - 1).toString(32);
		    d >>= g;
		    e -= g;
		    rg = 1 << 32 - oc(b) + e | c << e | d;
		    sg = f + a;
		  } else rg = 1 << f | c << e | d, sg = a;
		}
		function vg(a) {
		  null !== a.return && (tg(a, 1), ug(a, 1, 0));
		}
		function wg(a) {
		  for (; a === mg;) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
		  for (; a === qg;) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
		}
		var xg = null,
		  yg = null,
		  I = !1,
		  zg = null;
		function Ag(a, b) {
		  var c = Bg(5, null, null, 0);
		  c.elementType = "DELETED";
		  c.stateNode = b;
		  c.return = a;
		  b = a.deletions;
		  null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);
		}
		function Cg(a, b) {
		  switch (a.tag) {
		    case 5:
		      var c = a.type;
		      b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
		      return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), !0) : !1;
		    case 6:
		      return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, !0) : !1;
		    case 13:
		      return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? {
		        id: rg,
		        overflow: sg
		      } : null, a.memoizedState = {
		        dehydrated: b,
		        treeContext: c,
		        retryLane: 1073741824
		      }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, !0) : !1;
		    default:
		      return !1;
		  }
		}
		function Dg(a) {
		  return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
		}
		function Eg(a) {
		  if (I) {
		    var b = yg;
		    if (b) {
		      var c = b;
		      if (!Cg(a, b)) {
		        if (Dg(a)) throw Error(p(418));
		        b = Lf(c.nextSibling);
		        var d = xg;
		        b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = !1, xg = a);
		      }
		    } else {
		      if (Dg(a)) throw Error(p(418));
		      a.flags = a.flags & -4097 | 2;
		      I = !1;
		      xg = a;
		    }
		  }
		}
		function Fg(a) {
		  for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag;) a = a.return;
		  xg = a;
		}
		function Gg(a) {
		  if (a !== xg) return !1;
		  if (!I) return Fg(a), I = !0, !1;
		  var b;
		  (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));
		  if (b && (b = yg)) {
		    if (Dg(a)) throw Hg(), Error(p(418));
		    for (; b;) Ag(a, b), b = Lf(b.nextSibling);
		  }
		  Fg(a);
		  if (13 === a.tag) {
		    a = a.memoizedState;
		    a = null !== a ? a.dehydrated : null;
		    if (!a) throw Error(p(317));
		    a: {
		      a = a.nextSibling;
		      for (b = 0; a;) {
		        if (8 === a.nodeType) {
		          var c = a.data;
		          if ("/$" === c) {
		            if (0 === b) {
		              yg = Lf(a.nextSibling);
		              break a;
		            }
		            b--;
		          } else "$" !== c && "$!" !== c && "$?" !== c || b++;
		        }
		        a = a.nextSibling;
		      }
		      yg = null;
		    }
		  } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
		  return !0;
		}
		function Hg() {
		  for (var a = yg; a;) a = Lf(a.nextSibling);
		}
		function Ig() {
		  yg = xg = null;
		  I = !1;
		}
		function Jg(a) {
		  null === zg ? zg = [a] : zg.push(a);
		}
		var Kg = ua.ReactCurrentBatchConfig;
		function Lg(a, b) {
		  if (a && a.defaultProps) {
		    b = A({}, b);
		    a = a.defaultProps;
		    for (var c in a) void 0 === b[c] && (b[c] = a[c]);
		    return b;
		  }
		  return b;
		}
		var Mg = Uf(null),
		  Ng = null,
		  Og = null,
		  Pg = null;
		function Qg() {
		  Pg = Og = Ng = null;
		}
		function Rg(a) {
		  var b = Mg.current;
		  E(Mg);
		  a._currentValue = b;
		}
		function Sg(a, b, c) {
		  for (; null !== a;) {
		    var d = a.alternate;
		    (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
		    if (a === c) break;
		    a = a.return;
		  }
		}
		function Tg(a, b) {
		  Ng = a;
		  Pg = Og = null;
		  a = a.dependencies;
		  null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (Ug = !0), a.firstContext = null);
		}
		function Vg(a) {
		  var b = a._currentValue;
		  if (Pg !== a) if (a = {
		    context: a,
		    memoizedValue: b,
		    next: null
		  }, null === Og) {
		    if (null === Ng) throw Error(p(308));
		    Og = a;
		    Ng.dependencies = {
		      lanes: 0,
		      firstContext: a
		    };
		  } else Og = Og.next = a;
		  return b;
		}
		var Wg = null;
		function Xg(a) {
		  null === Wg ? Wg = [a] : Wg.push(a);
		}
		function Yg(a, b, c, d) {
		  var e = b.interleaved;
		  null === e ? (c.next = c, Xg(b)) : (c.next = e.next, e.next = c);
		  b.interleaved = c;
		  return Zg(a, d);
		}
		function Zg(a, b) {
		  a.lanes |= b;
		  var c = a.alternate;
		  null !== c && (c.lanes |= b);
		  c = a;
		  for (a = a.return; null !== a;) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
		  return 3 === c.tag ? c.stateNode : null;
		}
		var $g = !1;
		function ah(a) {
		  a.updateQueue = {
		    baseState: a.memoizedState,
		    firstBaseUpdate: null,
		    lastBaseUpdate: null,
		    shared: {
		      pending: null,
		      interleaved: null,
		      lanes: 0
		    },
		    effects: null
		  };
		}
		function bh(a, b) {
		  a = a.updateQueue;
		  b.updateQueue === a && (b.updateQueue = {
		    baseState: a.baseState,
		    firstBaseUpdate: a.firstBaseUpdate,
		    lastBaseUpdate: a.lastBaseUpdate,
		    shared: a.shared,
		    effects: a.effects
		  });
		}
		function ch(a, b) {
		  return {
		    eventTime: a,
		    lane: b,
		    tag: 0,
		    payload: null,
		    callback: null,
		    next: null
		  };
		}
		function dh(a, b, c) {
		  var d = a.updateQueue;
		  if (null === d) return null;
		  d = d.shared;
		  if (0 !== (K & 2)) {
		    var e = d.pending;
		    null === e ? b.next = b : (b.next = e.next, e.next = b);
		    d.pending = b;
		    return Zg(a, c);
		  }
		  e = d.interleaved;
		  null === e ? (b.next = b, Xg(d)) : (b.next = e.next, e.next = b);
		  d.interleaved = b;
		  return Zg(a, c);
		}
		function eh(a, b, c) {
		  b = b.updateQueue;
		  if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
		    var d = b.lanes;
		    d &= a.pendingLanes;
		    c |= d;
		    b.lanes = c;
		    Cc(a, c);
		  }
		}
		function fh(a, b) {
		  var c = a.updateQueue,
		    d = a.alternate;
		  if (null !== d && (d = d.updateQueue, c === d)) {
		    var e = null,
		      f = null;
		    c = c.firstBaseUpdate;
		    if (null !== c) {
		      do {
		        var g = {
		          eventTime: c.eventTime,
		          lane: c.lane,
		          tag: c.tag,
		          payload: c.payload,
		          callback: c.callback,
		          next: null
		        };
		        null === f ? e = f = g : f = f.next = g;
		        c = c.next;
		      } while (null !== c);
		      null === f ? e = f = b : f = f.next = b;
		    } else e = f = b;
		    c = {
		      baseState: d.baseState,
		      firstBaseUpdate: e,
		      lastBaseUpdate: f,
		      shared: d.shared,
		      effects: d.effects
		    };
		    a.updateQueue = c;
		    return;
		  }
		  a = c.lastBaseUpdate;
		  null === a ? c.firstBaseUpdate = b : a.next = b;
		  c.lastBaseUpdate = b;
		}
		function gh(a, b, c, d) {
		  var e = a.updateQueue;
		  $g = !1;
		  var f = e.firstBaseUpdate,
		    g = e.lastBaseUpdate,
		    h = e.shared.pending;
		  if (null !== h) {
		    e.shared.pending = null;
		    var k = h,
		      l = k.next;
		    k.next = null;
		    null === g ? f = l : g.next = l;
		    g = k;
		    var m = a.alternate;
		    null !== m && (m = m.updateQueue, h = m.lastBaseUpdate, h !== g && (null === h ? m.firstBaseUpdate = l : h.next = l, m.lastBaseUpdate = k));
		  }
		  if (null !== f) {
		    var q = e.baseState;
		    g = 0;
		    m = l = k = null;
		    h = f;
		    do {
		      var r = h.lane,
		        y = h.eventTime;
		      if ((d & r) === r) {
		        null !== m && (m = m.next = {
		          eventTime: y,
		          lane: 0,
		          tag: h.tag,
		          payload: h.payload,
		          callback: h.callback,
		          next: null
		        });
		        a: {
		          var n = a,
		            t = h;
		          r = b;
		          y = c;
		          switch (t.tag) {
		            case 1:
		              n = t.payload;
		              if ("function" === typeof n) {
		                q = n.call(y, q, r);
		                break a;
		              }
		              q = n;
		              break a;
		            case 3:
		              n.flags = n.flags & -65537 | 128;
		            case 0:
		              n = t.payload;
		              r = "function" === typeof n ? n.call(y, q, r) : n;
		              if (null === r || void 0 === r) break a;
		              q = A({}, q, r);
		              break a;
		            case 2:
		              $g = !0;
		          }
		        }
		        null !== h.callback && 0 !== h.lane && (a.flags |= 64, r = e.effects, null === r ? e.effects = [h] : r.push(h));
		      } else y = {
		        eventTime: y,
		        lane: r,
		        tag: h.tag,
		        payload: h.payload,
		        callback: h.callback,
		        next: null
		      }, null === m ? (l = m = y, k = q) : m = m.next = y, g |= r;
		      h = h.next;
		      if (null === h) if (h = e.shared.pending, null === h) break;else r = h, h = r.next, r.next = null, e.lastBaseUpdate = r, e.shared.pending = null;
		    } while (1);
		    null === m && (k = q);
		    e.baseState = k;
		    e.firstBaseUpdate = l;
		    e.lastBaseUpdate = m;
		    b = e.shared.interleaved;
		    if (null !== b) {
		      e = b;
		      do g |= e.lane, e = e.next; while (e !== b);
		    } else null === f && (e.shared.lanes = 0);
		    hh |= g;
		    a.lanes = g;
		    a.memoizedState = q;
		  }
		}
		function ih(a, b, c) {
		  a = b.effects;
		  b.effects = null;
		  if (null !== a) for (b = 0; b < a.length; b++) {
		    var d = a[b],
		      e = d.callback;
		    if (null !== e) {
		      d.callback = null;
		      d = c;
		      if ("function" !== typeof e) throw Error(p(191, e));
		      e.call(d);
		    }
		  }
		}
		var jh = new aa.Component().refs;
		function kh(a, b, c, d) {
		  b = a.memoizedState;
		  c = c(d, b);
		  c = null === c || void 0 === c ? b : A({}, b, c);
		  a.memoizedState = c;
		  0 === a.lanes && (a.updateQueue.baseState = c);
		}
		var nh = {
		  isMounted: function (a) {
		    return (a = a._reactInternals) ? Vb(a) === a : !1;
		  },
		  enqueueSetState: function (a, b, c) {
		    a = a._reactInternals;
		    var d = L(),
		      e = lh(a),
		      f = ch(d, e);
		    f.payload = b;
		    void 0 !== c && null !== c && (f.callback = c);
		    b = dh(a, f, e);
		    null !== b && (mh(b, a, e, d), eh(b, a, e));
		  },
		  enqueueReplaceState: function (a, b, c) {
		    a = a._reactInternals;
		    var d = L(),
		      e = lh(a),
		      f = ch(d, e);
		    f.tag = 1;
		    f.payload = b;
		    void 0 !== c && null !== c && (f.callback = c);
		    b = dh(a, f, e);
		    null !== b && (mh(b, a, e, d), eh(b, a, e));
		  },
		  enqueueForceUpdate: function (a, b) {
		    a = a._reactInternals;
		    var c = L(),
		      d = lh(a),
		      e = ch(c, d);
		    e.tag = 2;
		    void 0 !== b && null !== b && (e.callback = b);
		    b = dh(a, e, d);
		    null !== b && (mh(b, a, d, c), eh(b, a, d));
		  }
		};
		function oh(a, b, c, d, e, f, g) {
		  a = a.stateNode;
		  return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie(c, d) || !Ie(e, f) : !0;
		}
		function ph(a, b, c) {
		  var d = !1,
		    e = Vf;
		  var f = b.contextType;
		  "object" === typeof f && null !== f ? f = Vg(f) : (e = Zf(b) ? Xf : H.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
		  b = new b(c, f);
		  a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
		  b.updater = nh;
		  a.stateNode = b;
		  b._reactInternals = a;
		  d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
		  return b;
		}
		function qh(a, b, c, d) {
		  a = b.state;
		  "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
		  "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
		  b.state !== a && nh.enqueueReplaceState(b, b.state, null);
		}
		function rh(a, b, c, d) {
		  var e = a.stateNode;
		  e.props = c;
		  e.state = a.memoizedState;
		  e.refs = jh;
		  ah(a);
		  var f = b.contextType;
		  "object" === typeof f && null !== f ? e.context = Vg(f) : (f = Zf(b) ? Xf : H.current, e.context = Yf(a, f));
		  e.state = a.memoizedState;
		  f = b.getDerivedStateFromProps;
		  "function" === typeof f && (kh(a, b, f, c), e.state = a.memoizedState);
		  "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && nh.enqueueReplaceState(e, e.state, null), gh(a, c, e, d), e.state = a.memoizedState);
		  "function" === typeof e.componentDidMount && (a.flags |= 4194308);
		}
		function sh(a, b, c) {
		  a = c.ref;
		  if (null !== a && "function" !== typeof a && "object" !== typeof a) {
		    if (c._owner) {
		      c = c._owner;
		      if (c) {
		        if (1 !== c.tag) throw Error(p(309));
		        var d = c.stateNode;
		      }
		      if (!d) throw Error(p(147, a));
		      var e = d,
		        f = "" + a;
		      if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;
		      b = function (a) {
		        var b = e.refs;
		        b === jh && (b = e.refs = {});
		        null === a ? delete b[f] : b[f] = a;
		      };
		      b._stringRef = f;
		      return b;
		    }
		    if ("string" !== typeof a) throw Error(p(284));
		    if (!c._owner) throw Error(p(290, a));
		  }
		  return a;
		}
		function th(a, b) {
		  a = Object.prototype.toString.call(b);
		  throw Error(p(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
		}
		function uh(a) {
		  var b = a._init;
		  return b(a._payload);
		}
		function vh(a) {
		  function b(b, c) {
		    if (a) {
		      var d = b.deletions;
		      null === d ? (b.deletions = [c], b.flags |= 16) : d.push(c);
		    }
		  }
		  function c(c, d) {
		    if (!a) return null;
		    for (; null !== d;) b(c, d), d = d.sibling;
		    return null;
		  }
		  function d(a, b) {
		    for (a = new Map(); null !== b;) null !== b.key ? a.set(b.key, b) : a.set(b.index, b), b = b.sibling;
		    return a;
		  }
		  function e(a, b) {
		    a = wh(a, b);
		    a.index = 0;
		    a.sibling = null;
		    return a;
		  }
		  function f(b, c, d) {
		    b.index = d;
		    if (!a) return b.flags |= 1048576, c;
		    d = b.alternate;
		    if (null !== d) return d = d.index, d < c ? (b.flags |= 2, c) : d;
		    b.flags |= 2;
		    return c;
		  }
		  function g(b) {
		    a && null === b.alternate && (b.flags |= 2);
		    return b;
		  }
		  function h(a, b, c, d) {
		    if (null === b || 6 !== b.tag) return b = xh(c, a.mode, d), b.return = a, b;
		    b = e(b, c);
		    b.return = a;
		    return b;
		  }
		  function k(a, b, c, d) {
		    var f = c.type;
		    if (f === ya) return m(a, b, c.props.children, d, c.key);
		    if (null !== b && (b.elementType === f || "object" === typeof f && null !== f && f.$$typeof === Ha && uh(f) === b.type)) return d = e(b, c.props), d.ref = sh(a, b, c), d.return = a, d;
		    d = yh(c.type, c.key, c.props, null, a.mode, d);
		    d.ref = sh(a, b, c);
		    d.return = a;
		    return d;
		  }
		  function l(a, b, c, d) {
		    if (null === b || 4 !== b.tag || b.stateNode.containerInfo !== c.containerInfo || b.stateNode.implementation !== c.implementation) return b = zh(c, a.mode, d), b.return = a, b;
		    b = e(b, c.children || []);
		    b.return = a;
		    return b;
		  }
		  function m(a, b, c, d, f) {
		    if (null === b || 7 !== b.tag) return b = Ah(c, a.mode, d, f), b.return = a, b;
		    b = e(b, c);
		    b.return = a;
		    return b;
		  }
		  function q(a, b, c) {
		    if ("string" === typeof b && "" !== b || "number" === typeof b) return b = xh("" + b, a.mode, c), b.return = a, b;
		    if ("object" === typeof b && null !== b) {
		      switch (b.$$typeof) {
		        case va:
		          return c = yh(b.type, b.key, b.props, null, a.mode, c), c.ref = sh(a, null, b), c.return = a, c;
		        case wa:
		          return b = zh(b, a.mode, c), b.return = a, b;
		        case Ha:
		          var d = b._init;
		          return q(a, d(b._payload), c);
		      }
		      if (eb(b) || Ka(b)) return b = Ah(b, a.mode, c, null), b.return = a, b;
		      th(a, b);
		    }
		    return null;
		  }
		  function r(a, b, c, d) {
		    var e = null !== b ? b.key : null;
		    if ("string" === typeof c && "" !== c || "number" === typeof c) return null !== e ? null : h(a, b, "" + c, d);
		    if ("object" === typeof c && null !== c) {
		      switch (c.$$typeof) {
		        case va:
		          return c.key === e ? k(a, b, c, d) : null;
		        case wa:
		          return c.key === e ? l(a, b, c, d) : null;
		        case Ha:
		          return e = c._init, r(a, b, e(c._payload), d);
		      }
		      if (eb(c) || Ka(c)) return null !== e ? null : m(a, b, c, d, null);
		      th(a, c);
		    }
		    return null;
		  }
		  function y(a, b, c, d, e) {
		    if ("string" === typeof d && "" !== d || "number" === typeof d) return a = a.get(c) || null, h(b, a, "" + d, e);
		    if ("object" === typeof d && null !== d) {
		      switch (d.$$typeof) {
		        case va:
		          return a = a.get(null === d.key ? c : d.key) || null, k(b, a, d, e);
		        case wa:
		          return a = a.get(null === d.key ? c : d.key) || null, l(b, a, d, e);
		        case Ha:
		          var f = d._init;
		          return y(a, b, c, f(d._payload), e);
		      }
		      if (eb(d) || Ka(d)) return a = a.get(c) || null, m(b, a, d, e, null);
		      th(b, d);
		    }
		    return null;
		  }
		  function n(e, g, h, k) {
		    for (var l = null, m = null, u = g, w = g = 0, x = null; null !== u && w < h.length; w++) {
		      u.index > w ? (x = u, u = null) : x = u.sibling;
		      var n = r(e, u, h[w], k);
		      if (null === n) {
		        null === u && (u = x);
		        break;
		      }
		      a && u && null === n.alternate && b(e, u);
		      g = f(n, g, w);
		      null === m ? l = n : m.sibling = n;
		      m = n;
		      u = x;
		    }
		    if (w === h.length) return c(e, u), I && tg(e, w), l;
		    if (null === u) {
		      for (; w < h.length; w++) u = q(e, h[w], k), null !== u && (g = f(u, g, w), null === m ? l = u : m.sibling = u, m = u);
		      I && tg(e, w);
		      return l;
		    }
		    for (u = d(e, u); w < h.length; w++) x = y(u, e, w, h[w], k), null !== x && (a && null !== x.alternate && u.delete(null === x.key ? w : x.key), g = f(x, g, w), null === m ? l = x : m.sibling = x, m = x);
		    a && u.forEach(function (a) {
		      return b(e, a);
		    });
		    I && tg(e, w);
		    return l;
		  }
		  function t(e, g, h, k) {
		    var l = Ka(h);
		    if ("function" !== typeof l) throw Error(p(150));
		    h = l.call(h);
		    if (null == h) throw Error(p(151));
		    for (var u = l = null, m = g, w = g = 0, x = null, n = h.next(); null !== m && !n.done; w++, n = h.next()) {
		      m.index > w ? (x = m, m = null) : x = m.sibling;
		      var t = r(e, m, n.value, k);
		      if (null === t) {
		        null === m && (m = x);
		        break;
		      }
		      a && m && null === t.alternate && b(e, m);
		      g = f(t, g, w);
		      null === u ? l = t : u.sibling = t;
		      u = t;
		      m = x;
		    }
		    if (n.done) return c(e, m), I && tg(e, w), l;
		    if (null === m) {
		      for (; !n.done; w++, n = h.next()) n = q(e, n.value, k), null !== n && (g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
		      I && tg(e, w);
		      return l;
		    }
		    for (m = d(e, m); !n.done; w++, n = h.next()) n = y(m, e, w, n.value, k), null !== n && (a && null !== n.alternate && m.delete(null === n.key ? w : n.key), g = f(n, g, w), null === u ? l = n : u.sibling = n, u = n);
		    a && m.forEach(function (a) {
		      return b(e, a);
		    });
		    I && tg(e, w);
		    return l;
		  }
		  function J(a, d, f, h) {
		    "object" === typeof f && null !== f && f.type === ya && null === f.key && (f = f.props.children);
		    if ("object" === typeof f && null !== f) {
		      switch (f.$$typeof) {
		        case va:
		          a: {
		            for (var k = f.key, l = d; null !== l;) {
		              if (l.key === k) {
		                k = f.type;
		                if (k === ya) {
		                  if (7 === l.tag) {
		                    c(a, l.sibling);
		                    d = e(l, f.props.children);
		                    d.return = a;
		                    a = d;
		                    break a;
		                  }
		                } else if (l.elementType === k || "object" === typeof k && null !== k && k.$$typeof === Ha && uh(k) === l.type) {
		                  c(a, l.sibling);
		                  d = e(l, f.props);
		                  d.ref = sh(a, l, f);
		                  d.return = a;
		                  a = d;
		                  break a;
		                }
		                c(a, l);
		                break;
		              } else b(a, l);
		              l = l.sibling;
		            }
		            f.type === ya ? (d = Ah(f.props.children, a.mode, h, f.key), d.return = a, a = d) : (h = yh(f.type, f.key, f.props, null, a.mode, h), h.ref = sh(a, d, f), h.return = a, a = h);
		          }
		          return g(a);
		        case wa:
		          a: {
		            for (l = f.key; null !== d;) {
		              if (d.key === l) {
		                if (4 === d.tag && d.stateNode.containerInfo === f.containerInfo && d.stateNode.implementation === f.implementation) {
		                  c(a, d.sibling);
		                  d = e(d, f.children || []);
		                  d.return = a;
		                  a = d;
		                  break a;
		                } else {
		                  c(a, d);
		                  break;
		                }
		              } else b(a, d);
		              d = d.sibling;
		            }
		            d = zh(f, a.mode, h);
		            d.return = a;
		            a = d;
		          }
		          return g(a);
		        case Ha:
		          return l = f._init, J(a, d, l(f._payload), h);
		      }
		      if (eb(f)) return n(a, d, f, h);
		      if (Ka(f)) return t(a, d, f, h);
		      th(a, f);
		    }
		    return "string" === typeof f && "" !== f || "number" === typeof f ? (f = "" + f, null !== d && 6 === d.tag ? (c(a, d.sibling), d = e(d, f), d.return = a, a = d) : (c(a, d), d = xh(f, a.mode, h), d.return = a, a = d), g(a)) : c(a, d);
		  }
		  return J;
		}
		var Bh = vh(!0),
		  Ch = vh(!1),
		  Dh = {},
		  Eh = Uf(Dh),
		  Fh = Uf(Dh),
		  Gh = Uf(Dh);
		function Hh(a) {
		  if (a === Dh) throw Error(p(174));
		  return a;
		}
		function Ih(a, b) {
		  G(Gh, b);
		  G(Fh, a);
		  G(Eh, Dh);
		  a = b.nodeType;
		  switch (a) {
		    case 9:
		    case 11:
		      b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
		      break;
		    default:
		      a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);
		  }
		  E(Eh);
		  G(Eh, b);
		}
		function Jh() {
		  E(Eh);
		  E(Fh);
		  E(Gh);
		}
		function Kh(a) {
		  Hh(Gh.current);
		  var b = Hh(Eh.current);
		  var c = lb(b, a.type);
		  b !== c && (G(Fh, a), G(Eh, c));
		}
		function Lh(a) {
		  Fh.current === a && (E(Eh), E(Fh));
		}
		var M = Uf(0);
		function Mh(a) {
		  for (var b = a; null !== b;) {
		    if (13 === b.tag) {
		      var c = b.memoizedState;
		      if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
		    } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
		      if (0 !== (b.flags & 128)) return b;
		    } else if (null !== b.child) {
		      b.child.return = b;
		      b = b.child;
		      continue;
		    }
		    if (b === a) break;
		    for (; null === b.sibling;) {
		      if (null === b.return || b.return === a) return null;
		      b = b.return;
		    }
		    b.sibling.return = b.return;
		    b = b.sibling;
		  }
		  return null;
		}
		var Nh = [];
		function Oh() {
		  for (var a = 0; a < Nh.length; a++) Nh[a]._workInProgressVersionPrimary = null;
		  Nh.length = 0;
		}
		var Ph = ua.ReactCurrentDispatcher,
		  Qh = ua.ReactCurrentBatchConfig,
		  Rh = 0,
		  N = null,
		  O = null,
		  P = null,
		  Sh = !1,
		  Th = !1,
		  Uh = 0,
		  Vh = 0;
		function Q() {
		  throw Error(p(321));
		}
		function Wh(a, b) {
		  if (null === b) return !1;
		  for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return !1;
		  return !0;
		}
		function Xh(a, b, c, d, e, f) {
		  Rh = f;
		  N = b;
		  b.memoizedState = null;
		  b.updateQueue = null;
		  b.lanes = 0;
		  Ph.current = null === a || null === a.memoizedState ? Yh : Zh;
		  a = c(d, e);
		  if (Th) {
		    f = 0;
		    do {
		      Th = !1;
		      Uh = 0;
		      if (25 <= f) throw Error(p(301));
		      f += 1;
		      P = O = null;
		      b.updateQueue = null;
		      Ph.current = $h;
		      a = c(d, e);
		    } while (Th);
		  }
		  Ph.current = ai;
		  b = null !== O && null !== O.next;
		  Rh = 0;
		  P = O = N = null;
		  Sh = !1;
		  if (b) throw Error(p(300));
		  return a;
		}
		function bi() {
		  var a = 0 !== Uh;
		  Uh = 0;
		  return a;
		}
		function ci() {
		  var a = {
		    memoizedState: null,
		    baseState: null,
		    baseQueue: null,
		    queue: null,
		    next: null
		  };
		  null === P ? N.memoizedState = P = a : P = P.next = a;
		  return P;
		}
		function di() {
		  if (null === O) {
		    var a = N.alternate;
		    a = null !== a ? a.memoizedState : null;
		  } else a = O.next;
		  var b = null === P ? N.memoizedState : P.next;
		  if (null !== b) P = b, O = a;else {
		    if (null === a) throw Error(p(310));
		    O = a;
		    a = {
		      memoizedState: O.memoizedState,
		      baseState: O.baseState,
		      baseQueue: O.baseQueue,
		      queue: O.queue,
		      next: null
		    };
		    null === P ? N.memoizedState = P = a : P = P.next = a;
		  }
		  return P;
		}
		function ei(a, b) {
		  return "function" === typeof b ? b(a) : b;
		}
		function fi(a) {
		  var b = di(),
		    c = b.queue;
		  if (null === c) throw Error(p(311));
		  c.lastRenderedReducer = a;
		  var d = O,
		    e = d.baseQueue,
		    f = c.pending;
		  if (null !== f) {
		    if (null !== e) {
		      var g = e.next;
		      e.next = f.next;
		      f.next = g;
		    }
		    d.baseQueue = e = f;
		    c.pending = null;
		  }
		  if (null !== e) {
		    f = e.next;
		    d = d.baseState;
		    var h = g = null,
		      k = null,
		      l = f;
		    do {
		      var m = l.lane;
		      if ((Rh & m) === m) null !== k && (k = k.next = {
		        lane: 0,
		        action: l.action,
		        hasEagerState: l.hasEagerState,
		        eagerState: l.eagerState,
		        next: null
		      }), d = l.hasEagerState ? l.eagerState : a(d, l.action);else {
		        var q = {
		          lane: m,
		          action: l.action,
		          hasEagerState: l.hasEagerState,
		          eagerState: l.eagerState,
		          next: null
		        };
		        null === k ? (h = k = q, g = d) : k = k.next = q;
		        N.lanes |= m;
		        hh |= m;
		      }
		      l = l.next;
		    } while (null !== l && l !== f);
		    null === k ? g = d : k.next = h;
		    He(d, b.memoizedState) || (Ug = !0);
		    b.memoizedState = d;
		    b.baseState = g;
		    b.baseQueue = k;
		    c.lastRenderedState = d;
		  }
		  a = c.interleaved;
		  if (null !== a) {
		    e = a;
		    do f = e.lane, N.lanes |= f, hh |= f, e = e.next; while (e !== a);
		  } else null === e && (c.lanes = 0);
		  return [b.memoizedState, c.dispatch];
		}
		function gi(a) {
		  var b = di(),
		    c = b.queue;
		  if (null === c) throw Error(p(311));
		  c.lastRenderedReducer = a;
		  var d = c.dispatch,
		    e = c.pending,
		    f = b.memoizedState;
		  if (null !== e) {
		    c.pending = null;
		    var g = e = e.next;
		    do f = a(f, g.action), g = g.next; while (g !== e);
		    He(f, b.memoizedState) || (Ug = !0);
		    b.memoizedState = f;
		    null === b.baseQueue && (b.baseState = f);
		    c.lastRenderedState = f;
		  }
		  return [f, d];
		}
		function hi() {}
		function ii(a, b) {
		  var c = N,
		    d = di(),
		    e = b(),
		    f = !He(d.memoizedState, e);
		  f && (d.memoizedState = e, Ug = !0);
		  d = d.queue;
		  ji(ki.bind(null, c, d, a), [a]);
		  if (d.getSnapshot !== b || f || null !== P && P.memoizedState.tag & 1) {
		    c.flags |= 2048;
		    li(9, mi.bind(null, c, d, e, b), void 0, null);
		    if (null === R) throw Error(p(349));
		    0 !== (Rh & 30) || ni(c, b, e);
		  }
		  return e;
		}
		function ni(a, b, c) {
		  a.flags |= 16384;
		  a = {
		    getSnapshot: b,
		    value: c
		  };
		  b = N.updateQueue;
		  null === b ? (b = {
		    lastEffect: null,
		    stores: null
		  }, N.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));
		}
		function mi(a, b, c, d) {
		  b.value = c;
		  b.getSnapshot = d;
		  oi(b) && pi(a);
		}
		function ki(a, b, c) {
		  return c(function () {
		    oi(b) && pi(a);
		  });
		}
		function oi(a) {
		  var b = a.getSnapshot;
		  a = a.value;
		  try {
		    var c = b();
		    return !He(a, c);
		  } catch (d) {
		    return !0;
		  }
		}
		function pi(a) {
		  var b = Zg(a, 1);
		  null !== b && mh(b, a, 1, -1);
		}
		function qi(a) {
		  var b = ci();
		  "function" === typeof a && (a = a());
		  b.memoizedState = b.baseState = a;
		  a = {
		    pending: null,
		    interleaved: null,
		    lanes: 0,
		    dispatch: null,
		    lastRenderedReducer: ei,
		    lastRenderedState: a
		  };
		  b.queue = a;
		  a = a.dispatch = ri.bind(null, N, a);
		  return [b.memoizedState, a];
		}
		function li(a, b, c, d) {
		  a = {
		    tag: a,
		    create: b,
		    destroy: c,
		    deps: d,
		    next: null
		  };
		  b = N.updateQueue;
		  null === b ? (b = {
		    lastEffect: null,
		    stores: null
		  }, N.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
		  return a;
		}
		function si() {
		  return di().memoizedState;
		}
		function ti(a, b, c, d) {
		  var e = ci();
		  N.flags |= a;
		  e.memoizedState = li(1 | b, c, void 0, void 0 === d ? null : d);
		}
		function ui(a, b, c, d) {
		  var e = di();
		  d = void 0 === d ? null : d;
		  var f = void 0;
		  if (null !== O) {
		    var g = O.memoizedState;
		    f = g.destroy;
		    if (null !== d && Wh(d, g.deps)) {
		      e.memoizedState = li(b, c, f, d);
		      return;
		    }
		  }
		  N.flags |= a;
		  e.memoizedState = li(1 | b, c, f, d);
		}
		function vi(a, b) {
		  return ti(8390656, 8, a, b);
		}
		function ji(a, b) {
		  return ui(2048, 8, a, b);
		}
		function wi(a, b) {
		  return ui(4, 2, a, b);
		}
		function xi(a, b) {
		  return ui(4, 4, a, b);
		}
		function yi(a, b) {
		  if ("function" === typeof b) return a = a(), b(a), function () {
		    b(null);
		  };
		  if (null !== b && void 0 !== b) return a = a(), b.current = a, function () {
		    b.current = null;
		  };
		}
		function zi(a, b, c) {
		  c = null !== c && void 0 !== c ? c.concat([a]) : null;
		  return ui(4, 4, yi.bind(null, b, a), c);
		}
		function Ai() {}
		function Bi(a, b) {
		  var c = di();
		  b = void 0 === b ? null : b;
		  var d = c.memoizedState;
		  if (null !== d && null !== b && Wh(b, d[1])) return d[0];
		  c.memoizedState = [a, b];
		  return a;
		}
		function Ci(a, b) {
		  var c = di();
		  b = void 0 === b ? null : b;
		  var d = c.memoizedState;
		  if (null !== d && null !== b && Wh(b, d[1])) return d[0];
		  a = a();
		  c.memoizedState = [a, b];
		  return a;
		}
		function Di(a, b, c) {
		  if (0 === (Rh & 21)) return a.baseState && (a.baseState = !1, Ug = !0), a.memoizedState = c;
		  He(c, b) || (c = yc(), N.lanes |= c, hh |= c, a.baseState = !0);
		  return b;
		}
		function Ei(a, b) {
		  var c = C;
		  C = 0 !== c && 4 > c ? c : 4;
		  a(!0);
		  var d = Qh.transition;
		  Qh.transition = {};
		  try {
		    a(!1), b();
		  } finally {
		    C = c, Qh.transition = d;
		  }
		}
		function Fi() {
		  return di().memoizedState;
		}
		function Gi(a, b, c) {
		  var d = lh(a);
		  c = {
		    lane: d,
		    action: c,
		    hasEagerState: !1,
		    eagerState: null,
		    next: null
		  };
		  if (Hi(a)) Ii(b, c);else if (c = Yg(a, b, c, d), null !== c) {
		    var e = L();
		    mh(c, a, d, e);
		    Ji(c, b, d);
		  }
		}
		function ri(a, b, c) {
		  var d = lh(a),
		    e = {
		      lane: d,
		      action: c,
		      hasEagerState: !1,
		      eagerState: null,
		      next: null
		    };
		  if (Hi(a)) Ii(b, e);else {
		    var f = a.alternate;
		    if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {
		      var g = b.lastRenderedState,
		        h = f(g, c);
		      e.hasEagerState = !0;
		      e.eagerState = h;
		      if (He(h, g)) {
		        var k = b.interleaved;
		        null === k ? (e.next = e, Xg(b)) : (e.next = k.next, k.next = e);
		        b.interleaved = e;
		        return;
		      }
		    } catch (l) {} finally {}
		    c = Yg(a, b, e, d);
		    null !== c && (e = L(), mh(c, a, d, e), Ji(c, b, d));
		  }
		}
		function Hi(a) {
		  var b = a.alternate;
		  return a === N || null !== b && b === N;
		}
		function Ii(a, b) {
		  Th = Sh = !0;
		  var c = a.pending;
		  null === c ? b.next = b : (b.next = c.next, c.next = b);
		  a.pending = b;
		}
		function Ji(a, b, c) {
		  if (0 !== (c & 4194240)) {
		    var d = b.lanes;
		    d &= a.pendingLanes;
		    c |= d;
		    b.lanes = c;
		    Cc(a, c);
		  }
		}
		var ai = {
		    readContext: Vg,
		    useCallback: Q,
		    useContext: Q,
		    useEffect: Q,
		    useImperativeHandle: Q,
		    useInsertionEffect: Q,
		    useLayoutEffect: Q,
		    useMemo: Q,
		    useReducer: Q,
		    useRef: Q,
		    useState: Q,
		    useDebugValue: Q,
		    useDeferredValue: Q,
		    useTransition: Q,
		    useMutableSource: Q,
		    useSyncExternalStore: Q,
		    useId: Q,
		    unstable_isNewReconciler: !1
		  },
		  Yh = {
		    readContext: Vg,
		    useCallback: function (a, b) {
		      ci().memoizedState = [a, void 0 === b ? null : b];
		      return a;
		    },
		    useContext: Vg,
		    useEffect: vi,
		    useImperativeHandle: function (a, b, c) {
		      c = null !== c && void 0 !== c ? c.concat([a]) : null;
		      return ti(4194308, 4, yi.bind(null, b, a), c);
		    },
		    useLayoutEffect: function (a, b) {
		      return ti(4194308, 4, a, b);
		    },
		    useInsertionEffect: function (a, b) {
		      return ti(4, 2, a, b);
		    },
		    useMemo: function (a, b) {
		      var c = ci();
		      b = void 0 === b ? null : b;
		      a = a();
		      c.memoizedState = [a, b];
		      return a;
		    },
		    useReducer: function (a, b, c) {
		      var d = ci();
		      b = void 0 !== c ? c(b) : b;
		      d.memoizedState = d.baseState = b;
		      a = {
		        pending: null,
		        interleaved: null,
		        lanes: 0,
		        dispatch: null,
		        lastRenderedReducer: a,
		        lastRenderedState: b
		      };
		      d.queue = a;
		      a = a.dispatch = Gi.bind(null, N, a);
		      return [d.memoizedState, a];
		    },
		    useRef: function (a) {
		      var b = ci();
		      a = {
		        current: a
		      };
		      return b.memoizedState = a;
		    },
		    useState: qi,
		    useDebugValue: Ai,
		    useDeferredValue: function (a) {
		      return ci().memoizedState = a;
		    },
		    useTransition: function () {
		      var a = qi(!1),
		        b = a[0];
		      a = Ei.bind(null, a[1]);
		      ci().memoizedState = a;
		      return [b, a];
		    },
		    useMutableSource: function () {},
		    useSyncExternalStore: function (a, b, c) {
		      var d = N,
		        e = ci();
		      if (I) {
		        if (void 0 === c) throw Error(p(407));
		        c = c();
		      } else {
		        c = b();
		        if (null === R) throw Error(p(349));
		        0 !== (Rh & 30) || ni(d, b, c);
		      }
		      e.memoizedState = c;
		      var f = {
		        value: c,
		        getSnapshot: b
		      };
		      e.queue = f;
		      vi(ki.bind(null, d, f, a), [a]);
		      d.flags |= 2048;
		      li(9, mi.bind(null, d, f, c, b), void 0, null);
		      return c;
		    },
		    useId: function () {
		      var a = ci(),
		        b = R.identifierPrefix;
		      if (I) {
		        var c = sg;
		        var d = rg;
		        c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
		        b = ":" + b + "R" + c;
		        c = Uh++;
		        0 < c && (b += "H" + c.toString(32));
		        b += ":";
		      } else c = Vh++, b = ":" + b + "r" + c.toString(32) + ":";
		      return a.memoizedState = b;
		    },
		    unstable_isNewReconciler: !1
		  },
		  Zh = {
		    readContext: Vg,
		    useCallback: Bi,
		    useContext: Vg,
		    useEffect: ji,
		    useImperativeHandle: zi,
		    useInsertionEffect: wi,
		    useLayoutEffect: xi,
		    useMemo: Ci,
		    useReducer: fi,
		    useRef: si,
		    useState: function () {
		      return fi(ei);
		    },
		    useDebugValue: Ai,
		    useDeferredValue: function (a) {
		      var b = di();
		      return Di(b, O.memoizedState, a);
		    },
		    useTransition: function () {
		      var a = fi(ei)[0],
		        b = di().memoizedState;
		      return [a, b];
		    },
		    useMutableSource: hi,
		    useSyncExternalStore: ii,
		    useId: Fi,
		    unstable_isNewReconciler: !1
		  },
		  $h = {
		    readContext: Vg,
		    useCallback: Bi,
		    useContext: Vg,
		    useEffect: ji,
		    useImperativeHandle: zi,
		    useInsertionEffect: wi,
		    useLayoutEffect: xi,
		    useMemo: Ci,
		    useReducer: gi,
		    useRef: si,
		    useState: function () {
		      return gi(ei);
		    },
		    useDebugValue: Ai,
		    useDeferredValue: function (a) {
		      var b = di();
		      return null === O ? b.memoizedState = a : Di(b, O.memoizedState, a);
		    },
		    useTransition: function () {
		      var a = gi(ei)[0],
		        b = di().memoizedState;
		      return [a, b];
		    },
		    useMutableSource: hi,
		    useSyncExternalStore: ii,
		    useId: Fi,
		    unstable_isNewReconciler: !1
		  };
		function Ki(a, b) {
		  try {
		    var c = "",
		      d = b;
		    do c += Pa(d), d = d.return; while (d);
		    var e = c;
		  } catch (f) {
		    e = "\nError generating stack: " + f.message + "\n" + f.stack;
		  }
		  return {
		    value: a,
		    source: b,
		    stack: e,
		    digest: null
		  };
		}
		function Li(a, b, c) {
		  return {
		    value: a,
		    source: null,
		    stack: null != c ? c : null,
		    digest: null != b ? b : null
		  };
		}
		function Mi(a, b) {
		  try {
		    console.error(b.value);
		  } catch (c) {
		    setTimeout(function () {
		      throw c;
		    });
		  }
		}
		var Ni = "function" === typeof WeakMap ? WeakMap : Map;
		function Oi(a, b, c) {
		  c = ch(-1, c);
		  c.tag = 3;
		  c.payload = {
		    element: null
		  };
		  var d = b.value;
		  c.callback = function () {
		    Pi || (Pi = !0, Qi = d);
		    Mi(a, b);
		  };
		  return c;
		}
		function Ri(a, b, c) {
		  c = ch(-1, c);
		  c.tag = 3;
		  var d = a.type.getDerivedStateFromError;
		  if ("function" === typeof d) {
		    var e = b.value;
		    c.payload = function () {
		      return d(e);
		    };
		    c.callback = function () {
		      Mi(a, b);
		    };
		  }
		  var f = a.stateNode;
		  null !== f && "function" === typeof f.componentDidCatch && (c.callback = function () {
		    Mi(a, b);
		    "function" !== typeof d && (null === Si ? Si = new Set([this]) : Si.add(this));
		    var c = b.stack;
		    this.componentDidCatch(b.value, {
		      componentStack: null !== c ? c : ""
		    });
		  });
		  return c;
		}
		function Ti(a, b, c) {
		  var d = a.pingCache;
		  if (null === d) {
		    d = a.pingCache = new Ni();
		    var e = new Set();
		    d.set(b, e);
		  } else e = d.get(b), void 0 === e && (e = new Set(), d.set(b, e));
		  e.has(c) || (e.add(c), a = Ui.bind(null, a, b, c), b.then(a, a));
		}
		function Vi(a) {
		  do {
		    var b;
		    if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? !0 : !1 : !0;
		    if (b) return a;
		    a = a.return;
		  } while (null !== a);
		  return null;
		}
		function Wi(a, b, c, d, e) {
		  if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = ch(-1, 1), b.tag = 2, dh(c, b, 1))), c.lanes |= 1), a;
		  a.flags |= 65536;
		  a.lanes = e;
		  return a;
		}
		var Xi = ua.ReactCurrentOwner,
		  Ug = !1;
		function Yi(a, b, c, d) {
		  b.child = null === a ? Ch(b, null, c, d) : Bh(b, a.child, c, d);
		}
		function Zi(a, b, c, d, e) {
		  c = c.render;
		  var f = b.ref;
		  Tg(b, e);
		  d = Xh(a, b, c, d, f, e);
		  c = bi();
		  if (null !== a && !Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $i(a, b, e);
		  I && c && vg(b);
		  b.flags |= 1;
		  Yi(a, b, d, e);
		  return b.child;
		}
		function aj(a, b, c, d, e) {
		  if (null === a) {
		    var f = c.type;
		    if ("function" === typeof f && !bj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, cj(a, b, f, d, e);
		    a = yh(c.type, null, d, b, b.mode, e);
		    a.ref = b.ref;
		    a.return = b;
		    return b.child = a;
		  }
		  f = a.child;
		  if (0 === (a.lanes & e)) {
		    var g = f.memoizedProps;
		    c = c.compare;
		    c = null !== c ? c : Ie;
		    if (c(g, d) && a.ref === b.ref) return $i(a, b, e);
		  }
		  b.flags |= 1;
		  a = wh(f, d);
		  a.ref = b.ref;
		  a.return = b;
		  return b.child = a;
		}
		function cj(a, b, c, d, e) {
		  if (null !== a) {
		    var f = a.memoizedProps;
		    if (Ie(f, d) && a.ref === b.ref) if (Ug = !1, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (Ug = !0);else return b.lanes = a.lanes, $i(a, b, e);
		  }
		  return dj(a, b, c, d, e);
		}
		function ej(a, b, c) {
		  var d = b.pendingProps,
		    e = d.children,
		    f = null !== a ? a.memoizedState : null;
		  if ("hidden" === d.mode) {
		    if (0 === (b.mode & 1)) b.memoizedState = {
		      baseLanes: 0,
		      cachePool: null,
		      transitions: null
		    }, G(fj, gj), gj |= c;else {
		      if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = {
		        baseLanes: a,
		        cachePool: null,
		        transitions: null
		      }, b.updateQueue = null, G(fj, gj), gj |= a, null;
		      b.memoizedState = {
		        baseLanes: 0,
		        cachePool: null,
		        transitions: null
		      };
		      d = null !== f ? f.baseLanes : c;
		      G(fj, gj);
		      gj |= d;
		    }
		  } else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G(fj, gj), gj |= d;
		  Yi(a, b, e, c);
		  return b.child;
		}
		function hj(a, b) {
		  var c = b.ref;
		  if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
		}
		function dj(a, b, c, d, e) {
		  var f = Zf(c) ? Xf : H.current;
		  f = Yf(b, f);
		  Tg(b, e);
		  c = Xh(a, b, c, d, f, e);
		  d = bi();
		  if (null !== a && !Ug) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, $i(a, b, e);
		  I && d && vg(b);
		  b.flags |= 1;
		  Yi(a, b, c, e);
		  return b.child;
		}
		function ij(a, b, c, d, e) {
		  if (Zf(c)) {
		    var f = !0;
		    cg(b);
		  } else f = !1;
		  Tg(b, e);
		  if (null === b.stateNode) jj(a, b), ph(b, c, d), rh(b, c, d, e), d = !0;else if (null === a) {
		    var g = b.stateNode,
		      h = b.memoizedProps;
		    g.props = h;
		    var k = g.context,
		      l = c.contextType;
		    "object" === typeof l && null !== l ? l = Vg(l) : (l = Zf(c) ? Xf : H.current, l = Yf(b, l));
		    var m = c.getDerivedStateFromProps,
		      q = "function" === typeof m || "function" === typeof g.getSnapshotBeforeUpdate;
		    q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k !== l) && qh(b, g, d, l);
		    $g = !1;
		    var r = b.memoizedState;
		    g.state = r;
		    gh(b, d, g, e);
		    k = b.memoizedState;
		    h !== d || r !== k || Wf.current || $g ? ("function" === typeof m && (kh(b, c, m, d), k = b.memoizedState), (h = $g || oh(b, c, h, d, r, k, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k), g.props = d, g.state = k, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = !1);
		  } else {
		    g = b.stateNode;
		    bh(a, b);
		    h = b.memoizedProps;
		    l = b.type === b.elementType ? h : Lg(b.type, h);
		    g.props = l;
		    q = b.pendingProps;
		    r = g.context;
		    k = c.contextType;
		    "object" === typeof k && null !== k ? k = Vg(k) : (k = Zf(c) ? Xf : H.current, k = Yf(b, k));
		    var y = c.getDerivedStateFromProps;
		    (m = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r !== k) && qh(b, g, d, k);
		    $g = !1;
		    r = b.memoizedState;
		    g.state = r;
		    gh(b, d, g, e);
		    var n = b.memoizedState;
		    h !== q || r !== n || Wf.current || $g ? ("function" === typeof y && (kh(b, c, y, d), n = b.memoizedState), (l = $g || oh(b, c, l, d, r, n, k) || !1) ? (m || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n, k), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n, k)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n), g.props = d, g.state = n, g.context = k, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r === a.memoizedState || (b.flags |= 1024), d = !1);
		  }
		  return kj(a, b, c, d, f, e);
		}
		function kj(a, b, c, d, e, f) {
		  hj(a, b);
		  var g = 0 !== (b.flags & 128);
		  if (!d && !g) return e && dg(b, c, !1), $i(a, b, f);
		  d = b.stateNode;
		  Xi.current = b;
		  var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
		  b.flags |= 1;
		  null !== a && g ? (b.child = Bh(b, a.child, null, f), b.child = Bh(b, null, h, f)) : Yi(a, b, h, f);
		  b.memoizedState = d.state;
		  e && dg(b, c, !0);
		  return b.child;
		}
		function lj(a) {
		  var b = a.stateNode;
		  b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, !1);
		  Ih(a, b.containerInfo);
		}
		function mj(a, b, c, d, e) {
		  Ig();
		  Jg(e);
		  b.flags |= 256;
		  Yi(a, b, c, d);
		  return b.child;
		}
		var nj = {
		  dehydrated: null,
		  treeContext: null,
		  retryLane: 0
		};
		function oj(a) {
		  return {
		    baseLanes: a,
		    cachePool: null,
		    transitions: null
		  };
		}
		function pj(a, b, c) {
		  var d = b.pendingProps,
		    e = M.current,
		    f = !1,
		    g = 0 !== (b.flags & 128),
		    h;
		  (h = g) || (h = null !== a && null === a.memoizedState ? !1 : 0 !== (e & 2));
		  if (h) f = !0, b.flags &= -129;else if (null === a || null !== a.memoizedState) e |= 1;
		  G(M, e & 1);
		  if (null === a) {
		    Eg(b);
		    a = b.memoizedState;
		    if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
		    g = d.children;
		    a = d.fallback;
		    return f ? (d = b.mode, f = b.child, g = {
		      mode: "hidden",
		      children: g
		    }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = qj(g, d, 0, null), a = Ah(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = oj(c), b.memoizedState = nj, a) : rj(b, g);
		  }
		  e = a.memoizedState;
		  if (null !== e && (h = e.dehydrated, null !== h)) return sj(a, b, g, d, h, e, c);
		  if (f) {
		    f = d.fallback;
		    g = b.mode;
		    e = a.child;
		    h = e.sibling;
		    var k = {
		      mode: "hidden",
		      children: d.children
		    };
		    0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k, b.deletions = null) : (d = wh(e, k), d.subtreeFlags = e.subtreeFlags & 14680064);
		    null !== h ? f = wh(h, f) : (f = Ah(f, g, c, null), f.flags |= 2);
		    f.return = b;
		    d.return = b;
		    d.sibling = f;
		    b.child = d;
		    d = f;
		    f = b.child;
		    g = a.child.memoizedState;
		    g = null === g ? oj(c) : {
		      baseLanes: g.baseLanes | c,
		      cachePool: null,
		      transitions: g.transitions
		    };
		    f.memoizedState = g;
		    f.childLanes = a.childLanes & ~c;
		    b.memoizedState = nj;
		    return d;
		  }
		  f = a.child;
		  a = f.sibling;
		  d = wh(f, {
		    mode: "visible",
		    children: d.children
		  });
		  0 === (b.mode & 1) && (d.lanes = c);
		  d.return = b;
		  d.sibling = null;
		  null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));
		  b.child = d;
		  b.memoizedState = null;
		  return d;
		}
		function rj(a, b) {
		  b = qj({
		    mode: "visible",
		    children: b
		  }, a.mode, 0, null);
		  b.return = a;
		  return a.child = b;
		}
		function tj(a, b, c, d) {
		  null !== d && Jg(d);
		  Bh(b, a.child, null, c);
		  a = rj(b, b.pendingProps.children);
		  a.flags |= 2;
		  b.memoizedState = null;
		  return a;
		}
		function sj(a, b, c, d, e, f, g) {
		  if (c) {
		    if (b.flags & 256) return b.flags &= -257, d = Li(Error(p(422))), tj(a, b, g, d);
		    if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
		    f = d.fallback;
		    e = b.mode;
		    d = qj({
		      mode: "visible",
		      children: d.children
		    }, e, 0, null);
		    f = Ah(f, e, g, null);
		    f.flags |= 2;
		    d.return = b;
		    f.return = b;
		    d.sibling = f;
		    b.child = d;
		    0 !== (b.mode & 1) && Bh(b, a.child, null, g);
		    b.child.memoizedState = oj(g);
		    b.memoizedState = nj;
		    return f;
		  }
		  if (0 === (b.mode & 1)) return tj(a, b, g, null);
		  if ("$!" === e.data) {
		    d = e.nextSibling && e.nextSibling.dataset;
		    if (d) var h = d.dgst;
		    d = h;
		    f = Error(p(419));
		    d = Li(f, d, void 0);
		    return tj(a, b, g, d);
		  }
		  h = 0 !== (g & a.childLanes);
		  if (Ug || h) {
		    d = R;
		    if (null !== d) {
		      switch (g & -g) {
		        case 4:
		          e = 2;
		          break;
		        case 16:
		          e = 8;
		          break;
		        case 64:
		        case 128:
		        case 256:
		        case 512:
		        case 1024:
		        case 2048:
		        case 4096:
		        case 8192:
		        case 16384:
		        case 32768:
		        case 65536:
		        case 131072:
		        case 262144:
		        case 524288:
		        case 1048576:
		        case 2097152:
		        case 4194304:
		        case 8388608:
		        case 16777216:
		        case 33554432:
		        case 67108864:
		          e = 32;
		          break;
		        case 536870912:
		          e = 268435456;
		          break;
		        default:
		          e = 0;
		      }
		      e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
		      0 !== e && e !== f.retryLane && (f.retryLane = e, Zg(a, e), mh(d, a, e, -1));
		    }
		    uj();
		    d = Li(Error(p(421)));
		    return tj(a, b, g, d);
		  }
		  if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = vj.bind(null, a), e._reactRetry = b, null;
		  a = f.treeContext;
		  yg = Lf(e.nextSibling);
		  xg = b;
		  I = !0;
		  zg = null;
		  null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);
		  b = rj(b, d.children);
		  b.flags |= 4096;
		  return b;
		}
		function wj(a, b, c) {
		  a.lanes |= b;
		  var d = a.alternate;
		  null !== d && (d.lanes |= b);
		  Sg(a.return, b, c);
		}
		function xj(a, b, c, d, e) {
		  var f = a.memoizedState;
		  null === f ? a.memoizedState = {
		    isBackwards: b,
		    rendering: null,
		    renderingStartTime: 0,
		    last: d,
		    tail: c,
		    tailMode: e
		  } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
		}
		function yj(a, b, c) {
		  var d = b.pendingProps,
		    e = d.revealOrder,
		    f = d.tail;
		  Yi(a, b, d.children, c);
		  d = M.current;
		  if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;else {
		    if (null !== a && 0 !== (a.flags & 128)) a: for (a = b.child; null !== a;) {
		      if (13 === a.tag) null !== a.memoizedState && wj(a, c, b);else if (19 === a.tag) wj(a, c, b);else if (null !== a.child) {
		        a.child.return = a;
		        a = a.child;
		        continue;
		      }
		      if (a === b) break a;
		      for (; null === a.sibling;) {
		        if (null === a.return || a.return === b) break a;
		        a = a.return;
		      }
		      a.sibling.return = a.return;
		      a = a.sibling;
		    }
		    d &= 1;
		  }
		  G(M, d);
		  if (0 === (b.mode & 1)) b.memoizedState = null;else switch (e) {
		    case "forwards":
		      c = b.child;
		      for (e = null; null !== c;) a = c.alternate, null !== a && null === Mh(a) && (e = c), c = c.sibling;
		      c = e;
		      null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
		      xj(b, !1, e, c, f);
		      break;
		    case "backwards":
		      c = null;
		      e = b.child;
		      for (b.child = null; null !== e;) {
		        a = e.alternate;
		        if (null !== a && null === Mh(a)) {
		          b.child = e;
		          break;
		        }
		        a = e.sibling;
		        e.sibling = c;
		        c = e;
		        e = a;
		      }
		      xj(b, !0, c, null, f);
		      break;
		    case "together":
		      xj(b, !1, null, null, void 0);
		      break;
		    default:
		      b.memoizedState = null;
		  }
		  return b.child;
		}
		function jj(a, b) {
		  0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
		}
		function $i(a, b, c) {
		  null !== a && (b.dependencies = a.dependencies);
		  hh |= b.lanes;
		  if (0 === (c & b.childLanes)) return null;
		  if (null !== a && b.child !== a.child) throw Error(p(153));
		  if (null !== b.child) {
		    a = b.child;
		    c = wh(a, a.pendingProps);
		    b.child = c;
		    for (c.return = b; null !== a.sibling;) a = a.sibling, c = c.sibling = wh(a, a.pendingProps), c.return = b;
		    c.sibling = null;
		  }
		  return b.child;
		}
		function zj(a, b, c) {
		  switch (b.tag) {
		    case 3:
		      lj(b);
		      Ig();
		      break;
		    case 5:
		      Kh(b);
		      break;
		    case 1:
		      Zf(b.type) && cg(b);
		      break;
		    case 4:
		      Ih(b, b.stateNode.containerInfo);
		      break;
		    case 10:
		      var d = b.type._context,
		        e = b.memoizedProps.value;
		      G(Mg, d._currentValue);
		      d._currentValue = e;
		      break;
		    case 13:
		      d = b.memoizedState;
		      if (null !== d) {
		        if (null !== d.dehydrated) return G(M, M.current & 1), b.flags |= 128, null;
		        if (0 !== (c & b.child.childLanes)) return pj(a, b, c);
		        G(M, M.current & 1);
		        a = $i(a, b, c);
		        return null !== a ? a.sibling : null;
		      }
		      G(M, M.current & 1);
		      break;
		    case 19:
		      d = 0 !== (c & b.childLanes);
		      if (0 !== (a.flags & 128)) {
		        if (d) return yj(a, b, c);
		        b.flags |= 128;
		      }
		      e = b.memoizedState;
		      null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
		      G(M, M.current);
		      if (d) break;else return null;
		    case 22:
		    case 23:
		      return b.lanes = 0, ej(a, b, c);
		  }
		  return $i(a, b, c);
		}
		var Aj, Bj, Cj, Dj;
		Aj = function (a, b) {
		  for (var c = b.child; null !== c;) {
		    if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);else if (4 !== c.tag && null !== c.child) {
		      c.child.return = c;
		      c = c.child;
		      continue;
		    }
		    if (c === b) break;
		    for (; null === c.sibling;) {
		      if (null === c.return || c.return === b) return;
		      c = c.return;
		    }
		    c.sibling.return = c.return;
		    c = c.sibling;
		  }
		};
		Bj = function () {};
		Cj = function (a, b, c, d) {
		  var e = a.memoizedProps;
		  if (e !== d) {
		    a = b.stateNode;
		    Hh(Eh.current);
		    var f = null;
		    switch (c) {
		      case "input":
		        e = Ya(a, e);
		        d = Ya(a, d);
		        f = [];
		        break;
		      case "select":
		        e = A({}, e, {
		          value: void 0
		        });
		        d = A({}, d, {
		          value: void 0
		        });
		        f = [];
		        break;
		      case "textarea":
		        e = gb(a, e);
		        d = gb(a, d);
		        f = [];
		        break;
		      default:
		        "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
		    }
		    ub(c, d);
		    var g;
		    c = null;
		    for (l in e) if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
		      var h = e[l];
		      for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
		    } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
		    for (l in d) {
		      var k = d[l];
		      h = null != e ? e[l] : void 0;
		      if (d.hasOwnProperty(l) && k !== h && (null != k || null != h)) if ("style" === l) {
		        if (h) {
		          for (g in h) !h.hasOwnProperty(g) || k && k.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
		          for (g in k) k.hasOwnProperty(g) && h[g] !== k[g] && (c || (c = {}), c[g] = k[g]);
		        } else c || (f || (f = []), f.push(l, c)), c = k;
		      } else "dangerouslySetInnerHTML" === l ? (k = k ? k.__html : void 0, h = h ? h.__html : void 0, null != k && h !== k && (f = f || []).push(l, k)) : "children" === l ? "string" !== typeof k && "number" !== typeof k || (f = f || []).push(l, "" + k) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ea.hasOwnProperty(l) ? (null != k && "onScroll" === l && D("scroll", a), f || h === k || (f = [])) : (f = f || []).push(l, k));
		    }
		    c && (f = f || []).push("style", c);
		    var l = f;
		    if (b.updateQueue = l) b.flags |= 4;
		  }
		};
		Dj = function (a, b, c, d) {
		  c !== d && (b.flags |= 4);
		};
		function Ej(a, b) {
		  if (!I) switch (a.tailMode) {
		    case "hidden":
		      b = a.tail;
		      for (var c = null; null !== b;) null !== b.alternate && (c = b), b = b.sibling;
		      null === c ? a.tail = null : c.sibling = null;
		      break;
		    case "collapsed":
		      c = a.tail;
		      for (var d = null; null !== c;) null !== c.alternate && (d = c), c = c.sibling;
		      null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
		  }
		}
		function S(a) {
		  var b = null !== a.alternate && a.alternate.child === a.child,
		    c = 0,
		    d = 0;
		  if (b) for (var e = a.child; null !== e;) c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;else for (e = a.child; null !== e;) c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
		  a.subtreeFlags |= d;
		  a.childLanes = c;
		  return b;
		}
		function Fj(a, b, c) {
		  var d = b.pendingProps;
		  wg(b);
		  switch (b.tag) {
		    case 2:
		    case 16:
		    case 15:
		    case 0:
		    case 11:
		    case 7:
		    case 8:
		    case 12:
		    case 9:
		    case 14:
		      return S(b), null;
		    case 1:
		      return Zf(b.type) && $f(), S(b), null;
		    case 3:
		      d = b.stateNode;
		      Jh();
		      E(Wf);
		      E(H);
		      Oh();
		      d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
		      if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Gj(zg), zg = null));
		      Bj(a, b);
		      S(b);
		      return null;
		    case 5:
		      Lh(b);
		      var e = Hh(Gh.current);
		      c = b.type;
		      if (null !== a && null != b.stateNode) Cj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);else {
		        if (!d) {
		          if (null === b.stateNode) throw Error(p(166));
		          S(b);
		          return null;
		        }
		        a = Hh(Eh.current);
		        if (Gg(b)) {
		          d = b.stateNode;
		          c = b.type;
		          var f = b.memoizedProps;
		          d[Of] = b;
		          d[Pf] = f;
		          a = 0 !== (b.mode & 1);
		          switch (c) {
		            case "dialog":
		              D("cancel", d);
		              D("close", d);
		              break;
		            case "iframe":
		            case "object":
		            case "embed":
		              D("load", d);
		              break;
		            case "video":
		            case "audio":
		              for (e = 0; e < lf.length; e++) D(lf[e], d);
		              break;
		            case "source":
		              D("error", d);
		              break;
		            case "img":
		            case "image":
		            case "link":
		              D("error", d);
		              D("load", d);
		              break;
		            case "details":
		              D("toggle", d);
		              break;
		            case "input":
		              Za(d, f);
		              D("invalid", d);
		              break;
		            case "select":
		              d._wrapperState = {
		                wasMultiple: !!f.multiple
		              };
		              D("invalid", d);
		              break;
		            case "textarea":
		              hb(d, f), D("invalid", d);
		          }
		          ub(c, f);
		          e = null;
		          for (var g in f) if (f.hasOwnProperty(g)) {
		            var h = f[g];
		            "children" === g ? "string" === typeof h ? d.textContent !== h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (!0 !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D("scroll", d);
		          }
		          switch (c) {
		            case "input":
		              Va(d);
		              db(d, f, !0);
		              break;
		            case "textarea":
		              Va(d);
		              jb(d);
		              break;
		            case "select":
		            case "option":
		              break;
		            default:
		              "function" === typeof f.onClick && (d.onclick = Bf);
		          }
		          d = e;
		          b.updateQueue = d;
		          null !== d && (b.flags |= 4);
		        } else {
		          g = 9 === e.nodeType ? e : e.ownerDocument;
		          "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
		          "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script>\x3c/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, {
		            is: d.is
		          }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = !0 : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
		          a[Of] = b;
		          a[Pf] = d;
		          Aj(a, b, !1, !1);
		          b.stateNode = a;
		          a: {
		            g = vb(c, d);
		            switch (c) {
		              case "dialog":
		                D("cancel", a);
		                D("close", a);
		                e = d;
		                break;
		              case "iframe":
		              case "object":
		              case "embed":
		                D("load", a);
		                e = d;
		                break;
		              case "video":
		              case "audio":
		                for (e = 0; e < lf.length; e++) D(lf[e], a);
		                e = d;
		                break;
		              case "source":
		                D("error", a);
		                e = d;
		                break;
		              case "img":
		              case "image":
		              case "link":
		                D("error", a);
		                D("load", a);
		                e = d;
		                break;
		              case "details":
		                D("toggle", a);
		                e = d;
		                break;
		              case "input":
		                Za(a, d);
		                e = Ya(a, d);
		                D("invalid", a);
		                break;
		              case "option":
		                e = d;
		                break;
		              case "select":
		                a._wrapperState = {
		                  wasMultiple: !!d.multiple
		                };
		                e = A({}, d, {
		                  value: void 0
		                });
		                D("invalid", a);
		                break;
		              case "textarea":
		                hb(a, d);
		                e = gb(a, d);
		                D("invalid", a);
		                break;
		              default:
		                e = d;
		            }
		            ub(c, e);
		            h = e;
		            for (f in h) if (h.hasOwnProperty(f)) {
		              var k = h[f];
		              "style" === f ? sb(a, k) : "dangerouslySetInnerHTML" === f ? (k = k ? k.__html : void 0, null != k && nb(a, k)) : "children" === f ? "string" === typeof k ? ("textarea" !== c || "" !== k) && ob(a, k) : "number" === typeof k && ob(a, "" + k) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k && "onScroll" === f && D("scroll", a) : null != k && ta(a, f, k, g));
		            }
		            switch (c) {
		              case "input":
		                Va(a);
		                db(a, d, !1);
		                break;
		              case "textarea":
		                Va(a);
		                jb(a);
		                break;
		              case "option":
		                null != d.value && a.setAttribute("value", "" + Sa(d.value));
		                break;
		              case "select":
		                a.multiple = !!d.multiple;
		                f = d.value;
		                null != f ? fb(a, !!d.multiple, f, !1) : null != d.defaultValue && fb(a, !!d.multiple, d.defaultValue, !0);
		                break;
		              default:
		                "function" === typeof e.onClick && (a.onclick = Bf);
		            }
		            switch (c) {
		              case "button":
		              case "input":
		              case "select":
		              case "textarea":
		                d = !!d.autoFocus;
		                break a;
		              case "img":
		                d = !0;
		                break a;
		              default:
		                d = !1;
		            }
		          }
		          d && (b.flags |= 4);
		        }
		        null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
		      }
		      S(b);
		      return null;
		    case 6:
		      if (a && null != b.stateNode) Dj(a, b, a.memoizedProps, d);else {
		        if ("string" !== typeof d && null === b.stateNode) throw Error(p(166));
		        c = Hh(Gh.current);
		        Hh(Eh.current);
		        if (Gg(b)) {
		          d = b.stateNode;
		          c = b.memoizedProps;
		          d[Of] = b;
		          if (f = d.nodeValue !== c) if (a = xg, null !== a) switch (a.tag) {
		            case 3:
		              Af(d.nodeValue, c, 0 !== (a.mode & 1));
		              break;
		            case 5:
		              !0 !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
		          }
		          f && (b.flags |= 4);
		        } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;
		      }
		      S(b);
		      return null;
		    case 13:
		      E(M);
		      d = b.memoizedState;
		      if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
		        if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f = !1;else if (f = Gg(b), null !== d && null !== d.dehydrated) {
		          if (null === a) {
		            if (!f) throw Error(p(318));
		            f = b.memoizedState;
		            f = null !== f ? f.dehydrated : null;
		            if (!f) throw Error(p(317));
		            f[Of] = b;
		          } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
		          S(b);
		          f = !1;
		        } else null !== zg && (Gj(zg), zg = null), f = !0;
		        if (!f) return b.flags & 65536 ? b : null;
		      }
		      if (0 !== (b.flags & 128)) return b.lanes = c, b;
		      d = null !== d;
		      d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (M.current & 1) ? 0 === T && (T = 3) : uj()));
		      null !== b.updateQueue && (b.flags |= 4);
		      S(b);
		      return null;
		    case 4:
		      return Jh(), Bj(a, b), null === a && sf(b.stateNode.containerInfo), S(b), null;
		    case 10:
		      return Rg(b.type._context), S(b), null;
		    case 17:
		      return Zf(b.type) && $f(), S(b), null;
		    case 19:
		      E(M);
		      f = b.memoizedState;
		      if (null === f) return S(b), null;
		      d = 0 !== (b.flags & 128);
		      g = f.rendering;
		      if (null === g) {
		        if (d) Ej(f, !1);else {
		          if (0 !== T || null !== a && 0 !== (a.flags & 128)) for (a = b.child; null !== a;) {
		            g = Mh(a);
		            if (null !== g) {
		              b.flags |= 128;
		              Ej(f, !1);
		              d = g.updateQueue;
		              null !== d && (b.updateQueue = d, b.flags |= 4);
		              b.subtreeFlags = 0;
		              d = c;
		              for (c = b.child; null !== c;) f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : {
		                lanes: a.lanes,
		                firstContext: a.firstContext
		              }), c = c.sibling;
		              G(M, M.current & 1 | 2);
		              return b.child;
		            }
		            a = a.sibling;
		          }
		          null !== f.tail && B() > Hj && (b.flags |= 128, d = !0, Ej(f, !1), b.lanes = 4194304);
		        }
		      } else {
		        if (!d) if (a = Mh(g), null !== a) {
		          if (b.flags |= 128, d = !0, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Ej(f, !0), null === f.tail && "hidden" === f.tailMode && !g.alternate && !I) return S(b), null;
		        } else 2 * B() - f.renderingStartTime > Hj && 1073741824 !== c && (b.flags |= 128, d = !0, Ej(f, !1), b.lanes = 4194304);
		        f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);
		      }
		      if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B(), b.sibling = null, c = M.current, G(M, d ? c & 1 | 2 : c & 1), b;
		      S(b);
		      return null;
		    case 22:
		    case 23:
		      return Ij(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (gj & 1073741824) && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;
		    case 24:
		      return null;
		    case 25:
		      return null;
		  }
		  throw Error(p(156, b.tag));
		}
		function Jj(a, b) {
		  wg(b);
		  switch (b.tag) {
		    case 1:
		      return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
		    case 3:
		      return Jh(), E(Wf), E(H), Oh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
		    case 5:
		      return Lh(b), null;
		    case 13:
		      E(M);
		      a = b.memoizedState;
		      if (null !== a && null !== a.dehydrated) {
		        if (null === b.alternate) throw Error(p(340));
		        Ig();
		      }
		      a = b.flags;
		      return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
		    case 19:
		      return E(M), null;
		    case 4:
		      return Jh(), null;
		    case 10:
		      return Rg(b.type._context), null;
		    case 22:
		    case 23:
		      return Ij(), null;
		    case 24:
		      return null;
		    default:
		      return null;
		  }
		}
		var Kj = !1,
		  U = !1,
		  Lj = "function" === typeof WeakSet ? WeakSet : Set,
		  V = null;
		function Mj(a, b) {
		  var c = a.ref;
		  if (null !== c) if ("function" === typeof c) try {
		    c(null);
		  } catch (d) {
		    W(a, b, d);
		  } else c.current = null;
		}
		function Nj(a, b, c) {
		  try {
		    c();
		  } catch (d) {
		    W(a, b, d);
		  }
		}
		var Oj = !1;
		function Pj(a, b) {
		  Cf = dd;
		  a = Me();
		  if (Ne(a)) {
		    if ("selectionStart" in a) var c = {
		      start: a.selectionStart,
		      end: a.selectionEnd
		    };else a: {
		      c = (c = a.ownerDocument) && c.defaultView || window;
		      var d = c.getSelection && c.getSelection();
		      if (d && 0 !== d.rangeCount) {
		        c = d.anchorNode;
		        var e = d.anchorOffset,
		          f = d.focusNode;
		        d = d.focusOffset;
		        try {
		          c.nodeType, f.nodeType;
		        } catch (F) {
		          c = null;
		          break a;
		        }
		        var g = 0,
		          h = -1,
		          k = -1,
		          l = 0,
		          m = 0,
		          q = a,
		          r = null;
		        b: for (;;) {
		          for (var y;;) {
		            q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);
		            q !== f || 0 !== d && 3 !== q.nodeType || (k = g + d);
		            3 === q.nodeType && (g += q.nodeValue.length);
		            if (null === (y = q.firstChild)) break;
		            r = q;
		            q = y;
		          }
		          for (;;) {
		            if (q === a) break b;
		            r === c && ++l === e && (h = g);
		            r === f && ++m === d && (k = g);
		            if (null !== (y = q.nextSibling)) break;
		            q = r;
		            r = q.parentNode;
		          }
		          q = y;
		        }
		        c = -1 === h || -1 === k ? null : {
		          start: h,
		          end: k
		        };
		      } else c = null;
		    }
		    c = c || {
		      start: 0,
		      end: 0
		    };
		  } else c = null;
		  Df = {
		    focusedElem: a,
		    selectionRange: c
		  };
		  dd = !1;
		  for (V = b; null !== V;) if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, V = a;else for (; null !== V;) {
		    b = V;
		    try {
		      var n = b.alternate;
		      if (0 !== (b.flags & 1024)) switch (b.tag) {
		        case 0:
		        case 11:
		        case 15:
		          break;
		        case 1:
		          if (null !== n) {
		            var t = n.memoizedProps,
		              J = n.memoizedState,
		              x = b.stateNode,
		              w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t : Lg(b.type, t), J);
		            x.__reactInternalSnapshotBeforeUpdate = w;
		          }
		          break;
		        case 3:
		          var u = b.stateNode.containerInfo;
		          1 === u.nodeType ? u.textContent = "" : 9 === u.nodeType && u.documentElement && u.removeChild(u.documentElement);
		          break;
		        case 5:
		        case 6:
		        case 4:
		        case 17:
		          break;
		        default:
		          throw Error(p(163));
		      }
		    } catch (F) {
		      W(b, b.return, F);
		    }
		    a = b.sibling;
		    if (null !== a) {
		      a.return = b.return;
		      V = a;
		      break;
		    }
		    V = b.return;
		  }
		  n = Oj;
		  Oj = !1;
		  return n;
		}
		function Qj(a, b, c) {
		  var d = b.updateQueue;
		  d = null !== d ? d.lastEffect : null;
		  if (null !== d) {
		    var e = d = d.next;
		    do {
		      if ((e.tag & a) === a) {
		        var f = e.destroy;
		        e.destroy = void 0;
		        void 0 !== f && Nj(b, c, f);
		      }
		      e = e.next;
		    } while (e !== d);
		  }
		}
		function Rj(a, b) {
		  b = b.updateQueue;
		  b = null !== b ? b.lastEffect : null;
		  if (null !== b) {
		    var c = b = b.next;
		    do {
		      if ((c.tag & a) === a) {
		        var d = c.create;
		        c.destroy = d();
		      }
		      c = c.next;
		    } while (c !== b);
		  }
		}
		function Sj(a) {
		  var b = a.ref;
		  if (null !== b) {
		    var c = a.stateNode;
		    switch (a.tag) {
		      case 5:
		        a = c;
		        break;
		      default:
		        a = c;
		    }
		    "function" === typeof b ? b(a) : b.current = a;
		  }
		}
		function Tj(a) {
		  var b = a.alternate;
		  null !== b && (a.alternate = null, Tj(b));
		  a.child = null;
		  a.deletions = null;
		  a.sibling = null;
		  5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));
		  a.stateNode = null;
		  a.return = null;
		  a.dependencies = null;
		  a.memoizedProps = null;
		  a.memoizedState = null;
		  a.pendingProps = null;
		  a.stateNode = null;
		  a.updateQueue = null;
		}
		function Uj(a) {
		  return 5 === a.tag || 3 === a.tag || 4 === a.tag;
		}
		function Vj(a) {
		  a: for (;;) {
		    for (; null === a.sibling;) {
		      if (null === a.return || Uj(a.return)) return null;
		      a = a.return;
		    }
		    a.sibling.return = a.return;
		    for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag;) {
		      if (a.flags & 2) continue a;
		      if (null === a.child || 4 === a.tag) continue a;else a.child.return = a, a = a.child;
		    }
		    if (!(a.flags & 2)) return a.stateNode;
		  }
		}
		function Wj(a, b, c) {
		  var d = a.tag;
		  if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b, c), a = a.sibling; null !== a;) Wj(a, b, c), a = a.sibling;
		}
		function Xj(a, b, c) {
		  var d = a.tag;
		  if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);else if (4 !== d && (a = a.child, null !== a)) for (Xj(a, b, c), a = a.sibling; null !== a;) Xj(a, b, c), a = a.sibling;
		}
		var X = null,
		  Yj = !1;
		function Zj(a, b, c) {
		  for (c = c.child; null !== c;) ak(a, b, c), c = c.sibling;
		}
		function ak(a, b, c) {
		  if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
		    lc.onCommitFiberUnmount(kc, c);
		  } catch (h) {}
		  switch (c.tag) {
		    case 5:
		      U || Mj(c, b);
		    case 6:
		      var d = X,
		        e = Yj;
		      X = null;
		      Zj(a, b, c);
		      X = d;
		      Yj = e;
		      null !== X && (Yj ? (a = X, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X.removeChild(c.stateNode));
		      break;
		    case 18:
		      null !== X && (Yj ? (a = X, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X, c.stateNode));
		      break;
		    case 4:
		      d = X;
		      e = Yj;
		      X = c.stateNode.containerInfo;
		      Yj = !0;
		      Zj(a, b, c);
		      X = d;
		      Yj = e;
		      break;
		    case 0:
		    case 11:
		    case 14:
		    case 15:
		      if (!U && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
		        e = d = d.next;
		        do {
		          var f = e,
		            g = f.destroy;
		          f = f.tag;
		          void 0 !== g && (0 !== (f & 2) ? Nj(c, b, g) : 0 !== (f & 4) && Nj(c, b, g));
		          e = e.next;
		        } while (e !== d);
		      }
		      Zj(a, b, c);
		      break;
		    case 1:
		      if (!U && (Mj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
		        d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
		      } catch (h) {
		        W(c, b, h);
		      }
		      Zj(a, b, c);
		      break;
		    case 21:
		      Zj(a, b, c);
		      break;
		    case 22:
		      c.mode & 1 ? (U = (d = U) || null !== c.memoizedState, Zj(a, b, c), U = d) : Zj(a, b, c);
		      break;
		    default:
		      Zj(a, b, c);
		  }
		}
		function bk(a) {
		  var b = a.updateQueue;
		  if (null !== b) {
		    a.updateQueue = null;
		    var c = a.stateNode;
		    null === c && (c = a.stateNode = new Lj());
		    b.forEach(function (b) {
		      var d = ck.bind(null, a, b);
		      c.has(b) || (c.add(b), b.then(d, d));
		    });
		  }
		}
		function dk(a, b) {
		  var c = b.deletions;
		  if (null !== c) for (var d = 0; d < c.length; d++) {
		    var e = c[d];
		    try {
		      var f = a,
		        g = b,
		        h = g;
		      a: for (; null !== h;) {
		        switch (h.tag) {
		          case 5:
		            X = h.stateNode;
		            Yj = !1;
		            break a;
		          case 3:
		            X = h.stateNode.containerInfo;
		            Yj = !0;
		            break a;
		          case 4:
		            X = h.stateNode.containerInfo;
		            Yj = !0;
		            break a;
		        }
		        h = h.return;
		      }
		      if (null === X) throw Error(p(160));
		      ak(f, g, e);
		      X = null;
		      Yj = !1;
		      var k = e.alternate;
		      null !== k && (k.return = null);
		      e.return = null;
		    } catch (l) {
		      W(e, b, l);
		    }
		  }
		  if (b.subtreeFlags & 12854) for (b = b.child; null !== b;) ek(b, a), b = b.sibling;
		}
		function ek(a, b) {
		  var c = a.alternate,
		    d = a.flags;
		  switch (a.tag) {
		    case 0:
		    case 11:
		    case 14:
		    case 15:
		      dk(b, a);
		      fk(a);
		      if (d & 4) {
		        try {
		          Qj(3, a, a.return), Rj(3, a);
		        } catch (t) {
		          W(a, a.return, t);
		        }
		        try {
		          Qj(5, a, a.return);
		        } catch (t) {
		          W(a, a.return, t);
		        }
		      }
		      break;
		    case 1:
		      dk(b, a);
		      fk(a);
		      d & 512 && null !== c && Mj(c, c.return);
		      break;
		    case 5:
		      dk(b, a);
		      fk(a);
		      d & 512 && null !== c && Mj(c, c.return);
		      if (a.flags & 32) {
		        var e = a.stateNode;
		        try {
		          ob(e, "");
		        } catch (t) {
		          W(a, a.return, t);
		        }
		      }
		      if (d & 4 && (e = a.stateNode, null != e)) {
		        var f = a.memoizedProps,
		          g = null !== c ? c.memoizedProps : f,
		          h = a.type,
		          k = a.updateQueue;
		        a.updateQueue = null;
		        if (null !== k) try {
		          "input" === h && "radio" === f.type && null != f.name && ab(e, f);
		          vb(h, g);
		          var l = vb(h, f);
		          for (g = 0; g < k.length; g += 2) {
		            var m = k[g],
		              q = k[g + 1];
		            "style" === m ? sb(e, q) : "dangerouslySetInnerHTML" === m ? nb(e, q) : "children" === m ? ob(e, q) : ta(e, m, q, l);
		          }
		          switch (h) {
		            case "input":
		              bb(e, f);
		              break;
		            case "textarea":
		              ib(e, f);
		              break;
		            case "select":
		              var r = e._wrapperState.wasMultiple;
		              e._wrapperState.wasMultiple = !!f.multiple;
		              var y = f.value;
		              null != y ? fb(e, !!f.multiple, y, !1) : r !== !!f.multiple && (null != f.defaultValue ? fb(e, !!f.multiple, f.defaultValue, !0) : fb(e, !!f.multiple, f.multiple ? [] : "", !1));
		          }
		          e[Pf] = f;
		        } catch (t) {
		          W(a, a.return, t);
		        }
		      }
		      break;
		    case 6:
		      dk(b, a);
		      fk(a);
		      if (d & 4) {
		        if (null === a.stateNode) throw Error(p(162));
		        e = a.stateNode;
		        f = a.memoizedProps;
		        try {
		          e.nodeValue = f;
		        } catch (t) {
		          W(a, a.return, t);
		        }
		      }
		      break;
		    case 3:
		      dk(b, a);
		      fk(a);
		      if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
		        bd(b.containerInfo);
		      } catch (t) {
		        W(a, a.return, t);
		      }
		      break;
		    case 4:
		      dk(b, a);
		      fk(a);
		      break;
		    case 13:
		      dk(b, a);
		      fk(a);
		      e = a.child;
		      e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (gk = B()));
		      d & 4 && bk(a);
		      break;
		    case 22:
		      m = null !== c && null !== c.memoizedState;
		      a.mode & 1 ? (U = (l = U) || m, dk(b, a), U = l) : dk(b, a);
		      fk(a);
		      if (d & 8192) {
		        l = null !== a.memoizedState;
		        if ((a.stateNode.isHidden = l) && !m && 0 !== (a.mode & 1)) for (V = a, m = a.child; null !== m;) {
		          for (q = V = m; null !== V;) {
		            r = V;
		            y = r.child;
		            switch (r.tag) {
		              case 0:
		              case 11:
		              case 14:
		              case 15:
		                Qj(4, r, r.return);
		                break;
		              case 1:
		                Mj(r, r.return);
		                var n = r.stateNode;
		                if ("function" === typeof n.componentWillUnmount) {
		                  d = r;
		                  c = r.return;
		                  try {
		                    b = d, n.props = b.memoizedProps, n.state = b.memoizedState, n.componentWillUnmount();
		                  } catch (t) {
		                    W(d, c, t);
		                  }
		                }
		                break;
		              case 5:
		                Mj(r, r.return);
		                break;
		              case 22:
		                if (null !== r.memoizedState) {
		                  hk(q);
		                  continue;
		                }
		            }
		            null !== y ? (y.return = r, V = y) : hk(q);
		          }
		          m = m.sibling;
		        }
		        a: for (m = null, q = a;;) {
		          if (5 === q.tag) {
		            if (null === m) {
		              m = q;
		              try {
		                e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k = q.memoizedProps.style, g = void 0 !== k && null !== k && k.hasOwnProperty("display") ? k.display : null, h.style.display = rb("display", g));
		              } catch (t) {
		                W(a, a.return, t);
		              }
		            }
		          } else if (6 === q.tag) {
		            if (null === m) try {
		              q.stateNode.nodeValue = l ? "" : q.memoizedProps;
		            } catch (t) {
		              W(a, a.return, t);
		            }
		          } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {
		            q.child.return = q;
		            q = q.child;
		            continue;
		          }
		          if (q === a) break a;
		          for (; null === q.sibling;) {
		            if (null === q.return || q.return === a) break a;
		            m === q && (m = null);
		            q = q.return;
		          }
		          m === q && (m = null);
		          q.sibling.return = q.return;
		          q = q.sibling;
		        }
		      }
		      break;
		    case 19:
		      dk(b, a);
		      fk(a);
		      d & 4 && bk(a);
		      break;
		    case 21:
		      break;
		    default:
		      dk(b, a), fk(a);
		  }
		}
		function fk(a) {
		  var b = a.flags;
		  if (b & 2) {
		    try {
		      a: {
		        for (var c = a.return; null !== c;) {
		          if (Uj(c)) {
		            var d = c;
		            break a;
		          }
		          c = c.return;
		        }
		        throw Error(p(160));
		      }
		      switch (d.tag) {
		        case 5:
		          var e = d.stateNode;
		          d.flags & 32 && (ob(e, ""), d.flags &= -33);
		          var f = Vj(a);
		          Xj(a, f, e);
		          break;
		        case 3:
		        case 4:
		          var g = d.stateNode.containerInfo,
		            h = Vj(a);
		          Wj(a, h, g);
		          break;
		        default:
		          throw Error(p(161));
		      }
		    } catch (k) {
		      W(a, a.return, k);
		    }
		    a.flags &= -3;
		  }
		  b & 4096 && (a.flags &= -4097);
		}
		function ik(a, b, c) {
		  V = a;
		  jk(a);
		}
		function jk(a, b, c) {
		  for (var d = 0 !== (a.mode & 1); null !== V;) {
		    var e = V,
		      f = e.child;
		    if (22 === e.tag && d) {
		      var g = null !== e.memoizedState || Kj;
		      if (!g) {
		        var h = e.alternate,
		          k = null !== h && null !== h.memoizedState || U;
		        h = Kj;
		        var l = U;
		        Kj = g;
		        if ((U = k) && !l) for (V = e; null !== V;) g = V, k = g.child, 22 === g.tag && null !== g.memoizedState ? kk(e) : null !== k ? (k.return = g, V = k) : kk(e);
		        for (; null !== f;) V = f, jk(f), f = f.sibling;
		        V = e;
		        Kj = h;
		        U = l;
		      }
		      lk(a);
		    } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, V = f) : lk(a);
		  }
		}
		function lk(a) {
		  for (; null !== V;) {
		    var b = V;
		    if (0 !== (b.flags & 8772)) {
		      var c = b.alternate;
		      try {
		        if (0 !== (b.flags & 8772)) switch (b.tag) {
		          case 0:
		          case 11:
		          case 15:
		            U || Rj(5, b);
		            break;
		          case 1:
		            var d = b.stateNode;
		            if (b.flags & 4 && !U) if (null === c) d.componentDidMount();else {
		              var e = b.elementType === b.type ? c.memoizedProps : Lg(b.type, c.memoizedProps);
		              d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
		            }
		            var f = b.updateQueue;
		            null !== f && ih(b, f, d);
		            break;
		          case 3:
		            var g = b.updateQueue;
		            if (null !== g) {
		              c = null;
		              if (null !== b.child) switch (b.child.tag) {
		                case 5:
		                  c = b.child.stateNode;
		                  break;
		                case 1:
		                  c = b.child.stateNode;
		              }
		              ih(b, g, c);
		            }
		            break;
		          case 5:
		            var h = b.stateNode;
		            if (null === c && b.flags & 4) {
		              c = h;
		              var k = b.memoizedProps;
		              switch (b.type) {
		                case "button":
		                case "input":
		                case "select":
		                case "textarea":
		                  k.autoFocus && c.focus();
		                  break;
		                case "img":
		                  k.src && (c.src = k.src);
		              }
		            }
		            break;
		          case 6:
		            break;
		          case 4:
		            break;
		          case 12:
		            break;
		          case 13:
		            if (null === b.memoizedState) {
		              var l = b.alternate;
		              if (null !== l) {
		                var m = l.memoizedState;
		                if (null !== m) {
		                  var q = m.dehydrated;
		                  null !== q && bd(q);
		                }
		              }
		            }
		            break;
		          case 19:
		          case 17:
		          case 21:
		          case 22:
		          case 23:
		          case 25:
		            break;
		          default:
		            throw Error(p(163));
		        }
		        U || b.flags & 512 && Sj(b);
		      } catch (r) {
		        W(b, b.return, r);
		      }
		    }
		    if (b === a) {
		      V = null;
		      break;
		    }
		    c = b.sibling;
		    if (null !== c) {
		      c.return = b.return;
		      V = c;
		      break;
		    }
		    V = b.return;
		  }
		}
		function hk(a) {
		  for (; null !== V;) {
		    var b = V;
		    if (b === a) {
		      V = null;
		      break;
		    }
		    var c = b.sibling;
		    if (null !== c) {
		      c.return = b.return;
		      V = c;
		      break;
		    }
		    V = b.return;
		  }
		}
		function kk(a) {
		  for (; null !== V;) {
		    var b = V;
		    try {
		      switch (b.tag) {
		        case 0:
		        case 11:
		        case 15:
		          var c = b.return;
		          try {
		            Rj(4, b);
		          } catch (k) {
		            W(b, c, k);
		          }
		          break;
		        case 1:
		          var d = b.stateNode;
		          if ("function" === typeof d.componentDidMount) {
		            var e = b.return;
		            try {
		              d.componentDidMount();
		            } catch (k) {
		              W(b, e, k);
		            }
		          }
		          var f = b.return;
		          try {
		            Sj(b);
		          } catch (k) {
		            W(b, f, k);
		          }
		          break;
		        case 5:
		          var g = b.return;
		          try {
		            Sj(b);
		          } catch (k) {
		            W(b, g, k);
		          }
		      }
		    } catch (k) {
		      W(b, b.return, k);
		    }
		    if (b === a) {
		      V = null;
		      break;
		    }
		    var h = b.sibling;
		    if (null !== h) {
		      h.return = b.return;
		      V = h;
		      break;
		    }
		    V = b.return;
		  }
		}
		var mk = Math.ceil,
		  nk = ua.ReactCurrentDispatcher,
		  ok = ua.ReactCurrentOwner,
		  pk = ua.ReactCurrentBatchConfig,
		  K = 0,
		  R = null,
		  Y = null,
		  Z = 0,
		  gj = 0,
		  fj = Uf(0),
		  T = 0,
		  qk = null,
		  hh = 0,
		  rk = 0,
		  sk = 0,
		  tk = null,
		  uk = null,
		  gk = 0,
		  Hj = Infinity,
		  vk = null,
		  Pi = !1,
		  Qi = null,
		  Si = null,
		  wk = !1,
		  xk = null,
		  yk = 0,
		  zk = 0,
		  Ak = null,
		  Bk = -1,
		  Ck = 0;
		function L() {
		  return 0 !== (K & 6) ? B() : -1 !== Bk ? Bk : Bk = B();
		}
		function lh(a) {
		  if (0 === (a.mode & 1)) return 1;
		  if (0 !== (K & 2) && 0 !== Z) return Z & -Z;
		  if (null !== Kg.transition) return 0 === Ck && (Ck = yc()), Ck;
		  a = C;
		  if (0 !== a) return a;
		  a = window.event;
		  a = void 0 === a ? 16 : jd(a.type);
		  return a;
		}
		function mh(a, b, c, d) {
		  if (50 < zk) throw zk = 0, Ak = null, Error(p(185));
		  Ac(a, c, d);
		  if (0 === (K & 2) || a !== R) a === R && (0 === (K & 2) && (rk |= c), 4 === T && Dk(a, Z)), Ek(a, d), 1 === c && 0 === K && 0 === (b.mode & 1) && (Hj = B() + 500, fg && jg());
		}
		function Ek(a, b) {
		  var c = a.callbackNode;
		  wc(a, b);
		  var d = uc(a, a === R ? Z : 0);
		  if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;else if (b = d & -d, a.callbackPriority !== b) {
		    null != c && bc(c);
		    if (1 === b) 0 === a.tag ? ig(Fk.bind(null, a)) : hg(Fk.bind(null, a)), Jf(function () {
		      0 === (K & 6) && jg();
		    }), c = null;else {
		      switch (Dc(d)) {
		        case 1:
		          c = fc;
		          break;
		        case 4:
		          c = gc;
		          break;
		        case 16:
		          c = hc;
		          break;
		        case 536870912:
		          c = jc;
		          break;
		        default:
		          c = hc;
		      }
		      c = Gk(c, Hk.bind(null, a));
		    }
		    a.callbackPriority = b;
		    a.callbackNode = c;
		  }
		}
		function Hk(a, b) {
		  Bk = -1;
		  Ck = 0;
		  if (0 !== (K & 6)) throw Error(p(327));
		  var c = a.callbackNode;
		  if (Ik() && a.callbackNode !== c) return null;
		  var d = uc(a, a === R ? Z : 0);
		  if (0 === d) return null;
		  if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Jk(a, d);else {
		    b = d;
		    var e = K;
		    K |= 2;
		    var f = Kk();
		    if (R !== a || Z !== b) vk = null, Hj = B() + 500, Lk(a, b);
		    do try {
		      Mk();
		      break;
		    } catch (h) {
		      Nk(a, h);
		    } while (1);
		    Qg();
		    nk.current = f;
		    K = e;
		    null !== Y ? b = 0 : (R = null, Z = 0, b = T);
		  }
		  if (0 !== b) {
		    2 === b && (e = xc(a), 0 !== e && (d = e, b = Ok(a, e)));
		    if (1 === b) throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B()), c;
		    if (6 === b) Dk(a, d);else {
		      e = a.current.alternate;
		      if (0 === (d & 30) && !Pk(e) && (b = Jk(a, d), 2 === b && (f = xc(a), 0 !== f && (d = f, b = Ok(a, f))), 1 === b)) throw c = qk, Lk(a, 0), Dk(a, d), Ek(a, B()), c;
		      a.finishedWork = e;
		      a.finishedLanes = d;
		      switch (b) {
		        case 0:
		        case 1:
		          throw Error(p(345));
		        case 2:
		          Qk(a, uk, vk);
		          break;
		        case 3:
		          Dk(a, d);
		          if ((d & 130023424) === d && (b = gk + 500 - B(), 10 < b)) {
		            if (0 !== uc(a, 0)) break;
		            e = a.suspendedLanes;
		            if ((e & d) !== d) {
		              L();
		              a.pingedLanes |= a.suspendedLanes & e;
		              break;
		            }
		            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), b);
		            break;
		          }
		          Qk(a, uk, vk);
		          break;
		        case 4:
		          Dk(a, d);
		          if ((d & 4194240) === d) break;
		          b = a.eventTimes;
		          for (e = -1; 0 < d;) {
		            var g = 31 - oc(d);
		            f = 1 << g;
		            g = b[g];
		            g > e && (e = g);
		            d &= ~f;
		          }
		          d = e;
		          d = B() - d;
		          d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3E3 > d ? 3E3 : 4320 > d ? 4320 : 1960 * mk(d / 1960)) - d;
		          if (10 < d) {
		            a.timeoutHandle = Ff(Qk.bind(null, a, uk, vk), d);
		            break;
		          }
		          Qk(a, uk, vk);
		          break;
		        case 5:
		          Qk(a, uk, vk);
		          break;
		        default:
		          throw Error(p(329));
		      }
		    }
		  }
		  Ek(a, B());
		  return a.callbackNode === c ? Hk.bind(null, a) : null;
		}
		function Ok(a, b) {
		  var c = tk;
		  a.current.memoizedState.isDehydrated && (Lk(a, b).flags |= 256);
		  a = Jk(a, b);
		  2 !== a && (b = uk, uk = c, null !== b && Gj(b));
		  return a;
		}
		function Gj(a) {
		  null === uk ? uk = a : uk.push.apply(uk, a);
		}
		function Pk(a) {
		  for (var b = a;;) {
		    if (b.flags & 16384) {
		      var c = b.updateQueue;
		      if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {
		        var e = c[d],
		          f = e.getSnapshot;
		        e = e.value;
		        try {
		          if (!He(f(), e)) return !1;
		        } catch (g) {
		          return !1;
		        }
		      }
		    }
		    c = b.child;
		    if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;else {
		      if (b === a) break;
		      for (; null === b.sibling;) {
		        if (null === b.return || b.return === a) return !0;
		        b = b.return;
		      }
		      b.sibling.return = b.return;
		      b = b.sibling;
		    }
		  }
		  return !0;
		}
		function Dk(a, b) {
		  b &= ~sk;
		  b &= ~rk;
		  a.suspendedLanes |= b;
		  a.pingedLanes &= ~b;
		  for (a = a.expirationTimes; 0 < b;) {
		    var c = 31 - oc(b),
		      d = 1 << c;
		    a[c] = -1;
		    b &= ~d;
		  }
		}
		function Fk(a) {
		  if (0 !== (K & 6)) throw Error(p(327));
		  Ik();
		  var b = uc(a, 0);
		  if (0 === (b & 1)) return Ek(a, B()), null;
		  var c = Jk(a, b);
		  if (0 !== a.tag && 2 === c) {
		    var d = xc(a);
		    0 !== d && (b = d, c = Ok(a, d));
		  }
		  if (1 === c) throw c = qk, Lk(a, 0), Dk(a, b), Ek(a, B()), c;
		  if (6 === c) throw Error(p(345));
		  a.finishedWork = a.current.alternate;
		  a.finishedLanes = b;
		  Qk(a, uk, vk);
		  Ek(a, B());
		  return null;
		}
		function Rk(a, b) {
		  var c = K;
		  K |= 1;
		  try {
		    return a(b);
		  } finally {
		    K = c, 0 === K && (Hj = B() + 500, fg && jg());
		  }
		}
		function Sk(a) {
		  null !== xk && 0 === xk.tag && 0 === (K & 6) && Ik();
		  var b = K;
		  K |= 1;
		  var c = pk.transition,
		    d = C;
		  try {
		    if (pk.transition = null, C = 1, a) return a();
		  } finally {
		    C = d, pk.transition = c, K = b, 0 === (K & 6) && jg();
		  }
		}
		function Ij() {
		  gj = fj.current;
		  E(fj);
		}
		function Lk(a, b) {
		  a.finishedWork = null;
		  a.finishedLanes = 0;
		  var c = a.timeoutHandle;
		  -1 !== c && (a.timeoutHandle = -1, Gf(c));
		  if (null !== Y) for (c = Y.return; null !== c;) {
		    var d = c;
		    wg(d);
		    switch (d.tag) {
		      case 1:
		        d = d.type.childContextTypes;
		        null !== d && void 0 !== d && $f();
		        break;
		      case 3:
		        Jh();
		        E(Wf);
		        E(H);
		        Oh();
		        break;
		      case 5:
		        Lh(d);
		        break;
		      case 4:
		        Jh();
		        break;
		      case 13:
		        E(M);
		        break;
		      case 19:
		        E(M);
		        break;
		      case 10:
		        Rg(d.type._context);
		        break;
		      case 22:
		      case 23:
		        Ij();
		    }
		    c = c.return;
		  }
		  R = a;
		  Y = a = wh(a.current, null);
		  Z = gj = b;
		  T = 0;
		  qk = null;
		  sk = rk = hh = 0;
		  uk = tk = null;
		  if (null !== Wg) {
		    for (b = 0; b < Wg.length; b++) if (c = Wg[b], d = c.interleaved, null !== d) {
		      c.interleaved = null;
		      var e = d.next,
		        f = c.pending;
		      if (null !== f) {
		        var g = f.next;
		        f.next = e;
		        d.next = g;
		      }
		      c.pending = d;
		    }
		    Wg = null;
		  }
		  return a;
		}
		function Nk(a, b) {
		  do {
		    var c = Y;
		    try {
		      Qg();
		      Ph.current = ai;
		      if (Sh) {
		        for (var d = N.memoizedState; null !== d;) {
		          var e = d.queue;
		          null !== e && (e.pending = null);
		          d = d.next;
		        }
		        Sh = !1;
		      }
		      Rh = 0;
		      P = O = N = null;
		      Th = !1;
		      Uh = 0;
		      ok.current = null;
		      if (null === c || null === c.return) {
		        T = 1;
		        qk = b;
		        Y = null;
		        break;
		      }
		      a: {
		        var f = a,
		          g = c.return,
		          h = c,
		          k = b;
		        b = Z;
		        h.flags |= 32768;
		        if (null !== k && "object" === typeof k && "function" === typeof k.then) {
		          var l = k,
		            m = h,
		            q = m.tag;
		          if (0 === (m.mode & 1) && (0 === q || 11 === q || 15 === q)) {
		            var r = m.alternate;
		            r ? (m.updateQueue = r.updateQueue, m.memoizedState = r.memoizedState, m.lanes = r.lanes) : (m.updateQueue = null, m.memoizedState = null);
		          }
		          var y = Vi(g);
		          if (null !== y) {
		            y.flags &= -257;
		            Wi(y, g, h, f, b);
		            y.mode & 1 && Ti(f, l, b);
		            b = y;
		            k = l;
		            var n = b.updateQueue;
		            if (null === n) {
		              var t = new Set();
		              t.add(k);
		              b.updateQueue = t;
		            } else n.add(k);
		            break a;
		          } else {
		            if (0 === (b & 1)) {
		              Ti(f, l, b);
		              uj();
		              break a;
		            }
		            k = Error(p(426));
		          }
		        } else if (I && h.mode & 1) {
		          var J = Vi(g);
		          if (null !== J) {
		            0 === (J.flags & 65536) && (J.flags |= 256);
		            Wi(J, g, h, f, b);
		            Jg(Ki(k, h));
		            break a;
		          }
		        }
		        f = k = Ki(k, h);
		        4 !== T && (T = 2);
		        null === tk ? tk = [f] : tk.push(f);
		        f = g;
		        do {
		          switch (f.tag) {
		            case 3:
		              f.flags |= 65536;
		              b &= -b;
		              f.lanes |= b;
		              var x = Oi(f, k, b);
		              fh(f, x);
		              break a;
		            case 1:
		              h = k;
		              var w = f.type,
		                u = f.stateNode;
		              if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u && "function" === typeof u.componentDidCatch && (null === Si || !Si.has(u)))) {
		                f.flags |= 65536;
		                b &= -b;
		                f.lanes |= b;
		                var F = Ri(f, h, b);
		                fh(f, F);
		                break a;
		              }
		          }
		          f = f.return;
		        } while (null !== f);
		      }
		      Tk(c);
		    } catch (na) {
		      b = na;
		      Y === c && null !== c && (Y = c = c.return);
		      continue;
		    }
		    break;
		  } while (1);
		}
		function Kk() {
		  var a = nk.current;
		  nk.current = ai;
		  return null === a ? ai : a;
		}
		function uj() {
		  if (0 === T || 3 === T || 2 === T) T = 4;
		  null === R || 0 === (hh & 268435455) && 0 === (rk & 268435455) || Dk(R, Z);
		}
		function Jk(a, b) {
		  var c = K;
		  K |= 2;
		  var d = Kk();
		  if (R !== a || Z !== b) vk = null, Lk(a, b);
		  do try {
		    Uk();
		    break;
		  } catch (e) {
		    Nk(a, e);
		  } while (1);
		  Qg();
		  K = c;
		  nk.current = d;
		  if (null !== Y) throw Error(p(261));
		  R = null;
		  Z = 0;
		  return T;
		}
		function Uk() {
		  for (; null !== Y;) Vk(Y);
		}
		function Mk() {
		  for (; null !== Y && !cc();) Vk(Y);
		}
		function Vk(a) {
		  var b = Wk(a.alternate, a, gj);
		  a.memoizedProps = a.pendingProps;
		  null === b ? Tk(a) : Y = b;
		  ok.current = null;
		}
		function Tk(a) {
		  var b = a;
		  do {
		    var c = b.alternate;
		    a = b.return;
		    if (0 === (b.flags & 32768)) {
		      if (c = Fj(c, b, gj), null !== c) {
		        Y = c;
		        return;
		      }
		    } else {
		      c = Jj(c, b);
		      if (null !== c) {
		        c.flags &= 32767;
		        Y = c;
		        return;
		      }
		      if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;else {
		        T = 6;
		        Y = null;
		        return;
		      }
		    }
		    b = b.sibling;
		    if (null !== b) {
		      Y = b;
		      return;
		    }
		    Y = b = a;
		  } while (null !== b);
		  0 === T && (T = 5);
		}
		function Qk(a, b, c) {
		  var d = C,
		    e = pk.transition;
		  try {
		    pk.transition = null, C = 1, Xk(a, b, c, d);
		  } finally {
		    pk.transition = e, C = d;
		  }
		  return null;
		}
		function Xk(a, b, c, d) {
		  do Ik(); while (null !== xk);
		  if (0 !== (K & 6)) throw Error(p(327));
		  c = a.finishedWork;
		  var e = a.finishedLanes;
		  if (null === c) return null;
		  a.finishedWork = null;
		  a.finishedLanes = 0;
		  if (c === a.current) throw Error(p(177));
		  a.callbackNode = null;
		  a.callbackPriority = 0;
		  var f = c.lanes | c.childLanes;
		  Bc(a, f);
		  a === R && (Y = R = null, Z = 0);
		  0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || wk || (wk = !0, Gk(hc, function () {
		    Ik();
		    return null;
		  }));
		  f = 0 !== (c.flags & 15990);
		  if (0 !== (c.subtreeFlags & 15990) || f) {
		    f = pk.transition;
		    pk.transition = null;
		    var g = C;
		    C = 1;
		    var h = K;
		    K |= 4;
		    ok.current = null;
		    Pj(a, c);
		    ek(c, a);
		    Oe(Df);
		    dd = !!Cf;
		    Df = Cf = null;
		    a.current = c;
		    ik(c);
		    dc();
		    K = h;
		    C = g;
		    pk.transition = f;
		  } else a.current = c;
		  wk && (wk = !1, xk = a, yk = e);
		  f = a.pendingLanes;
		  0 === f && (Si = null);
		  mc(c.stateNode);
		  Ek(a, B());
		  if (null !== b) for (d = a.onRecoverableError, c = 0; c < b.length; c++) e = b[c], d(e.value, {
		    componentStack: e.stack,
		    digest: e.digest
		  });
		  if (Pi) throw Pi = !1, a = Qi, Qi = null, a;
		  0 !== (yk & 1) && 0 !== a.tag && Ik();
		  f = a.pendingLanes;
		  0 !== (f & 1) ? a === Ak ? zk++ : (zk = 0, Ak = a) : zk = 0;
		  jg();
		  return null;
		}
		function Ik() {
		  if (null !== xk) {
		    var a = Dc(yk),
		      b = pk.transition,
		      c = C;
		    try {
		      pk.transition = null;
		      C = 16 > a ? 16 : a;
		      if (null === xk) var d = !1;else {
		        a = xk;
		        xk = null;
		        yk = 0;
		        if (0 !== (K & 6)) throw Error(p(331));
		        var e = K;
		        K |= 4;
		        for (V = a.current; null !== V;) {
		          var f = V,
		            g = f.child;
		          if (0 !== (V.flags & 16)) {
		            var h = f.deletions;
		            if (null !== h) {
		              for (var k = 0; k < h.length; k++) {
		                var l = h[k];
		                for (V = l; null !== V;) {
		                  var m = V;
		                  switch (m.tag) {
		                    case 0:
		                    case 11:
		                    case 15:
		                      Qj(8, m, f);
		                  }
		                  var q = m.child;
		                  if (null !== q) q.return = m, V = q;else for (; null !== V;) {
		                    m = V;
		                    var r = m.sibling,
		                      y = m.return;
		                    Tj(m);
		                    if (m === l) {
		                      V = null;
		                      break;
		                    }
		                    if (null !== r) {
		                      r.return = y;
		                      V = r;
		                      break;
		                    }
		                    V = y;
		                  }
		                }
		              }
		              var n = f.alternate;
		              if (null !== n) {
		                var t = n.child;
		                if (null !== t) {
		                  n.child = null;
		                  do {
		                    var J = t.sibling;
		                    t.sibling = null;
		                    t = J;
		                  } while (null !== t);
		                }
		              }
		              V = f;
		            }
		          }
		          if (0 !== (f.subtreeFlags & 2064) && null !== g) g.return = f, V = g;else b: for (; null !== V;) {
		            f = V;
		            if (0 !== (f.flags & 2048)) switch (f.tag) {
		              case 0:
		              case 11:
		              case 15:
		                Qj(9, f, f.return);
		            }
		            var x = f.sibling;
		            if (null !== x) {
		              x.return = f.return;
		              V = x;
		              break b;
		            }
		            V = f.return;
		          }
		        }
		        var w = a.current;
		        for (V = w; null !== V;) {
		          g = V;
		          var u = g.child;
		          if (0 !== (g.subtreeFlags & 2064) && null !== u) u.return = g, V = u;else b: for (g = w; null !== V;) {
		            h = V;
		            if (0 !== (h.flags & 2048)) try {
		              switch (h.tag) {
		                case 0:
		                case 11:
		                case 15:
		                  Rj(9, h);
		              }
		            } catch (na) {
		              W(h, h.return, na);
		            }
		            if (h === g) {
		              V = null;
		              break b;
		            }
		            var F = h.sibling;
		            if (null !== F) {
		              F.return = h.return;
		              V = F;
		              break b;
		            }
		            V = h.return;
		          }
		        }
		        K = e;
		        jg();
		        if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
		          lc.onPostCommitFiberRoot(kc, a);
		        } catch (na) {}
		        d = !0;
		      }
		      return d;
		    } finally {
		      C = c, pk.transition = b;
		    }
		  }
		  return !1;
		}
		function Yk(a, b, c) {
		  b = Ki(c, b);
		  b = Oi(a, b, 1);
		  a = dh(a, b, 1);
		  b = L();
		  null !== a && (Ac(a, 1, b), Ek(a, b));
		}
		function W(a, b, c) {
		  if (3 === a.tag) Yk(a, a, c);else for (; null !== b;) {
		    if (3 === b.tag) {
		      Yk(b, a, c);
		      break;
		    } else if (1 === b.tag) {
		      var d = b.stateNode;
		      if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Si || !Si.has(d))) {
		        a = Ki(c, a);
		        a = Ri(b, a, 1);
		        b = dh(b, a, 1);
		        a = L();
		        null !== b && (Ac(b, 1, a), Ek(b, a));
		        break;
		      }
		    }
		    b = b.return;
		  }
		}
		function Ui(a, b, c) {
		  var d = a.pingCache;
		  null !== d && d.delete(b);
		  b = L();
		  a.pingedLanes |= a.suspendedLanes & c;
		  R === a && (Z & c) === c && (4 === T || 3 === T && (Z & 130023424) === Z && 500 > B() - gk ? Lk(a, 0) : sk |= c);
		  Ek(a, b);
		}
		function Zk(a, b) {
		  0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
		  var c = L();
		  a = Zg(a, b);
		  null !== a && (Ac(a, b, c), Ek(a, c));
		}
		function vj(a) {
		  var b = a.memoizedState,
		    c = 0;
		  null !== b && (c = b.retryLane);
		  Zk(a, c);
		}
		function ck(a, b) {
		  var c = 0;
		  switch (a.tag) {
		    case 13:
		      var d = a.stateNode;
		      var e = a.memoizedState;
		      null !== e && (c = e.retryLane);
		      break;
		    case 19:
		      d = a.stateNode;
		      break;
		    default:
		      throw Error(p(314));
		  }
		  null !== d && d.delete(b);
		  Zk(a, c);
		}
		var Wk;
		Wk = function (a, b, c) {
		  if (null !== a) {
		    if (a.memoizedProps !== b.pendingProps || Wf.current) Ug = !0;else {
		      if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return Ug = !1, zj(a, b, c);
		      Ug = 0 !== (a.flags & 131072) ? !0 : !1;
		    }
		  } else Ug = !1, I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);
		  b.lanes = 0;
		  switch (b.tag) {
		    case 2:
		      var d = b.type;
		      jj(a, b);
		      a = b.pendingProps;
		      var e = Yf(b, H.current);
		      Tg(b, c);
		      e = Xh(null, b, d, a, e, c);
		      var f = bi();
		      b.flags |= 1;
		      "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = !0, cg(b)) : f = !1, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, ah(b), e.updater = nh, b.stateNode = e, e._reactInternals = b, rh(b, d, a, c), b = kj(null, b, d, !0, f, c)) : (b.tag = 0, I && f && vg(b), Yi(null, b, e, c), b = b.child);
		      return b;
		    case 16:
		      d = b.elementType;
		      a: {
		        jj(a, b);
		        a = b.pendingProps;
		        e = d._init;
		        d = e(d._payload);
		        b.type = d;
		        e = b.tag = $k(d);
		        a = Lg(d, a);
		        switch (e) {
		          case 0:
		            b = dj(null, b, d, a, c);
		            break a;
		          case 1:
		            b = ij(null, b, d, a, c);
		            break a;
		          case 11:
		            b = Zi(null, b, d, a, c);
		            break a;
		          case 14:
		            b = aj(null, b, d, Lg(d.type, a), c);
		            break a;
		        }
		        throw Error(p(306, d, ""));
		      }
		      return b;
		    case 0:
		      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), dj(a, b, d, e, c);
		    case 1:
		      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), ij(a, b, d, e, c);
		    case 3:
		      a: {
		        lj(b);
		        if (null === a) throw Error(p(387));
		        d = b.pendingProps;
		        f = b.memoizedState;
		        e = f.element;
		        bh(a, b);
		        gh(b, d, null, c);
		        var g = b.memoizedState;
		        d = g.element;
		        if (f.isDehydrated) {
		          if (f = {
		            element: d,
		            isDehydrated: !1,
		            cache: g.cache,
		            pendingSuspenseBoundaries: g.pendingSuspenseBoundaries,
		            transitions: g.transitions
		          }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
		            e = Ki(Error(p(423)), b);
		            b = mj(a, b, d, c, e);
		            break a;
		          } else if (d !== e) {
		            e = Ki(Error(p(424)), b);
		            b = mj(a, b, d, c, e);
		            break a;
		          } else for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = !0, zg = null, c = Ch(b, null, d, c), b.child = c; c;) c.flags = c.flags & -3 | 4096, c = c.sibling;
		        } else {
		          Ig();
		          if (d === e) {
		            b = $i(a, b, c);
		            break a;
		          }
		          Yi(a, b, d, c);
		        }
		        b = b.child;
		      }
		      return b;
		    case 5:
		      return Kh(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f && Ef(d, f) && (b.flags |= 32), hj(a, b), Yi(a, b, g, c), b.child;
		    case 6:
		      return null === a && Eg(b), null;
		    case 13:
		      return pj(a, b, c);
		    case 4:
		      return Ih(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Bh(b, null, d, c) : Yi(a, b, d, c), b.child;
		    case 11:
		      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), Zi(a, b, d, e, c);
		    case 7:
		      return Yi(a, b, b.pendingProps, c), b.child;
		    case 8:
		      return Yi(a, b, b.pendingProps.children, c), b.child;
		    case 12:
		      return Yi(a, b, b.pendingProps.children, c), b.child;
		    case 10:
		      a: {
		        d = b.type._context;
		        e = b.pendingProps;
		        f = b.memoizedProps;
		        g = e.value;
		        G(Mg, d._currentValue);
		        d._currentValue = g;
		        if (null !== f) if (He(f.value, g)) {
		          if (f.children === e.children && !Wf.current) {
		            b = $i(a, b, c);
		            break a;
		          }
		        } else for (f = b.child, null !== f && (f.return = b); null !== f;) {
		          var h = f.dependencies;
		          if (null !== h) {
		            g = f.child;
		            for (var k = h.firstContext; null !== k;) {
		              if (k.context === d) {
		                if (1 === f.tag) {
		                  k = ch(-1, c & -c);
		                  k.tag = 2;
		                  var l = f.updateQueue;
		                  if (null !== l) {
		                    l = l.shared;
		                    var m = l.pending;
		                    null === m ? k.next = k : (k.next = m.next, m.next = k);
		                    l.pending = k;
		                  }
		                }
		                f.lanes |= c;
		                k = f.alternate;
		                null !== k && (k.lanes |= c);
		                Sg(f.return, c, b);
		                h.lanes |= c;
		                break;
		              }
		              k = k.next;
		            }
		          } else if (10 === f.tag) g = f.type === b.type ? null : f.child;else if (18 === f.tag) {
		            g = f.return;
		            if (null === g) throw Error(p(341));
		            g.lanes |= c;
		            h = g.alternate;
		            null !== h && (h.lanes |= c);
		            Sg(g, c, b);
		            g = f.sibling;
		          } else g = f.child;
		          if (null !== g) g.return = f;else for (g = f; null !== g;) {
		            if (g === b) {
		              g = null;
		              break;
		            }
		            f = g.sibling;
		            if (null !== f) {
		              f.return = g.return;
		              g = f;
		              break;
		            }
		            g = g.return;
		          }
		          f = g;
		        }
		        Yi(a, b, e.children, c);
		        b = b.child;
		      }
		      return b;
		    case 9:
		      return e = b.type, d = b.pendingProps.children, Tg(b, c), e = Vg(e), d = d(e), b.flags |= 1, Yi(a, b, d, c), b.child;
		    case 14:
		      return d = b.type, e = Lg(d, b.pendingProps), e = Lg(d.type, e), aj(a, b, d, e, c);
		    case 15:
		      return cj(a, b, b.type, b.pendingProps, c);
		    case 17:
		      return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Lg(d, e), jj(a, b), b.tag = 1, Zf(d) ? (a = !0, cg(b)) : a = !1, Tg(b, c), ph(b, d, e), rh(b, d, e, c), kj(null, b, d, !0, a, c);
		    case 19:
		      return yj(a, b, c);
		    case 22:
		      return ej(a, b, c);
		  }
		  throw Error(p(156, b.tag));
		};
		function Gk(a, b) {
		  return ac(a, b);
		}
		function al(a, b, c, d) {
		  this.tag = a;
		  this.key = c;
		  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
		  this.index = 0;
		  this.ref = null;
		  this.pendingProps = b;
		  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
		  this.mode = d;
		  this.subtreeFlags = this.flags = 0;
		  this.deletions = null;
		  this.childLanes = this.lanes = 0;
		  this.alternate = null;
		}
		function Bg(a, b, c, d) {
		  return new al(a, b, c, d);
		}
		function bj(a) {
		  a = a.prototype;
		  return !(!a || !a.isReactComponent);
		}
		function $k(a) {
		  if ("function" === typeof a) return bj(a) ? 1 : 0;
		  if (void 0 !== a && null !== a) {
		    a = a.$$typeof;
		    if (a === Da) return 11;
		    if (a === Ga) return 14;
		  }
		  return 2;
		}
		function wh(a, b) {
		  var c = a.alternate;
		  null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
		  c.flags = a.flags & 14680064;
		  c.childLanes = a.childLanes;
		  c.lanes = a.lanes;
		  c.child = a.child;
		  c.memoizedProps = a.memoizedProps;
		  c.memoizedState = a.memoizedState;
		  c.updateQueue = a.updateQueue;
		  b = a.dependencies;
		  c.dependencies = null === b ? null : {
		    lanes: b.lanes,
		    firstContext: b.firstContext
		  };
		  c.sibling = a.sibling;
		  c.index = a.index;
		  c.ref = a.ref;
		  return c;
		}
		function yh(a, b, c, d, e, f) {
		  var g = 2;
		  d = a;
		  if ("function" === typeof a) bj(a) && (g = 1);else if ("string" === typeof a) g = 5;else a: switch (a) {
		    case ya:
		      return Ah(c.children, e, f, b);
		    case za:
		      g = 8;
		      e |= 8;
		      break;
		    case Aa:
		      return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f, a;
		    case Ea:
		      return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f, a;
		    case Fa:
		      return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f, a;
		    case Ia:
		      return qj(c, e, f, b);
		    default:
		      if ("object" === typeof a && null !== a) switch (a.$$typeof) {
		        case Ba:
		          g = 10;
		          break a;
		        case Ca:
		          g = 9;
		          break a;
		        case Da:
		          g = 11;
		          break a;
		        case Ga:
		          g = 14;
		          break a;
		        case Ha:
		          g = 16;
		          d = null;
		          break a;
		      }
		      throw Error(p(130, null == a ? a : typeof a, ""));
		  }
		  b = Bg(g, c, b, e);
		  b.elementType = a;
		  b.type = d;
		  b.lanes = f;
		  return b;
		}
		function Ah(a, b, c, d) {
		  a = Bg(7, a, d, b);
		  a.lanes = c;
		  return a;
		}
		function qj(a, b, c, d) {
		  a = Bg(22, a, d, b);
		  a.elementType = Ia;
		  a.lanes = c;
		  a.stateNode = {
		    isHidden: !1
		  };
		  return a;
		}
		function xh(a, b, c) {
		  a = Bg(6, a, null, b);
		  a.lanes = c;
		  return a;
		}
		function zh(a, b, c) {
		  b = Bg(4, null !== a.children ? a.children : [], a.key, b);
		  b.lanes = c;
		  b.stateNode = {
		    containerInfo: a.containerInfo,
		    pendingChildren: null,
		    implementation: a.implementation
		  };
		  return b;
		}
		function bl(a, b, c, d, e) {
		  this.tag = b;
		  this.containerInfo = a;
		  this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
		  this.timeoutHandle = -1;
		  this.callbackNode = this.pendingContext = this.context = null;
		  this.callbackPriority = 0;
		  this.eventTimes = zc(0);
		  this.expirationTimes = zc(-1);
		  this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
		  this.entanglements = zc(0);
		  this.identifierPrefix = d;
		  this.onRecoverableError = e;
		  this.mutableSourceEagerHydrationData = null;
		}
		function cl(a, b, c, d, e, f, g, h, k) {
		  a = new bl(a, b, c, h, k);
		  1 === b ? (b = 1, !0 === f && (b |= 8)) : b = 0;
		  f = Bg(3, null, null, b);
		  a.current = f;
		  f.stateNode = a;
		  f.memoizedState = {
		    element: d,
		    isDehydrated: c,
		    cache: null,
		    transitions: null,
		    pendingSuspenseBoundaries: null
		  };
		  ah(f);
		  return a;
		}
		function dl(a, b, c) {
		  var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
		  return {
		    $$typeof: wa,
		    key: null == d ? null : "" + d,
		    children: a,
		    containerInfo: b,
		    implementation: c
		  };
		}
		function el(a) {
		  if (!a) return Vf;
		  a = a._reactInternals;
		  a: {
		    if (Vb(a) !== a || 1 !== a.tag) throw Error(p(170));
		    var b = a;
		    do {
		      switch (b.tag) {
		        case 3:
		          b = b.stateNode.context;
		          break a;
		        case 1:
		          if (Zf(b.type)) {
		            b = b.stateNode.__reactInternalMemoizedMergedChildContext;
		            break a;
		          }
		      }
		      b = b.return;
		    } while (null !== b);
		    throw Error(p(171));
		  }
		  if (1 === a.tag) {
		    var c = a.type;
		    if (Zf(c)) return bg(a, c, b);
		  }
		  return b;
		}
		function fl(a, b, c, d, e, f, g, h, k) {
		  a = cl(c, d, !0, a, e, f, g, h, k);
		  a.context = el(null);
		  c = a.current;
		  d = L();
		  e = lh(c);
		  f = ch(d, e);
		  f.callback = void 0 !== b && null !== b ? b : null;
		  dh(c, f, e);
		  a.current.lanes = e;
		  Ac(a, e, d);
		  Ek(a, d);
		  return a;
		}
		function gl(a, b, c, d) {
		  var e = b.current,
		    f = L(),
		    g = lh(e);
		  c = el(c);
		  null === b.context ? b.context = c : b.pendingContext = c;
		  b = ch(f, g);
		  b.payload = {
		    element: a
		  };
		  d = void 0 === d ? null : d;
		  null !== d && (b.callback = d);
		  a = dh(e, b, g);
		  null !== a && (mh(a, e, g, f), eh(a, e, g));
		  return g;
		}
		function hl(a) {
		  a = a.current;
		  if (!a.child) return null;
		  switch (a.child.tag) {
		    case 5:
		      return a.child.stateNode;
		    default:
		      return a.child.stateNode;
		  }
		}
		function il(a, b) {
		  a = a.memoizedState;
		  if (null !== a && null !== a.dehydrated) {
		    var c = a.retryLane;
		    a.retryLane = 0 !== c && c < b ? c : b;
		  }
		}
		function jl(a, b) {
		  il(a, b);
		  (a = a.alternate) && il(a, b);
		}
		function kl() {
		  return null;
		}
		var ll = "function" === typeof reportError ? reportError : function (a) {
		  console.error(a);
		};
		function ml(a) {
		  this._internalRoot = a;
		}
		nl.prototype.render = ml.prototype.render = function (a) {
		  var b = this._internalRoot;
		  if (null === b) throw Error(p(409));
		  gl(a, b, null, null);
		};
		nl.prototype.unmount = ml.prototype.unmount = function () {
		  var a = this._internalRoot;
		  if (null !== a) {
		    this._internalRoot = null;
		    var b = a.containerInfo;
		    Sk(function () {
		      gl(null, a, null, null);
		    });
		    b[uf] = null;
		  }
		};
		function nl(a) {
		  this._internalRoot = a;
		}
		nl.prototype.unstable_scheduleHydration = function (a) {
		  if (a) {
		    var b = Hc();
		    a = {
		      blockedOn: null,
		      target: a,
		      priority: b
		    };
		    for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++);
		    Qc.splice(c, 0, a);
		    0 === c && Vc(a);
		  }
		};
		function ol(a) {
		  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
		}
		function pl(a) {
		  return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
		}
		function ql() {}
		function rl(a, b, c, d, e) {
		  if (e) {
		    if ("function" === typeof d) {
		      var f = d;
		      d = function () {
		        var a = hl(g);
		        f.call(a);
		      };
		    }
		    var g = fl(b, d, a, 0, null, !1, !1, "", ql);
		    a._reactRootContainer = g;
		    a[uf] = g.current;
		    sf(8 === a.nodeType ? a.parentNode : a);
		    Sk();
		    return g;
		  }
		  for (; e = a.lastChild;) a.removeChild(e);
		  if ("function" === typeof d) {
		    var h = d;
		    d = function () {
		      var a = hl(k);
		      h.call(a);
		    };
		  }
		  var k = cl(a, 0, !1, null, null, !1, !1, "", ql);
		  a._reactRootContainer = k;
		  a[uf] = k.current;
		  sf(8 === a.nodeType ? a.parentNode : a);
		  Sk(function () {
		    gl(b, k, c, d);
		  });
		  return k;
		}
		function sl(a, b, c, d, e) {
		  var f = c._reactRootContainer;
		  if (f) {
		    var g = f;
		    if ("function" === typeof e) {
		      var h = e;
		      e = function () {
		        var a = hl(g);
		        h.call(a);
		      };
		    }
		    gl(b, g, a, e);
		  } else g = rl(c, b, a, e, d);
		  return hl(g);
		}
		Ec = function (a) {
		  switch (a.tag) {
		    case 3:
		      var b = a.stateNode;
		      if (b.current.memoizedState.isDehydrated) {
		        var c = tc(b.pendingLanes);
		        0 !== c && (Cc(b, c | 1), Ek(b, B()), 0 === (K & 6) && (Hj = B() + 500, jg()));
		      }
		      break;
		    case 13:
		      Sk(function () {
		        var b = Zg(a, 1);
		        if (null !== b) {
		          var c = L();
		          mh(b, a, 1, c);
		        }
		      }), jl(a, 1);
		  }
		};
		Fc = function (a) {
		  if (13 === a.tag) {
		    var b = Zg(a, 134217728);
		    if (null !== b) {
		      var c = L();
		      mh(b, a, 134217728, c);
		    }
		    jl(a, 134217728);
		  }
		};
		Gc = function (a) {
		  if (13 === a.tag) {
		    var b = lh(a),
		      c = Zg(a, b);
		    if (null !== c) {
		      var d = L();
		      mh(c, a, b, d);
		    }
		    jl(a, b);
		  }
		};
		Hc = function () {
		  return C;
		};
		Ic = function (a, b) {
		  var c = C;
		  try {
		    return C = a, b();
		  } finally {
		    C = c;
		  }
		};
		yb = function (a, b, c) {
		  switch (b) {
		    case "input":
		      bb(a, c);
		      b = c.name;
		      if ("radio" === c.type && null != b) {
		        for (c = a; c.parentNode;) c = c.parentNode;
		        c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
		        for (b = 0; b < c.length; b++) {
		          var d = c[b];
		          if (d !== a && d.form === a.form) {
		            var e = Db(d);
		            if (!e) throw Error(p(90));
		            Wa(d);
		            bb(d, e);
		          }
		        }
		      }
		      break;
		    case "textarea":
		      ib(a, c);
		      break;
		    case "select":
		      b = c.value, null != b && fb(a, !!c.multiple, b, !1);
		  }
		};
		Gb = Rk;
		Hb = Sk;
		var tl = {
		    usingClientEntryPoint: !1,
		    Events: [Cb, ue, Db, Eb, Fb, Rk]
		  },
		  ul = {
		    findFiberByHostInstance: Wc,
		    bundleType: 0,
		    version: "18.2.0",
		    rendererPackageName: "react-dom"
		  };
		var vl = {
		  bundleType: ul.bundleType,
		  version: ul.version,
		  rendererPackageName: ul.rendererPackageName,
		  rendererConfig: ul.rendererConfig,
		  overrideHookState: null,
		  overrideHookStateDeletePath: null,
		  overrideHookStateRenamePath: null,
		  overrideProps: null,
		  overridePropsDeletePath: null,
		  overridePropsRenamePath: null,
		  setErrorHandler: null,
		  setSuspenseHandler: null,
		  scheduleUpdate: null,
		  currentDispatcherRef: ua.ReactCurrentDispatcher,
		  findHostInstanceByFiber: function (a) {
		    a = Zb(a);
		    return null === a ? null : a.stateNode;
		  },
		  findFiberByHostInstance: ul.findFiberByHostInstance || kl,
		  findHostInstancesForRefresh: null,
		  scheduleRefresh: null,
		  scheduleRoot: null,
		  setRefreshHandler: null,
		  getCurrentFiber: null,
		  reconcilerVersion: "18.2.0-next-9e3b772b8-20220608"
		};
		if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
		  var wl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
		  if (!wl.isDisabled && wl.supportsFiber) try {
		    kc = wl.inject(vl), lc = wl;
		  } catch (a) {}
		}
		reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = tl;
		reactDom_production_min.createPortal = function (a, b) {
		  var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
		  if (!ol(b)) throw Error(p(200));
		  return dl(a, b, null, c);
		};
		reactDom_production_min.createRoot = function (a, b) {
		  if (!ol(a)) throw Error(p(299));
		  var c = !1,
		    d = "",
		    e = ll;
		  null !== b && void 0 !== b && (!0 === b.unstable_strictMode && (c = !0), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
		  b = cl(a, 1, !1, null, null, c, !1, d, e);
		  a[uf] = b.current;
		  sf(8 === a.nodeType ? a.parentNode : a);
		  return new ml(b);
		};
		reactDom_production_min.findDOMNode = function (a) {
		  if (null == a) return null;
		  if (1 === a.nodeType) return a;
		  var b = a._reactInternals;
		  if (void 0 === b) {
		    if ("function" === typeof a.render) throw Error(p(188));
		    a = Object.keys(a).join(",");
		    throw Error(p(268, a));
		  }
		  a = Zb(b);
		  a = null === a ? null : a.stateNode;
		  return a;
		};
		reactDom_production_min.flushSync = function (a) {
		  return Sk(a);
		};
		reactDom_production_min.hydrate = function (a, b, c) {
		  if (!pl(b)) throw Error(p(200));
		  return sl(null, a, b, !0, c);
		};
		reactDom_production_min.hydrateRoot = function (a, b, c) {
		  if (!ol(a)) throw Error(p(405));
		  var d = null != c && c.hydratedSources || null,
		    e = !1,
		    f = "",
		    g = ll;
		  null !== c && void 0 !== c && (!0 === c.unstable_strictMode && (e = !0), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
		  b = fl(b, null, a, 1, null != c ? c : null, e, !1, f, g);
		  a[uf] = b.current;
		  sf(a);
		  if (d) for (a = 0; a < d.length; a++) c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(c, e);
		  return new nl(b);
		};
		reactDom_production_min.render = function (a, b, c) {
		  if (!pl(b)) throw Error(p(200));
		  return sl(null, a, b, !1, c);
		};
		reactDom_production_min.unmountComponentAtNode = function (a) {
		  if (!pl(a)) throw Error(p(40));
		  return a._reactRootContainer ? (Sk(function () {
		    sl(null, null, a, !1, function () {
		      a._reactRootContainer = null;
		      a[uf] = null;
		    });
		  }), !0) : !1;
		};
		reactDom_production_min.unstable_batchedUpdates = Rk;
		reactDom_production_min.unstable_renderSubtreeIntoContainer = function (a, b, c, d) {
		  if (!pl(c)) throw Error(p(200));
		  if (null == a || void 0 === a._reactInternals) throw Error(p(38));
		  return sl(a, b, c, !1, d);
		};
		reactDom_production_min.version = "18.2.0-next-9e3b772b8-20220608";
		return reactDom_production_min;
	}

	function checkDCE() {
	  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
	    return;
	  }
	  try {
	    // Verify that the code above has been dead code eliminated (DCE'd).
	    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
	  } catch (err) {
	    // DevTools shouldn't crash React, no matter what.
	    // We should still report in case we break this code.
	    console.error(err);
	  }
	}
	{
	  // DCE check should happen before ReactDOM bundle executes so that
	  // DevTools can report bad minification during injection.
	  checkDCE();
	  reactDom.exports = requireReactDom_production_min();
	}

	var reactDomExports = reactDom.exports;
	var ReactDOM = /*@__PURE__*/getDefaultExportFromCjs(reactDomExports);

	var createRoot;

	var m = reactDomExports;
	{
	  createRoot = m.createRoot;
	  m.hydrateRoot;
	}

	const common = {
	  black: '#000',
	  white: '#fff'
	};
	var common$1 = common;

	const red = {
	  50: '#ffebee',
	  100: '#ffcdd2',
	  200: '#ef9a9a',
	  300: '#e57373',
	  400: '#ef5350',
	  500: '#f44336',
	  600: '#e53935',
	  700: '#d32f2f',
	  800: '#c62828',
	  900: '#b71c1c',
	  A100: '#ff8a80',
	  A200: '#ff5252',
	  A400: '#ff1744',
	  A700: '#d50000'
	};
	var red$1 = red;

	const purple = {
	  50: '#f3e5f5',
	  100: '#e1bee7',
	  200: '#ce93d8',
	  300: '#ba68c8',
	  400: '#ab47bc',
	  500: '#9c27b0',
	  600: '#8e24aa',
	  700: '#7b1fa2',
	  800: '#6a1b9a',
	  900: '#4a148c',
	  A100: '#ea80fc',
	  A200: '#e040fb',
	  A400: '#d500f9',
	  A700: '#aa00ff'
	};
	var purple$1 = purple;

	const blue = {
	  50: '#e3f2fd',
	  100: '#bbdefb',
	  200: '#90caf9',
	  300: '#64b5f6',
	  400: '#42a5f5',
	  500: '#2196f3',
	  600: '#1e88e5',
	  700: '#1976d2',
	  800: '#1565c0',
	  900: '#0d47a1',
	  A100: '#82b1ff',
	  A200: '#448aff',
	  A400: '#2979ff',
	  A700: '#2962ff'
	};
	var blue$1 = blue;

	const lightBlue = {
	  50: '#e1f5fe',
	  100: '#b3e5fc',
	  200: '#81d4fa',
	  300: '#4fc3f7',
	  400: '#29b6f6',
	  500: '#03a9f4',
	  600: '#039be5',
	  700: '#0288d1',
	  800: '#0277bd',
	  900: '#01579b',
	  A100: '#80d8ff',
	  A200: '#40c4ff',
	  A400: '#00b0ff',
	  A700: '#0091ea'
	};
	var lightBlue$1 = lightBlue;

	const green = {
	  50: '#e8f5e9',
	  100: '#c8e6c9',
	  200: '#a5d6a7',
	  300: '#81c784',
	  400: '#66bb6a',
	  500: '#4caf50',
	  600: '#43a047',
	  700: '#388e3c',
	  800: '#2e7d32',
	  900: '#1b5e20',
	  A100: '#b9f6ca',
	  A200: '#69f0ae',
	  A400: '#00e676',
	  A700: '#00c853'
	};
	var green$1 = green;

	const orange = {
	  50: '#fff3e0',
	  100: '#ffe0b2',
	  200: '#ffcc80',
	  300: '#ffb74d',
	  400: '#ffa726',
	  500: '#ff9800',
	  600: '#fb8c00',
	  700: '#f57c00',
	  800: '#ef6c00',
	  900: '#e65100',
	  A100: '#ffd180',
	  A200: '#ffab40',
	  A400: '#ff9100',
	  A700: '#ff6d00'
	};
	var orange$1 = orange;

	const grey = {
	  50: '#fafafa',
	  100: '#f5f5f5',
	  200: '#eeeeee',
	  300: '#e0e0e0',
	  400: '#bdbdbd',
	  500: '#9e9e9e',
	  600: '#757575',
	  700: '#616161',
	  800: '#424242',
	  900: '#212121',
	  A100: '#f5f5f5',
	  A200: '#eeeeee',
	  A400: '#bdbdbd',
	  A700: '#616161'
	};
	var grey$1 = grey;

	/**
	 * WARNING: Don't import this directly.
	 * Use `MuiError` from `@mui-internal/babel-macros/MuiError.macro` instead.
	 * @param {number} code
	 */
	function formatMuiErrorMessage(code) {
	  // Apply babel-plugin-transform-template-literals in loose mode
	  // loose mode is safe if we're concatenating primitives
	  // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose
	  /* eslint-disable prefer-template */
	  let url = 'https://mui.com/production-error/?code=' + code;
	  for (let i = 1; i < arguments.length; i += 1) {
	    // rest params over-transpile for this case
	    // eslint-disable-next-line prefer-rest-params
	    url += '&args[]=' + encodeURIComponent(arguments[i]);
	  }
	  return 'Minified MUI error #' + code + '; visit ' + url + ' for the full message.';
	  /* eslint-enable prefer-template */
	}

	var THEME_ID = '$$material';

	function _extends() {
	  _extends = Object.assign ? Object.assign.bind() : function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];
	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }
	    return target;
	  };
	  return _extends.apply(this, arguments);
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;
	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }
	  return target;
	}

	function memoize$1(fn) {
	  var cache = Object.create(null);
	  return function (arg) {
	    if (cache[arg] === undefined) cache[arg] = fn(arg);
	    return cache[arg];
	  };
	}

	var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23

	var isPropValid = /* #__PURE__ */memoize$1(function (prop) {
	  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111
	  /* o */ && prop.charCodeAt(1) === 110
	  /* n */ && prop.charCodeAt(2) < 91;
	}
	/* Z+1 */);

	/*

	Based off glamor's StyleSheet, thanks Sunil ❤️

	high performance StyleSheet for css-in-js systems

	- uses multiple style tags behind the scenes for millions of rules
	- uses `insertRule` for appending in production for *much* faster performance

	// usage

	import { StyleSheet } from '@emotion/sheet'

	let styleSheet = new StyleSheet({ key: '', container: document.head })

	styleSheet.insert('#box { border: 1px solid red; }')
	- appends a css rule into the stylesheet

	styleSheet.flush()
	- empties the stylesheet of all its contents

	*/
	// $FlowFixMe
	function sheetForTag(tag) {
	  if (tag.sheet) {
	    // $FlowFixMe
	    return tag.sheet;
	  } // this weirdness brought to you by firefox

	  /* istanbul ignore next */

	  for (var i = 0; i < document.styleSheets.length; i++) {
	    if (document.styleSheets[i].ownerNode === tag) {
	      // $FlowFixMe
	      return document.styleSheets[i];
	    }
	  }
	}
	function createStyleElement(options) {
	  var tag = document.createElement('style');
	  tag.setAttribute('data-emotion', options.key);
	  if (options.nonce !== undefined) {
	    tag.setAttribute('nonce', options.nonce);
	  }
	  tag.appendChild(document.createTextNode(''));
	  tag.setAttribute('data-s', '');
	  return tag;
	}
	var StyleSheet = /*#__PURE__*/function () {
	  // Using Node instead of HTMLElement since container may be a ShadowRoot
	  function StyleSheet(options) {
	    var _this = this;
	    this._insertTag = function (tag) {
	      var before;
	      if (_this.tags.length === 0) {
	        if (_this.insertionPoint) {
	          before = _this.insertionPoint.nextSibling;
	        } else if (_this.prepend) {
	          before = _this.container.firstChild;
	        } else {
	          before = _this.before;
	        }
	      } else {
	        before = _this.tags[_this.tags.length - 1].nextSibling;
	      }
	      _this.container.insertBefore(tag, before);
	      _this.tags.push(tag);
	    };
	    this.isSpeedy = options.speedy === undefined ? "production" === 'production' : options.speedy;
	    this.tags = [];
	    this.ctr = 0;
	    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

	    this.key = options.key;
	    this.container = options.container;
	    this.prepend = options.prepend;
	    this.insertionPoint = options.insertionPoint;
	    this.before = null;
	  }
	  var _proto = StyleSheet.prototype;
	  _proto.hydrate = function hydrate(nodes) {
	    nodes.forEach(this._insertTag);
	  };
	  _proto.insert = function insert(rule) {
	    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
	    // it's 1 in dev because we insert source maps that map a single rule to a location
	    // and you can only have one source map per style tag
	    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
	      this._insertTag(createStyleElement(this));
	    }
	    var tag = this.tags[this.tags.length - 1];
	    if (this.isSpeedy) {
	      var sheet = sheetForTag(tag);
	      try {
	        // this is the ultrafast version, works across browsers
	        // the big drawback is that the css won't be editable in devtools
	        sheet.insertRule(rule, sheet.cssRules.length);
	      } catch (e) {
	      }
	    } else {
	      tag.appendChild(document.createTextNode(rule));
	    }
	    this.ctr++;
	  };
	  _proto.flush = function flush() {
	    // $FlowFixMe
	    this.tags.forEach(function (tag) {
	      return tag.parentNode && tag.parentNode.removeChild(tag);
	    });
	    this.tags = [];
	    this.ctr = 0;
	  };
	  return StyleSheet;
	}();

	var MS = '-ms-';
	var MOZ = '-moz-';
	var WEBKIT = '-webkit-';
	var COMMENT = 'comm';
	var RULESET = 'rule';
	var DECLARATION = 'decl';
	var IMPORT = '@import';
	var KEYFRAMES = '@keyframes';
	var LAYER = '@layer';

	/**
	 * @param {number}
	 * @return {number}
	 */
	var abs = Math.abs;

	/**
	 * @param {number}
	 * @return {string}
	 */
	var from = String.fromCharCode;

	/**
	 * @param {object}
	 * @return {object}
	 */
	var assign = Object.assign;

	/**
	 * @param {string} value
	 * @param {number} length
	 * @return {number}
	 */
	function hash$2(value, length) {
	  return charat(value, 0) ^ 45 ? (((length << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
	}

	/**
	 * @param {string} value
	 * @return {string}
	 */
	function trim(value) {
	  return value.trim();
	}

	/**
	 * @param {string} value
	 * @param {RegExp} pattern
	 * @return {string?}
	 */
	function match(value, pattern) {
	  return (value = pattern.exec(value)) ? value[0] : value;
	}

	/**
	 * @param {string} value
	 * @param {(string|RegExp)} pattern
	 * @param {string} replacement
	 * @return {string}
	 */
	function replace(value, pattern, replacement) {
	  return value.replace(pattern, replacement);
	}

	/**
	 * @param {string} value
	 * @param {string} search
	 * @return {number}
	 */
	function indexof(value, search) {
	  return value.indexOf(search);
	}

	/**
	 * @param {string} value
	 * @param {number} index
	 * @return {number}
	 */
	function charat(value, index) {
	  return value.charCodeAt(index) | 0;
	}

	/**
	 * @param {string} value
	 * @param {number} begin
	 * @param {number} end
	 * @return {string}
	 */
	function substr(value, begin, end) {
	  return value.slice(begin, end);
	}

	/**
	 * @param {string} value
	 * @return {number}
	 */
	function strlen(value) {
	  return value.length;
	}

	/**
	 * @param {any[]} value
	 * @return {number}
	 */
	function sizeof(value) {
	  return value.length;
	}

	/**
	 * @param {any} value
	 * @param {any[]} array
	 * @return {any}
	 */
	function append(value, array) {
	  return array.push(value), value;
	}

	/**
	 * @param {string[]} array
	 * @param {function} callback
	 * @return {string}
	 */
	function combine(array, callback) {
	  return array.map(callback).join('');
	}

	var line = 1;
	var column = 1;
	var length = 0;
	var position = 0;
	var character = 0;
	var characters = '';

	/**
	 * @param {string} value
	 * @param {object | null} root
	 * @param {object | null} parent
	 * @param {string} type
	 * @param {string[] | string} props
	 * @param {object[] | string} children
	 * @param {number} length
	 */
	function node(value, root, parent, type, props, children, length) {
	  return {
	    value: value,
	    root: root,
	    parent: parent,
	    type: type,
	    props: props,
	    children: children,
	    line: line,
	    column: column,
	    length: length,
	    return: ''
	  };
	}

	/**
	 * @param {object} root
	 * @param {object} props
	 * @return {object}
	 */
	function copy(root, props) {
	  return assign(node('', null, null, '', null, null, 0), root, {
	    length: -root.length
	  }, props);
	}

	/**
	 * @return {number}
	 */
	function char() {
	  return character;
	}

	/**
	 * @return {number}
	 */
	function prev() {
	  character = position > 0 ? charat(characters, --position) : 0;
	  if (column--, character === 10) column = 1, line--;
	  return character;
	}

	/**
	 * @return {number}
	 */
	function next() {
	  character = position < length ? charat(characters, position++) : 0;
	  if (column++, character === 10) column = 1, line++;
	  return character;
	}

	/**
	 * @return {number}
	 */
	function peek() {
	  return charat(characters, position);
	}

	/**
	 * @return {number}
	 */
	function caret() {
	  return position;
	}

	/**
	 * @param {number} begin
	 * @param {number} end
	 * @return {string}
	 */
	function slice(begin, end) {
	  return substr(characters, begin, end);
	}

	/**
	 * @param {number} type
	 * @return {number}
	 */
	function token(type) {
	  switch (type) {
	    // \0 \t \n \r \s whitespace token
	    case 0:
	    case 9:
	    case 10:
	    case 13:
	    case 32:
	      return 5;
	    // ! + , / > @ ~ isolate token
	    case 33:
	    case 43:
	    case 44:
	    case 47:
	    case 62:
	    case 64:
	    case 126:
	    // ; { } breakpoint token
	    case 59:
	    case 123:
	    case 125:
	      return 4;
	    // : accompanied token
	    case 58:
	      return 3;
	    // " ' ( [ opening delimit token
	    case 34:
	    case 39:
	    case 40:
	    case 91:
	      return 2;
	    // ) ] closing delimit token
	    case 41:
	    case 93:
	      return 1;
	  }
	  return 0;
	}

	/**
	 * @param {string} value
	 * @return {any[]}
	 */
	function alloc(value) {
	  return line = column = 1, length = strlen(characters = value), position = 0, [];
	}

	/**
	 * @param {any} value
	 * @return {any}
	 */
	function dealloc(value) {
	  return characters = '', value;
	}

	/**
	 * @param {number} type
	 * @return {string}
	 */
	function delimit(type) {
	  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
	}

	/**
	 * @param {number} type
	 * @return {string}
	 */
	function whitespace(type) {
	  while (character = peek()) if (character < 33) next();else break;
	  return token(type) > 2 || token(character) > 3 ? '' : ' ';
	}

	/**
	 * @param {number} index
	 * @param {number} count
	 * @return {string}
	 */
	function escaping(index, count) {
	  while (--count && next())
	  // not 0-9 A-F a-f
	  if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97) break;
	  return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
	}

	/**
	 * @param {number} type
	 * @return {number}
	 */
	function delimiter(type) {
	  while (next()) switch (character) {
	    // ] ) " '
	    case type:
	      return position;
	    // " '
	    case 34:
	    case 39:
	      if (type !== 34 && type !== 39) delimiter(character);
	      break;
	    // (
	    case 40:
	      if (type === 41) delimiter(type);
	      break;
	    // \
	    case 92:
	      next();
	      break;
	  }
	  return position;
	}

	/**
	 * @param {number} type
	 * @param {number} index
	 * @return {number}
	 */
	function commenter(type, index) {
	  while (next())
	  // //
	  if (type + character === 47 + 10) break;
	  // /*
	  else if (type + character === 42 + 42 && peek() === 47) break;
	  return '/*' + slice(index, position - 1) + '*' + from(type === 47 ? type : next());
	}

	/**
	 * @param {number} index
	 * @return {string}
	 */
	function identifier(index) {
	  while (!token(peek())) next();
	  return slice(index, position);
	}

	/**
	 * @param {string} value
	 * @return {object[]}
	 */
	function compile(value) {
	  return dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value));
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {string[]} rule
	 * @param {string[]} rules
	 * @param {string[]} rulesets
	 * @param {number[]} pseudo
	 * @param {number[]} points
	 * @param {string[]} declarations
	 * @return {object}
	 */
	function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
	  var index = 0;
	  var offset = 0;
	  var length = pseudo;
	  var atrule = 0;
	  var property = 0;
	  var previous = 0;
	  var variable = 1;
	  var scanning = 1;
	  var ampersand = 1;
	  var character = 0;
	  var type = '';
	  var props = rules;
	  var children = rulesets;
	  var reference = rule;
	  var characters = type;
	  while (scanning) switch (previous = character, character = next()) {
	    // (
	    case 40:
	      if (previous != 108 && charat(characters, length - 1) == 58) {
	        if (indexof(characters += replace(delimit(character), '&', '&\f'), '&\f') != -1) ampersand = -1;
	        break;
	      }
	    // " ' [
	    case 34:
	    case 39:
	    case 91:
	      characters += delimit(character);
	      break;
	    // \t \n \r \s
	    case 9:
	    case 10:
	    case 13:
	    case 32:
	      characters += whitespace(previous);
	      break;
	    // \
	    case 92:
	      characters += escaping(caret() - 1, 7);
	      continue;
	    // /
	    case 47:
	      switch (peek()) {
	        case 42:
	        case 47:
	          append(comment(commenter(next(), caret()), root, parent), declarations);
	          break;
	        default:
	          characters += '/';
	      }
	      break;
	    // {
	    case 123 * variable:
	      points[index++] = strlen(characters) * ampersand;
	    // } ; \0
	    case 125 * variable:
	    case 59:
	    case 0:
	      switch (character) {
	        // \0 }
	        case 0:
	        case 125:
	          scanning = 0;
	        // ;
	        case 59 + offset:
	          if (ampersand == -1) characters = replace(characters, /\f/g, '');
	          if (property > 0 && strlen(characters) - length) append(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations);
	          break;
	        // @ ;
	        case 59:
	          characters += ';';
	        // { rule/at-rule
	        default:
	          append(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets);
	          if (character === 123) if (offset === 0) parse(characters, root, reference, reference, props, rulesets, length, points, children);else switch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {
	            // d l m s
	            case 100:
	            case 108:
	            case 109:
	            case 115:
	              parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children);
	              break;
	            default:
	              parse(characters, reference, reference, reference, [''], children, 0, points, children);
	          }
	      }
	      index = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo;
	      break;
	    // :
	    case 58:
	      length = 1 + strlen(characters), property = previous;
	    default:
	      if (variable < 1) if (character == 123) --variable;else if (character == 125 && variable++ == 0 && prev() == 125) continue;
	      switch (characters += from(character), character * variable) {
	        // &
	        case 38:
	          ampersand = offset > 0 ? 1 : (characters += '\f', -1);
	          break;
	        // ,
	        case 44:
	          points[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1;
	          break;
	        // @
	        case 64:
	          // -
	          if (peek() === 45) characters += delimit(next());
	          atrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++;
	          break;
	        // -
	        case 45:
	          if (previous === 45 && strlen(characters) == 2) variable = 0;
	      }
	  }
	  return rulesets;
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {number} index
	 * @param {number} offset
	 * @param {string[]} rules
	 * @param {number[]} points
	 * @param {string} type
	 * @param {string[]} props
	 * @param {string[]} children
	 * @param {number} length
	 * @return {object}
	 */
	function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length) {
	  var post = offset - 1;
	  var rule = offset === 0 ? rules : [''];
	  var size = sizeof(rule);
	  for (var i = 0, j = 0, k = 0; i < index; ++i) for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x) if (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\f/g, rule[x]))) props[k++] = z;
	  return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length);
	}

	/**
	 * @param {number} value
	 * @param {object} root
	 * @param {object?} parent
	 * @return {object}
	 */
	function comment(value, root, parent) {
	  return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
	}

	/**
	 * @param {string} value
	 * @param {object} root
	 * @param {object?} parent
	 * @param {number} length
	 * @return {object}
	 */
	function declaration(value, root, parent, length) {
	  return node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length);
	}

	/**
	 * @param {object[]} children
	 * @param {function} callback
	 * @return {string}
	 */
	function serialize(children, callback) {
	  var output = '';
	  var length = sizeof(children);
	  for (var i = 0; i < length; i++) output += callback(children[i], i, children, callback) || '';
	  return output;
	}

	/**
	 * @param {object} element
	 * @param {number} index
	 * @param {object[]} children
	 * @param {function} callback
	 * @return {string}
	 */
	function stringify(element, index, children, callback) {
	  switch (element.type) {
	    case LAYER:
	      if (element.children.length) break;
	    case IMPORT:
	    case DECLARATION:
	      return element.return = element.return || element.value;
	    case COMMENT:
	      return '';
	    case KEYFRAMES:
	      return element.return = element.value + '{' + serialize(element.children, callback) + '}';
	    case RULESET:
	      element.value = element.props.join(',');
	  }
	  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : '';
	}

	/**
	 * @param {function[]} collection
	 * @return {function}
	 */
	function middleware(collection) {
	  var length = sizeof(collection);
	  return function (element, index, children, callback) {
	    var output = '';
	    for (var i = 0; i < length; i++) output += collection[i](element, index, children, callback) || '';
	    return output;
	  };
	}

	/**
	 * @param {function} callback
	 * @return {function}
	 */
	function rulesheet(callback) {
	  return function (element) {
	    if (!element.root) if (element = element.return) callback(element);
	  };
	}

	var weakMemoize = function weakMemoize(func) {
	  // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
	  var cache = new WeakMap();
	  return function (arg) {
	    if (cache.has(arg)) {
	      // $FlowFixMe
	      return cache.get(arg);
	    }
	    var ret = func(arg);
	    cache.set(arg, ret);
	    return ret;
	  };
	};

	var identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {
	  var previous = 0;
	  var character = 0;
	  while (true) {
	    previous = character;
	    character = peek(); // &\f

	    if (previous === 38 && character === 12) {
	      points[index] = 1;
	    }
	    if (token(character)) {
	      break;
	    }
	    next();
	  }
	  return slice(begin, position);
	};
	var toRules = function toRules(parsed, points) {
	  // pretend we've started with a comma
	  var index = -1;
	  var character = 44;
	  do {
	    switch (token(character)) {
	      case 0:
	        // &\f
	        if (character === 38 && peek() === 12) {
	          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
	          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
	          // and when it should just concatenate the outer and inner selectors
	          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
	          points[index] = 1;
	        }
	        parsed[index] += identifierWithPointTracking(position - 1, points, index);
	        break;
	      case 2:
	        parsed[index] += delimit(character);
	        break;
	      case 4:
	        // comma
	        if (character === 44) {
	          // colon
	          parsed[++index] = peek() === 58 ? '&\f' : '';
	          points[index] = parsed[index].length;
	          break;
	        }

	      // fallthrough

	      default:
	        parsed[index] += from(character);
	    }
	  } while (character = next());
	  return parsed;
	};
	var getRules = function getRules(value, points) {
	  return dealloc(toRules(alloc(value), points));
	}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11

	var fixedElements = /* #__PURE__ */new WeakMap();
	var compat = function compat(element) {
	  if (element.type !== 'rule' || !element.parent ||
	  // positive .length indicates that this rule contains pseudo
	  // negative .length indicates that this rule has been already prefixed
	  element.length < 1) {
	    return;
	  }
	  var value = element.value,
	    parent = element.parent;
	  var isImplicitRule = element.column === parent.column && element.line === parent.line;
	  while (parent.type !== 'rule') {
	    parent = parent.parent;
	    if (!parent) return;
	  } // short-circuit for the simplest case

	  if (element.props.length === 1 && value.charCodeAt(0) !== 58
	  /* colon */ && !fixedElements.get(parent)) {
	    return;
	  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
	  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"

	  if (isImplicitRule) {
	    return;
	  }
	  fixedElements.set(element, true);
	  var points = [];
	  var rules = getRules(value, points);
	  var parentRules = parent.props;
	  for (var i = 0, k = 0; i < rules.length; i++) {
	    for (var j = 0; j < parentRules.length; j++, k++) {
	      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
	    }
	  }
	};
	var removeLabel = function removeLabel(element) {
	  if (element.type === 'decl') {
	    var value = element.value;
	    if (
	    // charcode for l
	    value.charCodeAt(0) === 108 &&
	    // charcode for b
	    value.charCodeAt(2) === 98) {
	      // this ignores label
	      element["return"] = '';
	      element.value = '';
	    }
	  }
	};

	/* eslint-disable no-fallthrough */

	function prefix(value, length) {
	  switch (hash$2(value, length)) {
	    // color-adjust
	    case 5103:
	      return WEBKIT + 'print-' + value + value;
	    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)

	    case 5737:
	    case 4201:
	    case 3177:
	    case 3433:
	    case 1641:
	    case 4457:
	    case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break

	    case 5572:
	    case 6356:
	    case 5844:
	    case 3191:
	    case 6645:
	    case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,

	    case 6391:
	    case 5879:
	    case 5623:
	    case 6135:
	    case 4599:
	    case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)

	    case 4215:
	    case 6389:
	    case 5109:
	    case 5365:
	    case 5621:
	    case 3829:
	      return WEBKIT + value + value;
	    // appearance, user-select, transform, hyphens, text-size-adjust

	    case 5349:
	    case 4246:
	    case 4810:
	    case 6968:
	    case 2756:
	      return WEBKIT + value + MOZ + value + MS + value + value;
	    // flex, flex-direction

	    case 6828:
	    case 4268:
	      return WEBKIT + value + MS + value + value;
	    // order

	    case 6165:
	      return WEBKIT + value + MS + 'flex-' + value + value;
	    // align-items

	    case 5187:
	      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;
	    // align-self

	    case 5443:
	      return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/, '') + value;
	    // align-content

	    case 4675:
	      return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/, '') + value;
	    // flex-shrink

	    case 5548:
	      return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value;
	    // flex-basis

	    case 5292:
	      return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value;
	    // flex-grow

	    case 6060:
	      return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value;
	    // transition

	    case 4554:
	      return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;
	    // cursor

	    case 6187:
	      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;
	    // background, background-image

	    case 5495:
	    case 3959:
	      return replace(value, /(image-set\([^]*)/, WEBKIT + '$1' + '$`$1');
	    // justify-content

	    case 4968:
	      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;
	    // (margin|padding)-inline-(start|end)

	    case 4095:
	    case 3583:
	    case 4068:
	    case 2532:
	      return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;
	    // (min|max)?(width|height|inline-size|block-size)

	    case 8116:
	    case 7059:
	    case 5753:
	    case 5535:
	    case 5445:
	    case 5701:
	    case 4933:
	    case 4677:
	    case 5533:
	    case 5789:
	    case 5021:
	    case 4765:
	      // stretch, max-content, min-content, fill-available
	      if (strlen(value) - 1 - length > 6) switch (charat(value, length + 1)) {
	        // (m)ax-content, (m)in-content
	        case 109:
	          // -
	          if (charat(value, length + 4) !== 45) break;
	        // (f)ill-available, (f)it-content

	        case 102:
	          return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;
	        // (s)tretch

	        case 115:
	          return ~indexof(value, 'stretch') ? prefix(replace(value, 'stretch', 'fill-available'), length) + value : value;
	      }
	      break;
	    // position: sticky

	    case 4949:
	      // (s)ticky?
	      if (charat(value, length + 1) !== 115) break;
	    // display: (flex|inline-flex)

	    case 6444:
	      switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {
	        // stic(k)y
	        case 107:
	          return replace(value, ':', ':' + WEBKIT) + value;
	        // (inline-)?fl(e)x

	        case 101:
	          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;
	      }
	      break;
	    // writing-mode

	    case 5936:
	      switch (charat(value, length + 11)) {
	        // vertical-l(r)
	        case 114:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb') + value;
	        // vertical-r(l)

	        case 108:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'tb-rl') + value;
	        // horizontal(-)tb

	        case 45:
	          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, 'lr') + value;
	      }
	      return WEBKIT + value + MS + value + value;
	  }
	  return value;
	}
	var prefixer = function prefixer(element, index, children, callback) {
	  if (element.length > -1) if (!element["return"]) switch (element.type) {
	    case DECLARATION:
	      element["return"] = prefix(element.value, element.length);
	      break;
	    case KEYFRAMES:
	      return serialize([copy(element, {
	        value: replace(element.value, '@', '@' + WEBKIT)
	      })], callback);
	    case RULESET:
	      if (element.length) return combine(element.props, function (value) {
	        switch (match(value, /(::plac\w+|:read-\w+)/)) {
	          // :read-(only|write)
	          case ':read-only':
	          case ':read-write':
	            return serialize([copy(element, {
	              props: [replace(value, /:(read-\w+)/, ':' + MOZ + '$1')]
	            })], callback);
	          // :placeholder

	          case '::placeholder':
	            return serialize([copy(element, {
	              props: [replace(value, /:(plac\w+)/, ':' + WEBKIT + 'input-$1')]
	            }), copy(element, {
	              props: [replace(value, /:(plac\w+)/, ':' + MOZ + '$1')]
	            }), copy(element, {
	              props: [replace(value, /:(plac\w+)/, MS + 'input-$1')]
	            })], callback);
	        }
	        return '';
	      });
	  }
	};
	var isBrowser$4 = typeof document !== 'undefined';
	var getServerStylisCache = isBrowser$4 ? undefined : weakMemoize(function () {
	  return memoize$1(function () {
	    var cache = {};
	    return function (name) {
	      return cache[name];
	    };
	  });
	});
	var defaultStylisPlugins = [prefixer];
	var createCache = function createCache(options) {
	  var key = options.key;
	  if (isBrowser$4 && key === 'css') {
	    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
	    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
	    // note this very very intentionally targets all style elements regardless of the key to ensure
	    // that creating a cache works inside of render of a React component

	    Array.prototype.forEach.call(ssrStyles, function (node) {
	      // we want to only move elements which have a space in the data-emotion attribute value
	      // because that indicates that it is an Emotion 11 server-side rendered style elements
	      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
	      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
	      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
	      // will not result in the Emotion 10 styles being destroyed
	      var dataEmotionAttribute = node.getAttribute('data-emotion');
	      if (dataEmotionAttribute.indexOf(' ') === -1) {
	        return;
	      }
	      document.head.appendChild(node);
	      node.setAttribute('data-s', '');
	    });
	  }
	  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
	  var inserted = {};
	  var container;
	  var nodesToHydrate = [];
	  if (isBrowser$4) {
	    container = options.container || document.head;
	    Array.prototype.forEach.call(
	    // this means we will ignore elements which don't have a space in them which
	    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
	    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
	      var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

	      for (var i = 1; i < attrib.length; i++) {
	        inserted[attrib[i]] = true;
	      }
	      nodesToHydrate.push(node);
	    });
	  }
	  var _insert;
	  var omnipresentPlugins = [compat, removeLabel];
	  if (isBrowser$4) {
	    var currentSheet;
	    var finalizingPlugins = [stringify, rulesheet(function (rule) {
	      currentSheet.insert(rule);
	    })];
	    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
	    var stylis = function stylis(styles) {
	      return serialize(compile(styles), serializer);
	    };
	    _insert = function insert(selector, serialized, sheet, shouldCache) {
	      currentSheet = sheet;
	      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
	      if (shouldCache) {
	        cache.inserted[serialized.name] = true;
	      }
	    };
	  } else {
	    var _finalizingPlugins = [stringify];
	    var _serializer = middleware(omnipresentPlugins.concat(stylisPlugins, _finalizingPlugins));
	    var _stylis = function _stylis(styles) {
	      return serialize(compile(styles), _serializer);
	    }; // $FlowFixMe

	    var serverStylisCache = getServerStylisCache(stylisPlugins)(key);
	    var getRules = function getRules(selector, serialized) {
	      var name = serialized.name;
	      if (serverStylisCache[name] === undefined) {
	        serverStylisCache[name] = _stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
	      }
	      return serverStylisCache[name];
	    };
	    _insert = function _insert(selector, serialized, sheet, shouldCache) {
	      var name = serialized.name;
	      var rules = getRules(selector, serialized);
	      if (cache.compat === undefined) {
	        // in regular mode, we don't set the styles on the inserted cache
	        // since we don't need to and that would be wasting memory
	        // we return them so that they are rendered in a style tag
	        if (shouldCache) {
	          cache.inserted[name] = true;
	        }
	        return rules;
	      } else {
	        // in compat mode, we put the styles on the inserted cache so
	        // that emotion-server can pull out the styles
	        // except when we don't want to cache it which was in Global but now
	        // is nowhere but we don't want to do a major right now
	        // and just in case we're going to leave the case here
	        // it's also not affecting client side bundle size
	        // so it's really not a big deal
	        if (shouldCache) {
	          cache.inserted[name] = rules;
	        } else {
	          return rules;
	        }
	      }
	    };
	  }
	  var cache = {
	    key: key,
	    sheet: new StyleSheet({
	      key: key,
	      container: container,
	      nonce: options.nonce,
	      speedy: options.speedy,
	      prepend: options.prepend,
	      insertionPoint: options.insertionPoint
	    }),
	    nonce: options.nonce,
	    inserted: inserted,
	    registered: {},
	    insert: _insert
	  };
	  cache.sheet.hydrate(nodesToHydrate);
	  return cache;
	};

	var reactIs$1 = {exports: {}};

	var reactIs_production_min$1 = {};

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_production_min$1;

	function requireReactIs_production_min$1 () {
		if (hasRequiredReactIs_production_min$1) return reactIs_production_min$1;
		hasRequiredReactIs_production_min$1 = 1;

		var b = "function" === typeof Symbol && Symbol.for,
		  c = b ? Symbol.for("react.element") : 60103,
		  d = b ? Symbol.for("react.portal") : 60106,
		  e = b ? Symbol.for("react.fragment") : 60107,
		  f = b ? Symbol.for("react.strict_mode") : 60108,
		  g = b ? Symbol.for("react.profiler") : 60114,
		  h = b ? Symbol.for("react.provider") : 60109,
		  k = b ? Symbol.for("react.context") : 60110,
		  l = b ? Symbol.for("react.async_mode") : 60111,
		  m = b ? Symbol.for("react.concurrent_mode") : 60111,
		  n = b ? Symbol.for("react.forward_ref") : 60112,
		  p = b ? Symbol.for("react.suspense") : 60113,
		  q = b ? Symbol.for("react.suspense_list") : 60120,
		  r = b ? Symbol.for("react.memo") : 60115,
		  t = b ? Symbol.for("react.lazy") : 60116,
		  v = b ? Symbol.for("react.block") : 60121,
		  w = b ? Symbol.for("react.fundamental") : 60117,
		  x = b ? Symbol.for("react.responder") : 60118,
		  y = b ? Symbol.for("react.scope") : 60119;
		function z(a) {
		  if ("object" === typeof a && null !== a) {
		    var u = a.$$typeof;
		    switch (u) {
		      case c:
		        switch (a = a.type, a) {
		          case l:
		          case m:
		          case e:
		          case g:
		          case f:
		          case p:
		            return a;
		          default:
		            switch (a = a && a.$$typeof, a) {
		              case k:
		              case n:
		              case t:
		              case r:
		              case h:
		                return a;
		              default:
		                return u;
		            }
		        }
		      case d:
		        return u;
		    }
		  }
		}
		function A(a) {
		  return z(a) === m;
		}
		reactIs_production_min$1.AsyncMode = l;
		reactIs_production_min$1.ConcurrentMode = m;
		reactIs_production_min$1.ContextConsumer = k;
		reactIs_production_min$1.ContextProvider = h;
		reactIs_production_min$1.Element = c;
		reactIs_production_min$1.ForwardRef = n;
		reactIs_production_min$1.Fragment = e;
		reactIs_production_min$1.Lazy = t;
		reactIs_production_min$1.Memo = r;
		reactIs_production_min$1.Portal = d;
		reactIs_production_min$1.Profiler = g;
		reactIs_production_min$1.StrictMode = f;
		reactIs_production_min$1.Suspense = p;
		reactIs_production_min$1.isAsyncMode = function (a) {
		  return A(a) || z(a) === l;
		};
		reactIs_production_min$1.isConcurrentMode = A;
		reactIs_production_min$1.isContextConsumer = function (a) {
		  return z(a) === k;
		};
		reactIs_production_min$1.isContextProvider = function (a) {
		  return z(a) === h;
		};
		reactIs_production_min$1.isElement = function (a) {
		  return "object" === typeof a && null !== a && a.$$typeof === c;
		};
		reactIs_production_min$1.isForwardRef = function (a) {
		  return z(a) === n;
		};
		reactIs_production_min$1.isFragment = function (a) {
		  return z(a) === e;
		};
		reactIs_production_min$1.isLazy = function (a) {
		  return z(a) === t;
		};
		reactIs_production_min$1.isMemo = function (a) {
		  return z(a) === r;
		};
		reactIs_production_min$1.isPortal = function (a) {
		  return z(a) === d;
		};
		reactIs_production_min$1.isProfiler = function (a) {
		  return z(a) === g;
		};
		reactIs_production_min$1.isStrictMode = function (a) {
		  return z(a) === f;
		};
		reactIs_production_min$1.isSuspense = function (a) {
		  return z(a) === p;
		};
		reactIs_production_min$1.isValidElementType = function (a) {
		  return "string" === typeof a || "function" === typeof a || a === e || a === m || a === g || a === f || a === p || a === q || "object" === typeof a && null !== a && (a.$$typeof === t || a.$$typeof === r || a.$$typeof === h || a.$$typeof === k || a.$$typeof === n || a.$$typeof === w || a.$$typeof === x || a.$$typeof === y || a.$$typeof === v);
		};
		reactIs_production_min$1.typeOf = z;
		return reactIs_production_min$1;
	}

	var hasRequiredReactIs;

	function requireReactIs () {
		if (hasRequiredReactIs) return reactIs$1.exports;
		hasRequiredReactIs = 1;

		{
		  reactIs$1.exports = requireReactIs_production_min$1();
		}
		return reactIs$1.exports;
	}

	var reactIs = requireReactIs();
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	var isBrowser$3 = typeof document !== 'undefined';
	function getRegisteredStyles(registered, registeredStyles, classNames) {
	  var rawClassName = '';
	  classNames.split(' ').forEach(function (className) {
	    if (registered[className] !== undefined) {
	      registeredStyles.push(registered[className] + ";");
	    } else {
	      rawClassName += className + " ";
	    }
	  });
	  return rawClassName;
	}
	var registerStyles = function registerStyles(cache, serialized, isStringTag) {
	  var className = cache.key + "-" + serialized.name;
	  if (
	  // we only need to add the styles to the registered cache if the
	  // class name could be used further down
	  // the tree but if it's a string tag, we know it won't
	  // so we don't have to add it to registered cache.
	  // this improves memory usage since we can avoid storing the whole style string
	  (isStringTag === false ||
	  // we need to always store it if we're in compat mode and
	  // in node since emotion-server relies on whether a style is in
	  // the registered cache to know whether a style is global or not
	  // also, note that this check will be dead code eliminated in the browser
	  isBrowser$3 === false && cache.compat !== undefined) && cache.registered[className] === undefined) {
	    cache.registered[className] = serialized.styles;
	  }
	};
	var insertStyles = function insertStyles(cache, serialized, isStringTag) {
	  registerStyles(cache, serialized, isStringTag);
	  var className = cache.key + "-" + serialized.name;
	  if (cache.inserted[serialized.name] === undefined) {
	    var stylesForSSR = '';
	    var current = serialized;
	    do {
	      var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);
	      if (!isBrowser$3 && maybeStyles !== undefined) {
	        stylesForSSR += maybeStyles;
	      }
	      current = current.next;
	    } while (current !== undefined);
	    if (!isBrowser$3 && stylesForSSR.length !== 0) {
	      return stylesForSSR;
	    }
	  }
	};

	/* eslint-disable */
	// Inspired by https://github.com/garycourt/murmurhash-js
	// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
	function murmur2(str) {
	  // 'm' and 'r' are mixing constants generated offline.
	  // They're not really 'magic', they just happen to work well.
	  // const m = 0x5bd1e995;
	  // const r = 24;
	  // Initialize the hash
	  var h = 0; // Mix 4 bytes at a time into the hash

	  var k,
	    i = 0,
	    len = str.length;
	  for (; len >= 4; ++i, len -= 4) {
	    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
	    k = /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
	    k ^= /* k >>> r: */
	    k >>> 24;
	    h = /* Math.imul(k, m): */
	    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^ /* Math.imul(h, m): */
	    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Handle the last few bytes of the input array

	  switch (len) {
	    case 3:
	      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;
	    case 2:
	      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;
	    case 1:
	      h ^= str.charCodeAt(i) & 0xff;
	      h = /* Math.imul(h, m): */
	      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  } // Do a few final mixes of the hash to ensure the last few
	  // bytes are well-incorporated.

	  h ^= h >>> 13;
	  h = /* Math.imul(h, m): */
	  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
	  return ((h ^ h >>> 15) >>> 0).toString(36);
	}

	var unitlessKeys = {
	  animationIterationCount: 1,
	  aspectRatio: 1,
	  borderImageOutset: 1,
	  borderImageSlice: 1,
	  borderImageWidth: 1,
	  boxFlex: 1,
	  boxFlexGroup: 1,
	  boxOrdinalGroup: 1,
	  columnCount: 1,
	  columns: 1,
	  flex: 1,
	  flexGrow: 1,
	  flexPositive: 1,
	  flexShrink: 1,
	  flexNegative: 1,
	  flexOrder: 1,
	  gridRow: 1,
	  gridRowEnd: 1,
	  gridRowSpan: 1,
	  gridRowStart: 1,
	  gridColumn: 1,
	  gridColumnEnd: 1,
	  gridColumnSpan: 1,
	  gridColumnStart: 1,
	  msGridRow: 1,
	  msGridRowSpan: 1,
	  msGridColumn: 1,
	  msGridColumnSpan: 1,
	  fontWeight: 1,
	  lineHeight: 1,
	  opacity: 1,
	  order: 1,
	  orphans: 1,
	  tabSize: 1,
	  widows: 1,
	  zIndex: 1,
	  zoom: 1,
	  WebkitLineClamp: 1,
	  // SVG-related properties
	  fillOpacity: 1,
	  floodOpacity: 1,
	  stopOpacity: 1,
	  strokeDasharray: 1,
	  strokeDashoffset: 1,
	  strokeMiterlimit: 1,
	  strokeOpacity: 1,
	  strokeWidth: 1
	};

	var hyphenateRegex = /[A-Z]|^ms/g;
	var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
	var isCustomProperty = function isCustomProperty(property) {
	  return property.charCodeAt(1) === 45;
	};
	var isProcessableValue = function isProcessableValue(value) {
	  return value != null && typeof value !== 'boolean';
	};
	var processStyleName = /* #__PURE__ */memoize$1(function (styleName) {
	  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
	});
	var processStyleValue = function processStyleValue(key, value) {
	  switch (key) {
	    case 'animation':
	    case 'animationName':
	      {
	        if (typeof value === 'string') {
	          return value.replace(animationRegex, function (match, p1, p2) {
	            cursor = {
	              name: p1,
	              styles: p2,
	              next: cursor
	            };
	            return p1;
	          });
	        }
	      }
	  }
	  if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
	    return value + 'px';
	  }
	  return value;
	};
	var noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';
	function handleInterpolation(mergedProps, registered, interpolation) {
	  if (interpolation == null) {
	    return '';
	  }
	  if (interpolation.__emotion_styles !== undefined) {
	    return interpolation;
	  }
	  switch (typeof interpolation) {
	    case 'boolean':
	      {
	        return '';
	      }
	    case 'object':
	      {
	        if (interpolation.anim === 1) {
	          cursor = {
	            name: interpolation.name,
	            styles: interpolation.styles,
	            next: cursor
	          };
	          return interpolation.name;
	        }
	        if (interpolation.styles !== undefined) {
	          var next = interpolation.next;
	          if (next !== undefined) {
	            // not the most efficient thing ever but this is a pretty rare case
	            // and there will be very few iterations of this generally
	            while (next !== undefined) {
	              cursor = {
	                name: next.name,
	                styles: next.styles,
	                next: cursor
	              };
	              next = next.next;
	            }
	          }
	          var styles = interpolation.styles + ";";
	          return styles;
	        }
	        return createStringFromObject(mergedProps, registered, interpolation);
	      }
	    case 'function':
	      {
	        if (mergedProps !== undefined) {
	          var previousCursor = cursor;
	          var result = interpolation(mergedProps);
	          cursor = previousCursor;
	          return handleInterpolation(mergedProps, registered, result);
	        }
	        break;
	      }
	  } // finalize string values (regular strings and functions interpolated into css calls)

	  if (registered == null) {
	    return interpolation;
	  }
	  var cached = registered[interpolation];
	  return cached !== undefined ? cached : interpolation;
	}
	function createStringFromObject(mergedProps, registered, obj) {
	  var string = '';
	  if (Array.isArray(obj)) {
	    for (var i = 0; i < obj.length; i++) {
	      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
	    }
	  } else {
	    for (var _key in obj) {
	      var value = obj[_key];
	      if (typeof value !== 'object') {
	        if (registered != null && registered[value] !== undefined) {
	          string += _key + "{" + registered[value] + "}";
	        } else if (isProcessableValue(value)) {
	          string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
	        }
	      } else {
	        if (_key === 'NO_COMPONENT_SELECTOR' && "production" !== 'production') {
	          throw new Error(noComponentSelectorMessage);
	        }
	        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
	          for (var _i = 0; _i < value.length; _i++) {
	            if (isProcessableValue(value[_i])) {
	              string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
	            }
	          }
	        } else {
	          var interpolated = handleInterpolation(mergedProps, registered, value);
	          switch (_key) {
	            case 'animation':
	            case 'animationName':
	              {
	                string += processStyleName(_key) + ":" + interpolated + ";";
	                break;
	              }
	            default:
	              {
	                string += _key + "{" + interpolated + "}";
	              }
	          }
	        }
	      }
	    }
	  }
	  return string;
	}
	var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
	// keyframes are stored on the SerializedStyles object as a linked list

	var cursor;
	var serializeStyles = function serializeStyles(args, registered, mergedProps) {
	  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
	    return args[0];
	  }
	  var stringMode = true;
	  var styles = '';
	  cursor = undefined;
	  var strings = args[0];
	  if (strings == null || strings.raw === undefined) {
	    stringMode = false;
	    styles += handleInterpolation(mergedProps, registered, strings);
	  } else {
	    styles += strings[0];
	  } // we start at 1 since we've already handled the first arg

	  for (var i = 1; i < args.length; i++) {
	    styles += handleInterpolation(mergedProps, registered, args[i]);
	    if (stringMode) {
	      styles += strings[i];
	    }
	  }

	  labelPattern.lastIndex = 0;
	  var identifierName = '';
	  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

	  while ((match = labelPattern.exec(styles)) !== null) {
	    identifierName += '-' +
	    // $FlowFixMe we know it's not null
	    match[1];
	  }
	  var name = murmur2(styles) + identifierName;
	  return {
	    name: name,
	    styles: styles,
	    next: cursor
	  };
	};

	var isBrowser$2 = typeof document !== 'undefined';
	var syncFallback = function syncFallback(create) {
	  return create();
	};
	var useInsertionEffect = React$1['useInsertion' + 'Effect'] ? React$1['useInsertion' + 'Effect'] : false;
	var useInsertionEffectAlwaysWithSyncFallback = !isBrowser$2 ? syncFallback : useInsertionEffect || syncFallback;
	var useInsertionEffectWithLayoutFallback = useInsertionEffect || reactExports.useLayoutEffect;

	var isBrowser$1 = typeof document !== 'undefined';
	var EmotionCacheContext = /* #__PURE__ */reactExports.createContext(
	// we're doing this to avoid preconstruct's dead code elimination in this one case
	// because this module is primarily intended for the browser and node
	// but it's also required in react native and similar environments sometimes
	// and we could have a special build just for that
	// but this is much easier and the native packages
	// might use a different theme context in the future anyway
	typeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({
	  key: 'css'
	}) : null);
	EmotionCacheContext.Provider;
	var withEmotionCache = function withEmotionCache(func) {
	  // $FlowFixMe
	  return /*#__PURE__*/reactExports.forwardRef(function (props, ref) {
	    // the cache will never be null in the browser
	    var cache = reactExports.useContext(EmotionCacheContext);
	    return func(props, cache, ref);
	  });
	};
	if (!isBrowser$1) {
	  withEmotionCache = function withEmotionCache(func) {
	    return function (props) {
	      var cache = reactExports.useContext(EmotionCacheContext);
	      if (cache === null) {
	        // yes, we're potentially creating this on every render
	        // it doesn't actually matter though since it's only on the server
	        // so there will only every be a single render
	        // that could change in the future because of suspense and etc. but for now,
	        // this works and i don't want to optimise for a future thing that we aren't sure about
	        cache = createCache({
	          key: 'css'
	        });
	        return /*#__PURE__*/reactExports.createElement(EmotionCacheContext.Provider, {
	          value: cache
	        }, func(props, cache));
	      } else {
	        return func(props, cache);
	      }
	    };
	  };
	}
	var ThemeContext = /* #__PURE__ */reactExports.createContext({});

	// initial render from browser, insertBefore context.sheet.tags[0] or if a style hasn't been inserted there yet, appendChild
	// initial client-side render from SSR, use place of hydrating tag

	var Global = /* #__PURE__ */withEmotionCache(function (props, cache) {
	  var styles = props.styles;
	  var serialized = serializeStyles([styles], undefined, reactExports.useContext(ThemeContext));
	  if (!isBrowser$1) {
	    var _ref;
	    var serializedNames = serialized.name;
	    var serializedStyles = serialized.styles;
	    var next = serialized.next;
	    while (next !== undefined) {
	      serializedNames += ' ' + next.name;
	      serializedStyles += next.styles;
	      next = next.next;
	    }
	    var shouldCache = cache.compat === true;
	    var rules = cache.insert("", {
	      name: serializedNames,
	      styles: serializedStyles
	    }, cache.sheet, shouldCache);
	    if (shouldCache) {
	      return null;
	    }
	    return /*#__PURE__*/reactExports.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
	      __html: rules
	    }, _ref.nonce = cache.sheet.nonce, _ref));
	  } // yes, i know these hooks are used conditionally
	  // but it is based on a constant that will never change at runtime
	  // it's effectively like having two implementations and switching them out
	  // so it's not actually breaking anything

	  var sheetRef = reactExports.useRef();
	  useInsertionEffectWithLayoutFallback(function () {
	    var key = cache.key + "-global"; // use case of https://github.com/emotion-js/emotion/issues/2675

	    var sheet = new cache.sheet.constructor({
	      key: key,
	      nonce: cache.sheet.nonce,
	      container: cache.sheet.container,
	      speedy: cache.sheet.isSpeedy
	    });
	    var rehydrating = false; // $FlowFixMe

	    var node = document.querySelector("style[data-emotion=\"" + key + " " + serialized.name + "\"]");
	    if (cache.sheet.tags.length) {
	      sheet.before = cache.sheet.tags[0];
	    }
	    if (node !== null) {
	      rehydrating = true; // clear the hash so this node won't be recognizable as rehydratable by other <Global/>s

	      node.setAttribute('data-emotion', key);
	      sheet.hydrate([node]);
	    }
	    sheetRef.current = [sheet, rehydrating];
	    return function () {
	      sheet.flush();
	    };
	  }, [cache]);
	  useInsertionEffectWithLayoutFallback(function () {
	    var sheetRefCurrent = sheetRef.current;
	    var sheet = sheetRefCurrent[0],
	      rehydrating = sheetRefCurrent[1];
	    if (rehydrating) {
	      sheetRefCurrent[1] = false;
	      return;
	    }
	    if (serialized.next !== undefined) {
	      // insert keyframes
	      insertStyles(cache, serialized.next, true);
	    }
	    if (sheet.tags.length) {
	      // if this doesn't exist then it will be null so the style element will be appended
	      var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
	      sheet.before = element;
	      sheet.flush();
	    }
	    cache.insert("", serialized, sheet, false);
	  }, [cache, serialized.name]);
	  return null;
	});
	function css() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	  return serializeStyles(args);
	}
	var keyframes = function keyframes() {
	  var insertable = css.apply(void 0, arguments);
	  var name = "animation-" + insertable.name; // $FlowFixMe

	  return {
	    name: name,
	    styles: "@keyframes " + name + "{" + insertable.styles + "}",
	    anim: 1,
	    toString: function toString() {
	      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
	    }
	  };
	};

	var testOmitPropsOnStringTag = isPropValid;
	var testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {
	  return key !== 'theme';
	};
	var getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {
	  return typeof tag === 'string' &&
	  // 96 is one less than the char code
	  // for "a" so this is checking that
	  // it's a lowercase character
	  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
	};
	var composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {
	  var shouldForwardProp;
	  if (options) {
	    var optionsShouldForwardProp = options.shouldForwardProp;
	    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {
	      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
	    } : optionsShouldForwardProp;
	  }
	  if (typeof shouldForwardProp !== 'function' && isReal) {
	    shouldForwardProp = tag.__emotion_forwardProp;
	  }
	  return shouldForwardProp;
	};
	var isBrowser = typeof document !== 'undefined';
	var Insertion = function Insertion(_ref) {
	  var cache = _ref.cache,
	    serialized = _ref.serialized,
	    isStringTag = _ref.isStringTag;
	  registerStyles(cache, serialized, isStringTag);
	  var rules = useInsertionEffectAlwaysWithSyncFallback(function () {
	    return insertStyles(cache, serialized, isStringTag);
	  });
	  if (!isBrowser && rules !== undefined) {
	    var _ref2;
	    var serializedNames = serialized.name;
	    var next = serialized.next;
	    while (next !== undefined) {
	      serializedNames += ' ' + next.name;
	      next = next.next;
	    }
	    return /*#__PURE__*/reactExports.createElement("style", (_ref2 = {}, _ref2["data-emotion"] = cache.key + " " + serializedNames, _ref2.dangerouslySetInnerHTML = {
	      __html: rules
	    }, _ref2.nonce = cache.sheet.nonce, _ref2));
	  }
	  return null;
	};
	var createStyled$1 = function createStyled(tag, options) {
	  var isReal = tag.__emotion_real === tag;
	  var baseTag = isReal && tag.__emotion_base || tag;
	  var identifierName;
	  var targetClassName;
	  if (options !== undefined) {
	    identifierName = options.label;
	    targetClassName = options.target;
	  }
	  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
	  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
	  var shouldUseAs = !defaultShouldForwardProp('as');
	  return function () {
	    var args = arguments;
	    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];
	    if (identifierName !== undefined) {
	      styles.push("label:" + identifierName + ";");
	    }
	    if (args[0] == null || args[0].raw === undefined) {
	      styles.push.apply(styles, args);
	    } else {
	      styles.push(args[0][0]);
	      var len = args.length;
	      var i = 1;
	      for (; i < len; i++) {
	        styles.push(args[i], args[0][i]);
	      }
	    } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class

	    var Styled = withEmotionCache(function (props, cache, ref) {
	      var FinalTag = shouldUseAs && props.as || baseTag;
	      var className = '';
	      var classInterpolations = [];
	      var mergedProps = props;
	      if (props.theme == null) {
	        mergedProps = {};
	        for (var key in props) {
	          mergedProps[key] = props[key];
	        }
	        mergedProps.theme = reactExports.useContext(ThemeContext);
	      }
	      if (typeof props.className === 'string') {
	        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);
	      } else if (props.className != null) {
	        className = props.className + " ";
	      }
	      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);
	      className += cache.key + "-" + serialized.name;
	      if (targetClassName !== undefined) {
	        className += " " + targetClassName;
	      }
	      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
	      var newProps = {};
	      for (var _key in props) {
	        if (shouldUseAs && _key === 'as') continue;
	        if (
	        // $FlowFixMe
	        finalShouldForwardProp(_key)) {
	          newProps[_key] = props[_key];
	        }
	      }
	      newProps.className = className;
	      newProps.ref = ref;
	      return /*#__PURE__*/reactExports.createElement(reactExports.Fragment, null, /*#__PURE__*/reactExports.createElement(Insertion, {
	        cache: cache,
	        serialized: serialized,
	        isStringTag: typeof FinalTag === 'string'
	      }), /*#__PURE__*/reactExports.createElement(FinalTag, newProps));
	    });
	    Styled.displayName = identifierName !== undefined ? identifierName : "Styled(" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + ")";
	    Styled.defaultProps = tag.defaultProps;
	    Styled.__emotion_real = Styled;
	    Styled.__emotion_base = baseTag;
	    Styled.__emotion_styles = styles;
	    Styled.__emotion_forwardProp = shouldForwardProp;
	    Object.defineProperty(Styled, 'toString', {
	      value: function value() {
	        if (targetClassName === undefined && "production" !== 'production') {
	          return 'NO_COMPONENT_SELECTOR';
	        } // $FlowFixMe: coerce undefined to string

	        return "." + targetClassName;
	      }
	    });
	    Styled.withComponent = function (nextTag, nextOptions) {
	      return createStyled(nextTag, _extends({}, options, nextOptions, {
	        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
	      })).apply(void 0, styles);
	    };
	    return Styled;
	  };
	};

	var tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr',
	// SVG
	'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];
	var newStyled = createStyled$1.bind();
	tags.forEach(function (tagName) {
	  // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type
	  newStyled[tagName] = newStyled(tagName);
	});

	var propTypes = {exports: {}};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret_1;
	var hasRequiredReactPropTypesSecret;

	function requireReactPropTypesSecret () {
		if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
		hasRequiredReactPropTypesSecret = 1;

		var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
		ReactPropTypesSecret_1 = ReactPropTypesSecret;
		return ReactPropTypesSecret_1;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var factoryWithThrowingShims;
	var hasRequiredFactoryWithThrowingShims;

	function requireFactoryWithThrowingShims () {
		if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
		hasRequiredFactoryWithThrowingShims = 1;

		var ReactPropTypesSecret = requireReactPropTypesSecret();
		function emptyFunction() {}
		function emptyFunctionWithReset() {}
		emptyFunctionWithReset.resetWarningCache = emptyFunction;
		factoryWithThrowingShims = function () {
		  function shim(props, propName, componentName, location, propFullName, secret) {
		    if (secret === ReactPropTypesSecret) {
		      // It is still safe when called from React.
		      return;
		    }
		    var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
		    err.name = 'Invariant Violation';
		    throw err;
		  }
		  shim.isRequired = shim;
		  function getShim() {
		    return shim;
		  }
		  // Important!
		  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
		  var ReactPropTypes = {
		    array: shim,
		    bigint: shim,
		    bool: shim,
		    func: shim,
		    number: shim,
		    object: shim,
		    string: shim,
		    symbol: shim,
		    any: shim,
		    arrayOf: getShim,
		    element: shim,
		    elementType: shim,
		    instanceOf: getShim,
		    node: shim,
		    objectOf: getShim,
		    oneOf: getShim,
		    oneOfType: getShim,
		    shape: getShim,
		    exact: getShim,
		    checkPropTypes: emptyFunctionWithReset,
		    resetWarningCache: emptyFunction
		  };
		  ReactPropTypes.PropTypes = ReactPropTypes;
		  return ReactPropTypes;
		};
		return factoryWithThrowingShims;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  propTypes.exports = requireFactoryWithThrowingShims()();
	}

	var propTypesExports = propTypes.exports;
	var PropTypes = /*@__PURE__*/getDefaultExportFromCjs(propTypesExports);

	var jsxRuntime = {exports: {}};

	var reactJsxRuntime_production_min = {};

	/**
	 * @license React
	 * react-jsx-runtime.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactJsxRuntime_production_min;

	function requireReactJsxRuntime_production_min () {
		if (hasRequiredReactJsxRuntime_production_min) return reactJsxRuntime_production_min;
		hasRequiredReactJsxRuntime_production_min = 1;

		var f = reactExports,
		  k = Symbol.for("react.element"),
		  l = Symbol.for("react.fragment"),
		  m = Object.prototype.hasOwnProperty,
		  n = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,
		  p = {
		    key: !0,
		    ref: !0,
		    __self: !0,
		    __source: !0
		  };
		function q(c, a, g) {
		  var b,
		    d = {},
		    e = null,
		    h = null;
		  void 0 !== g && (e = "" + g);
		  void 0 !== a.key && (e = "" + a.key);
		  void 0 !== a.ref && (h = a.ref);
		  for (b in a) m.call(a, b) && !p.hasOwnProperty(b) && (d[b] = a[b]);
		  if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
		  return {
		    $$typeof: k,
		    type: c,
		    key: e,
		    ref: h,
		    props: d,
		    _owner: n.current
		  };
		}
		reactJsxRuntime_production_min.Fragment = l;
		reactJsxRuntime_production_min.jsx = q;
		reactJsxRuntime_production_min.jsxs = q;
		return reactJsxRuntime_production_min;
	}

	var hasRequiredJsxRuntime;

	function requireJsxRuntime () {
		if (hasRequiredJsxRuntime) return jsxRuntime.exports;
		hasRequiredJsxRuntime = 1;

		{
		  jsxRuntime.exports = requireReactJsxRuntime_production_min();
		}
		return jsxRuntime.exports;
	}

	var jsxRuntimeExports = requireJsxRuntime();

	function isEmpty$4(obj) {
	  return obj === undefined || obj === null || Object.keys(obj).length === 0;
	}
	function GlobalStyles$2(props) {
	  const {
	    styles,
	    defaultTheme = {}
	  } = props;
	  const globalStyles = typeof styles === 'function' ? themeInput => styles(isEmpty$4(themeInput) ? defaultTheme : themeInput) : styles;
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Global, {
	    styles: globalStyles
	  });
	}

	/**
	 * @mui/styled-engine v5.15.3
	 *
	 * @license MIT
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	function styled$3(tag, options) {
	  const stylesFactory = newStyled(tag, options);
	  return stylesFactory;
	}

	// eslint-disable-next-line @typescript-eslint/naming-convention
	const internal_processStyles = (tag, processor) => {
	  // Emotion attaches all the styles as `__emotion_styles`.
	  // Ref: https://github.com/emotion-js/emotion/blob/16d971d0da229596d6bcc39d282ba9753c9ee7cf/packages/styled/src/base.js#L186
	  if (Array.isArray(tag.__emotion_styles)) {
	    tag.__emotion_styles = processor(tag.__emotion_styles);
	  }
	};

	function isPlainObject$1(item) {
	  return item !== null && typeof item === 'object' && item.constructor === Object;
	}
	function deepClone(source) {
	  if (!isPlainObject$1(source)) {
	    return source;
	  }
	  const output = {};
	  Object.keys(source).forEach(key => {
	    output[key] = deepClone(source[key]);
	  });
	  return output;
	}
	function deepmerge(target, source, options = {
	  clone: true
	}) {
	  const output = options.clone ? _extends({}, target) : target;
	  if (isPlainObject$1(target) && isPlainObject$1(source)) {
	    Object.keys(source).forEach(key => {
	      // Avoid prototype pollution
	      if (key === '__proto__') {
	        return;
	      }
	      if (isPlainObject$1(source[key]) && key in target && isPlainObject$1(target[key])) {
	        // Since `output` is a clone of `target` and we have narrowed `target` in this block we can cast to the same type.
	        output[key] = deepmerge(target[key], source[key], options);
	      } else if (options.clone) {
	        output[key] = isPlainObject$1(source[key]) ? deepClone(source[key]) : source[key];
	      } else {
	        output[key] = source[key];
	      }
	    });
	  }
	  return output;
	}

	const refType = PropTypes.oneOfType([PropTypes.func, PropTypes.object]);
	var refType$1 = refType;

	// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
	//
	// A strict capitalization should uppercase the first letter of each word in the sentence.
	// We only handle the first word.
	function capitalize(string) {
	  if (typeof string !== 'string') {
	    throw new Error(formatMuiErrorMessage(7));
	  }
	  return string.charAt(0).toUpperCase() + string.slice(1);
	}

	/**
	 * Safe chained function.
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 */
	function createChainedFunction(...funcs) {
	  return funcs.reduce((acc, func) => {
	    if (func == null) {
	      return acc;
	    }
	    return function chainedFunction(...args) {
	      acc.apply(this, args);
	      func.apply(this, args);
	    };
	  }, () => {});
	}

	// Corresponds to 10 frames at 60 Hz.
	// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
	function debounce$1(func, wait = 166) {
	  let timeout;
	  function debounced(...args) {
	    const later = () => {
	      // @ts-ignore
	      func.apply(this, args);
	    };
	    clearTimeout(timeout);
	    timeout = setTimeout(later, wait);
	  }
	  debounced.clear = () => {
	    clearTimeout(timeout);
	  };
	  return debounced;
	}

	function deprecatedPropType(validator, reason) {
	  {
	    return () => null;
	  }
	}

	function isMuiElement(element, muiNames) {
	  var _muiName, _element$type;
	  return /*#__PURE__*/ /*#__PURE__*/reactExports.isValidElement(element) && muiNames.indexOf(
	  // For server components `muiName` is avaialble in element.type._payload.value.muiName
	  // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
	  // eslint-disable-next-line no-underscore-dangle
	  (_muiName = element.type.muiName) != null ? _muiName : (_element$type = element.type) == null || (_element$type = _element$type._payload) == null || (_element$type = _element$type.value) == null ? void 0 : _element$type.muiName) !== -1;
	}

	function ownerDocument(node) {
	  return node && node.ownerDocument || document;
	}

	function ownerWindow(node) {
	  const doc = ownerDocument(node);
	  return doc.defaultView || window;
	}

	function requirePropFactory(componentNameInError, Component) {
	  {
	    return () => null;
	  }
	}

	/**
	 * TODO v5: consider making it private
	 *
	 * passes {value} to {ref}
	 *
	 * WARNING: Be sure to only call this inside a callback that is passed as a ref.
	 * Otherwise, make sure to cleanup the previous {ref} if it changes. See
	 * https://github.com/mui/material-ui/issues/13539
	 *
	 * Useful if you want to expose the ref of an inner component to the public API
	 * while still using it inside the component.
	 * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
	 */
	function setRef(ref, value) {
	  if (typeof ref === 'function') {
	    ref(value);
	  } else if (ref) {
	    ref.current = value;
	  }
	}

	/**
	 * A version of `React.useLayoutEffect` that does not show a warning when server-side rendering.
	 * This is useful for effects that are only needed for client-side rendering but not for SSR.
	 *
	 * Before you use this hook, make sure to read https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85
	 * and confirm it doesn't apply to your use-case.
	 */
	const useEnhancedEffect = typeof window !== 'undefined' ? reactExports.useLayoutEffect : reactExports.useEffect;
	var useEnhancedEffect$1 = useEnhancedEffect;

	let globalId = 0;
	function useGlobalId(idOverride) {
	  const [defaultId, setDefaultId] = reactExports.useState(idOverride);
	  const id = idOverride || defaultId;
	  reactExports.useEffect(() => {
	    if (defaultId == null) {
	      // Fallback to this default id when possible.
	      // Use the incrementing value for client-side rendering only.
	      // We can't use it server-side.
	      // If you want to use random values please consider the Birthday Problem: https://en.wikipedia.org/wiki/Birthday_problem
	      globalId += 1;
	      setDefaultId(`mui-${globalId}`);
	    }
	  }, [defaultId]);
	  return id;
	}

	// downstream bundlers may remove unnecessary concatenation, but won't remove toString call -- Workaround for https://github.com/webpack/webpack/issues/14814
	const maybeReactUseId = React$1['useId'.toString()];
	/**
	 *
	 * @example <div id={useId()} />
	 * @param idOverride
	 * @returns {string}
	 */
	function useId(idOverride) {
	  if (maybeReactUseId !== undefined) {
	    const reactId = maybeReactUseId();
	    return idOverride != null ? idOverride : reactId;
	  }
	  // eslint-disable-next-line react-hooks/rules-of-hooks -- `React.useId` is invariant at runtime.
	  return useGlobalId(idOverride);
	}

	function unsupportedProp(props, propName, componentName, location, propFullName) {
	  {
	    return null;
	  }
	}

	function useControlled({
	  controlled,
	  default: defaultProp,
	  name,
	  state = 'value'
	}) {
	  // isControlled is ignored in the hook dependency lists as it should never change.
	  const {
	    current: isControlled
	  } = reactExports.useRef(controlled !== undefined);
	  const [valueState, setValue] = reactExports.useState(defaultProp);
	  const value = isControlled ? controlled : valueState;
	  const setValueIfUncontrolled = reactExports.useCallback(newValue => {
	    if (!isControlled) {
	      setValue(newValue);
	    }
	  }, []);
	  return [value, setValueIfUncontrolled];
	}

	/**
	 * Inspired by https://github.com/facebook/react/issues/14099#issuecomment-440013892
	 * See RFC in https://github.com/reactjs/rfcs/pull/220
	 */

	function useEventCallback(fn) {
	  const ref = reactExports.useRef(fn);
	  useEnhancedEffect$1(() => {
	    ref.current = fn;
	  });
	  return reactExports.useRef((...args) =>
	  // @ts-expect-error hide `this`
	  (0, ref.current)(...args)).current;
	}

	function useForkRef(...refs) {
	  /**
	   * This will create a new function if the refs passed to this hook change and are all defined.
	   * This means react will call the old forkRef with `null` and the new forkRef
	   * with the ref. Cleanup naturally emerges from this behavior.
	   */
	  return reactExports.useMemo(() => {
	    if (refs.every(ref => ref == null)) {
	      return null;
	    }
	    return instance => {
	      refs.forEach(ref => {
	        setRef(ref, instance);
	      });
	    };
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, refs);
	}

	let hadKeyboardEvent = true;
	let hadFocusVisibleRecently = false;
	let hadFocusVisibleRecentlyTimeout;
	const inputTypesWhitelist = {
	  text: true,
	  search: true,
	  url: true,
	  tel: true,
	  email: true,
	  password: true,
	  number: true,
	  date: true,
	  month: true,
	  week: true,
	  time: true,
	  datetime: true,
	  'datetime-local': true
	};

	/**
	 * Computes whether the given element should automatically trigger the
	 * `focus-visible` class being added, i.e. whether it should always match
	 * `:focus-visible` when focused.
	 * @param {Element} node
	 * @returns {boolean}
	 */
	function focusTriggersKeyboardModality(node) {
	  const {
	    type,
	    tagName
	  } = node;
	  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
	    return true;
	  }
	  if (tagName === 'TEXTAREA' && !node.readOnly) {
	    return true;
	  }
	  if (node.isContentEditable) {
	    return true;
	  }
	  return false;
	}

	/**
	 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
	 * If the most recent user interaction was via the keyboard;
	 * and the key press did not include a meta, alt/option, or control key;
	 * then the modality is keyboard. Otherwise, the modality is not keyboard.
	 * @param {KeyboardEvent} event
	 */
	function handleKeyDown(event) {
	  if (event.metaKey || event.altKey || event.ctrlKey) {
	    return;
	  }
	  hadKeyboardEvent = true;
	}

	/**
	 * If at any point a user clicks with a pointing device, ensure that we change
	 * the modality away from keyboard.
	 * This avoids the situation where a user presses a key on an already focused
	 * element, and then clicks on a different element, focusing it with a
	 * pointing device, while we still think we're in keyboard modality.
	 */
	function handlePointerDown() {
	  hadKeyboardEvent = false;
	}
	function handleVisibilityChange() {
	  if (this.visibilityState === 'hidden') {
	    // If the tab becomes active again, the browser will handle calling focus
	    // on the element (Safari actually calls it twice).
	    // If this tab change caused a blur on an element with focus-visible,
	    // re-apply the class when the user switches back to the tab.
	    if (hadFocusVisibleRecently) {
	      hadKeyboardEvent = true;
	    }
	  }
	}
	function prepare(doc) {
	  doc.addEventListener('keydown', handleKeyDown, true);
	  doc.addEventListener('mousedown', handlePointerDown, true);
	  doc.addEventListener('pointerdown', handlePointerDown, true);
	  doc.addEventListener('touchstart', handlePointerDown, true);
	  doc.addEventListener('visibilitychange', handleVisibilityChange, true);
	}
	function isFocusVisible(event) {
	  const {
	    target
	  } = event;
	  try {
	    return target.matches(':focus-visible');
	  } catch (error) {
	    // Browsers not implementing :focus-visible will throw a SyntaxError.
	    // We use our own heuristic for those browsers.
	    // Rethrow might be better if it's not the expected error but do we really
	    // want to crash if focus-visible malfunctioned?
	  }

	  // No need for validFocusTarget check. The user does that by attaching it to
	  // focusable events only.
	  return hadKeyboardEvent || focusTriggersKeyboardModality(target);
	}
	function useIsFocusVisible() {
	  const ref = reactExports.useCallback(node => {
	    if (node != null) {
	      prepare(node.ownerDocument);
	    }
	  }, []);
	  const isFocusVisibleRef = reactExports.useRef(false);

	  /**
	   * Should be called if a blur event is fired
	   */
	  function handleBlurVisible() {
	    // checking against potential state variable does not suffice if we focus and blur synchronously.
	    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.
	    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.
	    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751
	    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).
	    if (isFocusVisibleRef.current) {
	      // To detect a tab/window switch, we look for a blur event followed
	      // rapidly by a visibility change.
	      // If we don't see a visibility change within 100ms, it's probably a
	      // regular focus change.
	      hadFocusVisibleRecently = true;
	      window.clearTimeout(hadFocusVisibleRecentlyTimeout);
	      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
	        hadFocusVisibleRecently = false;
	      }, 100);
	      isFocusVisibleRef.current = false;
	      return true;
	    }
	    return false;
	  }

	  /**
	   * Should be called if a blur event is fired
	   */
	  function handleFocusVisible(event) {
	    if (isFocusVisible(event)) {
	      isFocusVisibleRef.current = true;
	      return true;
	    }
	    return false;
	  }
	  return {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref
	  };
	}

	// A change of the browser zoom change the scrollbar size.
	// Credit https://github.com/twbs/bootstrap/blob/488fd8afc535ca3a6ad4dc581f5e89217b6a36ac/js/src/util/scrollbar.js#L14-L18
	function getScrollbarSize(doc) {
	  // https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth#usage_notes
	  const documentWidth = doc.documentElement.clientWidth;
	  return Math.abs(window.innerWidth - documentWidth);
	}

	// Source from https://github.com/alitaheri/normalize-scroll-left
	let cachedType;

	/**
	 * Based on the jquery plugin https://github.com/othree/jquery.rtl-scroll-type
	 *
	 * Types of scrollLeft, assuming scrollWidth=100 and direction is rtl.
	 *
	 * Type             | <- Most Left | Most Right -> | Initial
	 * ---------------- | ------------ | ------------- | -------
	 * default          | 0            | 100           | 100
	 * negative (spec*) | -100         | 0             | 0
	 * reverse          | 100          | 0             | 0
	 *
	 * Edge 85: default
	 * Safari 14: negative
	 * Chrome 85: negative
	 * Firefox 81: negative
	 * IE11: reverse
	 *
	 * spec* https://drafts.csswg.org/cssom-view/#dom-window-scroll
	 */
	function detectScrollType() {
	  if (cachedType) {
	    return cachedType;
	  }
	  const dummy = document.createElement('div');
	  const container = document.createElement('div');
	  container.style.width = '10px';
	  container.style.height = '1px';
	  dummy.appendChild(container);
	  dummy.dir = 'rtl';
	  dummy.style.fontSize = '14px';
	  dummy.style.width = '4px';
	  dummy.style.height = '1px';
	  dummy.style.position = 'absolute';
	  dummy.style.top = '-1000px';
	  dummy.style.overflow = 'scroll';
	  document.body.appendChild(dummy);
	  cachedType = 'reverse';
	  if (dummy.scrollLeft > 0) {
	    cachedType = 'default';
	  } else {
	    dummy.scrollLeft = 1;
	    if (dummy.scrollLeft === 0) {
	      cachedType = 'negative';
	    }
	  }
	  document.body.removeChild(dummy);
	  return cachedType;
	}

	// Based on https://stackoverflow.com/a/24394376
	function getNormalizedScrollLeft(element, direction) {
	  const scrollLeft = element.scrollLeft;

	  // Perform the calculations only when direction is rtl to avoid messing up the ltr behavior
	  if (direction !== 'rtl') {
	    return scrollLeft;
	  }
	  const type = detectScrollType();
	  switch (type) {
	    case 'negative':
	      return element.scrollWidth - element.clientWidth + scrollLeft;
	    case 'reverse':
	      return element.scrollWidth - element.clientWidth - scrollLeft;
	    default:
	      return scrollLeft;
	  }
	}

	const usePreviousProps = value => {
	  const ref = reactExports.useRef({});
	  reactExports.useEffect(() => {
	    ref.current = value;
	  });
	  return ref.current;
	};
	var usePreviousProps$1 = usePreviousProps;

	const visuallyHidden = {
	  border: 0,
	  clip: 'rect(0 0 0 0)',
	  height: '1px',
	  margin: -1,
	  overflow: 'hidden',
	  padding: 0,
	  position: 'absolute',
	  whiteSpace: 'nowrap',
	  width: '1px'
	};
	var visuallyHidden$1 = visuallyHidden;

	/**
	 * Add keys, values of `defaultProps` that does not exist in `props`
	 * @param {object} defaultProps
	 * @param {object} props
	 * @returns {object} resolved props
	 */
	function resolveProps(defaultProps, props) {
	  const output = _extends({}, props);
	  Object.keys(defaultProps).forEach(propName => {
	    if (propName.toString().match(/^(components|slots)$/)) {
	      output[propName] = _extends({}, defaultProps[propName], output[propName]);
	    } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
	      const defaultSlotProps = defaultProps[propName] || {};
	      const slotProps = props[propName];
	      output[propName] = {};
	      if (!slotProps || !Object.keys(slotProps)) {
	        // Reduce the iteration if the slot props is empty
	        output[propName] = defaultSlotProps;
	      } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
	        // Reduce the iteration if the default slot props is empty
	        output[propName] = slotProps;
	      } else {
	        output[propName] = _extends({}, slotProps);
	        Object.keys(defaultSlotProps).forEach(slotPropName => {
	          output[propName][slotPropName] = resolveProps(defaultSlotProps[slotPropName], slotProps[slotPropName]);
	        });
	      }
	    } else if (output[propName] === undefined) {
	      output[propName] = defaultProps[propName];
	    }
	  });
	  return output;
	}

	function composeClasses(slots, getUtilityClass, classes = undefined) {
	  const output = {};
	  Object.keys(slots).forEach(
	  // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
	  // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
	  slot => {
	    output[slot] = slots[slot].reduce((acc, key) => {
	      if (key) {
	        const utilityClass = getUtilityClass(key);
	        if (utilityClass !== '') {
	          acc.push(utilityClass);
	        }
	        if (classes && classes[key]) {
	          acc.push(classes[key]);
	        }
	      }
	      return acc;
	    }, []).join(' ');
	  });
	  return output;
	}

	const defaultGenerator = componentName => componentName;
	const createClassNameGenerator = () => {
	  let generate = defaultGenerator;
	  return {
	    configure(generator) {
	      generate = generator;
	    },
	    generate(componentName) {
	      return generate(componentName);
	    },
	    reset() {
	      generate = defaultGenerator;
	    }
	  };
	};
	const ClassNameGenerator = createClassNameGenerator();
	var ClassNameGenerator$1 = ClassNameGenerator;

	// If GlobalStateSlot is changed, GLOBAL_STATE_CLASSES in
	// \packages\api-docs-builder\utils\parseSlotsAndClasses.ts must be updated accordingly.

	const globalStateClassesMapping = {
	  active: 'active',
	  checked: 'checked',
	  completed: 'completed',
	  disabled: 'disabled',
	  error: 'error',
	  expanded: 'expanded',
	  focused: 'focused',
	  focusVisible: 'focusVisible',
	  open: 'open',
	  readOnly: 'readOnly',
	  required: 'required',
	  selected: 'selected'
	};
	function generateUtilityClass(componentName, slot, globalStatePrefix = 'Mui') {
	  const globalStateClass = globalStateClassesMapping[slot];
	  return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${ClassNameGenerator$1.generate(componentName)}-${slot}`;
	}

	function generateUtilityClasses(componentName, slots, globalStatePrefix = 'Mui') {
	  const result = {};
	  slots.forEach(slot => {
	    result[slot] = generateUtilityClass(componentName, slot, globalStatePrefix);
	  });
	  return result;
	}

	const _excluded$25 = ["values", "unit", "step"];
	const sortBreakpointsValues = values => {
	  const breakpointsAsArray = Object.keys(values).map(key => ({
	    key,
	    val: values[key]
	  })) || [];
	  // Sort in ascending order
	  breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
	  return breakpointsAsArray.reduce((acc, obj) => {
	    return _extends({}, acc, {
	      [obj.key]: obj.val
	    });
	  }, {});
	};

	// Keep in mind that @media is inclusive by the CSS specification.
	function createBreakpoints(breakpoints) {
	  const {
	      // The breakpoint **start** at this value.
	      // For instance with the first breakpoint xs: [xs, sm).
	      values = {
	        xs: 0,
	        // phone
	        sm: 600,
	        // tablet
	        md: 900,
	        // small laptop
	        lg: 1200,
	        // desktop
	        xl: 1536 // large screen
	      },
	      unit = 'px',
	      step = 5
	    } = breakpoints,
	    other = _objectWithoutPropertiesLoose(breakpoints, _excluded$25);
	  const sortedValues = sortBreakpointsValues(values);
	  const keys = Object.keys(sortedValues);
	  function up(key) {
	    const value = typeof values[key] === 'number' ? values[key] : key;
	    return `@media (min-width:${value}${unit})`;
	  }
	  function down(key) {
	    const value = typeof values[key] === 'number' ? values[key] : key;
	    return `@media (max-width:${value - step / 100}${unit})`;
	  }
	  function between(start, end) {
	    const endIndex = keys.indexOf(end);
	    return `@media (min-width:${typeof values[start] === 'number' ? values[start] : start}${unit}) and ` + `(max-width:${(endIndex !== -1 && typeof values[keys[endIndex]] === 'number' ? values[keys[endIndex]] : end) - step / 100}${unit})`;
	  }
	  function only(key) {
	    if (keys.indexOf(key) + 1 < keys.length) {
	      return between(key, keys[keys.indexOf(key) + 1]);
	    }
	    return up(key);
	  }
	  function not(key) {
	    // handle first and last key separately, for better readability
	    const keyIndex = keys.indexOf(key);
	    if (keyIndex === 0) {
	      return up(keys[1]);
	    }
	    if (keyIndex === keys.length - 1) {
	      return down(keys[keyIndex]);
	    }
	    return between(key, keys[keys.indexOf(key) + 1]).replace('@media', '@media not all and');
	  }
	  return _extends({
	    keys,
	    values: sortedValues,
	    up,
	    down,
	    between,
	    only,
	    not,
	    unit
	  }, other);
	}

	const shape = {
	  borderRadius: 4
	};
	var shape$1 = shape;

	function merge(acc, item) {
	  if (!item) {
	    return acc;
	  }
	  return deepmerge(acc, item, {
	    clone: false // No need to clone deep, it's way faster.
	  });
	}

	// The breakpoint **start** at this value.
	// For instance with the first breakpoint xs: [xs, sm[.
	const values$1 = {
	  xs: 0,
	  // phone
	  sm: 600,
	  // tablet
	  md: 900,
	  // small laptop
	  lg: 1200,
	  // desktop
	  xl: 1536 // large screen
	};
	const defaultBreakpoints = {
	  // Sorted ASC by size. That's important.
	  // It can't be configured as it's used statically for propTypes.
	  keys: ['xs', 'sm', 'md', 'lg', 'xl'],
	  up: key => `@media (min-width:${values$1[key]}px)`
	};
	function handleBreakpoints(props, propValue, styleFromPropValue) {
	  const theme = props.theme || {};
	  if (Array.isArray(propValue)) {
	    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
	    return propValue.reduce((acc, item, index) => {
	      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
	      return acc;
	    }, {});
	  }
	  if (typeof propValue === 'object') {
	    const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
	    return Object.keys(propValue).reduce((acc, breakpoint) => {
	      // key is breakpoint
	      if (Object.keys(themeBreakpoints.values || values$1).indexOf(breakpoint) !== -1) {
	        const mediaKey = themeBreakpoints.up(breakpoint);
	        acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
	      } else {
	        const cssKey = breakpoint;
	        acc[cssKey] = propValue[cssKey];
	      }
	      return acc;
	    }, {});
	  }
	  const output = styleFromPropValue(propValue);
	  return output;
	}
	function createEmptyBreakpointObject(breakpointsInput = {}) {
	  var _breakpointsInput$key;
	  const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
	    const breakpointStyleKey = breakpointsInput.up(key);
	    acc[breakpointStyleKey] = {};
	    return acc;
	  }, {});
	  return breakpointsInOrder || {};
	}
	function removeUnusedBreakpoints(breakpointKeys, style) {
	  return breakpointKeys.reduce((acc, key) => {
	    const breakpointOutput = acc[key];
	    const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
	    if (isBreakpointUnused) {
	      delete acc[key];
	    }
	    return acc;
	  }, style);
	}
	function mergeBreakpointsInOrder(breakpointsInput, ...styles) {
	  const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
	  const mergedOutput = [emptyBreakpoints, ...styles].reduce((prev, next) => deepmerge(prev, next), {});
	  return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
	}

	// compute base for responsive values; e.g.,
	// [1,2,3] => {xs: true, sm: true, md: true}
	// {xs: 1, sm: 2, md: 3} => {xs: true, sm: true, md: true}
	function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
	  // fixed value
	  if (typeof breakpointValues !== 'object') {
	    return {};
	  }
	  const base = {};
	  const breakpointsKeys = Object.keys(themeBreakpoints);
	  if (Array.isArray(breakpointValues)) {
	    breakpointsKeys.forEach((breakpoint, i) => {
	      if (i < breakpointValues.length) {
	        base[breakpoint] = true;
	      }
	    });
	  } else {
	    breakpointsKeys.forEach(breakpoint => {
	      if (breakpointValues[breakpoint] != null) {
	        base[breakpoint] = true;
	      }
	    });
	  }
	  return base;
	}
	function resolveBreakpointValues({
	  values: breakpointValues,
	  breakpoints: themeBreakpoints,
	  base: customBase
	}) {
	  const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
	  const keys = Object.keys(base);
	  if (keys.length === 0) {
	    return breakpointValues;
	  }
	  let previous;
	  return keys.reduce((acc, breakpoint, i) => {
	    if (Array.isArray(breakpointValues)) {
	      acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
	      previous = i;
	    } else if (typeof breakpointValues === 'object') {
	      acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
	      previous = breakpoint;
	    } else {
	      acc[breakpoint] = breakpointValues;
	    }
	    return acc;
	  }, {});
	}

	function getPath(obj, path, checkVars = true) {
	  if (!path || typeof path !== 'string') {
	    return null;
	  }

	  // Check if CSS variables are used
	  if (obj && obj.vars && checkVars) {
	    const val = `vars.${path}`.split('.').reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
	    if (val != null) {
	      return val;
	    }
	  }
	  return path.split('.').reduce((acc, item) => {
	    if (acc && acc[item] != null) {
	      return acc[item];
	    }
	    return null;
	  }, obj);
	}
	function getStyleValue$1(themeMapping, transform, propValueFinal, userValue = propValueFinal) {
	  let value;
	  if (typeof themeMapping === 'function') {
	    value = themeMapping(propValueFinal);
	  } else if (Array.isArray(themeMapping)) {
	    value = themeMapping[propValueFinal] || userValue;
	  } else {
	    value = getPath(themeMapping, propValueFinal) || userValue;
	  }
	  if (transform) {
	    value = transform(value, userValue, themeMapping);
	  }
	  return value;
	}
	function style$3(options) {
	  const {
	    prop,
	    cssProperty = options.prop,
	    themeKey,
	    transform
	  } = options;

	  // false positive
	  // eslint-disable-next-line react/function-component-definition
	  const fn = props => {
	    if (props[prop] == null) {
	      return null;
	    }
	    const propValue = props[prop];
	    const theme = props.theme;
	    const themeMapping = getPath(theme, themeKey) || {};
	    const styleFromPropValue = propValueFinal => {
	      let value = getStyleValue$1(themeMapping, transform, propValueFinal);
	      if (propValueFinal === value && typeof propValueFinal === 'string') {
	        // Haven't found value
	        value = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
	      }
	      if (cssProperty === false) {
	        return value;
	      }
	      return {
	        [cssProperty]: value
	      };
	    };
	    return handleBreakpoints(props, propValue, styleFromPropValue);
	  };
	  fn.propTypes = {};
	  fn.filterProps = [prop];
	  return fn;
	}

	function memoize(fn) {
	  const cache = {};
	  return arg => {
	    if (cache[arg] === undefined) {
	      cache[arg] = fn(arg);
	    }
	    return cache[arg];
	  };
	}

	const properties = {
	  m: 'margin',
	  p: 'padding'
	};
	const directions = {
	  t: 'Top',
	  r: 'Right',
	  b: 'Bottom',
	  l: 'Left',
	  x: ['Left', 'Right'],
	  y: ['Top', 'Bottom']
	};
	const aliases = {
	  marginX: 'mx',
	  marginY: 'my',
	  paddingX: 'px',
	  paddingY: 'py'
	};

	// memoize() impact:
	// From 300,000 ops/sec
	// To 350,000 ops/sec
	const getCssProperties = memoize(prop => {
	  // It's not a shorthand notation.
	  if (prop.length > 2) {
	    if (aliases[prop]) {
	      prop = aliases[prop];
	    } else {
	      return [prop];
	    }
	  }
	  const [a, b] = prop.split('');
	  const property = properties[a];
	  const direction = directions[b] || '';
	  return Array.isArray(direction) ? direction.map(dir => property + dir) : [property + direction];
	});
	const marginKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'marginInline', 'marginInlineStart', 'marginInlineEnd', 'marginBlock', 'marginBlockStart', 'marginBlockEnd'];
	const paddingKeys = ['p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY', 'paddingInline', 'paddingInlineStart', 'paddingInlineEnd', 'paddingBlock', 'paddingBlockStart', 'paddingBlockEnd'];
	[...marginKeys, ...paddingKeys];
	function createUnaryUnit(theme, themeKey, defaultValue, propName) {
	  var _getPath;
	  const themeSpacing = (_getPath = getPath(theme, themeKey, false)) != null ? _getPath : defaultValue;
	  if (typeof themeSpacing === 'number') {
	    return abs => {
	      if (typeof abs === 'string') {
	        return abs;
	      }
	      return themeSpacing * abs;
	    };
	  }
	  if (Array.isArray(themeSpacing)) {
	    return abs => {
	      if (typeof abs === 'string') {
	        return abs;
	      }
	      return themeSpacing[abs];
	    };
	  }
	  if (typeof themeSpacing === 'function') {
	    return themeSpacing;
	  }
	  return () => undefined;
	}
	function createUnarySpacing(theme) {
	  return createUnaryUnit(theme, 'spacing', 8);
	}
	function getValue(transformer, propValue) {
	  if (typeof propValue === 'string' || propValue == null) {
	    return propValue;
	  }
	  const abs = Math.abs(propValue);
	  const transformed = transformer(abs);
	  if (propValue >= 0) {
	    return transformed;
	  }
	  if (typeof transformed === 'number') {
	    return -transformed;
	  }
	  return `-${transformed}`;
	}
	function getStyleFromPropValue(cssProperties, transformer) {
	  return propValue => cssProperties.reduce((acc, cssProperty) => {
	    acc[cssProperty] = getValue(transformer, propValue);
	    return acc;
	  }, {});
	}
	function resolveCssProperty(props, keys, prop, transformer) {
	  // Using a hash computation over an array iteration could be faster, but with only 28 items,
	  // it's doesn't worth the bundle size.
	  if (keys.indexOf(prop) === -1) {
	    return null;
	  }
	  const cssProperties = getCssProperties(prop);
	  const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
	  const propValue = props[prop];
	  return handleBreakpoints(props, propValue, styleFromPropValue);
	}
	function style$2(props, keys) {
	  const transformer = createUnarySpacing(props.theme);
	  return Object.keys(props).map(prop => resolveCssProperty(props, keys, prop, transformer)).reduce(merge, {});
	}
	function margin(props) {
	  return style$2(props, marginKeys);
	}
	margin.propTypes = {};
	margin.filterProps = marginKeys;
	function padding(props) {
	  return style$2(props, paddingKeys);
	}
	padding.propTypes = {};
	padding.filterProps = paddingKeys;

	// The different signatures imply different meaning for their arguments that can't be expressed structurally.
	// We express the difference with variable names.

	function createSpacing(spacingInput = 8) {
	  // Already transformed.
	  if (spacingInput.mui) {
	    return spacingInput;
	  }

	  // Material Design layouts are visually balanced. Most measurements align to an 8dp grid, which aligns both spacing and the overall layout.
	  // Smaller components, such as icons, can align to a 4dp grid.
	  // https://m2.material.io/design/layout/understanding-layout.html
	  const transform = createUnarySpacing({
	    spacing: spacingInput
	  });
	  const spacing = (...argsInput) => {
	    const args = argsInput.length === 0 ? [1] : argsInput;
	    return args.map(argument => {
	      const output = transform(argument);
	      return typeof output === 'number' ? `${output}px` : output;
	    }).join(' ');
	  };
	  spacing.mui = true;
	  return spacing;
	}

	function compose(...styles) {
	  const handlers = styles.reduce((acc, style) => {
	    style.filterProps.forEach(prop => {
	      acc[prop] = style;
	    });
	    return acc;
	  }, {});

	  // false positive
	  // eslint-disable-next-line react/function-component-definition
	  const fn = props => {
	    return Object.keys(props).reduce((acc, prop) => {
	      if (handlers[prop]) {
	        return merge(acc, handlers[prop](props));
	      }
	      return acc;
	    }, {});
	  };
	  fn.propTypes = {};
	  fn.filterProps = styles.reduce((acc, style) => acc.concat(style.filterProps), []);
	  return fn;
	}

	function borderTransform(value) {
	  if (typeof value !== 'number') {
	    return value;
	  }
	  return `${value}px solid`;
	}
	function createBorderStyle(prop, transform) {
	  return style$3({
	    prop,
	    themeKey: 'borders',
	    transform
	  });
	}
	const border = createBorderStyle('border', borderTransform);
	const borderTop = createBorderStyle('borderTop', borderTransform);
	const borderRight = createBorderStyle('borderRight', borderTransform);
	const borderBottom = createBorderStyle('borderBottom', borderTransform);
	const borderLeft = createBorderStyle('borderLeft', borderTransform);
	const borderColor = createBorderStyle('borderColor');
	const borderTopColor = createBorderStyle('borderTopColor');
	const borderRightColor = createBorderStyle('borderRightColor');
	const borderBottomColor = createBorderStyle('borderBottomColor');
	const borderLeftColor = createBorderStyle('borderLeftColor');
	const outline = createBorderStyle('outline', borderTransform);
	const outlineColor = createBorderStyle('outlineColor');

	// false positive
	// eslint-disable-next-line react/function-component-definition
	const borderRadius = props => {
	  if (props.borderRadius !== undefined && props.borderRadius !== null) {
	    const transformer = createUnaryUnit(props.theme, 'shape.borderRadius', 4);
	    const styleFromPropValue = propValue => ({
	      borderRadius: getValue(transformer, propValue)
	    });
	    return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
	  }
	  return null;
	};
	borderRadius.propTypes = {};
	borderRadius.filterProps = ['borderRadius'];
	compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius, outline, outlineColor);

	// false positive
	// eslint-disable-next-line react/function-component-definition
	const gap = props => {
	  if (props.gap !== undefined && props.gap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8);
	    const styleFromPropValue = propValue => ({
	      gap: getValue(transformer, propValue)
	    });
	    return handleBreakpoints(props, props.gap, styleFromPropValue);
	  }
	  return null;
	};
	gap.propTypes = {};
	gap.filterProps = ['gap'];

	// false positive
	// eslint-disable-next-line react/function-component-definition
	const columnGap = props => {
	  if (props.columnGap !== undefined && props.columnGap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8);
	    const styleFromPropValue = propValue => ({
	      columnGap: getValue(transformer, propValue)
	    });
	    return handleBreakpoints(props, props.columnGap, styleFromPropValue);
	  }
	  return null;
	};
	columnGap.propTypes = {};
	columnGap.filterProps = ['columnGap'];

	// false positive
	// eslint-disable-next-line react/function-component-definition
	const rowGap = props => {
	  if (props.rowGap !== undefined && props.rowGap !== null) {
	    const transformer = createUnaryUnit(props.theme, 'spacing', 8);
	    const styleFromPropValue = propValue => ({
	      rowGap: getValue(transformer, propValue)
	    });
	    return handleBreakpoints(props, props.rowGap, styleFromPropValue);
	  }
	  return null;
	};
	rowGap.propTypes = {};
	rowGap.filterProps = ['rowGap'];
	const gridColumn = style$3({
	  prop: 'gridColumn'
	});
	const gridRow = style$3({
	  prop: 'gridRow'
	});
	const gridAutoFlow = style$3({
	  prop: 'gridAutoFlow'
	});
	const gridAutoColumns = style$3({
	  prop: 'gridAutoColumns'
	});
	const gridAutoRows = style$3({
	  prop: 'gridAutoRows'
	});
	const gridTemplateColumns = style$3({
	  prop: 'gridTemplateColumns'
	});
	const gridTemplateRows = style$3({
	  prop: 'gridTemplateRows'
	});
	const gridTemplateAreas = style$3({
	  prop: 'gridTemplateAreas'
	});
	const gridArea = style$3({
	  prop: 'gridArea'
	});
	compose(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

	function paletteTransform(value, userValue) {
	  if (userValue === 'grey') {
	    return userValue;
	  }
	  return value;
	}
	const color = style$3({
	  prop: 'color',
	  themeKey: 'palette',
	  transform: paletteTransform
	});
	const bgcolor = style$3({
	  prop: 'bgcolor',
	  cssProperty: 'backgroundColor',
	  themeKey: 'palette',
	  transform: paletteTransform
	});
	const backgroundColor = style$3({
	  prop: 'backgroundColor',
	  themeKey: 'palette',
	  transform: paletteTransform
	});
	compose(color, bgcolor, backgroundColor);

	function sizingTransform(value) {
	  return value <= 1 && value !== 0 ? `${value * 100}%` : value;
	}
	const width = style$3({
	  prop: 'width',
	  transform: sizingTransform
	});
	const maxWidth = props => {
	  if (props.maxWidth !== undefined && props.maxWidth !== null) {
	    const styleFromPropValue = propValue => {
	      var _props$theme, _props$theme2;
	      const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || values$1[propValue];
	      if (!breakpoint) {
	        return {
	          maxWidth: sizingTransform(propValue)
	        };
	      }
	      if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== 'px') {
	        return {
	          maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
	        };
	      }
	      return {
	        maxWidth: breakpoint
	      };
	    };
	    return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
	  }
	  return null;
	};
	maxWidth.filterProps = ['maxWidth'];
	const minWidth = style$3({
	  prop: 'minWidth',
	  transform: sizingTransform
	});
	const height = style$3({
	  prop: 'height',
	  transform: sizingTransform
	});
	const maxHeight = style$3({
	  prop: 'maxHeight',
	  transform: sizingTransform
	});
	const minHeight = style$3({
	  prop: 'minHeight',
	  transform: sizingTransform
	});
	style$3({
	  prop: 'size',
	  cssProperty: 'width',
	  transform: sizingTransform
	});
	style$3({
	  prop: 'size',
	  cssProperty: 'height',
	  transform: sizingTransform
	});
	const boxSizing = style$3({
	  prop: 'boxSizing'
	});
	compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

	const defaultSxConfig = {
	  // borders
	  border: {
	    themeKey: 'borders',
	    transform: borderTransform
	  },
	  borderTop: {
	    themeKey: 'borders',
	    transform: borderTransform
	  },
	  borderRight: {
	    themeKey: 'borders',
	    transform: borderTransform
	  },
	  borderBottom: {
	    themeKey: 'borders',
	    transform: borderTransform
	  },
	  borderLeft: {
	    themeKey: 'borders',
	    transform: borderTransform
	  },
	  borderColor: {
	    themeKey: 'palette'
	  },
	  borderTopColor: {
	    themeKey: 'palette'
	  },
	  borderRightColor: {
	    themeKey: 'palette'
	  },
	  borderBottomColor: {
	    themeKey: 'palette'
	  },
	  borderLeftColor: {
	    themeKey: 'palette'
	  },
	  outline: {
	    themeKey: 'borders',
	    transform: borderTransform
	  },
	  outlineColor: {
	    themeKey: 'palette'
	  },
	  borderRadius: {
	    themeKey: 'shape.borderRadius',
	    style: borderRadius
	  },
	  // palette
	  color: {
	    themeKey: 'palette',
	    transform: paletteTransform
	  },
	  bgcolor: {
	    themeKey: 'palette',
	    cssProperty: 'backgroundColor',
	    transform: paletteTransform
	  },
	  backgroundColor: {
	    themeKey: 'palette',
	    transform: paletteTransform
	  },
	  // spacing
	  p: {
	    style: padding
	  },
	  pt: {
	    style: padding
	  },
	  pr: {
	    style: padding
	  },
	  pb: {
	    style: padding
	  },
	  pl: {
	    style: padding
	  },
	  px: {
	    style: padding
	  },
	  py: {
	    style: padding
	  },
	  padding: {
	    style: padding
	  },
	  paddingTop: {
	    style: padding
	  },
	  paddingRight: {
	    style: padding
	  },
	  paddingBottom: {
	    style: padding
	  },
	  paddingLeft: {
	    style: padding
	  },
	  paddingX: {
	    style: padding
	  },
	  paddingY: {
	    style: padding
	  },
	  paddingInline: {
	    style: padding
	  },
	  paddingInlineStart: {
	    style: padding
	  },
	  paddingInlineEnd: {
	    style: padding
	  },
	  paddingBlock: {
	    style: padding
	  },
	  paddingBlockStart: {
	    style: padding
	  },
	  paddingBlockEnd: {
	    style: padding
	  },
	  m: {
	    style: margin
	  },
	  mt: {
	    style: margin
	  },
	  mr: {
	    style: margin
	  },
	  mb: {
	    style: margin
	  },
	  ml: {
	    style: margin
	  },
	  mx: {
	    style: margin
	  },
	  my: {
	    style: margin
	  },
	  margin: {
	    style: margin
	  },
	  marginTop: {
	    style: margin
	  },
	  marginRight: {
	    style: margin
	  },
	  marginBottom: {
	    style: margin
	  },
	  marginLeft: {
	    style: margin
	  },
	  marginX: {
	    style: margin
	  },
	  marginY: {
	    style: margin
	  },
	  marginInline: {
	    style: margin
	  },
	  marginInlineStart: {
	    style: margin
	  },
	  marginInlineEnd: {
	    style: margin
	  },
	  marginBlock: {
	    style: margin
	  },
	  marginBlockStart: {
	    style: margin
	  },
	  marginBlockEnd: {
	    style: margin
	  },
	  // display
	  displayPrint: {
	    cssProperty: false,
	    transform: value => ({
	      '@media print': {
	        display: value
	      }
	    })
	  },
	  display: {},
	  overflow: {},
	  textOverflow: {},
	  visibility: {},
	  whiteSpace: {},
	  // flexbox
	  flexBasis: {},
	  flexDirection: {},
	  flexWrap: {},
	  justifyContent: {},
	  alignItems: {},
	  alignContent: {},
	  order: {},
	  flex: {},
	  flexGrow: {},
	  flexShrink: {},
	  alignSelf: {},
	  justifyItems: {},
	  justifySelf: {},
	  // grid
	  gap: {
	    style: gap
	  },
	  rowGap: {
	    style: rowGap
	  },
	  columnGap: {
	    style: columnGap
	  },
	  gridColumn: {},
	  gridRow: {},
	  gridAutoFlow: {},
	  gridAutoColumns: {},
	  gridAutoRows: {},
	  gridTemplateColumns: {},
	  gridTemplateRows: {},
	  gridTemplateAreas: {},
	  gridArea: {},
	  // positions
	  position: {},
	  zIndex: {
	    themeKey: 'zIndex'
	  },
	  top: {},
	  right: {},
	  bottom: {},
	  left: {},
	  // shadows
	  boxShadow: {
	    themeKey: 'shadows'
	  },
	  // sizing
	  width: {
	    transform: sizingTransform
	  },
	  maxWidth: {
	    style: maxWidth
	  },
	  minWidth: {
	    transform: sizingTransform
	  },
	  height: {
	    transform: sizingTransform
	  },
	  maxHeight: {
	    transform: sizingTransform
	  },
	  minHeight: {
	    transform: sizingTransform
	  },
	  boxSizing: {},
	  // typography
	  fontFamily: {
	    themeKey: 'typography'
	  },
	  fontSize: {
	    themeKey: 'typography'
	  },
	  fontStyle: {
	    themeKey: 'typography'
	  },
	  fontWeight: {
	    themeKey: 'typography'
	  },
	  letterSpacing: {},
	  textTransform: {},
	  lineHeight: {},
	  textAlign: {},
	  typography: {
	    cssProperty: false,
	    themeKey: 'typography'
	  }
	};
	var defaultSxConfig$1 = defaultSxConfig;

	function objectsHaveSameKeys(...objects) {
	  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
	  const union = new Set(allKeys);
	  return objects.every(object => union.size === Object.keys(object).length);
	}
	function callIfFn(maybeFn, arg) {
	  return typeof maybeFn === 'function' ? maybeFn(arg) : maybeFn;
	}

	// eslint-disable-next-line @typescript-eslint/naming-convention
	function unstable_createStyleFunctionSx() {
	  function getThemeValue(prop, val, theme, config) {
	    const props = {
	      [prop]: val,
	      theme
	    };
	    const options = config[prop];
	    if (!options) {
	      return {
	        [prop]: val
	      };
	    }
	    const {
	      cssProperty = prop,
	      themeKey,
	      transform,
	      style
	    } = options;
	    if (val == null) {
	      return null;
	    }

	    // TODO v6: remove, see https://github.com/mui/material-ui/pull/38123
	    if (themeKey === 'typography' && val === 'inherit') {
	      return {
	        [prop]: val
	      };
	    }
	    const themeMapping = getPath(theme, themeKey) || {};
	    if (style) {
	      return style(props);
	    }
	    const styleFromPropValue = propValueFinal => {
	      let value = getStyleValue$1(themeMapping, transform, propValueFinal);
	      if (propValueFinal === value && typeof propValueFinal === 'string') {
	        // Haven't found value
	        value = getStyleValue$1(themeMapping, transform, `${prop}${propValueFinal === 'default' ? '' : capitalize(propValueFinal)}`, propValueFinal);
	      }
	      if (cssProperty === false) {
	        return value;
	      }
	      return {
	        [cssProperty]: value
	      };
	    };
	    return handleBreakpoints(props, val, styleFromPropValue);
	  }
	  function styleFunctionSx(props) {
	    var _theme$unstable_sxCon;
	    const {
	      sx,
	      theme = {}
	    } = props || {};
	    if (!sx) {
	      return null; // Emotion & styled-components will neglect null
	    }
	    const config = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : defaultSxConfig$1;

	    /*
	     * Receive `sxInput` as object or callback
	     * and then recursively check keys & values to create media query object styles.
	     * (the result will be used in `styled`)
	     */
	    function traverse(sxInput) {
	      let sxObject = sxInput;
	      if (typeof sxInput === 'function') {
	        sxObject = sxInput(theme);
	      } else if (typeof sxInput !== 'object') {
	        // value
	        return sxInput;
	      }
	      if (!sxObject) {
	        return null;
	      }
	      const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
	      const breakpointsKeys = Object.keys(emptyBreakpoints);
	      let css = emptyBreakpoints;
	      Object.keys(sxObject).forEach(styleKey => {
	        const value = callIfFn(sxObject[styleKey], theme);
	        if (value !== null && value !== undefined) {
	          if (typeof value === 'object') {
	            if (config[styleKey]) {
	              css = merge(css, getThemeValue(styleKey, value, theme, config));
	            } else {
	              const breakpointsValues = handleBreakpoints({
	                theme
	              }, value, x => ({
	                [styleKey]: x
	              }));
	              if (objectsHaveSameKeys(breakpointsValues, value)) {
	                css[styleKey] = styleFunctionSx({
	                  sx: value,
	                  theme
	                });
	              } else {
	                css = merge(css, breakpointsValues);
	              }
	            }
	          } else {
	            css = merge(css, getThemeValue(styleKey, value, theme, config));
	          }
	        }
	      });
	      return removeUnusedBreakpoints(breakpointsKeys, css);
	    }
	    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
	  }
	  return styleFunctionSx;
	}
	const styleFunctionSx = unstable_createStyleFunctionSx();
	styleFunctionSx.filterProps = ['sx'];
	var styleFunctionSx$1 = styleFunctionSx;

	const _excluded$24 = ["breakpoints", "palette", "spacing", "shape"];
	function createTheme$1(options = {}, ...args) {
	  const {
	      breakpoints: breakpointsInput = {},
	      palette: paletteInput = {},
	      spacing: spacingInput,
	      shape: shapeInput = {}
	    } = options,
	    other = _objectWithoutPropertiesLoose(options, _excluded$24);
	  const breakpoints = createBreakpoints(breakpointsInput);
	  const spacing = createSpacing(spacingInput);
	  let muiTheme = deepmerge({
	    breakpoints,
	    direction: 'ltr',
	    components: {},
	    // Inject component definitions.
	    palette: _extends({
	      mode: 'light'
	    }, paletteInput),
	    spacing,
	    shape: _extends({}, shape$1, shapeInput)
	  }, other);
	  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
	  muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
	  muiTheme.unstable_sx = function sx(props) {
	    return styleFunctionSx$1({
	      sx: props,
	      theme: this
	    });
	  };
	  return muiTheme;
	}

	function isObjectEmpty(obj) {
	  return Object.keys(obj).length === 0;
	}
	function useTheme$2(defaultTheme = null) {
	  const contextTheme = reactExports.useContext(ThemeContext);
	  return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme : contextTheme;
	}

	const systemDefaultTheme$1 = createTheme$1();
	function useTheme$1(defaultTheme = systemDefaultTheme$1) {
	  return useTheme$2(defaultTheme);
	}

	function GlobalStyles$1({
	  styles,
	  themeId,
	  defaultTheme = {}
	}) {
	  const upperTheme = useTheme$1(defaultTheme);
	  const globalStyles = typeof styles === 'function' ? styles(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles;
	  return /*#__PURE__*/jsxRuntimeExports.jsx(GlobalStyles$2, {
	    styles: globalStyles
	  });
	}

	const _excluded$23 = ["sx"];
	const splitProps = props => {
	  var _props$theme$unstable, _props$theme;
	  const result = {
	    systemProps: {},
	    otherProps: {}
	  };
	  const config = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : defaultSxConfig$1;
	  Object.keys(props).forEach(prop => {
	    if (config[prop]) {
	      result.systemProps[prop] = props[prop];
	    } else {
	      result.otherProps[prop] = props[prop];
	    }
	  });
	  return result;
	};
	function extendSxProp(props) {
	  const {
	      sx: inSx
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$23);
	  const {
	    systemProps,
	    otherProps
	  } = splitProps(other);
	  let finalSx;
	  if (Array.isArray(inSx)) {
	    finalSx = [systemProps, ...inSx];
	  } else if (typeof inSx === 'function') {
	    finalSx = (...args) => {
	      const result = inSx(...args);
	      if (!isPlainObject$1(result)) {
	        return systemProps;
	      }
	      return _extends({}, systemProps, result);
	    };
	  } else {
	    finalSx = _extends({}, systemProps, inSx);
	  }
	  return _extends({}, otherProps, {
	    sx: finalSx
	  });
	}

	function r(e) {
	  var t,
	    f,
	    n = "";
	  if ("string" == typeof e || "number" == typeof e) n += e;else if ("object" == typeof e) if (Array.isArray(e)) {
	    var o = e.length;
	    for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
	  } else for (f in e) e[f] && (n && (n += " "), n += f);
	  return n;
	}
	function clsx() {
	  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++) (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
	  return n;
	}

	const _excluded$22 = ["variant"];
	function isEmpty$3(string) {
	  return string.length === 0;
	}

	/**
	 * Generates string classKey based on the properties provided. It starts with the
	 * variant if defined, and then it appends all other properties in alphabetical order.
	 * @param {object} props - the properties for which the classKey should be created.
	 */
	function propsToClassKey(props) {
	  const {
	      variant
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$22);
	  let classKey = variant || '';
	  Object.keys(other).sort().forEach(key => {
	    if (key === 'color') {
	      classKey += isEmpty$3(classKey) ? props[key] : capitalize(props[key]);
	    } else {
	      classKey += `${isEmpty$3(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
	    }
	  });
	  return classKey;
	}

	const _excluded$21 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
	function isEmpty$2(obj) {
	  return Object.keys(obj).length === 0;
	}

	// https://github.com/emotion-js/emotion/blob/26ded6109fcd8ca9875cc2ce4564fee678a3f3c5/packages/styled/src/utils.js#L40
	function isStringTag(tag) {
	  return typeof tag === 'string' &&
	  // 96 is one less than the char code
	  // for "a" so this is checking that
	  // it's a lowercase character
	  tag.charCodeAt(0) > 96;
	}
	const getStyleOverrides = (name, theme) => {
	  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
	    return theme.components[name].styleOverrides;
	  }
	  return null;
	};
	const transformVariants = variants => {
	  let numOfCallbacks = 0;
	  const variantsStyles = {};
	  if (variants) {
	    variants.forEach(definition => {
	      let key = '';
	      if (typeof definition.props === 'function') {
	        key = `callback${numOfCallbacks}`;
	        numOfCallbacks += 1;
	      } else {
	        key = propsToClassKey(definition.props);
	      }
	      variantsStyles[key] = definition.style;
	    });
	  }
	  return variantsStyles;
	};
	const getVariantStyles = (name, theme) => {
	  let variants = [];
	  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
	    variants = theme.components[name].variants;
	  }
	  return transformVariants(variants);
	};
	const variantsResolver = (props, styles, variants) => {
	  const {
	    ownerState = {}
	  } = props;
	  const variantsStyles = [];
	  let numOfCallbacks = 0;
	  if (variants) {
	    variants.forEach(variant => {
	      let isMatch = true;
	      if (typeof variant.props === 'function') {
	        const propsToCheck = _extends({}, props, ownerState);
	        isMatch = variant.props(propsToCheck);
	      } else {
	        Object.keys(variant.props).forEach(key => {
	          if (ownerState[key] !== variant.props[key] && props[key] !== variant.props[key]) {
	            isMatch = false;
	          }
	        });
	      }
	      if (isMatch) {
	        if (typeof variant.props === 'function') {
	          variantsStyles.push(styles[`callback${numOfCallbacks}`]);
	        } else {
	          variantsStyles.push(styles[propsToClassKey(variant.props)]);
	        }
	      }
	      if (typeof variant.props === 'function') {
	        numOfCallbacks += 1;
	      }
	    });
	  }
	  return variantsStyles;
	};
	const themeVariantsResolver = (props, styles, theme, name) => {
	  var _theme$components;
	  const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;
	  return variantsResolver(props, styles, themeVariants);
	};

	// Update /system/styled/#api in case if this changes
	function shouldForwardProp(prop) {
	  return prop !== 'ownerState' && prop !== 'theme' && prop !== 'sx' && prop !== 'as';
	}
	const systemDefaultTheme = createTheme$1();
	const lowercaseFirstLetter = string => {
	  if (!string) {
	    return string;
	  }
	  return string.charAt(0).toLowerCase() + string.slice(1);
	};
	function resolveTheme({
	  defaultTheme,
	  theme,
	  themeId
	}) {
	  return isEmpty$2(theme) ? defaultTheme : theme[themeId] || theme;
	}
	function defaultOverridesResolver(slot) {
	  if (!slot) {
	    return null;
	  }
	  return (props, styles) => styles[slot];
	}
	const muiStyledFunctionResolver = ({
	  styledArg,
	  props,
	  defaultTheme,
	  themeId
	}) => {
	  const resolvedStyles = styledArg(_extends({}, props, {
	    theme: resolveTheme(_extends({}, props, {
	      defaultTheme,
	      themeId
	    }))
	  }));
	  let optionalVariants;
	  if (resolvedStyles && resolvedStyles.variants) {
	    optionalVariants = resolvedStyles.variants;
	    delete resolvedStyles.variants;
	  }
	  if (optionalVariants) {
	    const variantsStyles = variantsResolver(props, transformVariants(optionalVariants), optionalVariants);
	    return [resolvedStyles, ...variantsStyles];
	  }
	  return resolvedStyles;
	};
	function createStyled(input = {}) {
	  const {
	    themeId,
	    defaultTheme = systemDefaultTheme,
	    rootShouldForwardProp = shouldForwardProp,
	    slotShouldForwardProp = shouldForwardProp
	  } = input;
	  const systemSx = props => {
	    return styleFunctionSx$1(_extends({}, props, {
	      theme: resolveTheme(_extends({}, props, {
	        defaultTheme,
	        themeId
	      }))
	    }));
	  };
	  systemSx.__mui_systemSx = true;
	  return (tag, inputOptions = {}) => {
	    // Filter out the `sx` style function from the previous styled component to prevent unnecessary styles generated by the composite components.
	    internal_processStyles(tag, styles => styles.filter(style => !(style != null && style.__mui_systemSx)));
	    const {
	        name: componentName,
	        slot: componentSlot,
	        skipVariantsResolver: inputSkipVariantsResolver,
	        skipSx: inputSkipSx,
	        // TODO v6: remove `lowercaseFirstLetter()` in the next major release
	        // For more details: https://github.com/mui/material-ui/pull/37908
	        overridesResolver = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
	      } = inputOptions,
	      options = _objectWithoutPropertiesLoose(inputOptions, _excluded$21);

	    // if skipVariantsResolver option is defined, take the value, otherwise, true for root and false for other slots.
	    const skipVariantsResolver = inputSkipVariantsResolver !== undefined ? inputSkipVariantsResolver :
	    // TODO v6: remove `Root` in the next major release
	    // For more details: https://github.com/mui/material-ui/pull/37908
	    componentSlot && componentSlot !== 'Root' && componentSlot !== 'root' || false;
	    const skipSx = inputSkipSx || false;
	    let label;
	    let shouldForwardPropOption = shouldForwardProp;

	    // TODO v6: remove `Root` in the next major release
	    // For more details: https://github.com/mui/material-ui/pull/37908
	    if (componentSlot === 'Root' || componentSlot === 'root') {
	      shouldForwardPropOption = rootShouldForwardProp;
	    } else if (componentSlot) {
	      // any other slot specified
	      shouldForwardPropOption = slotShouldForwardProp;
	    } else if (isStringTag(tag)) {
	      // for string (html) tag, preserve the behavior in emotion & styled-components.
	      shouldForwardPropOption = undefined;
	    }
	    const defaultStyledResolver = styled$3(tag, _extends({
	      shouldForwardProp: shouldForwardPropOption,
	      label
	    }, options));
	    const muiStyledResolver = (styleArg, ...expressions) => {
	      const expressionsWithDefaultTheme = expressions ? expressions.map(stylesArg => {
	        // On the server Emotion doesn't use React.forwardRef for creating components, so the created
	        // component stays as a function. This condition makes sure that we do not interpolate functions
	        // which are basically components used as a selectors.
	        if (typeof stylesArg === 'function' && stylesArg.__emotion_real !== stylesArg) {
	          return props => muiStyledFunctionResolver({
	            styledArg: stylesArg,
	            props,
	            defaultTheme,
	            themeId
	          });
	        }
	        if (isPlainObject$1(stylesArg)) {
	          let transformedStylesArg = stylesArg;
	          let styledArgVariants;
	          if (stylesArg && stylesArg.variants) {
	            styledArgVariants = stylesArg.variants;
	            delete transformedStylesArg.variants;
	            transformedStylesArg = props => {
	              let result = stylesArg;
	              const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
	              variantStyles.forEach(variantStyle => {
	                result = deepmerge(result, variantStyle);
	              });
	              return result;
	            };
	          }
	          return transformedStylesArg;
	        }
	        return stylesArg;
	      }) : [];
	      let transformedStyleArg = styleArg;
	      if (isPlainObject$1(styleArg)) {
	        let styledArgVariants;
	        if (styleArg && styleArg.variants) {
	          styledArgVariants = styleArg.variants;
	          delete transformedStyleArg.variants;
	          transformedStyleArg = props => {
	            let result = styleArg;
	            const variantStyles = variantsResolver(props, transformVariants(styledArgVariants), styledArgVariants);
	            variantStyles.forEach(variantStyle => {
	              result = deepmerge(result, variantStyle);
	            });
	            return result;
	          };
	        }
	      } else if (typeof styleArg === 'function' &&
	      // On the server Emotion doesn't use React.forwardRef for creating components, so the created
	      // component stays as a function. This condition makes sure that we do not interpolate functions
	      // which are basically components used as a selectors.
	      styleArg.__emotion_real !== styleArg) {
	        // If the type is function, we need to define the default theme.
	        transformedStyleArg = props => muiStyledFunctionResolver({
	          styledArg: styleArg,
	          props,
	          defaultTheme,
	          themeId
	        });
	      }
	      if (componentName && overridesResolver) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = resolveTheme(_extends({}, props, {
	            defaultTheme,
	            themeId
	          }));
	          const styleOverrides = getStyleOverrides(componentName, theme);
	          if (styleOverrides) {
	            const resolvedStyleOverrides = {};
	            Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
	              resolvedStyleOverrides[slotKey] = typeof slotStyle === 'function' ? slotStyle(_extends({}, props, {
	                theme
	              })) : slotStyle;
	            });
	            return overridesResolver(props, resolvedStyleOverrides);
	          }
	          return null;
	        });
	      }
	      if (componentName && !skipVariantsResolver) {
	        expressionsWithDefaultTheme.push(props => {
	          const theme = resolveTheme(_extends({}, props, {
	            defaultTheme,
	            themeId
	          }));
	          return themeVariantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
	        });
	      }
	      if (!skipSx) {
	        expressionsWithDefaultTheme.push(systemSx);
	      }
	      const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
	      if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
	        const placeholders = new Array(numOfCustomFnsApplied).fill('');
	        // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles.
	        transformedStyleArg = [...styleArg, ...placeholders];
	        transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
	      }
	      const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
	      if (tag.muiName) {
	        Component.muiName = tag.muiName;
	      }
	      return Component;
	    };
	    if (defaultStyledResolver.withConfig) {
	      muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
	    }
	    return muiStyledResolver;
	  };
	}

	const styled$2 = createStyled();
	var systemStyled = styled$2;

	function getThemeProps(params) {
	  const {
	    theme,
	    name,
	    props
	  } = params;
	  if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
	    return props;
	  }
	  return resolveProps(theme.components[name].defaultProps, props);
	}

	function useThemeProps$1({
	  props,
	  name,
	  defaultTheme,
	  themeId
	}) {
	  let theme = useTheme$1(defaultTheme);
	  if (themeId) {
	    theme = theme[themeId] || theme;
	  }
	  const mergedProps = getThemeProps({
	    theme,
	    name,
	    props
	  });
	  return mergedProps;
	}

	/* eslint-disable @typescript-eslint/naming-convention */
	/**
	 * Returns a number whose value is limited to the given range.
	 * @param {number} value The value to be clamped
	 * @param {number} min The lower boundary of the output range
	 * @param {number} max The upper boundary of the output range
	 * @returns {number} A number in the range [min, max]
	 */
	function clamp$1(value, min = 0, max = 1) {
	  return Math.min(Math.max(min, value), max);
	}

	/**
	 * Converts a color from CSS hex format to CSS rgb format.
	 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
	 * @returns {string} A CSS rgb color string
	 */
	function hexToRgb(color) {
	  color = color.slice(1);
	  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');
	  let colors = color.match(re);
	  if (colors && colors[0].length === 1) {
	    colors = colors.map(n => n + n);
	  }
	  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {
    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
  }).join(', ')})` : '';
	}

	/**
	 * Returns an object with the type and values of a color.
	 *
	 * Note: Does not support rgb % values.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @returns {object} - A MUI color object: {type: string, values: number[]}
	 */
	function decomposeColor(color) {
	  // Idempotent
	  if (color.type) {
	    return color;
	  }
	  if (color.charAt(0) === '#') {
	    return decomposeColor(hexToRgb(color));
	  }
	  const marker = color.indexOf('(');
	  const type = color.substring(0, marker);
	  if (['rgb', 'rgba', 'hsl', 'hsla', 'color'].indexOf(type) === -1) {
	    throw new Error(formatMuiErrorMessage(9, color));
	  }
	  let values = color.substring(marker + 1, color.length - 1);
	  let colorSpace;
	  if (type === 'color') {
	    values = values.split(' ');
	    colorSpace = values.shift();
	    if (values.length === 4 && values[3].charAt(0) === '/') {
	      values[3] = values[3].slice(1);
	    }
	    if (['srgb', 'display-p3', 'a98-rgb', 'prophoto-rgb', 'rec-2020'].indexOf(colorSpace) === -1) {
	      throw new Error(formatMuiErrorMessage(10, colorSpace));
	    }
	  } else {
	    values = values.split(',');
	  }
	  values = values.map(value => parseFloat(value));
	  return {
	    type,
	    values,
	    colorSpace
	  };
	}

	/**
	 * Converts a color object with type and values to a string.
	 * @param {object} color - Decomposed color
	 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla', 'color'
	 * @param {array} color.values - [n,n,n] or [n,n,n,n]
	 * @returns {string} A CSS color string
	 */
	function recomposeColor(color) {
	  const {
	    type,
	    colorSpace
	  } = color;
	  let {
	    values
	  } = color;
	  if (type.indexOf('rgb') !== -1) {
	    // Only convert the first 3 values to int (i.e. not alpha)
	    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);
	  } else if (type.indexOf('hsl') !== -1) {
	    values[1] = `${values[1]}%`;
	    values[2] = `${values[2]}%`;
	  }
	  if (type.indexOf('color') !== -1) {
	    values = `${colorSpace} ${values.join(' ')}`;
	  } else {
	    values = `${values.join(', ')}`;
	  }
	  return `${type}(${values})`;
	}

	/**
	 * Converts a color from hsl format to rgb format.
	 * @param {string} color - HSL color values
	 * @returns {string} rgb color values
	 */
	function hslToRgb(color) {
	  color = decomposeColor(color);
	  const {
	    values
	  } = color;
	  const h = values[0];
	  const s = values[1] / 100;
	  const l = values[2] / 100;
	  const a = s * Math.min(l, 1 - l);
	  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
	  let type = 'rgb';
	  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
	  if (color.type === 'hsla') {
	    type += 'a';
	    rgb.push(values[3]);
	  }
	  return recomposeColor({
	    type,
	    values: rgb
	  });
	}
	/**
	 * The relative brightness of any point in a color space,
	 * normalized to 0 for darkest black and 1 for lightest white.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @returns {number} The relative brightness of the color in the range 0 - 1
	 */
	function getLuminance(color) {
	  color = decomposeColor(color);
	  let rgb = color.type === 'hsl' || color.type === 'hsla' ? decomposeColor(hslToRgb(color)).values : color.values;
	  rgb = rgb.map(val => {
	    if (color.type !== 'color') {
	      val /= 255; // normalized
	    }
	    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
	  });

	  // Truncate at 3 digits
	  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
	}

	/**
	 * Calculates the contrast ratio between two colors.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} A contrast ratio value in the range 0 - 21.
	 */
	function getContrastRatio(foreground, background) {
	  const lumA = getLuminance(foreground);
	  const lumB = getLuminance(background);
	  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
	}

	/**
	 * Sets the absolute transparency of a color.
	 * Any existing alpha values are overwritten.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} value - value to set the alpha channel to in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function alpha(color, value) {
	  color = decomposeColor(color);
	  value = clamp$1(value);
	  if (color.type === 'rgb' || color.type === 'hsl') {
	    color.type += 'a';
	  }
	  if (color.type === 'color') {
	    color.values[3] = `/${value}`;
	  } else {
	    color.values[3] = value;
	  }
	  return recomposeColor(color);
	}

	/**
	 * Darkens a color.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function darken(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp$1(coefficient);
	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] *= 1 - coefficient;
	  } else if (color.type.indexOf('rgb') !== -1 || color.type.indexOf('color') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] *= 1 - coefficient;
	    }
	  }
	  return recomposeColor(color);
	}

	/**
	 * Lightens a color.
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */
	function lighten(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp$1(coefficient);
	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] += (100 - color.values[2]) * coefficient;
	  } else if (color.type.indexOf('rgb') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] += (255 - color.values[i]) * coefficient;
	    }
	  } else if (color.type.indexOf('color') !== -1) {
	    for (let i = 0; i < 3; i += 1) {
	      color.values[i] += (1 - color.values[i]) * coefficient;
	    }
	  }
	  return recomposeColor(color);
	}

	const _excluded$20 = ["component", "direction", "spacing", "divider", "children", "className", "useFlexGap"];
	const defaultTheme$2 = createTheme$1();
	// widening Theme to any so that the consumer can own the theme structure.
	const defaultCreateStyledComponent = systemStyled('div', {
	  name: 'MuiStack',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	});
	function useThemePropsDefault(props) {
	  return useThemeProps$1({
	    props,
	    name: 'MuiStack',
	    defaultTheme: defaultTheme$2
	  });
	}

	/**
	 * Return an array with the separator React element interspersed between
	 * each React node of the input children.
	 *
	 * > joinChildren([1,2,3], 0)
	 * [1,0,2,0,3]
	 */
	function joinChildren(children, separator) {
	  const childrenArray = reactExports.Children.toArray(children).filter(Boolean);
	  return childrenArray.reduce((output, child, index) => {
	    output.push(child);
	    if (index < childrenArray.length - 1) {
	      output.push( /*#__PURE__*/reactExports.cloneElement(separator, {
	        key: `separator-${index}`
	      }));
	    }
	    return output;
	  }, []);
	}
	const getSideFromDirection = direction => {
	  return {
	    row: 'Left',
	    'row-reverse': 'Right',
	    column: 'Top',
	    'column-reverse': 'Bottom'
	  }[direction];
	};
	const style$1 = ({
	  ownerState,
	  theme
	}) => {
	  let styles = _extends({
	    display: 'flex',
	    flexDirection: 'column'
	  }, handleBreakpoints({
	    theme
	  }, resolveBreakpointValues({
	    values: ownerState.direction,
	    breakpoints: theme.breakpoints.values
	  }), propValue => ({
	    flexDirection: propValue
	  })));
	  if (ownerState.spacing) {
	    const transformer = createUnarySpacing(theme);
	    const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
	      if (typeof ownerState.spacing === 'object' && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === 'object' && ownerState.direction[breakpoint] != null) {
	        acc[breakpoint] = true;
	      }
	      return acc;
	    }, {});
	    const directionValues = resolveBreakpointValues({
	      values: ownerState.direction,
	      base
	    });
	    const spacingValues = resolveBreakpointValues({
	      values: ownerState.spacing,
	      base
	    });
	    if (typeof directionValues === 'object') {
	      Object.keys(directionValues).forEach((breakpoint, index, breakpoints) => {
	        const directionValue = directionValues[breakpoint];
	        if (!directionValue) {
	          const previousDirectionValue = index > 0 ? directionValues[breakpoints[index - 1]] : 'column';
	          directionValues[breakpoint] = previousDirectionValue;
	        }
	      });
	    }
	    const styleFromPropValue = (propValue, breakpoint) => {
	      if (ownerState.useFlexGap) {
	        return {
	          gap: getValue(transformer, propValue)
	        };
	      }
	      return {
	        // The useFlexGap={false} implement relies on each child to give up control of the margin.
	        // We need to reset the margin to avoid double spacing.
	        '& > :not(style):not(style)': {
	          margin: 0
	        },
	        '& > :not(style) ~ :not(style)': {
	          [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: getValue(transformer, propValue)
	        }
	      };
	    };
	    styles = deepmerge(styles, handleBreakpoints({
	      theme
	    }, spacingValues, styleFromPropValue));
	  }
	  styles = mergeBreakpointsInOrder(theme.breakpoints, styles);
	  return styles;
	};
	function createStack(options = {}) {
	  const {
	    // This will allow adding custom styled fn (for example for custom sx style function)
	    createStyledComponent = defaultCreateStyledComponent,
	    useThemeProps = useThemePropsDefault,
	    componentName = 'MuiStack'
	  } = options;
	  const useUtilityClasses = () => {
	    const slots = {
	      root: ['root']
	    };
	    return composeClasses(slots, slot => generateUtilityClass(componentName, slot), {});
	  };
	  const StackRoot = createStyledComponent(style$1);
	  const Stack = /*#__PURE__*/reactExports.forwardRef(function Grid(inProps, ref) {
	    const themeProps = useThemeProps(inProps);
	    const props = extendSxProp(themeProps); // `color` type conflicts with html color attribute.
	    const {
	        component = 'div',
	        direction = 'column',
	        spacing = 0,
	        divider,
	        children,
	        className,
	        useFlexGap = false
	      } = props,
	      other = _objectWithoutPropertiesLoose(props, _excluded$20);
	    const ownerState = {
	      direction,
	      spacing,
	      useFlexGap
	    };
	    const classes = useUtilityClasses();
	    return /*#__PURE__*/jsxRuntimeExports.jsx(StackRoot, _extends({
	      as: component,
	      ownerState: ownerState,
	      ref: ref,
	      className: clsx(classes.root, className)
	    }, other, {
	      children: divider ? joinChildren(children, divider) : children
	    }));
	  });
	  return Stack;
	}

	function createMixins(breakpoints, mixins) {
	  return _extends({
	    toolbar: {
	      minHeight: 56,
	      [breakpoints.up('xs')]: {
	        '@media (orientation: landscape)': {
	          minHeight: 48
	        }
	      },
	      [breakpoints.up('sm')]: {
	        minHeight: 64
	      }
	    }
	  }, mixins);
	}

	const _excluded$1$ = ["mode", "contrastThreshold", "tonalOffset"];
	const light = {
	  // The colors used to style the text.
	  text: {
	    // The most important text.
	    primary: 'rgba(0, 0, 0, 0.87)',
	    // Secondary text.
	    secondary: 'rgba(0, 0, 0, 0.6)',
	    // Disabled text have even lower visual prominence.
	    disabled: 'rgba(0, 0, 0, 0.38)'
	  },
	  // The color used to divide different elements.
	  divider: 'rgba(0, 0, 0, 0.12)',
	  // The background colors used to style the surfaces.
	  // Consistency between these values is important.
	  background: {
	    paper: common$1.white,
	    default: common$1.white
	  },
	  // The colors used to style the action elements.
	  action: {
	    // The color of an active action like an icon button.
	    active: 'rgba(0, 0, 0, 0.54)',
	    // The color of an hovered action.
	    hover: 'rgba(0, 0, 0, 0.04)',
	    hoverOpacity: 0.04,
	    // The color of a selected action.
	    selected: 'rgba(0, 0, 0, 0.08)',
	    selectedOpacity: 0.08,
	    // The color of a disabled action.
	    disabled: 'rgba(0, 0, 0, 0.26)',
	    // The background color of a disabled action.
	    disabledBackground: 'rgba(0, 0, 0, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(0, 0, 0, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.12
	  }
	};
	const dark = {
	  text: {
	    primary: common$1.white,
	    secondary: 'rgba(255, 255, 255, 0.7)',
	    disabled: 'rgba(255, 255, 255, 0.5)',
	    icon: 'rgba(255, 255, 255, 0.5)'
	  },
	  divider: 'rgba(255, 255, 255, 0.12)',
	  background: {
	    paper: '#121212',
	    default: '#121212'
	  },
	  action: {
	    active: common$1.white,
	    hover: 'rgba(255, 255, 255, 0.08)',
	    hoverOpacity: 0.08,
	    selected: 'rgba(255, 255, 255, 0.16)',
	    selectedOpacity: 0.16,
	    disabled: 'rgba(255, 255, 255, 0.3)',
	    disabledBackground: 'rgba(255, 255, 255, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(255, 255, 255, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.24
	  }
	};
	function addLightOrDark(intent, direction, shade, tonalOffset) {
	  const tonalOffsetLight = tonalOffset.light || tonalOffset;
	  const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
	  if (!intent[direction]) {
	    if (intent.hasOwnProperty(shade)) {
	      intent[direction] = intent[shade];
	    } else if (direction === 'light') {
	      intent.light = lighten(intent.main, tonalOffsetLight);
	    } else if (direction === 'dark') {
	      intent.dark = darken(intent.main, tonalOffsetDark);
	    }
	  }
	}
	function getDefaultPrimary(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: blue$1[200],
	      light: blue$1[50],
	      dark: blue$1[400]
	    };
	  }
	  return {
	    main: blue$1[700],
	    light: blue$1[400],
	    dark: blue$1[800]
	  };
	}
	function getDefaultSecondary(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: purple$1[200],
	      light: purple$1[50],
	      dark: purple$1[400]
	    };
	  }
	  return {
	    main: purple$1[500],
	    light: purple$1[300],
	    dark: purple$1[700]
	  };
	}
	function getDefaultError(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: red$1[500],
	      light: red$1[300],
	      dark: red$1[700]
	    };
	  }
	  return {
	    main: red$1[700],
	    light: red$1[400],
	    dark: red$1[800]
	  };
	}
	function getDefaultInfo(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: lightBlue$1[400],
	      light: lightBlue$1[300],
	      dark: lightBlue$1[700]
	    };
	  }
	  return {
	    main: lightBlue$1[700],
	    light: lightBlue$1[500],
	    dark: lightBlue$1[900]
	  };
	}
	function getDefaultSuccess(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: green$1[400],
	      light: green$1[300],
	      dark: green$1[700]
	    };
	  }
	  return {
	    main: green$1[800],
	    light: green$1[500],
	    dark: green$1[900]
	  };
	}
	function getDefaultWarning(mode = 'light') {
	  if (mode === 'dark') {
	    return {
	      main: orange$1[400],
	      light: orange$1[300],
	      dark: orange$1[700]
	    };
	  }
	  return {
	    main: '#ed6c02',
	    // closest to orange[800] that pass 3:1.
	    light: orange$1[500],
	    dark: orange$1[900]
	  };
	}
	function createPalette(palette) {
	  const {
	      mode = 'light',
	      contrastThreshold = 3,
	      tonalOffset = 0.2
	    } = palette,
	    other = _objectWithoutPropertiesLoose(palette, _excluded$1$);
	  const primary = palette.primary || getDefaultPrimary(mode);
	  const secondary = palette.secondary || getDefaultSecondary(mode);
	  const error = palette.error || getDefaultError(mode);
	  const info = palette.info || getDefaultInfo(mode);
	  const success = palette.success || getDefaultSuccess(mode);
	  const warning = palette.warning || getDefaultWarning(mode);

	  // Use the same logic as
	  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
	  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54
	  function getContrastText(background) {
	    const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
	    return contrastText;
	  }
	  const augmentColor = ({
	    color,
	    name,
	    mainShade = 500,
	    lightShade = 300,
	    darkShade = 700
	  }) => {
	    color = _extends({}, color);
	    if (!color.main && color[mainShade]) {
	      color.main = color[mainShade];
	    }
	    if (!color.hasOwnProperty('main')) {
	      throw new Error(formatMuiErrorMessage(11, name ? ` (${name})` : '', mainShade));
	    }
	    if (typeof color.main !== 'string') {
	      throw new Error(formatMuiErrorMessage(12, name ? ` (${name})` : '', JSON.stringify(color.main)));
	    }
	    addLightOrDark(color, 'light', lightShade, tonalOffset);
	    addLightOrDark(color, 'dark', darkShade, tonalOffset);
	    if (!color.contrastText) {
	      color.contrastText = getContrastText(color.main);
	    }
	    return color;
	  };
	  const modes = {
	    dark,
	    light
	  };
	  const paletteOutput = deepmerge(_extends({
	    // A collection of common colors.
	    common: _extends({}, common$1),
	    // prevent mutable object.
	    // The palette mode, can be light or dark.
	    mode,
	    // The colors used to represent primary interface elements for a user.
	    primary: augmentColor({
	      color: primary,
	      name: 'primary'
	    }),
	    // The colors used to represent secondary interface elements for a user.
	    secondary: augmentColor({
	      color: secondary,
	      name: 'secondary',
	      mainShade: 'A400',
	      lightShade: 'A200',
	      darkShade: 'A700'
	    }),
	    // The colors used to represent interface elements that the user should be made aware of.
	    error: augmentColor({
	      color: error,
	      name: 'error'
	    }),
	    // The colors used to represent potentially dangerous actions or important messages.
	    warning: augmentColor({
	      color: warning,
	      name: 'warning'
	    }),
	    // The colors used to present information to the user that is neutral and not necessarily important.
	    info: augmentColor({
	      color: info,
	      name: 'info'
	    }),
	    // The colors used to indicate the successful completion of an action that user triggered.
	    success: augmentColor({
	      color: success,
	      name: 'success'
	    }),
	    // The grey colors.
	    grey: grey$1,
	    // Used by `getContrastText()` to maximize the contrast between
	    // the background and the text.
	    contrastThreshold,
	    // Takes a background color and returns the text color that maximizes the contrast.
	    getContrastText,
	    // Generate a rich color object.
	    augmentColor,
	    // Used by the functions below to shift a color's luminance by approximately
	    // two indexes within its tonal palette.
	    // E.g., shift from Red 500 to Red 300 or Red 700.
	    tonalOffset
	  }, modes[mode]), other);
	  return paletteOutput;
	}

	const _excluded$1_ = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
	function round$2(value) {
	  return Math.round(value * 1e5) / 1e5;
	}
	const caseAllCaps = {
	  textTransform: 'uppercase'
	};
	const defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';

	/**
	 * @see @link{https://m2.material.io/design/typography/the-type-system.html}
	 * @see @link{https://m2.material.io/design/typography/understanding-typography.html}
	 */
	function createTypography(palette, typography) {
	  const _ref = typeof typography === 'function' ? typography(palette) : typography,
	    {
	      fontFamily = defaultFontFamily,
	      // The default font size of the Material Specification.
	      fontSize = 14,
	      // px
	      fontWeightLight = 300,
	      fontWeightRegular = 400,
	      fontWeightMedium = 500,
	      fontWeightBold = 700,
	      // Tell MUI what's the font-size on the html element.
	      // 16px is the default font-size used by browsers.
	      htmlFontSize = 16,
	      // Apply the CSS properties to all the variants.
	      allVariants,
	      pxToRem: pxToRem2
	    } = _ref,
	    other = _objectWithoutPropertiesLoose(_ref, _excluded$1_);
	  const coef = fontSize / 14;
	  const pxToRem = pxToRem2 || (size => `${size / htmlFontSize * coef}rem`);
	  const buildVariant = (fontWeight, size, lineHeight, letterSpacing, casing) => _extends({
	    fontFamily,
	    fontWeight,
	    fontSize: pxToRem(size),
	    // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
	    lineHeight
	  }, fontFamily === defaultFontFamily ? {
	    letterSpacing: `${round$2(letterSpacing / size)}em`
	  } : {}, casing, allVariants);
	  const variants = {
	    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
	    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
	    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
	    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
	    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
	    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
	    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
	    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
	    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
	    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
	    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
	    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
	    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
	    // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
	    inherit: {
	      fontFamily: 'inherit',
	      fontWeight: 'inherit',
	      fontSize: 'inherit',
	      lineHeight: 'inherit',
	      letterSpacing: 'inherit'
	    }
	  };
	  return deepmerge(_extends({
	    htmlFontSize,
	    pxToRem,
	    fontFamily,
	    fontSize,
	    fontWeightLight,
	    fontWeightRegular,
	    fontWeightMedium,
	    fontWeightBold
	  }, variants), other, {
	    clone: false // No need to clone deep
	  });
	}

	const shadowKeyUmbraOpacity = 0.2;
	const shadowKeyPenumbraOpacity = 0.14;
	const shadowAmbientShadowOpacity = 0.12;
	function createShadow(...px) {
	  return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(',');
	}

	// Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss
	const shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
	var shadows$1 = shadows;

	const _excluded$1Z = ["duration", "easing", "delay"];
	// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
	// to learn the context in which each easing should be used.
	const easing = {
	  // This is the most common easing curve.
	  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
	  // Objects enter the screen at full velocity from off-screen and
	  // slowly decelerate to a resting point.
	  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
	  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
	  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
	  // The sharp curve is used by objects that may return to the screen at any time.
	  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
	};

	// Follow https://m2.material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
	// to learn when use what timing
	const duration = {
	  shortest: 150,
	  shorter: 200,
	  short: 250,
	  // most basic recommended timing
	  standard: 300,
	  // this is to be used in complex animations
	  complex: 375,
	  // recommended when something is entering screen
	  enteringScreen: 225,
	  // recommended when something is leaving screen
	  leavingScreen: 195
	};
	function formatMs(milliseconds) {
	  return `${Math.round(milliseconds)}ms`;
	}
	function getAutoHeightDuration(height) {
	  if (!height) {
	    return 0;
	  }
	  const constant = height / 36;

	  // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10
	  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
	}
	function createTransitions(inputTransitions) {
	  const mergedEasing = _extends({}, easing, inputTransitions.easing);
	  const mergedDuration = _extends({}, duration, inputTransitions.duration);
	  const create = (props = ['all'], options = {}) => {
	    const {
	        duration: durationOption = mergedDuration.standard,
	        easing: easingOption = mergedEasing.easeInOut,
	        delay = 0
	      } = options;
	      _objectWithoutPropertiesLoose(options, _excluded$1Z);
	    return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');
	  };
	  return _extends({
	    getAutoHeightDuration,
	    create
	  }, inputTransitions, {
	    easing: mergedEasing,
	    duration: mergedDuration
	  });
	}

	// We need to centralize the zIndex definitions as they work
	// like global values in the browser.
	const zIndex = {
	  mobileStepper: 1000,
	  fab: 1050,
	  speedDial: 1050,
	  appBar: 1100,
	  drawer: 1200,
	  modal: 1300,
	  snackbar: 1400,
	  tooltip: 1500
	};
	var zIndex$1 = zIndex;

	const _excluded$1Y = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
	function createTheme(options = {}, ...args) {
	  const {
	      mixins: mixinsInput = {},
	      palette: paletteInput = {},
	      transitions: transitionsInput = {},
	      typography: typographyInput = {}
	    } = options,
	    other = _objectWithoutPropertiesLoose(options, _excluded$1Y);
	  if (options.vars) {
	    throw new Error(formatMuiErrorMessage(18));
	  }
	  const palette = createPalette(paletteInput);
	  const systemTheme = createTheme$1(options);
	  let muiTheme = deepmerge(systemTheme, {
	    mixins: createMixins(systemTheme.breakpoints, mixinsInput),
	    palette,
	    // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
	    shadows: shadows$1.slice(),
	    typography: createTypography(palette, typographyInput),
	    transitions: createTransitions(transitionsInput),
	    zIndex: _extends({}, zIndex$1)
	  });
	  muiTheme = deepmerge(muiTheme, other);
	  muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
	  muiTheme.unstable_sxConfig = _extends({}, defaultSxConfig$1, other == null ? void 0 : other.unstable_sxConfig);
	  muiTheme.unstable_sx = function sx(props) {
	    return styleFunctionSx$1({
	      sx: props,
	      theme: this
	    });
	  };
	  return muiTheme;
	}

	const defaultTheme = createTheme();
	var defaultTheme$1 = defaultTheme;

	function useTheme() {
	  const theme = useTheme$1(defaultTheme$1);
	  return theme[THEME_ID] || theme;
	}

	function useThemeProps({
	  props,
	  name
	}) {
	  return useThemeProps$1({
	    props,
	    name,
	    defaultTheme: defaultTheme$1,
	    themeId: THEME_ID
	  });
	}

	const rootShouldForwardProp = prop => shouldForwardProp(prop) && prop !== 'classes';
	const slotShouldForwardProp = shouldForwardProp;
	const styled = createStyled({
	  themeId: THEME_ID,
	  defaultTheme: defaultTheme$1,
	  rootShouldForwardProp
	});
	var styled$1 = styled;

	// Inspired by https://github.com/material-components/material-components-ios/blob/bca36107405594d5b7b16265a5b0ed698f85a5ee/components/Elevation/src/UIColor%2BMaterialElevation.m#L61
	const getOverlayAlpha = elevation => {
	  let alphaValue;
	  if (elevation < 1) {
	    alphaValue = 5.11916 * elevation ** 2;
	  } else {
	    alphaValue = 4.5 * Math.log(elevation + 1) + 2;
	  }
	  return (alphaValue / 100).toFixed(2);
	};
	var getOverlayAlpha$1 = getOverlayAlpha;

	function getSvgIconUtilityClass(slot) {
	  return generateUtilityClass('MuiSvgIcon', slot);
	}
	generateUtilityClasses('MuiSvgIcon', ['root', 'colorPrimary', 'colorSecondary', 'colorAction', 'colorError', 'colorDisabled', 'fontSizeInherit', 'fontSizeSmall', 'fontSizeMedium', 'fontSizeLarge']);

	const _excluded$1X = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
	const useUtilityClasses$1B = ownerState => {
	  const {
	    color,
	    fontSize,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', color !== 'inherit' && `color${capitalize(color)}`, `fontSize${capitalize(fontSize)}`]
	  };
	  return composeClasses(slots, getSvgIconUtilityClass, classes);
	};
	const SvgIconRoot = styled$1('svg', {
	  name: 'MuiSvgIcon',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'inherit' && styles[`color${capitalize(ownerState.color)}`], styles[`fontSize${capitalize(ownerState.fontSize)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette2, _palette3;
	  return {
	    userSelect: 'none',
	    width: '1em',
	    height: '1em',
	    display: 'inline-block',
	    // the <svg> will define the property that has `currentColor`
	    // e.g. heroicons uses fill="none" and stroke="currentColor"
	    fill: ownerState.hasSvgAsChild ? undefined : 'currentColor',
	    flexShrink: 0,
	    transition: (_theme$transitions = theme.transitions) == null || (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, 'fill', {
	      duration: (_theme$transitions2 = theme.transitions) == null || (_theme$transitions2 = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2.shorter
	    }),
	    fontSize: {
	      inherit: 'inherit',
	      small: ((_theme$typography = theme.typography) == null || (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || '1.25rem',
	      medium: ((_theme$typography2 = theme.typography) == null || (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || '1.5rem',
	      large: ((_theme$typography3 = theme.typography) == null || (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || '2.1875rem'
	    }[ownerState.fontSize],
	    // TODO v5 deprecate, v6 remove for sx
	    color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null || (_palette = _palette[ownerState.color]) == null ? void 0 : _palette.main) != null ? _palette$ownerState$c : {
	      action: (_palette2 = (theme.vars || theme).palette) == null || (_palette2 = _palette2.action) == null ? void 0 : _palette2.active,
	      disabled: (_palette3 = (theme.vars || theme).palette) == null || (_palette3 = _palette3.action) == null ? void 0 : _palette3.disabled,
	      inherit: undefined
	    }[ownerState.color]
	  };
	});
	const SvgIcon = /*#__PURE__*/reactExports.forwardRef(function SvgIcon(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSvgIcon'
	  });
	  const {
	      children,
	      className,
	      color = 'inherit',
	      component = 'svg',
	      fontSize = 'medium',
	      htmlColor,
	      inheritViewBox = false,
	      titleAccess,
	      viewBox = '0 0 24 24'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1X);
	  const hasSvgAsChild = /*#__PURE__*/ /*#__PURE__*/reactExports.isValidElement(children) && children.type === 'svg';
	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    fontSize,
	    instanceFontSize: inProps.fontSize,
	    inheritViewBox,
	    viewBox,
	    hasSvgAsChild
	  });
	  const more = {};
	  if (!inheritViewBox) {
	    more.viewBox = viewBox;
	  }
	  const classes = useUtilityClasses$1B(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(SvgIconRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    focusable: "false",
	    color: htmlColor,
	    "aria-hidden": titleAccess ? undefined : true,
	    role: titleAccess ? 'img' : undefined,
	    ref: ref
	  }, more, other, hasSvgAsChild && children.props, {
	    ownerState: ownerState,
	    children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /*#__PURE__*/jsxRuntimeExports.jsx("title", {
	      children: titleAccess
	    }) : null]
	  }));
	});
	SvgIcon.muiName = 'SvgIcon';
	var SvgIcon$1 = SvgIcon;

	function createSvgIcon$1(path, displayName) {
	  function Component(props, ref) {
	    return /*#__PURE__*/jsxRuntimeExports.jsx(SvgIcon$1, _extends({
	      "data-testid": `${displayName}Icon`,
	      ref: ref
	    }, props, {
	      children: path
	    }));
	  }
	  Component.muiName = SvgIcon$1.muiName;
	  return /*#__PURE__*/reactExports.memo( /*#__PURE__*/reactExports.forwardRef(Component));
	}

	// TODO: remove this export once ClassNameGenerator is stable
	// eslint-disable-next-line @typescript-eslint/naming-convention
	const unstable_ClassNameGenerator = {
	  configure: generator => {
	    ClassNameGenerator$1.configure(generator);
	  }
	};

	var utils = /*#__PURE__*/Object.freeze({
		__proto__: null,
		capitalize: capitalize,
		createChainedFunction: createChainedFunction,
		createSvgIcon: createSvgIcon$1,
		debounce: debounce$1,
		deprecatedPropType: deprecatedPropType,
		isMuiElement: isMuiElement,
		ownerDocument: ownerDocument,
		ownerWindow: ownerWindow,
		requirePropFactory: requirePropFactory,
		setRef: setRef,
		unstable_ClassNameGenerator: unstable_ClassNameGenerator,
		unstable_useEnhancedEffect: useEnhancedEffect$1,
		unstable_useId: useId,
		unsupportedProp: unsupportedProp,
		useControlled: useControlled,
		useEventCallback: useEventCallback,
		useForkRef: useForkRef,
		useIsFocusVisible: useIsFocusVisible
	});

	var reactIs_production_min = {};

	/**
	 * @license React
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var hasRequiredReactIs_production_min;

	function requireReactIs_production_min () {
		if (hasRequiredReactIs_production_min) return reactIs_production_min;
		hasRequiredReactIs_production_min = 1;

		var b = Symbol.for("react.element"),
		  c = Symbol.for("react.portal"),
		  d = Symbol.for("react.fragment"),
		  e = Symbol.for("react.strict_mode"),
		  f = Symbol.for("react.profiler"),
		  g = Symbol.for("react.provider"),
		  h = Symbol.for("react.context"),
		  k = Symbol.for("react.server_context"),
		  l = Symbol.for("react.forward_ref"),
		  m = Symbol.for("react.suspense"),
		  n = Symbol.for("react.suspense_list"),
		  p = Symbol.for("react.memo"),
		  q = Symbol.for("react.lazy"),
		  t = Symbol.for("react.offscreen"),
		  u;
		u = Symbol.for("react.module.reference");
		function v(a) {
		  if ("object" === typeof a && null !== a) {
		    var r = a.$$typeof;
		    switch (r) {
		      case b:
		        switch (a = a.type, a) {
		          case d:
		          case f:
		          case e:
		          case m:
		          case n:
		            return a;
		          default:
		            switch (a = a && a.$$typeof, a) {
		              case k:
		              case h:
		              case l:
		              case q:
		              case p:
		              case g:
		                return a;
		              default:
		                return r;
		            }
		        }
		      case c:
		        return r;
		    }
		  }
		}
		reactIs_production_min.ContextConsumer = h;
		reactIs_production_min.ContextProvider = g;
		reactIs_production_min.Element = b;
		reactIs_production_min.ForwardRef = l;
		reactIs_production_min.Fragment = d;
		reactIs_production_min.Lazy = q;
		reactIs_production_min.Memo = p;
		reactIs_production_min.Portal = c;
		reactIs_production_min.Profiler = f;
		reactIs_production_min.StrictMode = e;
		reactIs_production_min.Suspense = m;
		reactIs_production_min.SuspenseList = n;
		reactIs_production_min.isAsyncMode = function () {
		  return !1;
		};
		reactIs_production_min.isConcurrentMode = function () {
		  return !1;
		};
		reactIs_production_min.isContextConsumer = function (a) {
		  return v(a) === h;
		};
		reactIs_production_min.isContextProvider = function (a) {
		  return v(a) === g;
		};
		reactIs_production_min.isElement = function (a) {
		  return "object" === typeof a && null !== a && a.$$typeof === b;
		};
		reactIs_production_min.isForwardRef = function (a) {
		  return v(a) === l;
		};
		reactIs_production_min.isFragment = function (a) {
		  return v(a) === d;
		};
		reactIs_production_min.isLazy = function (a) {
		  return v(a) === q;
		};
		reactIs_production_min.isMemo = function (a) {
		  return v(a) === p;
		};
		reactIs_production_min.isPortal = function (a) {
		  return v(a) === c;
		};
		reactIs_production_min.isProfiler = function (a) {
		  return v(a) === f;
		};
		reactIs_production_min.isStrictMode = function (a) {
		  return v(a) === e;
		};
		reactIs_production_min.isSuspense = function (a) {
		  return v(a) === m;
		};
		reactIs_production_min.isSuspenseList = function (a) {
		  return v(a) === n;
		};
		reactIs_production_min.isValidElementType = function (a) {
		  return "string" === typeof a || "function" === typeof a || a === d || a === f || a === e || a === m || a === n || a === t || "object" === typeof a && null !== a && (a.$$typeof === q || a.$$typeof === p || a.$$typeof === g || a.$$typeof === h || a.$$typeof === l || a.$$typeof === u || void 0 !== a.getModuleId) ? !0 : !1;
		};
		reactIs_production_min.typeOf = v;
		return reactIs_production_min;
	}

	{
	  requireReactIs_production_min();
	}

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };
	  return _setPrototypeOf(o, p);
	}

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  _setPrototypeOf(subClass, superClass);
	}

	/**
	 * Checks if a given element has a CSS class.
	 * 
	 * @param element the element
	 * @param className the CSS class name
	 */
	function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);
	  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
	}

	/**
	 * Adds a CSS class to a given element.
	 * 
	 * @param element the element
	 * @param className the CSS class name
	 */

	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
	}

	function replaceClassName(origClass, classToRemove) {
	  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	}
	/**
	 * Removes a CSS class from a given element.
	 * 
	 * @param element the element
	 * @param className the CSS class name
	 */

	function removeClass$1(element, className) {
	  if (element.classList) {
	    element.classList.remove(className);
	  } else if (typeof element.className === 'string') {
	    element.className = replaceClassName(element.className, className);
	  } else {
	    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
	  }
	}

	var config = {
	  disabled: false
	};

	var TransitionGroupContext = /*#__PURE__*/React.createContext(null);

	var forceReflow = function forceReflow(node) {
	  return node.scrollTop;
	};

	var UNMOUNTED = 'unmounted';
	var EXITED = 'exited';
	var ENTERING = 'entering';
	var ENTERED = 'entered';
	var EXITING = 'exiting';
	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * ---
	 *
	 * **Note**: `Transition` is a platform-agnostic base component. If you're using
	 * transitions in CSS, you'll probably want to use
	 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
	 * instead. It inherits all the features of `Transition`, but contains
	 * additional features necessary to play nice with CSS transitions (hence the
	 * name of the component).
	 *
	 * ---
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the
	 * components. It's up to you to give meaning and effect to those states. For
	 * example we can add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import { Transition } from 'react-transition-group';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 1 },
	 *   entered:  { opacity: 1 },
	 *   exiting:  { opacity: 0 },
	 *   exited:  { opacity: 0 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {state => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm a fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `'entering'`
	 *  - `'entered'`
	 *  - `'exiting'`
	 *  - `'exited'`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component
	 * begins the "Enter" stage. During this stage, the component will shift from
	 * its current transition state, to `'entering'` for the duration of the
	 * transition and then to the `'entered'` stage once it's complete. Let's take
	 * the following example (we'll use the
	 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <Transition in={inProp} timeout={500}>
	 *         {state => (
	 *           // ...
	 *         )}
	 *       </Transition>
	 *       <button onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state
	 * and stay there for 500ms (the value of `timeout`) before it finally switches
	 * to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from
	 * `'exiting'` to `'exited'`.
	 */

	var Transition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(Transition, _React$Component);
	  function Transition(props, context) {
	    var _this;
	    _this = _React$Component.call(this, props, context) || this;
	    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
	    var initialStatus;
	    _this.appearStatus = null;
	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED;
	        _this.appearStatus = ENTERING;
	      } else {
	        initialStatus = ENTERED;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED;
	      } else {
	        initialStatus = EXITED;
	      }
	    }
	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }
	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref.in;
	    if (nextIn && prevState.status === UNMOUNTED) {
	      return {
	        status: EXITED
	      };
	    }
	    return null;
	  } // getSnapshotBeforeUpdate(prevProps) {
	  //   let nextStatus = null
	  //   if (prevProps !== this.props) {
	  //     const { status } = this.state
	  //     if (this.props.in) {
	  //       if (status !== ENTERING && status !== ENTERED) {
	  //         nextStatus = ENTERING
	  //       }
	  //     } else {
	  //       if (status === ENTERING || status === ENTERED) {
	  //         nextStatus = EXITING
	  //       }
	  //     }
	  //   }
	  //   return { nextStatus }
	  // }
	  ;
	  var _proto = Transition.prototype;
	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };
	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;
	    if (prevProps !== this.props) {
	      var status = this.state.status;
	      if (this.props.in) {
	        if (status !== ENTERING && status !== ENTERED) {
	          nextStatus = ENTERING;
	        }
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          nextStatus = EXITING;
	        }
	      }
	    }
	    this.updateStatus(false, nextStatus);
	  };
	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };
	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var exit, enter, appear;
	    exit = enter = appear = timeout;
	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter; // TODO: remove fallback for next major

	      appear = timeout.appear !== undefined ? timeout.appear : enter;
	    }
	    return {
	      exit: exit,
	      enter: enter,
	      appear: appear
	    };
	  };
	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }
	    if (nextStatus !== null) {
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();
	      if (nextStatus === ENTERING) {
	        if (this.props.unmountOnExit || this.props.mountOnEnter) {
	          var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this); // https://github.com/reactjs/react-transition-group/pull/749
	          // With unmountOnExit or mountOnEnter, the enter animation should happen at the transition between `exited` and `entering`.
	          // To make the animation happen,  we have to separate each rendering and avoid being processed as batched.

	          if (node) forceReflow(node);
	        }
	        this.performEnter(mounting);
	      } else {
	        this.performExit();
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
	      this.setState({
	        status: UNMOUNTED
	      });
	    }
	  };
	  _proto.performEnter = function performEnter(mounting) {
	    var _this2 = this;
	    var enter = this.props.enter;
	    var appearing = this.context ? this.context.isMounting : mounting;
	    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM.findDOMNode(this), appearing],
	      maybeNode = _ref2[0],
	      maybeAppearing = _ref2[1];
	    var timeouts = this.getTimeouts();
	    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set

	    if (!mounting && !enter || config.disabled) {
	      this.safeSetState({
	        status: ENTERED
	      }, function () {
	        _this2.props.onEntered(maybeNode);
	      });
	      return;
	    }
	    this.props.onEnter(maybeNode, maybeAppearing);
	    this.safeSetState({
	      status: ENTERING
	    }, function () {
	      _this2.props.onEntering(maybeNode, maybeAppearing);
	      _this2.onTransitionEnd(enterTimeout, function () {
	        _this2.safeSetState({
	          status: ENTERED
	        }, function () {
	          _this2.props.onEntered(maybeNode, maybeAppearing);
	        });
	      });
	    });
	  };
	  _proto.performExit = function performExit() {
	    var _this3 = this;
	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts();
	    var maybeNode = this.props.nodeRef ? undefined : ReactDOM.findDOMNode(this); // no exit animation skip right to EXITED

	    if (!exit || config.disabled) {
	      this.safeSetState({
	        status: EXITED
	      }, function () {
	        _this3.props.onExited(maybeNode);
	      });
	      return;
	    }
	    this.props.onExit(maybeNode);
	    this.safeSetState({
	      status: EXITING
	    }, function () {
	      _this3.props.onExiting(maybeNode);
	      _this3.onTransitionEnd(timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED
	        }, function () {
	          _this3.props.onExited(maybeNode);
	        });
	      });
	    });
	  };
	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };
	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };
	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;
	    var active = true;
	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback(event);
	      }
	    };
	    this.nextCallback.cancel = function () {
	      active = false;
	    };
	    return this.nextCallback;
	  };
	  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
	    this.setNextCallback(handler);
	    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM.findDOMNode(this);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
	    if (!node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }
	    if (this.props.addEndListener) {
	      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
	        maybeNode = _ref3[0],
	        maybeNextCallback = _ref3[1];
	      this.props.addEndListener(maybeNode, maybeNextCallback);
	    }
	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };
	  _proto.render = function render() {
	    var status = this.state.status;
	    if (status === UNMOUNTED) {
	      return null;
	    }
	    var _this$props = this.props,
	      children = _this$props.children;
	      _this$props.in;
	      _this$props.mountOnEnter;
	      _this$props.unmountOnExit;
	      _this$props.appear;
	      _this$props.enter;
	      _this$props.exit;
	      _this$props.timeout;
	      _this$props.addEndListener;
	      _this$props.onEnter;
	      _this$props.onEntering;
	      _this$props.onEntered;
	      _this$props.onExit;
	      _this$props.onExiting;
	      _this$props.onExited;
	      _this$props.nodeRef;
	      var childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
	    return /*#__PURE__*/(
	      // allows for nested Transitions
	      React.createElement(TransitionGroupContext.Provider, {
	        value: null
	      }, typeof children === 'function' ? children(status, childProps) : /*#__PURE__*/React.cloneElement(React.Children.only(children), childProps))
	    );
	  };
	  return Transition;
	}(React.Component);
	Transition.contextType = TransitionGroupContext;
	Transition.propTypes = {}; // Name the function so it is clearer in the documentation

	function noop$2() {}
	Transition.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop$2,
	  onEntering: noop$2,
	  onEntered: noop$2,
	  onExit: noop$2,
	  onExiting: noop$2,
	  onExited: noop$2
	};
	Transition.UNMOUNTED = UNMOUNTED;
	Transition.EXITED = EXITED;
	Transition.ENTERING = ENTERING;
	Transition.ENTERED = ENTERED;
	Transition.EXITING = EXITING;
	var Transition$1 = Transition;

	var _addClass = function addClass$1(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return addClass(node, c);
	  });
	};
	var removeClass = function removeClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return removeClass$1(node, c);
	  });
	};
	/**
	 * A transition component inspired by the excellent
	 * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
	 * use it if you're using CSS transitions or animations. It's built upon the
	 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
	 * component, so it inherits all of its props.
	 *
	 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
	 * and `exit` states of the transition. The first class is applied and then a
	 * second `*-active` class in order to activate the CSS transition. After the
	 * transition, matching `*-done` class names are applied to persist the
	 * transition state.
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
	 *         <div>
	 *           {"I'll receive my-node-* classes"}
	 *         </div>
	 *       </CSSTransition>
	 *       <button type="button" onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the `in` prop is set to `true`, the child component will first receive
	 * the class `example-enter`, then the `example-enter-active` will be added in
	 * the next tick. `CSSTransition` [forces a
	 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
	 * between before adding the `example-enter-active`. This is an important trick
	 * because it allows us to transition between `example-enter` and
	 * `example-enter-active` even though they were added immediately one after
	 * another. Most notably, this is what makes it possible for us to animate
	 * _appearance_.
	 *
	 * ```css
	 * .my-node-enter {
	 *   opacity: 0;
	 * }
	 * .my-node-enter-active {
	 *   opacity: 1;
	 *   transition: opacity 200ms;
	 * }
	 * .my-node-exit {
	 *   opacity: 1;
	 * }
	 * .my-node-exit-active {
	 *   opacity: 0;
	 *   transition: opacity 200ms;
	 * }
	 * ```
	 *
	 * `*-active` classes represent which styles you want to animate **to**, so it's
	 * important to add `transition` declaration only to them, otherwise transitions
	 * might not behave as intended! This might not be obvious when the transitions
	 * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
	 * the example above (minus `transition`), but it becomes apparent in more
	 * complex transitions.
	 *
	 * **Note**: If you're using the
	 * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
	 * prop, make sure to define styles for `.appear-*` classes as well.
	 */

	var CSSTransition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(CSSTransition, _React$Component);
	  function CSSTransition() {
	    var _this;
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }
	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.appliedClasses = {
	      appear: {},
	      enter: {},
	      exit: {}
	    };
	    _this.onEnter = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
	        node = _this$resolveArgument[0],
	        appearing = _this$resolveArgument[1];
	      _this.removeClasses(node, 'exit');
	      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');
	      if (_this.props.onEnter) {
	        _this.props.onEnter(maybeNode, maybeAppearing);
	      }
	    };
	    _this.onEntering = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
	        node = _this$resolveArgument2[0],
	        appearing = _this$resolveArgument2[1];
	      var type = appearing ? 'appear' : 'enter';
	      _this.addClass(node, type, 'active');
	      if (_this.props.onEntering) {
	        _this.props.onEntering(maybeNode, maybeAppearing);
	      }
	    };
	    _this.onEntered = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
	        node = _this$resolveArgument3[0],
	        appearing = _this$resolveArgument3[1];
	      var type = appearing ? 'appear' : 'enter';
	      _this.removeClasses(node, type);
	      _this.addClass(node, type, 'done');
	      if (_this.props.onEntered) {
	        _this.props.onEntered(maybeNode, maybeAppearing);
	      }
	    };
	    _this.onExit = function (maybeNode) {
	      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
	        node = _this$resolveArgument4[0];
	      _this.removeClasses(node, 'appear');
	      _this.removeClasses(node, 'enter');
	      _this.addClass(node, 'exit', 'base');
	      if (_this.props.onExit) {
	        _this.props.onExit(maybeNode);
	      }
	    };
	    _this.onExiting = function (maybeNode) {
	      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
	        node = _this$resolveArgument5[0];
	      _this.addClass(node, 'exit', 'active');
	      if (_this.props.onExiting) {
	        _this.props.onExiting(maybeNode);
	      }
	    };
	    _this.onExited = function (maybeNode) {
	      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
	        node = _this$resolveArgument6[0];
	      _this.removeClasses(node, 'exit');
	      _this.addClass(node, 'exit', 'done');
	      if (_this.props.onExited) {
	        _this.props.onExited(maybeNode);
	      }
	    };
	    _this.resolveArguments = function (maybeNode, maybeAppearing) {
	      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
	      : [maybeNode, maybeAppearing];
	    };
	    _this.getClassNames = function (type) {
	      var classNames = _this.props.classNames;
	      var isStringClassNames = typeof classNames === 'string';
	      var prefix = isStringClassNames && classNames ? classNames + "-" : '';
	      var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
	      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
	      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
	      return {
	        baseClassName: baseClassName,
	        activeClassName: activeClassName,
	        doneClassName: doneClassName
	      };
	    };
	    return _this;
	  }
	  var _proto = CSSTransition.prototype;
	  _proto.addClass = function addClass(node, type, phase) {
	    var className = this.getClassNames(type)[phase + "ClassName"];
	    var _this$getClassNames = this.getClassNames('enter'),
	      doneClassName = _this$getClassNames.doneClassName;
	    if (type === 'appear' && phase === 'done' && doneClassName) {
	      className += " " + doneClassName;
	    } // This is to force a repaint,
	    // which is necessary in order to transition styles when adding a class name.

	    if (phase === 'active') {
	      if (node) forceReflow(node);
	    }
	    if (className) {
	      this.appliedClasses[type][phase] = className;
	      _addClass(node, className);
	    }
	  };
	  _proto.removeClasses = function removeClasses(node, type) {
	    var _this$appliedClasses$ = this.appliedClasses[type],
	      baseClassName = _this$appliedClasses$.base,
	      activeClassName = _this$appliedClasses$.active,
	      doneClassName = _this$appliedClasses$.done;
	    this.appliedClasses[type] = {};
	    if (baseClassName) {
	      removeClass(node, baseClassName);
	    }
	    if (activeClassName) {
	      removeClass(node, activeClassName);
	    }
	    if (doneClassName) {
	      removeClass(node, doneClassName);
	    }
	  };
	  _proto.render = function render() {
	    var _this$props = this.props;
	      _this$props.classNames;
	      var props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
	    return /*#__PURE__*/React.createElement(Transition$1, _extends({}, props, {
	      onEnter: this.onEnter,
	      onEntered: this.onEntered,
	      onEntering: this.onEntering,
	      onExit: this.onExit,
	      onExiting: this.onExiting,
	      onExited: this.onExited
	    }));
	  };
	  return CSSTransition;
	}(React.Component);
	CSSTransition.defaultProps = {
	  classNames: ''
	};
	CSSTransition.propTypes = {};
	var CSSTransition$1 = CSSTransition;

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	  return self;
	}

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */

	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && /*#__PURE__*/reactExports.isValidElement(child) ? mapFn(child) : child;
	  };
	  var result = Object.create(null);
	  if (children) reactExports.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */

	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};
	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list

	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];
	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }
	  var i;
	  var childMapping = {};
	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }
	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`

	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }
	  return childMapping;
	}
	function getProp(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}
	function getInitialChildMapping(props, onExited) {
	  return getChildMapping(props.children, function (child) {
	    return /*#__PURE__*/reactExports.cloneElement(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp(child, 'appear', props),
	      enter: getProp(child, 'enter', props),
	      exit: getProp(child, 'exit', props)
	    });
	  });
	}
	function getNextChildMapping(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping(nextProps.children);
	  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (! /*#__PURE__*/reactExports.isValidElement(child)) return;
	    var hasPrev = (key in prevChildMapping);
	    var hasNext = (key in nextChildMapping);
	    var prevChild = prevChildMapping[key];
	    var isLeaving = /*#__PURE__*/reactExports.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = /*#__PURE__*/reactExports.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = /*#__PURE__*/reactExports.cloneElement(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && /*#__PURE__*/reactExports.isValidElement(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = /*#__PURE__*/reactExports.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}

	var values = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};
	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};
	/**
	 * The `<TransitionGroup>` component manages a set of transition components
	 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	 * components, `<TransitionGroup>` is a state machine for managing the mounting
	 * and unmounting of components over time.
	 *
	 * Consider the example below. As items are removed or added to the TodoList the
	 * `in` prop is toggled automatically by the `<TransitionGroup>`.
	 *
	 * Note that `<TransitionGroup>`  does not define any animation behavior!
	 * Exactly _how_ a list item animates is up to the individual transition
	 * component. This means you can mix and match animations across different list
	 * items.
	 */

	var TransitionGroup = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(TransitionGroup, _React$Component);
	  function TransitionGroup(props, context) {
	    var _this;
	    _this = _React$Component.call(this, props, context) || this;
	    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear

	    _this.state = {
	      contextValue: {
	        isMounting: true
	      },
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }
	  var _proto = TransitionGroup.prototype;
	  _proto.componentDidMount = function componentDidMount() {
	    this.mounted = true;
	    this.setState({
	      contextValue: {
	        isMounting: false
	      }
	    });
	  };
	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };
	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	      handleExited = _ref.handleExited,
	      firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  } // node is `undefined` when user provided `nodeRef` prop
	  ;
	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = getChildMapping(this.props.children);
	    if (child.key in currentChildMapping) return;
	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }
	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends({}, state.children);
	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };
	  _proto.render = function render() {
	    var _this$props = this.props,
	      Component = _this$props.component,
	      childFactory = _this$props.childFactory,
	      props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
	    var contextValue = this.state.contextValue;
	    var children = values(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;
	    if (Component === null) {
	      return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
	        value: contextValue
	      }, children);
	    }
	    return /*#__PURE__*/React.createElement(TransitionGroupContext.Provider, {
	      value: contextValue
	    }, /*#__PURE__*/React.createElement(Component, props, children));
	  };
	  return TransitionGroup;
	}(React.Component);
	TransitionGroup.propTypes = {};
	TransitionGroup.defaultProps = defaultProps;
	var TransitionGroup$1 = TransitionGroup;

	const reflow = node => node.scrollTop;
	function getTransitionProps(props, options) {
	  var _style$transitionDura, _style$transitionTimi;
	  const {
	    timeout,
	    easing,
	    style = {}
	  } = props;
	  return {
	    duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
	    easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing === 'object' ? easing[options.mode] : easing,
	    delay: style.transitionDelay
	  };
	}

	function getCollapseUtilityClass(slot) {
	  return generateUtilityClass('MuiCollapse', slot);
	}
	generateUtilityClasses('MuiCollapse', ['root', 'horizontal', 'vertical', 'entered', 'hidden', 'wrapper', 'wrapperInner']);

	const _excluded$1W = ["addEndListener", "children", "className", "collapsedSize", "component", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "orientation", "style", "timeout", "TransitionComponent"];
	const useUtilityClasses$1A = ownerState => {
	  const {
	    orientation,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', `${orientation}`],
	    entered: ['entered'],
	    hidden: ['hidden'],
	    wrapper: ['wrapper', `${orientation}`],
	    wrapperInner: ['wrapperInner', `${orientation}`]
	  };
	  return composeClasses(slots, getCollapseUtilityClass, classes);
	};
	const CollapseRoot = styled$1('div', {
	  name: 'MuiCollapse',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.orientation], ownerState.state === 'entered' && styles.entered, ownerState.state === 'exited' && !ownerState.in && ownerState.collapsedSize === '0px' && styles.hidden];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  height: 0,
	  overflow: 'hidden',
	  transition: theme.transitions.create('height')
	}, ownerState.orientation === 'horizontal' && {
	  height: 'auto',
	  width: 0,
	  transition: theme.transitions.create('width')
	}, ownerState.state === 'entered' && _extends({
	  height: 'auto',
	  overflow: 'visible'
	}, ownerState.orientation === 'horizontal' && {
	  width: 'auto'
	}), ownerState.state === 'exited' && !ownerState.in && ownerState.collapsedSize === '0px' && {
	  visibility: 'hidden'
	}));
	const CollapseWrapper = styled$1('div', {
	  name: 'MuiCollapse',
	  slot: 'Wrapper',
	  overridesResolver: (props, styles) => styles.wrapper
	})(({
	  ownerState
	}) => _extends({
	  // Hack to get children with a negative margin to not falsify the height computation.
	  display: 'flex',
	  width: '100%'
	}, ownerState.orientation === 'horizontal' && {
	  width: 'auto',
	  height: '100%'
	}));
	const CollapseWrapperInner = styled$1('div', {
	  name: 'MuiCollapse',
	  slot: 'WrapperInner',
	  overridesResolver: (props, styles) => styles.wrapperInner
	})(({
	  ownerState
	}) => _extends({
	  width: '100%'
	}, ownerState.orientation === 'horizontal' && {
	  width: 'auto',
	  height: '100%'
	}));

	/**
	 * The Collapse transition is used by the
	 * [Vertical Stepper](/material-ui/react-stepper/#vertical-stepper) StepContent component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */
	const Collapse = /*#__PURE__*/reactExports.forwardRef(function Collapse(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCollapse'
	  });
	  const {
	      addEndListener,
	      children,
	      className,
	      collapsedSize: collapsedSizeProp = '0px',
	      component,
	      easing,
	      in: inProp,
	      onEnter,
	      onEntered,
	      onEntering,
	      onExit,
	      onExited,
	      onExiting,
	      orientation = 'vertical',
	      style,
	      timeout = duration.standard,
	      // eslint-disable-next-line react/prop-types
	      TransitionComponent = Transition$1
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1W);
	  const ownerState = _extends({}, props, {
	    orientation,
	    collapsedSize: collapsedSizeProp
	  });
	  const classes = useUtilityClasses$1A(ownerState);
	  const theme = useTheme();
	  const timer = reactExports.useRef();
	  const wrapperRef = reactExports.useRef(null);
	  const autoTransitionDuration = reactExports.useRef();
	  const collapsedSize = typeof collapsedSizeProp === 'number' ? `${collapsedSizeProp}px` : collapsedSizeProp;
	  const isHorizontal = orientation === 'horizontal';
	  const size = isHorizontal ? 'width' : 'height';
	  reactExports.useEffect(() => {
	    return () => {
	      clearTimeout(timer.current);
	    };
	  }, []);
	  const nodeRef = reactExports.useRef(null);
	  const handleRef = useForkRef(ref, nodeRef);
	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current;

	      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };
	  const getWrapperSize = () => wrapperRef.current ? wrapperRef.current[isHorizontal ? 'clientWidth' : 'clientHeight'] : 0;
	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    if (wrapperRef.current && isHorizontal) {
	      // Set absolute position to get the size of collapsed content
	      wrapperRef.current.style.position = 'absolute';
	    }
	    node.style[size] = collapsedSize;
	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntering = normalizedTransitionCallback((node, isAppearing) => {
	    const wrapperSize = getWrapperSize();
	    if (wrapperRef.current && isHorizontal) {
	      // After the size is read reset the position back to default
	      wrapperRef.current.style.position = '';
	    }
	    const {
	      duration: transitionDuration,
	      easing: transitionTimingFunction
	    } = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });
	    if (timeout === 'auto') {
	      const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
	      node.style.transitionDuration = `${duration2}ms`;
	      autoTransitionDuration.current = duration2;
	    } else {
	      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;
	    }
	    node.style[size] = `${wrapperSize}px`;
	    node.style.transitionTimingFunction = transitionTimingFunction;
	    if (onEntering) {
	      onEntering(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback((node, isAppearing) => {
	    node.style[size] = 'auto';
	    if (onEntered) {
	      onEntered(node, isAppearing);
	    }
	  });
	  const handleExit = normalizedTransitionCallback(node => {
	    node.style[size] = `${getWrapperSize()}px`;
	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);
	  const handleExiting = normalizedTransitionCallback(node => {
	    const wrapperSize = getWrapperSize();
	    const {
	      duration: transitionDuration,
	      easing: transitionTimingFunction
	    } = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });
	    if (timeout === 'auto') {
	      // TODO: rename getAutoHeightDuration to something more generic (width support)
	      // Actually it just calculates animation duration based on size
	      const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
	      node.style.transitionDuration = `${duration2}ms`;
	      autoTransitionDuration.current = duration2;
	    } else {
	      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : `${transitionDuration}ms`;
	    }
	    node.style[size] = collapsedSize;
	    node.style.transitionTimingFunction = transitionTimingFunction;
	    if (onExiting) {
	      onExiting(node);
	    }
	  });
	  const handleAddEndListener = next => {
	    if (timeout === 'auto') {
	      timer.current = setTimeout(next, autoTransitionDuration.current || 0);
	    }
	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends({
	    in: inProp,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    nodeRef: nodeRef,
	    timeout: timeout === 'auto' ? null : timeout
	  }, other, {
	    children: (state, childProps) => /*#__PURE__*/jsxRuntimeExports.jsx(CollapseRoot, _extends({
	      as: component,
	      className: clsx(classes.root, className, {
	        'entered': classes.entered,
	        'exited': !inProp && collapsedSize === '0px' && classes.hidden
	      }[state]),
	      style: _extends({
	        [isHorizontal ? 'minWidth' : 'minHeight']: collapsedSize
	      }, style),
	      ownerState: _extends({}, ownerState, {
	        state
	      }),
	      ref: handleRef
	    }, childProps, {
	      children: /*#__PURE__*/jsxRuntimeExports.jsx(CollapseWrapper, {
	        ownerState: _extends({}, ownerState, {
	          state
	        }),
	        className: classes.wrapper,
	        ref: wrapperRef,
	        children: /*#__PURE__*/jsxRuntimeExports.jsx(CollapseWrapperInner, {
	          ownerState: _extends({}, ownerState, {
	            state
	          }),
	          className: classes.wrapperInner,
	          children: children
	        })
	      })
	    }))
	  }));
	});
	Collapse.muiSupportAuto = true;
	var Collapse$1 = Collapse;

	function getPaperUtilityClass(slot) {
	  return generateUtilityClass('MuiPaper', slot);
	}
	generateUtilityClasses('MuiPaper', ['root', 'rounded', 'outlined', 'elevation', 'elevation0', 'elevation1', 'elevation2', 'elevation3', 'elevation4', 'elevation5', 'elevation6', 'elevation7', 'elevation8', 'elevation9', 'elevation10', 'elevation11', 'elevation12', 'elevation13', 'elevation14', 'elevation15', 'elevation16', 'elevation17', 'elevation18', 'elevation19', 'elevation20', 'elevation21', 'elevation22', 'elevation23', 'elevation24']);

	const _excluded$1V = ["className", "component", "elevation", "square", "variant"];
	const useUtilityClasses$1z = ownerState => {
	  const {
	    square,
	    elevation,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, !square && 'rounded', variant === 'elevation' && `elevation${elevation}`]
	  };
	  return composeClasses(slots, getPaperUtilityClass, classes);
	};
	const PaperRoot = styled$1('div', {
	  name: 'MuiPaper',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], !ownerState.square && styles.rounded, ownerState.variant === 'elevation' && styles[`elevation${ownerState.elevation}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$vars$overlays;
	  return _extends({
	    backgroundColor: (theme.vars || theme).palette.background.paper,
	    color: (theme.vars || theme).palette.text.primary,
	    transition: theme.transitions.create('box-shadow')
	  }, !ownerState.square && {
	    borderRadius: theme.shape.borderRadius
	  }, ownerState.variant === 'outlined' && {
	    border: `1px solid ${(theme.vars || theme).palette.divider}`
	  }, ownerState.variant === 'elevation' && _extends({
	    boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
	  }, !theme.vars && theme.palette.mode === 'dark' && {
	    backgroundImage: `linear-gradient(${alpha('#fff', getOverlayAlpha$1(ownerState.elevation))}, ${alpha('#fff', getOverlayAlpha$1(ownerState.elevation))})`
	  }, theme.vars && {
	    backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
	  }));
	});
	const Paper = /*#__PURE__*/reactExports.forwardRef(function Paper(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPaper'
	  });
	  const {
	      className,
	      component = 'div',
	      elevation = 1,
	      square = false,
	      variant = 'elevation'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1V);
	  const ownerState = _extends({}, props, {
	    component,
	    elevation,
	    square,
	    variant
	  });
	  const classes = useUtilityClasses$1z(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(PaperRoot, _extends({
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other));
	});
	var MuiPaper = Paper;

	/**
	 * @ignore - internal component.
	 * @type {React.Context<{} | {expanded: boolean, disabled: boolean, toggle: () => void}>}
	 */
	const AccordionContext = /*#__PURE__*/reactExports.createContext({});
	var AccordionContext$1 = AccordionContext;

	function getAccordionUtilityClass(slot) {
	  return generateUtilityClass('MuiAccordion', slot);
	}
	const accordionClasses = generateUtilityClasses('MuiAccordion', ['root', 'rounded', 'expanded', 'disabled', 'gutters', 'region']);
	var accordionClasses$1 = accordionClasses;

	const _excluded$1U = ["children", "className", "defaultExpanded", "disabled", "disableGutters", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"];
	const useUtilityClasses$1y = ownerState => {
	  const {
	    classes,
	    square,
	    expanded,
	    disabled,
	    disableGutters
	  } = ownerState;
	  const slots = {
	    root: ['root', !square && 'rounded', expanded && 'expanded', disabled && 'disabled', !disableGutters && 'gutters'],
	    region: ['region']
	  };
	  return composeClasses(slots, getAccordionUtilityClass, classes);
	};
	const AccordionRoot = styled$1(MuiPaper, {
	  name: 'MuiAccordion',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${accordionClasses$1.region}`]: styles.region
	    }, styles.root, !ownerState.square && styles.rounded, !ownerState.disableGutters && styles.gutters];
	  }
	})(({
	  theme
	}) => {
	  const transition = {
	    duration: theme.transitions.duration.shortest
	  };
	  return {
	    position: 'relative',
	    transition: theme.transitions.create(['margin'], transition),
	    overflowAnchor: 'none',
	    // Keep the same scrolling position
	    '&::before': {
	      position: 'absolute',
	      left: 0,
	      top: -1,
	      right: 0,
	      height: 1,
	      content: '""',
	      opacity: 1,
	      backgroundColor: (theme.vars || theme).palette.divider,
	      transition: theme.transitions.create(['opacity', 'background-color'], transition)
	    },
	    '&:first-of-type': {
	      '&::before': {
	        display: 'none'
	      }
	    },
	    [`&.${accordionClasses$1.expanded}`]: {
	      '&::before': {
	        opacity: 0
	      },
	      '&:first-of-type': {
	        marginTop: 0
	      },
	      '&:last-of-type': {
	        marginBottom: 0
	      },
	      '& + &': {
	        '&::before': {
	          display: 'none'
	        }
	      }
	    },
	    [`&.${accordionClasses$1.disabled}`]: {
	      backgroundColor: (theme.vars || theme).palette.action.disabledBackground
	    }
	  };
	}, ({
	  theme,
	  ownerState
	}) => _extends({}, !ownerState.square && {
	  borderRadius: 0,
	  '&:first-of-type': {
	    borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
	    borderTopRightRadius: (theme.vars || theme).shape.borderRadius
	  },
	  '&:last-of-type': {
	    borderBottomLeftRadius: (theme.vars || theme).shape.borderRadius,
	    borderBottomRightRadius: (theme.vars || theme).shape.borderRadius,
	    // Fix a rendering issue on Edge
	    '@supports (-ms-ime-align: auto)': {
	      borderBottomLeftRadius: 0,
	      borderBottomRightRadius: 0
	    }
	  }
	}, !ownerState.disableGutters && {
	  [`&.${accordionClasses$1.expanded}`]: {
	    margin: '16px 0'
	  }
	}));
	const Accordion = /*#__PURE__*/reactExports.forwardRef(function Accordion(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAccordion'
	  });
	  const {
	      children: childrenProp,
	      className,
	      defaultExpanded = false,
	      disabled = false,
	      disableGutters = false,
	      expanded: expandedProp,
	      onChange,
	      square = false,
	      TransitionComponent = Collapse$1,
	      TransitionProps
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1U);
	  const [expanded, setExpandedState] = useControlled({
	    controlled: expandedProp,
	    default: defaultExpanded,
	    name: 'Accordion',
	    state: 'expanded'
	  });
	  const handleChange = reactExports.useCallback(event => {
	    setExpandedState(!expanded);
	    if (onChange) {
	      onChange(event, !expanded);
	    }
	  }, [expanded, onChange, setExpandedState]);
	  const [summary, ...children] = reactExports.Children.toArray(childrenProp);
	  const contextValue = reactExports.useMemo(() => ({
	    expanded,
	    disabled,
	    disableGutters,
	    toggle: handleChange
	  }), [expanded, disabled, disableGutters, handleChange]);
	  const ownerState = _extends({}, props, {
	    square,
	    disabled,
	    disableGutters,
	    expanded
	  });
	  const classes = useUtilityClasses$1y(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(AccordionRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState,
	    square: square
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(AccordionContext$1.Provider, {
	      value: contextValue,
	      children: summary
	    }), /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends({
	      in: expanded,
	      timeout: "auto"
	    }, TransitionProps, {
	      children: /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	        "aria-labelledby": summary.props.id,
	        id: summary.props['aria-controls'],
	        role: "region",
	        className: classes.region,
	        children: children
	      })
	    }))]
	  }));
	});
	var Accordion$1 = Accordion;

	function getAccordionDetailsUtilityClass(slot) {
	  return generateUtilityClass('MuiAccordionDetails', slot);
	}
	generateUtilityClasses('MuiAccordionDetails', ['root']);

	const _excluded$1T = ["className"];
	const useUtilityClasses$1x = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getAccordionDetailsUtilityClass, classes);
	};
	const AccordionDetailsRoot = styled$1('div', {
	  name: 'MuiAccordionDetails',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme
	}) => ({
	  padding: theme.spacing(1, 2, 2)
	}));
	const AccordionDetails = /*#__PURE__*/reactExports.forwardRef(function AccordionDetails(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAccordionDetails'
	  });
	  const {
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1T);
	  const ownerState = props;
	  const classes = useUtilityClasses$1x(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(AccordionDetailsRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	var AccordionDetails$1 = AccordionDetails;

	function Ripple(props) {
	  const {
	    className,
	    classes,
	    pulsate = false,
	    rippleX,
	    rippleY,
	    rippleSize,
	    in: inProp,
	    onExited,
	    timeout
	  } = props;
	  const [leaving, setLeaving] = reactExports.useState(false);
	  const rippleClassName = clsx(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
	  const rippleStyles = {
	    width: rippleSize,
	    height: rippleSize,
	    top: -(rippleSize / 2) + rippleY,
	    left: -(rippleSize / 2) + rippleX
	  };
	  const childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
	  if (!inProp && !leaving) {
	    setLeaving(true);
	  }
	  reactExports.useEffect(() => {
	    if (!inProp && onExited != null) {
	      // react-transition-group#onExited
	      const timeoutId = setTimeout(onExited, timeout);
	      return () => {
	        clearTimeout(timeoutId);
	      };
	    }
	    return undefined;
	  }, [onExited, inProp, timeout]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	    className: rippleClassName,
	    style: rippleStyles,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	      className: childClassName
	    })
	  });
	}

	const touchRippleClasses = generateUtilityClasses('MuiTouchRipple', ['root', 'ripple', 'rippleVisible', 'ripplePulsate', 'child', 'childLeaving', 'childPulsate']);
	var touchRippleClasses$1 = touchRippleClasses;

	const _excluded$1S = ["center", "classes", "className"];
	let _ = t => t,
	  _t,
	  _t2,
	  _t3,
	  _t4;
	const DURATION = 550;
	const DELAY_RIPPLE = 80;
	const enterKeyframe = keyframes(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
	const exitKeyframe = keyframes(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
	const pulsateKeyframe = keyframes(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
	const TouchRippleRoot = styled$1('span', {
	  name: 'MuiTouchRipple',
	  slot: 'Root'
	})({
	  overflow: 'hidden',
	  pointerEvents: 'none',
	  position: 'absolute',
	  zIndex: 0,
	  top: 0,
	  right: 0,
	  bottom: 0,
	  left: 0,
	  borderRadius: 'inherit'
	});

	// This `styled()` function invokes keyframes. `styled-components` only supports keyframes
	// in string templates. Do not convert these styles in JS object as it will break.
	const TouchRippleRipple = styled$1(Ripple, {
	  name: 'MuiTouchRipple',
	  slot: 'Ripple'
	})(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses$1.rippleVisible, enterKeyframe, DURATION, ({
	  theme
	}) => theme.transitions.easing.easeInOut, touchRippleClasses$1.ripplePulsate, ({
	  theme
	}) => theme.transitions.duration.shorter, touchRippleClasses$1.child, touchRippleClasses$1.childLeaving, exitKeyframe, DURATION, ({
	  theme
	}) => theme.transitions.easing.easeInOut, touchRippleClasses$1.childPulsate, pulsateKeyframe, ({
	  theme
	}) => theme.transitions.easing.easeInOut);

	/**
	 * @ignore - internal component.
	 *
	 * TODO v5: Make private
	 */
	const TouchRipple = /*#__PURE__*/reactExports.forwardRef(function TouchRipple(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTouchRipple'
	  });
	  const {
	      center: centerProp = false,
	      classes = {},
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1S);
	  const [ripples, setRipples] = reactExports.useState([]);
	  const nextKey = reactExports.useRef(0);
	  const rippleCallback = reactExports.useRef(null);
	  reactExports.useEffect(() => {
	    if (rippleCallback.current) {
	      rippleCallback.current();
	      rippleCallback.current = null;
	    }
	  }, [ripples]);

	  // Used to filter out mouse emulated events on mobile.
	  const ignoringMouseDown = reactExports.useRef(false);
	  // We use a timer in order to only show the ripples for touch "click" like events.
	  // We don't want to display the ripple for touch scroll events.
	  const startTimer = reactExports.useRef(0);

	  // This is the hook called once the previous timeout is ready.
	  const startTimerCommit = reactExports.useRef(null);
	  const container = reactExports.useRef(null);
	  reactExports.useEffect(() => {
	    return () => {
	      if (startTimer.current) {
	        clearTimeout(startTimer.current);
	      }
	    };
	  }, []);
	  const startCommit = reactExports.useCallback(params => {
	    const {
	      pulsate,
	      rippleX,
	      rippleY,
	      rippleSize,
	      cb
	    } = params;
	    setRipples(oldRipples => [...oldRipples, /*#__PURE__*/jsxRuntimeExports.jsx(TouchRippleRipple, {
	      classes: {
	        ripple: clsx(classes.ripple, touchRippleClasses$1.ripple),
	        rippleVisible: clsx(classes.rippleVisible, touchRippleClasses$1.rippleVisible),
	        ripplePulsate: clsx(classes.ripplePulsate, touchRippleClasses$1.ripplePulsate),
	        child: clsx(classes.child, touchRippleClasses$1.child),
	        childLeaving: clsx(classes.childLeaving, touchRippleClasses$1.childLeaving),
	        childPulsate: clsx(classes.childPulsate, touchRippleClasses$1.childPulsate)
	      },
	      timeout: DURATION,
	      pulsate: pulsate,
	      rippleX: rippleX,
	      rippleY: rippleY,
	      rippleSize: rippleSize
	    }, nextKey.current)]);
	    nextKey.current += 1;
	    rippleCallback.current = cb;
	  }, [classes]);
	  const start = reactExports.useCallback((event = {}, options = {}, cb = () => {}) => {
	    const {
	      pulsate = false,
	      center = centerProp || options.pulsate,
	      fakeElement = false // For test purposes
	    } = options;
	    if ((event == null ? void 0 : event.type) === 'mousedown' && ignoringMouseDown.current) {
	      ignoringMouseDown.current = false;
	      return;
	    }
	    if ((event == null ? void 0 : event.type) === 'touchstart') {
	      ignoringMouseDown.current = true;
	    }
	    const element = fakeElement ? null : container.current;
	    const rect = element ? element.getBoundingClientRect() : {
	      width: 0,
	      height: 0,
	      left: 0,
	      top: 0
	    };

	    // Get the size of the ripple
	    let rippleX;
	    let rippleY;
	    let rippleSize;
	    if (center || event === undefined || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
	      rippleX = Math.round(rect.width / 2);
	      rippleY = Math.round(rect.height / 2);
	    } else {
	      const {
	        clientX,
	        clientY
	      } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
	      rippleX = Math.round(clientX - rect.left);
	      rippleY = Math.round(clientY - rect.top);
	    }
	    if (center) {
	      rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);

	      // For some reason the animation is broken on Mobile Chrome if the size is even.
	      if (rippleSize % 2 === 0) {
	        rippleSize += 1;
	      }
	    } else {
	      const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
	      const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
	      rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
	    }

	    // Touche devices
	    if (event != null && event.touches) {
	      // check that this isn't another touchstart due to multitouch
	      // otherwise we will only clear a single timer when unmounting while two
	      // are running
	      if (startTimerCommit.current === null) {
	        // Prepare the ripple effect.
	        startTimerCommit.current = () => {
	          startCommit({
	            pulsate,
	            rippleX,
	            rippleY,
	            rippleSize,
	            cb
	          });
	        };
	        // Delay the execution of the ripple effect.
	        startTimer.current = setTimeout(() => {
	          if (startTimerCommit.current) {
	            startTimerCommit.current();
	            startTimerCommit.current = null;
	          }
	        }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
	      }
	    } else {
	      startCommit({
	        pulsate,
	        rippleX,
	        rippleY,
	        rippleSize,
	        cb
	      });
	    }
	  }, [centerProp, startCommit]);
	  const pulsate = reactExports.useCallback(() => {
	    start({}, {
	      pulsate: true
	    });
	  }, [start]);
	  const stop = reactExports.useCallback((event, cb) => {
	    clearTimeout(startTimer.current);

	    // The touch interaction occurs too quickly.
	    // We still want to show ripple effect.
	    if ((event == null ? void 0 : event.type) === 'touchend' && startTimerCommit.current) {
	      startTimerCommit.current();
	      startTimerCommit.current = null;
	      startTimer.current = setTimeout(() => {
	        stop(event, cb);
	      });
	      return;
	    }
	    startTimerCommit.current = null;
	    setRipples(oldRipples => {
	      if (oldRipples.length > 0) {
	        return oldRipples.slice(1);
	      }
	      return oldRipples;
	    });
	    rippleCallback.current = cb;
	  }, []);
	  reactExports.useImperativeHandle(ref, () => ({
	    pulsate,
	    start,
	    stop
	  }), [pulsate, start, stop]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TouchRippleRoot, _extends({
	    className: clsx(touchRippleClasses$1.root, classes.root, className),
	    ref: container
	  }, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(TransitionGroup$1, {
	      component: null,
	      exit: true,
	      children: ripples
	    })
	  }));
	});
	var TouchRipple$1 = TouchRipple;

	function getButtonBaseUtilityClass(slot) {
	  return generateUtilityClass('MuiButtonBase', slot);
	}
	const buttonBaseClasses = generateUtilityClasses('MuiButtonBase', ['root', 'disabled', 'focusVisible']);
	var buttonBaseClasses$1 = buttonBaseClasses;

	const _excluded$1R = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
	const useUtilityClasses$1w = ownerState => {
	  const {
	    disabled,
	    focusVisible,
	    focusVisibleClassName,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible']
	  };
	  const composedClasses = composeClasses(slots, getButtonBaseUtilityClass, classes);
	  if (focusVisible && focusVisibleClassName) {
	    composedClasses.root += ` ${focusVisibleClassName}`;
	  }
	  return composedClasses;
	};
	const ButtonBaseRoot = styled$1('button', {
	  name: 'MuiButtonBase',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'inline-flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  position: 'relative',
	  boxSizing: 'border-box',
	  WebkitTapHighlightColor: 'transparent',
	  backgroundColor: 'transparent',
	  // Reset default value
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0,
	  border: 0,
	  margin: 0,
	  // Remove the margin in Safari
	  borderRadius: 0,
	  padding: 0,
	  // Remove the padding in Firefox
	  cursor: 'pointer',
	  userSelect: 'none',
	  verticalAlign: 'middle',
	  MozAppearance: 'none',
	  // Reset
	  WebkitAppearance: 'none',
	  // Reset
	  textDecoration: 'none',
	  // So we take precedent over the style of a native <a /> element.
	  color: 'inherit',
	  '&::-moz-focus-inner': {
	    borderStyle: 'none' // Remove Firefox dotted outline.
	  },
	  [`&.${buttonBaseClasses$1.disabled}`]: {
	    pointerEvents: 'none',
	    // Disable link interactions
	    cursor: 'default'
	  },
	  '@media print': {
	    colorAdjust: 'exact'
	  }
	});

	/**
	 * `ButtonBase` contains as few styles as possible.
	 * It aims to be a simple building block for creating a button.
	 * It contains a load of style reset and some focus/ripple logic.
	 */
	const ButtonBase = /*#__PURE__*/reactExports.forwardRef(function ButtonBase(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiButtonBase'
	  });
	  const {
	      action,
	      centerRipple = false,
	      children,
	      className,
	      component = 'button',
	      disabled = false,
	      disableRipple = false,
	      disableTouchRipple = false,
	      focusRipple = false,
	      LinkComponent = 'a',
	      onBlur,
	      onClick,
	      onContextMenu,
	      onDragLeave,
	      onFocus,
	      onFocusVisible,
	      onKeyDown,
	      onKeyUp,
	      onMouseDown,
	      onMouseLeave,
	      onMouseUp,
	      onTouchEnd,
	      onTouchMove,
	      onTouchStart,
	      tabIndex = 0,
	      TouchRippleProps,
	      touchRippleRef,
	      type
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1R);
	  const buttonRef = reactExports.useRef(null);
	  const rippleRef = reactExports.useRef(null);
	  const handleRippleRef = useForkRef(rippleRef, touchRippleRef);
	  const {
	    isFocusVisibleRef,
	    onFocus: handleFocusVisible,
	    onBlur: handleBlurVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  const [focusVisible, setFocusVisible] = reactExports.useState(false);
	  if (disabled && focusVisible) {
	    setFocusVisible(false);
	  }
	  reactExports.useImperativeHandle(action, () => ({
	    focusVisible: () => {
	      setFocusVisible(true);
	      buttonRef.current.focus();
	    }
	  }), []);
	  const [mountedState, setMountedState] = reactExports.useState(false);
	  reactExports.useEffect(() => {
	    setMountedState(true);
	  }, []);
	  const enableTouchRipple = mountedState && !disableRipple && !disabled;
	  reactExports.useEffect(() => {
	    if (focusVisible && focusRipple && !disableRipple && mountedState) {
	      rippleRef.current.pulsate();
	    }
	  }, [disableRipple, focusRipple, focusVisible, mountedState]);
	  function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
	    return useEventCallback(event => {
	      if (eventCallback) {
	        eventCallback(event);
	      }
	      const ignore = skipRippleAction;
	      if (!ignore && rippleRef.current) {
	        rippleRef.current[rippleAction](event);
	      }
	      return true;
	    });
	  }
	  const handleMouseDown = useRippleHandler('start', onMouseDown);
	  const handleContextMenu = useRippleHandler('stop', onContextMenu);
	  const handleDragLeave = useRippleHandler('stop', onDragLeave);
	  const handleMouseUp = useRippleHandler('stop', onMouseUp);
	  const handleMouseLeave = useRippleHandler('stop', event => {
	    if (focusVisible) {
	      event.preventDefault();
	    }
	    if (onMouseLeave) {
	      onMouseLeave(event);
	    }
	  });
	  const handleTouchStart = useRippleHandler('start', onTouchStart);
	  const handleTouchEnd = useRippleHandler('stop', onTouchEnd);
	  const handleTouchMove = useRippleHandler('stop', onTouchMove);
	  const handleBlur = useRippleHandler('stop', event => {
	    handleBlurVisible(event);
	    if (isFocusVisibleRef.current === false) {
	      setFocusVisible(false);
	    }
	    if (onBlur) {
	      onBlur(event);
	    }
	  }, false);
	  const handleFocus = useEventCallback(event => {
	    // Fix for https://github.com/facebook/react/issues/7769
	    if (!buttonRef.current) {
	      buttonRef.current = event.currentTarget;
	    }
	    handleFocusVisible(event);
	    if (isFocusVisibleRef.current === true) {
	      setFocusVisible(true);
	      if (onFocusVisible) {
	        onFocusVisible(event);
	      }
	    }
	    if (onFocus) {
	      onFocus(event);
	    }
	  });
	  const isNonNativeButton = () => {
	    const button = buttonRef.current;
	    return component && component !== 'button' && !(button.tagName === 'A' && button.href);
	  };

	  /**
	   * IE11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
	   */
	  const keydownRef = reactExports.useRef(false);
	  const handleKeyDown = useEventCallback(event => {
	    // Check if key is already down to avoid repeats being counted as multiple activations
	    if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
	      keydownRef.current = true;
	      rippleRef.current.stop(event, () => {
	        rippleRef.current.start(event);
	      });
	    }
	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
	      event.preventDefault();
	    }
	    if (onKeyDown) {
	      onKeyDown(event);
	    }

	    // Keyboard accessibility for non interactive elements
	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
	      event.preventDefault();
	      if (onClick) {
	        onClick(event);
	      }
	    }
	  });
	  const handleKeyUp = useEventCallback(event => {
	    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
	    // https://codesandbox.io/p/sandbox/button-keyup-preventdefault-dn7f0
	    if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
	      keydownRef.current = false;
	      rippleRef.current.stop(event, () => {
	        rippleRef.current.pulsate(event);
	      });
	    }
	    if (onKeyUp) {
	      onKeyUp(event);
	    }

	    // Keyboard accessibility for non interactive elements
	    if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
	      onClick(event);
	    }
	  });
	  let ComponentProp = component;
	  if (ComponentProp === 'button' && (other.href || other.to)) {
	    ComponentProp = LinkComponent;
	  }
	  const buttonProps = {};
	  if (ComponentProp === 'button') {
	    buttonProps.type = type === undefined ? 'button' : type;
	    buttonProps.disabled = disabled;
	  } else {
	    if (!other.href && !other.to) {
	      buttonProps.role = 'button';
	    }
	    if (disabled) {
	      buttonProps['aria-disabled'] = disabled;
	    }
	  }
	  const handleRef = useForkRef(ref, focusVisibleRef, buttonRef);
	  const ownerState = _extends({}, props, {
	    centerRipple,
	    component,
	    disabled,
	    disableRipple,
	    disableTouchRipple,
	    focusRipple,
	    tabIndex,
	    focusVisible
	  });
	  const classes = useUtilityClasses$1w(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(ButtonBaseRoot, _extends({
	    as: ComponentProp,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    onBlur: handleBlur,
	    onClick: onClick,
	    onContextMenu: handleContextMenu,
	    onFocus: handleFocus,
	    onKeyDown: handleKeyDown,
	    onKeyUp: handleKeyUp,
	    onMouseDown: handleMouseDown,
	    onMouseLeave: handleMouseLeave,
	    onMouseUp: handleMouseUp,
	    onDragLeave: handleDragLeave,
	    onTouchEnd: handleTouchEnd,
	    onTouchMove: handleTouchMove,
	    onTouchStart: handleTouchStart,
	    ref: handleRef,
	    tabIndex: disabled ? -1 : tabIndex,
	    type: type
	  }, buttonProps, other, {
	    children: [children, enableTouchRipple ? 
	    /* TouchRipple is only needed client-side, x2 boost on the server. */
	    jsxRuntimeExports.jsx(TouchRipple$1, _extends({
	      ref: handleRippleRef,
	      center: centerRipple
	    }, TouchRippleProps)) : null]
	  }));
	});
	var ButtonBase$1 = ButtonBase;

	function getAccordionSummaryUtilityClass(slot) {
	  return generateUtilityClass('MuiAccordionSummary', slot);
	}
	const accordionSummaryClasses = generateUtilityClasses('MuiAccordionSummary', ['root', 'expanded', 'focusVisible', 'disabled', 'gutters', 'contentGutters', 'content', 'expandIconWrapper']);
	var accordionSummaryClasses$1 = accordionSummaryClasses;

	const _excluded$1Q = ["children", "className", "expandIcon", "focusVisibleClassName", "onClick"];
	const useUtilityClasses$1v = ownerState => {
	  const {
	    classes,
	    expanded,
	    disabled,
	    disableGutters
	  } = ownerState;
	  const slots = {
	    root: ['root', expanded && 'expanded', disabled && 'disabled', !disableGutters && 'gutters'],
	    focusVisible: ['focusVisible'],
	    content: ['content', expanded && 'expanded', !disableGutters && 'contentGutters'],
	    expandIconWrapper: ['expandIconWrapper', expanded && 'expanded']
	  };
	  return composeClasses(slots, getAccordionSummaryUtilityClass, classes);
	};
	const AccordionSummaryRoot = styled$1(ButtonBase$1, {
	  name: 'MuiAccordionSummary',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme,
	  ownerState
	}) => {
	  const transition = {
	    duration: theme.transitions.duration.shortest
	  };
	  return _extends({
	    display: 'flex',
	    minHeight: 48,
	    padding: theme.spacing(0, 2),
	    transition: theme.transitions.create(['min-height', 'background-color'], transition),
	    [`&.${accordionSummaryClasses$1.focusVisible}`]: {
	      backgroundColor: (theme.vars || theme).palette.action.focus
	    },
	    [`&.${accordionSummaryClasses$1.disabled}`]: {
	      opacity: (theme.vars || theme).palette.action.disabledOpacity
	    },
	    [`&:hover:not(.${accordionSummaryClasses$1.disabled})`]: {
	      cursor: 'pointer'
	    }
	  }, !ownerState.disableGutters && {
	    [`&.${accordionSummaryClasses$1.expanded}`]: {
	      minHeight: 64
	    }
	  });
	});
	const AccordionSummaryContent = styled$1('div', {
	  name: 'MuiAccordionSummary',
	  slot: 'Content',
	  overridesResolver: (props, styles) => styles.content
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'flex',
	  flexGrow: 1,
	  margin: '12px 0'
	}, !ownerState.disableGutters && {
	  transition: theme.transitions.create(['margin'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  [`&.${accordionSummaryClasses$1.expanded}`]: {
	    margin: '20px 0'
	  }
	}));
	const AccordionSummaryExpandIconWrapper = styled$1('div', {
	  name: 'MuiAccordionSummary',
	  slot: 'ExpandIconWrapper',
	  overridesResolver: (props, styles) => styles.expandIconWrapper
	})(({
	  theme
	}) => ({
	  display: 'flex',
	  color: (theme.vars || theme).palette.action.active,
	  transform: 'rotate(0deg)',
	  transition: theme.transitions.create('transform', {
	    duration: theme.transitions.duration.shortest
	  }),
	  [`&.${accordionSummaryClasses$1.expanded}`]: {
	    transform: 'rotate(180deg)'
	  }
	}));
	const AccordionSummary = /*#__PURE__*/reactExports.forwardRef(function AccordionSummary(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAccordionSummary'
	  });
	  const {
	      children,
	      className,
	      expandIcon,
	      focusVisibleClassName,
	      onClick
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1Q);
	  const {
	    disabled = false,
	    disableGutters,
	    expanded,
	    toggle
	  } = reactExports.useContext(AccordionContext$1);
	  const handleChange = event => {
	    if (toggle) {
	      toggle(event);
	    }
	    if (onClick) {
	      onClick(event);
	    }
	  };
	  const ownerState = _extends({}, props, {
	    expanded,
	    disabled,
	    disableGutters
	  });
	  const classes = useUtilityClasses$1v(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(AccordionSummaryRoot, _extends({
	    focusRipple: false,
	    disableRipple: true,
	    disabled: disabled,
	    component: "div",
	    "aria-expanded": expanded,
	    className: clsx(classes.root, className),
	    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	    onClick: handleChange,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(AccordionSummaryContent, {
	      className: classes.content,
	      ownerState: ownerState,
	      children: children
	    }), expandIcon && /*#__PURE__*/jsxRuntimeExports.jsx(AccordionSummaryExpandIconWrapper, {
	      className: classes.expandIconWrapper,
	      ownerState: ownerState,
	      children: expandIcon
	    })]
	  }));
	});
	var AccordionSummary$1 = AccordionSummary;

	function getIconButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiIconButton', slot);
	}
	const iconButtonClasses = generateUtilityClasses('MuiIconButton', ['root', 'disabled', 'colorInherit', 'colorPrimary', 'colorSecondary', 'colorError', 'colorInfo', 'colorSuccess', 'colorWarning', 'edgeStart', 'edgeEnd', 'sizeSmall', 'sizeMedium', 'sizeLarge']);
	var iconButtonClasses$1 = iconButtonClasses;

	const _excluded$1P = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
	const useUtilityClasses$1u = ownerState => {
	  const {
	    classes,
	    disabled,
	    color,
	    edge,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', color !== 'default' && `color${capitalize(color)}`, edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`]
	  };
	  return composeClasses(slots, getIconButtonUtilityClass, classes);
	};
	const IconButtonRoot = styled$1(ButtonBase$1, {
	  name: 'MuiIconButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  textAlign: 'center',
	  flex: '0 0 auto',
	  fontSize: theme.typography.pxToRem(24),
	  padding: 8,
	  borderRadius: '50%',
	  overflow: 'visible',
	  // Explicitly set the default value to solve a bug on IE11.
	  color: (theme.vars || theme).palette.action.active,
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  })
	}, !ownerState.disableRipple && {
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.edge === 'start' && {
	  marginLeft: ownerState.size === 'small' ? -3 : -12
	}, ownerState.edge === 'end' && {
	  marginRight: ownerState.size === 'small' ? -3 : -12
	}), ({
	  theme,
	  ownerState
	}) => {
	  var _palette;
	  const palette = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
	  return _extends({}, ownerState.color === 'inherit' && {
	    color: 'inherit'
	  }, ownerState.color !== 'inherit' && ownerState.color !== 'default' && _extends({
	    color: palette == null ? void 0 : palette.main
	  }, !ownerState.disableRipple && {
	    '&:hover': _extends({}, palette && {
	      backgroundColor: theme.vars ? `rgba(${palette.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(palette.main, theme.palette.action.hoverOpacity)
	    }, {
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    })
	  }), ownerState.size === 'small' && {
	    padding: 5,
	    fontSize: theme.typography.pxToRem(18)
	  }, ownerState.size === 'large' && {
	    padding: 12,
	    fontSize: theme.typography.pxToRem(28)
	  }, {
	    [`&.${iconButtonClasses$1.disabled}`]: {
	      backgroundColor: 'transparent',
	      color: (theme.vars || theme).palette.action.disabled
	    }
	  });
	});

	/**
	 * Refer to the [Icons](/material-ui/icons/) section of the documentation
	 * regarding the available icon options.
	 */
	const IconButton = /*#__PURE__*/reactExports.forwardRef(function IconButton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiIconButton'
	  });
	  const {
	      edge = false,
	      children,
	      className,
	      color = 'default',
	      disabled = false,
	      disableFocusRipple = false,
	      size = 'medium'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1P);
	  const ownerState = _extends({}, props, {
	    edge,
	    color,
	    disabled,
	    disableFocusRipple,
	    size
	  });
	  const classes = useUtilityClasses$1u(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(IconButtonRoot, _extends({
	    className: clsx(classes.root, className),
	    centerRipple: true,
	    focusRipple: !disableFocusRipple,
	    disabled: disabled,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: children
	  }));
	});
	var IconButton$1 = IconButton;

	var ClearIcon$1 = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
	}), 'Close');

	function getTypographyUtilityClass(slot) {
	  return generateUtilityClass('MuiTypography', slot);
	}
	generateUtilityClasses('MuiTypography', ['root', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'inherit', 'button', 'caption', 'overline', 'alignLeft', 'alignRight', 'alignCenter', 'alignJustify', 'noWrap', 'gutterBottom', 'paragraph']);

	const _excluded$1O = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
	const useUtilityClasses$1t = ownerState => {
	  const {
	    align,
	    gutterBottom,
	    noWrap,
	    paragraph,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, ownerState.align !== 'inherit' && `align${capitalize(align)}`, gutterBottom && 'gutterBottom', noWrap && 'noWrap', paragraph && 'paragraph']
	  };
	  return composeClasses(slots, getTypographyUtilityClass, classes);
	};
	const TypographyRoot = styled$1('span', {
	  name: 'MuiTypography',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  margin: 0
	}, ownerState.variant === 'inherit' && {
	  // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
	  font: 'inherit'
	}, ownerState.variant !== 'inherit' && theme.typography[ownerState.variant], ownerState.align !== 'inherit' && {
	  textAlign: ownerState.align
	}, ownerState.noWrap && {
	  overflow: 'hidden',
	  textOverflow: 'ellipsis',
	  whiteSpace: 'nowrap'
	}, ownerState.gutterBottom && {
	  marginBottom: '0.35em'
	}, ownerState.paragraph && {
	  marginBottom: 16
	}));
	const defaultVariantMapping = {
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  subtitle1: 'h6',
	  subtitle2: 'h6',
	  body1: 'p',
	  body2: 'p',
	  inherit: 'p'
	};

	// TODO v6: deprecate these color values in v5.x and remove the transformation in v6
	const colorTransformations = {
	  primary: 'primary.main',
	  textPrimary: 'text.primary',
	  secondary: 'secondary.main',
	  textSecondary: 'text.secondary',
	  error: 'error.main'
	};
	const transformDeprecatedColors = color => {
	  return colorTransformations[color] || color;
	};
	const Typography = /*#__PURE__*/reactExports.forwardRef(function Typography(inProps, ref) {
	  const themeProps = useThemeProps({
	    props: inProps,
	    name: 'MuiTypography'
	  });
	  const color = transformDeprecatedColors(themeProps.color);
	  const props = extendSxProp(_extends({}, themeProps, {
	    color
	  }));
	  const {
	      align = 'inherit',
	      className,
	      component,
	      gutterBottom = false,
	      noWrap = false,
	      paragraph = false,
	      variant = 'body1',
	      variantMapping = defaultVariantMapping
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1O);
	  const ownerState = _extends({}, props, {
	    align,
	    color,
	    className,
	    component,
	    gutterBottom,
	    noWrap,
	    paragraph,
	    variant,
	    variantMapping
	  });
	  const Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
	  const classes = useUtilityClasses$1t(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TypographyRoot, _extends({
	    as: Component,
	    ref: ref,
	    ownerState: ownerState,
	    className: clsx(classes.root, className)
	  }, other));
	});
	var Typography$1 = Typography;

	function getAppBarUtilityClass(slot) {
	  return generateUtilityClass('MuiAppBar', slot);
	}
	generateUtilityClasses('MuiAppBar', ['root', 'positionFixed', 'positionAbsolute', 'positionSticky', 'positionStatic', 'positionRelative', 'colorDefault', 'colorPrimary', 'colorSecondary', 'colorInherit', 'colorTransparent', 'colorError', 'colorInfo', 'colorSuccess', 'colorWarning']);

	const _excluded$1N = ["className", "color", "enableColorOnDark", "position"];
	const useUtilityClasses$1s = ownerState => {
	  const {
	    color,
	    position,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${capitalize(color)}`, `position${capitalize(position)}`]
	  };
	  return composeClasses(slots, getAppBarUtilityClass, classes);
	};

	// var2 is the fallback.
	// Ex. var1: 'var(--a)', var2: 'var(--b)'; return: 'var(--a, var(--b))'
	const joinVars = (var1, var2) => var1 ? `${var1 == null ? void 0 : var1.replace(')', '')}, ${var2})` : var2;
	const AppBarRoot = styled$1(MuiPaper, {
	  name: 'MuiAppBar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`position${capitalize(ownerState.position)}`], styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const backgroundColorDefault = theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[900];
	  return _extends({
	    display: 'flex',
	    flexDirection: 'column',
	    width: '100%',
	    boxSizing: 'border-box',
	    // Prevent padding issue with the Modal and fixed positioned AppBar.
	    flexShrink: 0
	  }, ownerState.position === 'fixed' && {
	    position: 'fixed',
	    zIndex: (theme.vars || theme).zIndex.appBar,
	    top: 0,
	    left: 'auto',
	    right: 0,
	    '@media print': {
	      // Prevent the app bar to be visible on each printed page.
	      position: 'absolute'
	    }
	  }, ownerState.position === 'absolute' && {
	    position: 'absolute',
	    zIndex: (theme.vars || theme).zIndex.appBar,
	    top: 0,
	    left: 'auto',
	    right: 0
	  }, ownerState.position === 'sticky' && {
	    // ⚠️ sticky is not supported by IE11.
	    position: 'sticky',
	    zIndex: (theme.vars || theme).zIndex.appBar,
	    top: 0,
	    left: 'auto',
	    right: 0
	  }, ownerState.position === 'static' && {
	    position: 'static'
	  }, ownerState.position === 'relative' && {
	    position: 'relative'
	  }, !theme.vars && _extends({}, ownerState.color === 'default' && {
	    backgroundColor: backgroundColorDefault,
	    color: theme.palette.getContrastText(backgroundColorDefault)
	  }, ownerState.color && ownerState.color !== 'default' && ownerState.color !== 'inherit' && ownerState.color !== 'transparent' && {
	    backgroundColor: theme.palette[ownerState.color].main,
	    color: theme.palette[ownerState.color].contrastText
	  }, ownerState.color === 'inherit' && {
	    color: 'inherit'
	  }, theme.palette.mode === 'dark' && !ownerState.enableColorOnDark && {
	    backgroundColor: null,
	    color: null
	  }, ownerState.color === 'transparent' && _extends({
	    backgroundColor: 'transparent',
	    color: 'inherit'
	  }, theme.palette.mode === 'dark' && {
	    backgroundImage: 'none'
	  })), theme.vars && _extends({}, ownerState.color === 'default' && {
	    '--AppBar-background': ownerState.enableColorOnDark ? theme.vars.palette.AppBar.defaultBg : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette.AppBar.defaultBg),
	    '--AppBar-color': ownerState.enableColorOnDark ? theme.vars.palette.text.primary : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette.text.primary)
	  }, ownerState.color && !ownerState.color.match(/^(default|inherit|transparent)$/) && {
	    '--AppBar-background': ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].main : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette[ownerState.color].main),
	    '--AppBar-color': ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].contrastText : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette[ownerState.color].contrastText)
	  }, {
	    backgroundColor: 'var(--AppBar-background)',
	    color: ownerState.color === 'inherit' ? 'inherit' : 'var(--AppBar-color)'
	  }, ownerState.color === 'transparent' && {
	    backgroundImage: 'none',
	    backgroundColor: 'transparent',
	    color: 'inherit'
	  }));
	});
	const AppBar = /*#__PURE__*/reactExports.forwardRef(function AppBar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAppBar'
	  });
	  const {
	      className,
	      color = 'primary',
	      enableColorOnDark = false,
	      position = 'fixed'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1N);
	  const ownerState = _extends({}, props, {
	    color,
	    position,
	    enableColorOnDark
	  });
	  const classes = useUtilityClasses$1s(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(AppBarRoot, _extends({
	    square: true,
	    component: "header",
	    ownerState: ownerState,
	    elevation: 4,
	    className: clsx(classes.root, className, position === 'fixed' && 'mui-fixed'),
	    ref: ref
	  }, other));
	});
	var AppBar$1 = AppBar;

	/**
	 * Determines if a given element is a DOM element name (i.e. not a React component).
	 */
	function isHostComponent(element) {
	  return typeof element === 'string';
	}

	/**
	 * Type of the ownerState based on the type of an element it applies to.
	 * This resolves to the provided OwnerState for React components and `undefined` for host components.
	 * Falls back to `OwnerState | undefined` when the exact type can't be determined in development time.
	 */

	/**
	 * Appends the ownerState object to the props, merging with the existing one if necessary.
	 *
	 * @param elementType Type of the element that owns the `existingProps`. If the element is a DOM node or undefined, `ownerState` is not applied.
	 * @param otherProps Props of the element.
	 * @param ownerState
	 */
	function appendOwnerState(elementType, otherProps, ownerState) {
	  if (elementType === undefined || isHostComponent(elementType)) {
	    return otherProps;
	  }
	  return _extends({}, otherProps, {
	    ownerState: _extends({}, otherProps.ownerState, ownerState)
	  });
	}

	function areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {
	  return array1.length === array2.length && array1.every((value, index) => itemComparer(value, array2[index]));
	}

	const defaultContextValue = {
	  disableDefaultClasses: false
	};
	const ClassNameConfiguratorContext = /*#__PURE__*/reactExports.createContext(defaultContextValue);
	/**
	 * @ignore - internal hook.
	 *
	 * Wraps the `generateUtilityClass` function and controls how the classes are generated.
	 * Currently it only affects whether the classes are applied or not.
	 *
	 * @returns Function to be called with the `generateUtilityClass` function specific to a component to generate the classes.
	 */
	function useClassNamesOverride(generateUtilityClass) {
	  const {
	    disableDefaultClasses
	  } = reactExports.useContext(ClassNameConfiguratorContext);
	  return slot => {
	    if (disableDefaultClasses) {
	      return '';
	    }
	    return generateUtilityClass(slot);
	  };
	}

	/**
	 * Extracts event handlers from a given object.
	 * A prop is considered an event handler if it is a function and its name starts with `on`.
	 *
	 * @param object An object to extract event handlers from.
	 * @param excludeKeys An array of keys to exclude from the returned object.
	 */
	function extractEventHandlers(object, excludeKeys = []) {
	  if (object === undefined) {
	    return {};
	  }
	  const result = {};
	  Object.keys(object).filter(prop => prop.match(/^on[A-Z]/) && typeof object[prop] === 'function' && !excludeKeys.includes(prop)).forEach(prop => {
	    result[prop] = object[prop];
	  });
	  return result;
	}

	/**
	 * If `componentProps` is a function, calls it with the provided `ownerState`.
	 * Otherwise, just returns `componentProps`.
	 */
	function resolveComponentProps(componentProps, ownerState, slotState) {
	  if (typeof componentProps === 'function') {
	    return componentProps(ownerState, slotState);
	  }
	  return componentProps;
	}

	/**
	 * Removes event handlers from the given object.
	 * A field is considered an event handler if it is a function with a name beginning with `on`.
	 *
	 * @param object Object to remove event handlers from.
	 * @returns Object with event handlers removed.
	 */
	function omitEventHandlers(object) {
	  if (object === undefined) {
	    return {};
	  }
	  const result = {};
	  Object.keys(object).filter(prop => !(prop.match(/^on[A-Z]/) && typeof object[prop] === 'function')).forEach(prop => {
	    result[prop] = object[prop];
	  });
	  return result;
	}

	/**
	 * Merges the slot component internal props (usually coming from a hook)
	 * with the externally provided ones.
	 *
	 * The merge order is (the latter overrides the former):
	 * 1. The internal props (specified as a getter function to work with get*Props hook result)
	 * 2. Additional props (specified internally on a Base UI component)
	 * 3. External props specified on the owner component. These should only be used on a root slot.
	 * 4. External props specified in the `slotProps.*` prop.
	 * 5. The `className` prop - combined from all the above.
	 * @param parameters
	 * @returns
	 */
	function mergeSlotProps(parameters) {
	  const {
	    getSlotProps,
	    additionalProps,
	    externalSlotProps,
	    externalForwardedProps,
	    className
	  } = parameters;
	  if (!getSlotProps) {
	    // The simpler case - getSlotProps is not defined, so no internal event handlers are defined,
	    // so we can simply merge all the props without having to worry about extracting event handlers.
	    const joinedClasses = clsx(additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
	    const mergedStyle = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
	    const props = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);
	    if (joinedClasses.length > 0) {
	      props.className = joinedClasses;
	    }
	    if (Object.keys(mergedStyle).length > 0) {
	      props.style = mergedStyle;
	    }
	    return {
	      props,
	      internalRef: undefined
	    };
	  }

	  // In this case, getSlotProps is responsible for calling the external event handlers.
	  // We don't need to include them in the merged props because of this.

	  const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));
	  const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
	  const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
	  const internalSlotProps = getSlotProps(eventHandlers);

	  // The order of classes is important here.
	  // Emotion (that we use in libraries consuming Base UI) depends on this order
	  // to properly override style. It requires the most important classes to be last
	  // (see https://github.com/mui/material-ui/pull/33205) for the related discussion.
	  const joinedClasses = clsx(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
	  const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
	  const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
	  if (joinedClasses.length > 0) {
	    props.className = joinedClasses;
	  }
	  if (Object.keys(mergedStyle).length > 0) {
	    props.style = mergedStyle;
	  }
	  return {
	    props,
	    internalRef: internalSlotProps.ref
	  };
	}

	const _excluded$1M = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
	/**
	 * @ignore - do not document.
	 * Builds the props to be passed into the slot of an unstyled component.
	 * It merges the internal props of the component with the ones supplied by the user, allowing to customize the behavior.
	 * If the slot component is not a host component, it also merges in the `ownerState`.
	 *
	 * @param parameters.getSlotProps - A function that returns the props to be passed to the slot component.
	 */
	function useSlotProps(parameters) {
	  var _parameters$additiona;
	  const {
	      elementType,
	      externalSlotProps,
	      ownerState,
	      skipResolvingSlotProps = false
	    } = parameters,
	    rest = _objectWithoutPropertiesLoose(parameters, _excluded$1M);
	  const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);
	  const {
	    props: mergedProps,
	    internalRef
	  } = mergeSlotProps(_extends({}, rest, {
	    externalSlotProps: resolvedComponentsProps
	  }));
	  const ref = useForkRef(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
	  const props = appendOwnerState(elementType, _extends({}, mergedProps, {
	    ref
	  }), ownerState);
	  return props;
	}

	/**
	 *
	 * Demos:
	 *
	 * - [Badge](https://mui.com/base-ui/react-badge/#hook)
	 *
	 * API:
	 *
	 * - [useBadge API](https://mui.com/base-ui/react-badge/hooks-api/#use-badge)
	 */
	function useBadge(parameters) {
	  const {
	    badgeContent: badgeContentProp,
	    invisible: invisibleProp = false,
	    max: maxProp = 99,
	    showZero = false
	  } = parameters;
	  const prevProps = usePreviousProps$1({
	    badgeContent: badgeContentProp,
	    max: maxProp
	  });
	  let invisible = invisibleProp;
	  if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
	    invisible = true;
	  }
	  const {
	    badgeContent,
	    max = maxProp
	  } = invisible ? prevProps : parameters;
	  const displayValue = badgeContent && Number(badgeContent) > max ? `${max}+` : badgeContent;
	  return {
	    badgeContent,
	    invisible,
	    max,
	    displayValue
	  };
	}

	// Inspired by https://github.com/focus-trap/tabbable
	const candidatesSelector = ['input', 'select', 'textarea', 'a[href]', 'button', '[tabindex]', 'audio[controls]', 'video[controls]', '[contenteditable]:not([contenteditable="false"])'].join(',');
	function getTabIndex(node) {
	  const tabindexAttr = parseInt(node.getAttribute('tabindex') || '', 10);
	  if (!Number.isNaN(tabindexAttr)) {
	    return tabindexAttr;
	  }

	  // Browsers do not return `tabIndex` correctly for contentEditable nodes;
	  // https://bugs.chromium.org/p/chromium/issues/detail?id=661108&q=contenteditable%20tabindex&can=2
	  // so if they don't have a tabindex attribute specifically set, assume it's 0.
	  // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default
	  //  `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,
	  //  yet they are still part of the regular tab order; in FF, they get a default
	  //  `tabIndex` of 0; since Chrome still puts those elements in the regular tab
	  //  order, consider their tab index to be 0.
	  if (node.contentEditable === 'true' || (node.nodeName === 'AUDIO' || node.nodeName === 'VIDEO' || node.nodeName === 'DETAILS') && node.getAttribute('tabindex') === null) {
	    return 0;
	  }
	  return node.tabIndex;
	}
	function isNonTabbableRadio(node) {
	  if (node.tagName !== 'INPUT' || node.type !== 'radio') {
	    return false;
	  }
	  if (!node.name) {
	    return false;
	  }
	  const getRadio = selector => node.ownerDocument.querySelector(`input[type="radio"]${selector}`);
	  let roving = getRadio(`[name="${node.name}"]:checked`);
	  if (!roving) {
	    roving = getRadio(`[name="${node.name}"]`);
	  }
	  return roving !== node;
	}
	function isNodeMatchingSelectorFocusable(node) {
	  if (node.disabled || node.tagName === 'INPUT' && node.type === 'hidden' || isNonTabbableRadio(node)) {
	    return false;
	  }
	  return true;
	}
	function defaultGetTabbable(root) {
	  const regularTabNodes = [];
	  const orderedTabNodes = [];
	  Array.from(root.querySelectorAll(candidatesSelector)).forEach((node, i) => {
	    const nodeTabIndex = getTabIndex(node);
	    if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node)) {
	      return;
	    }
	    if (nodeTabIndex === 0) {
	      regularTabNodes.push(node);
	    } else {
	      orderedTabNodes.push({
	        documentOrder: i,
	        tabIndex: nodeTabIndex,
	        node: node
	      });
	    }
	  });
	  return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map(a => a.node).concat(regularTabNodes);
	}
	function defaultIsEnabled() {
	  return true;
	}

	/**
	 * Utility component that locks focus inside the component.
	 *
	 * Demos:
	 *
	 * - [Focus Trap](https://mui.com/base-ui/react-focus-trap/)
	 *
	 * API:
	 *
	 * - [FocusTrap API](https://mui.com/base-ui/react-focus-trap/components-api/#focus-trap)
	 */
	function FocusTrap(props) {
	  const {
	    children,
	    disableAutoFocus = false,
	    disableEnforceFocus = false,
	    disableRestoreFocus = false,
	    getTabbable = defaultGetTabbable,
	    isEnabled = defaultIsEnabled,
	    open
	  } = props;
	  const ignoreNextEnforceFocus = reactExports.useRef(false);
	  const sentinelStart = reactExports.useRef(null);
	  const sentinelEnd = reactExports.useRef(null);
	  const nodeToRestore = reactExports.useRef(null);
	  const reactFocusEventTarget = reactExports.useRef(null);
	  // This variable is useful when disableAutoFocus is true.
	  // It waits for the active element to move into the component to activate.
	  const activated = reactExports.useRef(false);
	  const rootRef = reactExports.useRef(null);
	  // @ts-expect-error TODO upstream fix
	  const handleRef = useForkRef(children.ref, rootRef);
	  const lastKeydown = reactExports.useRef(null);
	  reactExports.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }
	    activated.current = !disableAutoFocus;
	  }, [disableAutoFocus, open]);
	  reactExports.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }
	    const doc = ownerDocument(rootRef.current);
	    if (!rootRef.current.contains(doc.activeElement)) {
	      if (!rootRef.current.hasAttribute('tabIndex')) {
	        rootRef.current.setAttribute('tabIndex', '-1');
	      }
	      if (activated.current) {
	        rootRef.current.focus();
	      }
	    }
	    return () => {
	      // restoreLastFocus()
	      if (!disableRestoreFocus) {
	        // In IE11 it is possible for document.activeElement to be null resulting
	        // in nodeToRestore.current being null.
	        // Not all elements in IE11 have a focus method.
	        // Once IE11 support is dropped the focus() call can be unconditional.
	        if (nodeToRestore.current && nodeToRestore.current.focus) {
	          ignoreNextEnforceFocus.current = true;
	          nodeToRestore.current.focus();
	        }
	        nodeToRestore.current = null;
	      }
	    };
	    // Missing `disableRestoreFocus` which is fine.
	    // We don't support changing that prop on an open FocusTrap
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [open]);
	  reactExports.useEffect(() => {
	    // We might render an empty child.
	    if (!open || !rootRef.current) {
	      return;
	    }
	    const doc = ownerDocument(rootRef.current);
	    const loopFocus = nativeEvent => {
	      lastKeydown.current = nativeEvent;
	      if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== 'Tab') {
	        return;
	      }

	      // Make sure the next tab starts from the right place.
	      // doc.activeElement refers to the origin.
	      if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
	        // We need to ignore the next contain as
	        // it will try to move the focus back to the rootRef element.
	        ignoreNextEnforceFocus.current = true;
	        if (sentinelEnd.current) {
	          sentinelEnd.current.focus();
	        }
	      }
	    };
	    const contain = () => {
	      const rootElement = rootRef.current;

	      // Cleanup functions are executed lazily in React 17.
	      // Contain can be called between the component being unmounted and its cleanup function being run.
	      if (rootElement === null) {
	        return;
	      }
	      if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {
	        ignoreNextEnforceFocus.current = false;
	        return;
	      }

	      // The focus is already inside
	      if (rootElement.contains(doc.activeElement)) {
	        return;
	      }

	      // The disableEnforceFocus is set and the focus is outside of the focus trap (and sentinel nodes)
	      if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
	        return;
	      }

	      // if the focus event is not coming from inside the children's react tree, reset the refs
	      if (doc.activeElement !== reactFocusEventTarget.current) {
	        reactFocusEventTarget.current = null;
	      } else if (reactFocusEventTarget.current !== null) {
	        return;
	      }
	      if (!activated.current) {
	        return;
	      }
	      let tabbable = [];
	      if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
	        tabbable = getTabbable(rootRef.current);
	      }

	      // one of the sentinel nodes was focused, so move the focus
	      // to the first/last tabbable element inside the focus trap
	      if (tabbable.length > 0) {
	        var _lastKeydown$current, _lastKeydown$current2;
	        const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === 'Tab');
	        const focusNext = tabbable[0];
	        const focusPrevious = tabbable[tabbable.length - 1];
	        if (typeof focusNext !== 'string' && typeof focusPrevious !== 'string') {
	          if (isShiftTab) {
	            focusPrevious.focus();
	          } else {
	            focusNext.focus();
	          }
	        }
	        // no tabbable elements in the trap focus or the focus was outside of the focus trap
	      } else {
	        rootElement.focus();
	      }
	    };
	    doc.addEventListener('focusin', contain);
	    doc.addEventListener('keydown', loopFocus, true);

	    // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area.
	    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
	    // Instead, we can look if the active element was restored on the BODY element.
	    //
	    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
	    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.
	    const interval = setInterval(() => {
	      if (doc.activeElement && doc.activeElement.tagName === 'BODY') {
	        contain();
	      }
	    }, 50);
	    return () => {
	      clearInterval(interval);
	      doc.removeEventListener('focusin', contain);
	      doc.removeEventListener('keydown', loopFocus, true);
	    };
	  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
	  const onFocus = event => {
	    if (nodeToRestore.current === null) {
	      nodeToRestore.current = event.relatedTarget;
	    }
	    activated.current = true;
	    reactFocusEventTarget.current = event.target;
	    const childrenPropsHandler = children.props.onFocus;
	    if (childrenPropsHandler) {
	      childrenPropsHandler(event);
	    }
	  };
	  const handleFocusSentinel = event => {
	    if (nodeToRestore.current === null) {
	      nodeToRestore.current = event.relatedTarget;
	    }
	    activated.current = true;
	  };
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx("div", {
	      tabIndex: open ? 0 : -1,
	      onFocus: handleFocusSentinel,
	      ref: sentinelStart,
	      "data-testid": "sentinelStart"
	    }), /*#__PURE__*/reactExports.cloneElement(children, {
	      ref: handleRef,
	      onFocus
	    }), /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	      tabIndex: open ? 0 : -1,
	      onFocus: handleFocusSentinel,
	      ref: sentinelEnd,
	      "data-testid": "sentinelEnd"
	    })]
	  });
	}

	var top = 'top';
	var bottom = 'bottom';
	var right = 'right';
	var left = 'left';
	var auto = 'auto';
	var basePlacements = [top, bottom, right, left];
	var start = 'start';
	var end = 'end';
	var clippingParents = 'clippingParents';
	var viewport = 'viewport';
	var popper = 'popper';
	var reference = 'reference';
	var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
	  return acc.concat([placement + "-" + start, placement + "-" + end]);
	}, []);
	var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
	  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
	}, []); // modifiers that need to read the DOM

	var beforeRead = 'beforeRead';
	var read = 'read';
	var afterRead = 'afterRead'; // pure-logic modifiers

	var beforeMain = 'beforeMain';
	var main = 'main';
	var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

	var beforeWrite = 'beforeWrite';
	var write = 'write';
	var afterWrite = 'afterWrite';
	var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

	function getNodeName(element) {
	  return element ? (element.nodeName || '').toLowerCase() : null;
	}

	function getWindow(node) {
	  if (node == null) {
	    return window;
	  }
	  if (node.toString() !== '[object Window]') {
	    var ownerDocument = node.ownerDocument;
	    return ownerDocument ? ownerDocument.defaultView || window : window;
	  }
	  return node;
	}

	function isElement(node) {
	  var OwnElement = getWindow(node).Element;
	  return node instanceof OwnElement || node instanceof Element;
	}
	function isHTMLElement$1(node) {
	  var OwnElement = getWindow(node).HTMLElement;
	  return node instanceof OwnElement || node instanceof HTMLElement;
	}
	function isShadowRoot(node) {
	  // IE 11 has no ShadowRoot
	  if (typeof ShadowRoot === 'undefined') {
	    return false;
	  }
	  var OwnElement = getWindow(node).ShadowRoot;
	  return node instanceof OwnElement || node instanceof ShadowRoot;
	}

	// and applies them to the HTMLElements such as popper and arrow

	function applyStyles(_ref) {
	  var state = _ref.state;
	  Object.keys(state.elements).forEach(function (name) {
	    var style = state.styles[name] || {};
	    var attributes = state.attributes[name] || {};
	    var element = state.elements[name]; // arrow is optional + virtual elements

	    if (!isHTMLElement$1(element) || !getNodeName(element)) {
	      return;
	    } // Flow doesn't support to extend this property, but it's the most
	    // effective way to apply styles to an HTMLElement
	    // $FlowFixMe[cannot-write]

	    Object.assign(element.style, style);
	    Object.keys(attributes).forEach(function (name) {
	      var value = attributes[name];
	      if (value === false) {
	        element.removeAttribute(name);
	      } else {
	        element.setAttribute(name, value === true ? '' : value);
	      }
	    });
	  });
	}
	function effect$2(_ref2) {
	  var state = _ref2.state;
	  var initialStyles = {
	    popper: {
	      position: state.options.strategy,
	      left: '0',
	      top: '0',
	      margin: '0'
	    },
	    arrow: {
	      position: 'absolute'
	    },
	    reference: {}
	  };
	  Object.assign(state.elements.popper.style, initialStyles.popper);
	  state.styles = initialStyles;
	  if (state.elements.arrow) {
	    Object.assign(state.elements.arrow.style, initialStyles.arrow);
	  }
	  return function () {
	    Object.keys(state.elements).forEach(function (name) {
	      var element = state.elements[name];
	      var attributes = state.attributes[name] || {};
	      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

	      var style = styleProperties.reduce(function (style, property) {
	        style[property] = '';
	        return style;
	      }, {}); // arrow is optional + virtual elements

	      if (!isHTMLElement$1(element) || !getNodeName(element)) {
	        return;
	      }
	      Object.assign(element.style, style);
	      Object.keys(attributes).forEach(function (attribute) {
	        element.removeAttribute(attribute);
	      });
	    });
	  };
	} // eslint-disable-next-line import/no-unused-modules

	var applyStyles$1 = {
	  name: 'applyStyles',
	  enabled: true,
	  phase: 'write',
	  fn: applyStyles,
	  effect: effect$2,
	  requires: ['computeStyles']
	};

	function getBasePlacement(placement) {
	  return placement.split('-')[0];
	}

	var max = Math.max;
	var min = Math.min;
	var round$1 = Math.round;

	function getUAString() {
	  var uaData = navigator.userAgentData;
	  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
	    return uaData.brands.map(function (item) {
	      return item.brand + "/" + item.version;
	    }).join(' ');
	  }
	  return navigator.userAgent;
	}

	function isLayoutViewport() {
	  return !/^((?!chrome|android).)*safari/i.test(getUAString());
	}

	function getBoundingClientRect(element, includeScale, isFixedStrategy) {
	  if (includeScale === void 0) {
	    includeScale = false;
	  }
	  if (isFixedStrategy === void 0) {
	    isFixedStrategy = false;
	  }
	  var clientRect = element.getBoundingClientRect();
	  var scaleX = 1;
	  var scaleY = 1;
	  if (includeScale && isHTMLElement$1(element)) {
	    scaleX = element.offsetWidth > 0 ? round$1(clientRect.width) / element.offsetWidth || 1 : 1;
	    scaleY = element.offsetHeight > 0 ? round$1(clientRect.height) / element.offsetHeight || 1 : 1;
	  }
	  var _ref = isElement(element) ? getWindow(element) : window,
	    visualViewport = _ref.visualViewport;
	  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
	  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
	  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
	  var width = clientRect.width / scaleX;
	  var height = clientRect.height / scaleY;
	  return {
	    width: width,
	    height: height,
	    top: y,
	    right: x + width,
	    bottom: y + height,
	    left: x,
	    x: x,
	    y: y
	  };
	}

	// means it doesn't take into account transforms.

	function getLayoutRect(element) {
	  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
	  // Fixes https://github.com/popperjs/popper-core/issues/1223

	  var width = element.offsetWidth;
	  var height = element.offsetHeight;
	  if (Math.abs(clientRect.width - width) <= 1) {
	    width = clientRect.width;
	  }
	  if (Math.abs(clientRect.height - height) <= 1) {
	    height = clientRect.height;
	  }
	  return {
	    x: element.offsetLeft,
	    y: element.offsetTop,
	    width: width,
	    height: height
	  };
	}

	function contains(parent, child) {
	  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

	  if (parent.contains(child)) {
	    return true;
	  } // then fallback to custom implementation with Shadow DOM support
	  else if (rootNode && isShadowRoot(rootNode)) {
	    var next = child;
	    do {
	      if (next && parent.isSameNode(next)) {
	        return true;
	      } // $FlowFixMe[prop-missing]: need a better way to handle this...

	      next = next.parentNode || next.host;
	    } while (next);
	  } // Give up, the result is false

	  return false;
	}

	function getComputedStyle(element) {
	  return getWindow(element).getComputedStyle(element);
	}

	function isTableElement(element) {
	  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
	}

	function getDocumentElement(element) {
	  // $FlowFixMe[incompatible-return]: assume body is always available
	  return ((isElement(element) ? element.ownerDocument :
	  // $FlowFixMe[prop-missing]
	  element.document) || window.document).documentElement;
	}

	function getParentNode(element) {
	  if (getNodeName(element) === 'html') {
	    return element;
	  }
	  return (
	    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
	    // $FlowFixMe[incompatible-return]
	    // $FlowFixMe[prop-missing]
	    element.assignedSlot ||
	    // step into the shadow DOM of the parent of a slotted node
	    element.parentNode || (
	    // DOM Element detected
	    isShadowRoot(element) ? element.host : null) ||
	    // ShadowRoot detected
	    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
	    getDocumentElement(element) // fallback
	  );
	}

	function getTrueOffsetParent(element) {
	  if (!isHTMLElement$1(element) ||
	  // https://github.com/popperjs/popper-core/issues/837
	  getComputedStyle(element).position === 'fixed') {
	    return null;
	  }
	  return element.offsetParent;
	} // `.offsetParent` reports `null` for fixed elements, while absolute elements
	// return the containing block

	function getContainingBlock(element) {
	  var isFirefox = /firefox/i.test(getUAString());
	  var isIE = /Trident/i.test(getUAString());
	  if (isIE && isHTMLElement$1(element)) {
	    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
	    var elementCss = getComputedStyle(element);
	    if (elementCss.position === 'fixed') {
	      return null;
	    }
	  }
	  var currentNode = getParentNode(element);
	  if (isShadowRoot(currentNode)) {
	    currentNode = currentNode.host;
	  }
	  while (isHTMLElement$1(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
	    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
	    // create a containing block.
	    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

	    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
	      return currentNode;
	    } else {
	      currentNode = currentNode.parentNode;
	    }
	  }
	  return null;
	} // Gets the closest ancestor positioned element. Handles some edge cases,
	// such as table ancestors and cross browser bugs.

	function getOffsetParent(element) {
	  var window = getWindow(element);
	  var offsetParent = getTrueOffsetParent(element);
	  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
	    offsetParent = getTrueOffsetParent(offsetParent);
	  }
	  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
	    return window;
	  }
	  return offsetParent || getContainingBlock(element) || window;
	}

	function getMainAxisFromPlacement(placement) {
	  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
	}

	function within(min$1, value, max$1) {
	  return max(min$1, min(value, max$1));
	}
	function withinMaxClamp(min, value, max) {
	  var v = within(min, value, max);
	  return v > max ? max : v;
	}

	function getFreshSideObject() {
	  return {
	    top: 0,
	    right: 0,
	    bottom: 0,
	    left: 0
	  };
	}

	function mergePaddingObject(paddingObject) {
	  return Object.assign({}, getFreshSideObject(), paddingObject);
	}

	function expandToHashMap(value, keys) {
	  return keys.reduce(function (hashMap, key) {
	    hashMap[key] = value;
	    return hashMap;
	  }, {});
	}

	var toPaddingObject = function toPaddingObject(padding, state) {
	  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
	    placement: state.placement
	  })) : padding;
	  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
	};
	function arrow(_ref) {
	  var _state$modifiersData$;
	  var state = _ref.state,
	    name = _ref.name,
	    options = _ref.options;
	  var arrowElement = state.elements.arrow;
	  var popperOffsets = state.modifiersData.popperOffsets;
	  var basePlacement = getBasePlacement(state.placement);
	  var axis = getMainAxisFromPlacement(basePlacement);
	  var isVertical = [left, right].indexOf(basePlacement) >= 0;
	  var len = isVertical ? 'height' : 'width';
	  if (!arrowElement || !popperOffsets) {
	    return;
	  }
	  var paddingObject = toPaddingObject(options.padding, state);
	  var arrowRect = getLayoutRect(arrowElement);
	  var minProp = axis === 'y' ? top : left;
	  var maxProp = axis === 'y' ? bottom : right;
	  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
	  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
	  var arrowOffsetParent = getOffsetParent(arrowElement);
	  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
	  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
	  // outside of the popper bounds

	  var min = paddingObject[minProp];
	  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
	  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
	  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

	  var axisProp = axis;
	  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
	}
	function effect$1(_ref2) {
	  var state = _ref2.state,
	    options = _ref2.options;
	  var _options$element = options.element,
	    arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;
	  if (arrowElement == null) {
	    return;
	  } // CSS selector

	  if (typeof arrowElement === 'string') {
	    arrowElement = state.elements.popper.querySelector(arrowElement);
	    if (!arrowElement) {
	      return;
	    }
	  }
	  if (!contains(state.elements.popper, arrowElement)) {
	    return;
	  }
	  state.elements.arrow = arrowElement;
	} // eslint-disable-next-line import/no-unused-modules

	var arrow$1 = {
	  name: 'arrow',
	  enabled: true,
	  phase: 'main',
	  fn: arrow,
	  effect: effect$1,
	  requires: ['popperOffsets'],
	  requiresIfExists: ['preventOverflow']
	};

	function getVariation(placement) {
	  return placement.split('-')[1];
	}

	var unsetSides = {
	  top: 'auto',
	  right: 'auto',
	  bottom: 'auto',
	  left: 'auto'
	}; // Round the offsets to the nearest suitable subpixel based on the DPR.
	// Zooming can change the DPR, but it seems to report a value that will
	// cleanly divide the values into the appropriate subpixels.

	function roundOffsetsByDPR(_ref, win) {
	  var x = _ref.x,
	    y = _ref.y;
	  var dpr = win.devicePixelRatio || 1;
	  return {
	    x: round$1(x * dpr) / dpr || 0,
	    y: round$1(y * dpr) / dpr || 0
	  };
	}
	function mapToStyles(_ref2) {
	  var _Object$assign2;
	  var popper = _ref2.popper,
	    popperRect = _ref2.popperRect,
	    placement = _ref2.placement,
	    variation = _ref2.variation,
	    offsets = _ref2.offsets,
	    position = _ref2.position,
	    gpuAcceleration = _ref2.gpuAcceleration,
	    adaptive = _ref2.adaptive,
	    roundOffsets = _ref2.roundOffsets,
	    isFixed = _ref2.isFixed;
	  var _offsets$x = offsets.x,
	    x = _offsets$x === void 0 ? 0 : _offsets$x,
	    _offsets$y = offsets.y,
	    y = _offsets$y === void 0 ? 0 : _offsets$y;
	  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
	    x: x,
	    y: y
	  }) : {
	    x: x,
	    y: y
	  };
	  x = _ref3.x;
	  y = _ref3.y;
	  var hasX = offsets.hasOwnProperty('x');
	  var hasY = offsets.hasOwnProperty('y');
	  var sideX = left;
	  var sideY = top;
	  var win = window;
	  if (adaptive) {
	    var offsetParent = getOffsetParent(popper);
	    var heightProp = 'clientHeight';
	    var widthProp = 'clientWidth';
	    if (offsetParent === getWindow(popper)) {
	      offsetParent = getDocumentElement(popper);
	      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
	        heightProp = 'scrollHeight';
	        widthProp = 'scrollWidth';
	      }
	    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

	    offsetParent = offsetParent;
	    if (placement === top || (placement === left || placement === right) && variation === end) {
	      sideY = bottom;
	      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height :
	      // $FlowFixMe[prop-missing]
	      offsetParent[heightProp];
	      y -= offsetY - popperRect.height;
	      y *= gpuAcceleration ? 1 : -1;
	    }
	    if (placement === left || (placement === top || placement === bottom) && variation === end) {
	      sideX = right;
	      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width :
	      // $FlowFixMe[prop-missing]
	      offsetParent[widthProp];
	      x -= offsetX - popperRect.width;
	      x *= gpuAcceleration ? 1 : -1;
	    }
	  }
	  var commonStyles = Object.assign({
	    position: position
	  }, adaptive && unsetSides);
	  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
	    x: x,
	    y: y
	  }, getWindow(popper)) : {
	    x: x,
	    y: y
	  };
	  x = _ref4.x;
	  y = _ref4.y;
	  if (gpuAcceleration) {
	    var _Object$assign;
	    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
	  }
	  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
	}
	function computeStyles(_ref5) {
	  var state = _ref5.state,
	    options = _ref5.options;
	  var _options$gpuAccelerat = options.gpuAcceleration,
	    gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
	    _options$adaptive = options.adaptive,
	    adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
	    _options$roundOffsets = options.roundOffsets,
	    roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
	  var commonStyles = {
	    placement: getBasePlacement(state.placement),
	    variation: getVariation(state.placement),
	    popper: state.elements.popper,
	    popperRect: state.rects.popper,
	    gpuAcceleration: gpuAcceleration,
	    isFixed: state.options.strategy === 'fixed'
	  };
	  if (state.modifiersData.popperOffsets != null) {
	    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
	      offsets: state.modifiersData.popperOffsets,
	      position: state.options.strategy,
	      adaptive: adaptive,
	      roundOffsets: roundOffsets
	    })));
	  }
	  if (state.modifiersData.arrow != null) {
	    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
	      offsets: state.modifiersData.arrow,
	      position: 'absolute',
	      adaptive: false,
	      roundOffsets: roundOffsets
	    })));
	  }
	  state.attributes.popper = Object.assign({}, state.attributes.popper, {
	    'data-popper-placement': state.placement
	  });
	} // eslint-disable-next-line import/no-unused-modules

	var computeStyles$1 = {
	  name: 'computeStyles',
	  enabled: true,
	  phase: 'beforeWrite',
	  fn: computeStyles,
	  data: {}
	};

	var passive = {
	  passive: true
	};
	function effect(_ref) {
	  var state = _ref.state,
	    instance = _ref.instance,
	    options = _ref.options;
	  var _options$scroll = options.scroll,
	    scroll = _options$scroll === void 0 ? true : _options$scroll,
	    _options$resize = options.resize,
	    resize = _options$resize === void 0 ? true : _options$resize;
	  var window = getWindow(state.elements.popper);
	  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
	  if (scroll) {
	    scrollParents.forEach(function (scrollParent) {
	      scrollParent.addEventListener('scroll', instance.update, passive);
	    });
	  }
	  if (resize) {
	    window.addEventListener('resize', instance.update, passive);
	  }
	  return function () {
	    if (scroll) {
	      scrollParents.forEach(function (scrollParent) {
	        scrollParent.removeEventListener('scroll', instance.update, passive);
	      });
	    }
	    if (resize) {
	      window.removeEventListener('resize', instance.update, passive);
	    }
	  };
	} // eslint-disable-next-line import/no-unused-modules

	var eventListeners = {
	  name: 'eventListeners',
	  enabled: true,
	  phase: 'write',
	  fn: function fn() {},
	  effect: effect,
	  data: {}
	};

	var hash$1 = {
	  left: 'right',
	  right: 'left',
	  bottom: 'top',
	  top: 'bottom'
	};
	function getOppositePlacement(placement) {
	  return placement.replace(/left|right|bottom|top/g, function (matched) {
	    return hash$1[matched];
	  });
	}

	var hash = {
	  start: 'end',
	  end: 'start'
	};
	function getOppositeVariationPlacement(placement) {
	  return placement.replace(/start|end/g, function (matched) {
	    return hash[matched];
	  });
	}

	function getWindowScroll(node) {
	  var win = getWindow(node);
	  var scrollLeft = win.pageXOffset;
	  var scrollTop = win.pageYOffset;
	  return {
	    scrollLeft: scrollLeft,
	    scrollTop: scrollTop
	  };
	}

	function getWindowScrollBarX(element) {
	  // If <html> has a CSS width greater than the viewport, then this will be
	  // incorrect for RTL.
	  // Popper 1 is broken in this case and never had a bug report so let's assume
	  // it's not an issue. I don't think anyone ever specifies width on <html>
	  // anyway.
	  // Browsers where the left scrollbar doesn't cause an issue report `0` for
	  // this (e.g. Edge 2019, IE11, Safari)
	  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
	}

	function getViewportRect(element, strategy) {
	  var win = getWindow(element);
	  var html = getDocumentElement(element);
	  var visualViewport = win.visualViewport;
	  var width = html.clientWidth;
	  var height = html.clientHeight;
	  var x = 0;
	  var y = 0;
	  if (visualViewport) {
	    width = visualViewport.width;
	    height = visualViewport.height;
	    var layoutViewport = isLayoutViewport();
	    if (layoutViewport || !layoutViewport && strategy === 'fixed') {
	      x = visualViewport.offsetLeft;
	      y = visualViewport.offsetTop;
	    }
	  }
	  return {
	    width: width,
	    height: height,
	    x: x + getWindowScrollBarX(element),
	    y: y
	  };
	}

	// of the `<html>` and `<body>` rect bounds if horizontally scrollable

	function getDocumentRect(element) {
	  var _element$ownerDocumen;
	  var html = getDocumentElement(element);
	  var winScroll = getWindowScroll(element);
	  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
	  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
	  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
	  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
	  var y = -winScroll.scrollTop;
	  if (getComputedStyle(body || html).direction === 'rtl') {
	    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
	  }
	  return {
	    width: width,
	    height: height,
	    x: x,
	    y: y
	  };
	}

	function isScrollParent(element) {
	  // Firefox wants us to check `-x` and `-y` variations as well
	  var _getComputedStyle = getComputedStyle(element),
	    overflow = _getComputedStyle.overflow,
	    overflowX = _getComputedStyle.overflowX,
	    overflowY = _getComputedStyle.overflowY;
	  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
	}

	function getScrollParent(node) {
	  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
	    // $FlowFixMe[incompatible-return]: assume body is always available
	    return node.ownerDocument.body;
	  }
	  if (isHTMLElement$1(node) && isScrollParent(node)) {
	    return node;
	  }
	  return getScrollParent(getParentNode(node));
	}

	/*
	given a DOM element, return the list of all scroll parents, up the list of ancesors
	until we get to the top window object. This list is what we attach scroll listeners
	to, because if any of these parent elements scroll, we'll need to re-calculate the
	reference element's position.
	*/

	function listScrollParents(element, list) {
	  var _element$ownerDocumen;
	  if (list === void 0) {
	    list = [];
	  }
	  var scrollParent = getScrollParent(element);
	  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
	  var win = getWindow(scrollParent);
	  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
	  var updatedList = list.concat(target);
	  return isBody ? updatedList :
	  // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
	  updatedList.concat(listScrollParents(getParentNode(target)));
	}

	function rectToClientRect(rect) {
	  return Object.assign({}, rect, {
	    left: rect.x,
	    top: rect.y,
	    right: rect.x + rect.width,
	    bottom: rect.y + rect.height
	  });
	}

	function getInnerBoundingClientRect(element, strategy) {
	  var rect = getBoundingClientRect(element, false, strategy === 'fixed');
	  rect.top = rect.top + element.clientTop;
	  rect.left = rect.left + element.clientLeft;
	  rect.bottom = rect.top + element.clientHeight;
	  rect.right = rect.left + element.clientWidth;
	  rect.width = element.clientWidth;
	  rect.height = element.clientHeight;
	  rect.x = rect.left;
	  rect.y = rect.top;
	  return rect;
	}
	function getClientRectFromMixedType(element, clippingParent, strategy) {
	  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
	} // A "clipping parent" is an overflowable container with the characteristic of
	// clipping (or hiding) overflowing elements with a position different from
	// `initial`

	function getClippingParents(element) {
	  var clippingParents = listScrollParents(getParentNode(element));
	  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
	  var clipperElement = canEscapeClipping && isHTMLElement$1(element) ? getOffsetParent(element) : element;
	  if (!isElement(clipperElement)) {
	    return [];
	  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414

	  return clippingParents.filter(function (clippingParent) {
	    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
	  });
	} // Gets the maximum area that the element is visible in due to any number of
	// clipping parents

	function getClippingRect(element, boundary, rootBoundary, strategy) {
	  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
	  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
	  var firstClippingParent = clippingParents[0];
	  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
	    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
	    accRect.top = max(rect.top, accRect.top);
	    accRect.right = min(rect.right, accRect.right);
	    accRect.bottom = min(rect.bottom, accRect.bottom);
	    accRect.left = max(rect.left, accRect.left);
	    return accRect;
	  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
	  clippingRect.width = clippingRect.right - clippingRect.left;
	  clippingRect.height = clippingRect.bottom - clippingRect.top;
	  clippingRect.x = clippingRect.left;
	  clippingRect.y = clippingRect.top;
	  return clippingRect;
	}

	function computeOffsets(_ref) {
	  var reference = _ref.reference,
	    element = _ref.element,
	    placement = _ref.placement;
	  var basePlacement = placement ? getBasePlacement(placement) : null;
	  var variation = placement ? getVariation(placement) : null;
	  var commonX = reference.x + reference.width / 2 - element.width / 2;
	  var commonY = reference.y + reference.height / 2 - element.height / 2;
	  var offsets;
	  switch (basePlacement) {
	    case top:
	      offsets = {
	        x: commonX,
	        y: reference.y - element.height
	      };
	      break;
	    case bottom:
	      offsets = {
	        x: commonX,
	        y: reference.y + reference.height
	      };
	      break;
	    case right:
	      offsets = {
	        x: reference.x + reference.width,
	        y: commonY
	      };
	      break;
	    case left:
	      offsets = {
	        x: reference.x - element.width,
	        y: commonY
	      };
	      break;
	    default:
	      offsets = {
	        x: reference.x,
	        y: reference.y
	      };
	  }
	  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
	  if (mainAxis != null) {
	    var len = mainAxis === 'y' ? 'height' : 'width';
	    switch (variation) {
	      case start:
	        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
	        break;
	      case end:
	        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
	        break;
	    }
	  }
	  return offsets;
	}

	function detectOverflow(state, options) {
	  if (options === void 0) {
	    options = {};
	  }
	  var _options = options,
	    _options$placement = _options.placement,
	    placement = _options$placement === void 0 ? state.placement : _options$placement,
	    _options$strategy = _options.strategy,
	    strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
	    _options$boundary = _options.boundary,
	    boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
	    _options$rootBoundary = _options.rootBoundary,
	    rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
	    _options$elementConte = _options.elementContext,
	    elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
	    _options$altBoundary = _options.altBoundary,
	    altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
	    _options$padding = _options.padding,
	    padding = _options$padding === void 0 ? 0 : _options$padding;
	  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
	  var altContext = elementContext === popper ? reference : popper;
	  var popperRect = state.rects.popper;
	  var element = state.elements[altBoundary ? altContext : elementContext];
	  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
	  var referenceClientRect = getBoundingClientRect(state.elements.reference);
	  var popperOffsets = computeOffsets({
	    reference: referenceClientRect,
	    element: popperRect,
	    strategy: 'absolute',
	    placement: placement
	  });
	  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
	  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
	  // 0 or negative = within the clipping rect

	  var overflowOffsets = {
	    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
	    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
	    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
	    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
	  };
	  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

	  if (elementContext === popper && offsetData) {
	    var offset = offsetData[placement];
	    Object.keys(overflowOffsets).forEach(function (key) {
	      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
	      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
	      overflowOffsets[key] += offset[axis] * multiply;
	    });
	  }
	  return overflowOffsets;
	}

	function computeAutoPlacement(state, options) {
	  if (options === void 0) {
	    options = {};
	  }
	  var _options = options,
	    placement = _options.placement,
	    boundary = _options.boundary,
	    rootBoundary = _options.rootBoundary,
	    padding = _options.padding,
	    flipVariations = _options.flipVariations,
	    _options$allowedAutoP = _options.allowedAutoPlacements,
	    allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
	  var variation = getVariation(placement);
	  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
	    return getVariation(placement) === variation;
	  }) : basePlacements;
	  var allowedPlacements = placements$1.filter(function (placement) {
	    return allowedAutoPlacements.indexOf(placement) >= 0;
	  });
	  if (allowedPlacements.length === 0) {
	    allowedPlacements = placements$1;
	  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...

	  var overflows = allowedPlacements.reduce(function (acc, placement) {
	    acc[placement] = detectOverflow(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      padding: padding
	    })[getBasePlacement(placement)];
	    return acc;
	  }, {});
	  return Object.keys(overflows).sort(function (a, b) {
	    return overflows[a] - overflows[b];
	  });
	}

	function getExpandedFallbackPlacements(placement) {
	  if (getBasePlacement(placement) === auto) {
	    return [];
	  }
	  var oppositePlacement = getOppositePlacement(placement);
	  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
	}
	function flip(_ref) {
	  var state = _ref.state,
	    options = _ref.options,
	    name = _ref.name;
	  if (state.modifiersData[name]._skip) {
	    return;
	  }
	  var _options$mainAxis = options.mainAxis,
	    checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
	    _options$altAxis = options.altAxis,
	    checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
	    specifiedFallbackPlacements = options.fallbackPlacements,
	    padding = options.padding,
	    boundary = options.boundary,
	    rootBoundary = options.rootBoundary,
	    altBoundary = options.altBoundary,
	    _options$flipVariatio = options.flipVariations,
	    flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
	    allowedAutoPlacements = options.allowedAutoPlacements;
	  var preferredPlacement = state.options.placement;
	  var basePlacement = getBasePlacement(preferredPlacement);
	  var isBasePlacement = basePlacement === preferredPlacement;
	  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
	  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
	    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      padding: padding,
	      flipVariations: flipVariations,
	      allowedAutoPlacements: allowedAutoPlacements
	    }) : placement);
	  }, []);
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var checksMap = new Map();
	  var makeFallbackChecks = true;
	  var firstFittingPlacement = placements[0];
	  for (var i = 0; i < placements.length; i++) {
	    var placement = placements[i];
	    var _basePlacement = getBasePlacement(placement);
	    var isStartVariation = getVariation(placement) === start;
	    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
	    var len = isVertical ? 'width' : 'height';
	    var overflow = detectOverflow(state, {
	      placement: placement,
	      boundary: boundary,
	      rootBoundary: rootBoundary,
	      altBoundary: altBoundary,
	      padding: padding
	    });
	    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
	    if (referenceRect[len] > popperRect[len]) {
	      mainVariationSide = getOppositePlacement(mainVariationSide);
	    }
	    var altVariationSide = getOppositePlacement(mainVariationSide);
	    var checks = [];
	    if (checkMainAxis) {
	      checks.push(overflow[_basePlacement] <= 0);
	    }
	    if (checkAltAxis) {
	      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
	    }
	    if (checks.every(function (check) {
	      return check;
	    })) {
	      firstFittingPlacement = placement;
	      makeFallbackChecks = false;
	      break;
	    }
	    checksMap.set(placement, checks);
	  }
	  if (makeFallbackChecks) {
	    // `2` may be desired in some cases – research later
	    var numberOfChecks = flipVariations ? 3 : 1;
	    var _loop = function _loop(_i) {
	      var fittingPlacement = placements.find(function (placement) {
	        var checks = checksMap.get(placement);
	        if (checks) {
	          return checks.slice(0, _i).every(function (check) {
	            return check;
	          });
	        }
	      });
	      if (fittingPlacement) {
	        firstFittingPlacement = fittingPlacement;
	        return "break";
	      }
	    };
	    for (var _i = numberOfChecks; _i > 0; _i--) {
	      var _ret = _loop(_i);
	      if (_ret === "break") break;
	    }
	  }
	  if (state.placement !== firstFittingPlacement) {
	    state.modifiersData[name]._skip = true;
	    state.placement = firstFittingPlacement;
	    state.reset = true;
	  }
	} // eslint-disable-next-line import/no-unused-modules

	var flip$1 = {
	  name: 'flip',
	  enabled: true,
	  phase: 'main',
	  fn: flip,
	  requiresIfExists: ['offset'],
	  data: {
	    _skip: false
	  }
	};

	function getSideOffsets(overflow, rect, preventedOffsets) {
	  if (preventedOffsets === void 0) {
	    preventedOffsets = {
	      x: 0,
	      y: 0
	    };
	  }
	  return {
	    top: overflow.top - rect.height - preventedOffsets.y,
	    right: overflow.right - rect.width + preventedOffsets.x,
	    bottom: overflow.bottom - rect.height + preventedOffsets.y,
	    left: overflow.left - rect.width - preventedOffsets.x
	  };
	}
	function isAnySideFullyClipped(overflow) {
	  return [top, right, bottom, left].some(function (side) {
	    return overflow[side] >= 0;
	  });
	}
	function hide(_ref) {
	  var state = _ref.state,
	    name = _ref.name;
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var preventedOffsets = state.modifiersData.preventOverflow;
	  var referenceOverflow = detectOverflow(state, {
	    elementContext: 'reference'
	  });
	  var popperAltOverflow = detectOverflow(state, {
	    altBoundary: true
	  });
	  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
	  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
	  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
	  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
	  state.modifiersData[name] = {
	    referenceClippingOffsets: referenceClippingOffsets,
	    popperEscapeOffsets: popperEscapeOffsets,
	    isReferenceHidden: isReferenceHidden,
	    hasPopperEscaped: hasPopperEscaped
	  };
	  state.attributes.popper = Object.assign({}, state.attributes.popper, {
	    'data-popper-reference-hidden': isReferenceHidden,
	    'data-popper-escaped': hasPopperEscaped
	  });
	} // eslint-disable-next-line import/no-unused-modules

	var hide$1 = {
	  name: 'hide',
	  enabled: true,
	  phase: 'main',
	  requiresIfExists: ['preventOverflow'],
	  fn: hide
	};

	function distanceAndSkiddingToXY(placement, rects, offset) {
	  var basePlacement = getBasePlacement(placement);
	  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
	  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
	      placement: placement
	    })) : offset,
	    skidding = _ref[0],
	    distance = _ref[1];
	  skidding = skidding || 0;
	  distance = (distance || 0) * invertDistance;
	  return [left, right].indexOf(basePlacement) >= 0 ? {
	    x: distance,
	    y: skidding
	  } : {
	    x: skidding,
	    y: distance
	  };
	}
	function offset(_ref2) {
	  var state = _ref2.state,
	    options = _ref2.options,
	    name = _ref2.name;
	  var _options$offset = options.offset,
	    offset = _options$offset === void 0 ? [0, 0] : _options$offset;
	  var data = placements.reduce(function (acc, placement) {
	    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
	    return acc;
	  }, {});
	  var _data$state$placement = data[state.placement],
	    x = _data$state$placement.x,
	    y = _data$state$placement.y;
	  if (state.modifiersData.popperOffsets != null) {
	    state.modifiersData.popperOffsets.x += x;
	    state.modifiersData.popperOffsets.y += y;
	  }
	  state.modifiersData[name] = data;
	} // eslint-disable-next-line import/no-unused-modules

	var offset$1 = {
	  name: 'offset',
	  enabled: true,
	  phase: 'main',
	  requires: ['popperOffsets'],
	  fn: offset
	};

	function popperOffsets(_ref) {
	  var state = _ref.state,
	    name = _ref.name;
	  // Offsets are the actual position the popper needs to have to be
	  // properly positioned near its reference element
	  // This is the most basic placement, and will be adjusted by
	  // the modifiers in the next step
	  state.modifiersData[name] = computeOffsets({
	    reference: state.rects.reference,
	    element: state.rects.popper,
	    strategy: 'absolute',
	    placement: state.placement
	  });
	} // eslint-disable-next-line import/no-unused-modules

	var popperOffsets$1 = {
	  name: 'popperOffsets',
	  enabled: true,
	  phase: 'read',
	  fn: popperOffsets,
	  data: {}
	};

	function getAltAxis(axis) {
	  return axis === 'x' ? 'y' : 'x';
	}

	function preventOverflow(_ref) {
	  var state = _ref.state,
	    options = _ref.options,
	    name = _ref.name;
	  var _options$mainAxis = options.mainAxis,
	    checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
	    _options$altAxis = options.altAxis,
	    checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
	    boundary = options.boundary,
	    rootBoundary = options.rootBoundary,
	    altBoundary = options.altBoundary,
	    padding = options.padding,
	    _options$tether = options.tether,
	    tether = _options$tether === void 0 ? true : _options$tether,
	    _options$tetherOffset = options.tetherOffset,
	    tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
	  var overflow = detectOverflow(state, {
	    boundary: boundary,
	    rootBoundary: rootBoundary,
	    padding: padding,
	    altBoundary: altBoundary
	  });
	  var basePlacement = getBasePlacement(state.placement);
	  var variation = getVariation(state.placement);
	  var isBasePlacement = !variation;
	  var mainAxis = getMainAxisFromPlacement(basePlacement);
	  var altAxis = getAltAxis(mainAxis);
	  var popperOffsets = state.modifiersData.popperOffsets;
	  var referenceRect = state.rects.reference;
	  var popperRect = state.rects.popper;
	  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
	    placement: state.placement
	  })) : tetherOffset;
	  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
	    mainAxis: tetherOffsetValue,
	    altAxis: tetherOffsetValue
	  } : Object.assign({
	    mainAxis: 0,
	    altAxis: 0
	  }, tetherOffsetValue);
	  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
	  var data = {
	    x: 0,
	    y: 0
	  };
	  if (!popperOffsets) {
	    return;
	  }
	  if (checkMainAxis) {
	    var _offsetModifierState$;
	    var mainSide = mainAxis === 'y' ? top : left;
	    var altSide = mainAxis === 'y' ? bottom : right;
	    var len = mainAxis === 'y' ? 'height' : 'width';
	    var offset = popperOffsets[mainAxis];
	    var min$1 = offset + overflow[mainSide];
	    var max$1 = offset - overflow[altSide];
	    var additive = tether ? -popperRect[len] / 2 : 0;
	    var minLen = variation === start ? referenceRect[len] : popperRect[len];
	    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
	    // outside the reference bounds

	    var arrowElement = state.elements.arrow;
	    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
	      width: 0,
	      height: 0
	    };
	    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
	    var arrowPaddingMin = arrowPaddingObject[mainSide];
	    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
	    // to include its full size in the calculation. If the reference is small
	    // and near the edge of a boundary, the popper can overflow even if the
	    // reference is not overflowing as well (e.g. virtual elements with no
	    // width or height)

	    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
	    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
	    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
	    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
	    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
	    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
	    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
	    var tetherMax = offset + maxOffset - offsetModifierValue;
	    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
	    popperOffsets[mainAxis] = preventedOffset;
	    data[mainAxis] = preventedOffset - offset;
	  }
	  if (checkAltAxis) {
	    var _offsetModifierState$2;
	    var _mainSide = mainAxis === 'x' ? top : left;
	    var _altSide = mainAxis === 'x' ? bottom : right;
	    var _offset = popperOffsets[altAxis];
	    var _len = altAxis === 'y' ? 'height' : 'width';
	    var _min = _offset + overflow[_mainSide];
	    var _max = _offset - overflow[_altSide];
	    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
	    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
	    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
	    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
	    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
	    popperOffsets[altAxis] = _preventedOffset;
	    data[altAxis] = _preventedOffset - _offset;
	  }
	  state.modifiersData[name] = data;
	} // eslint-disable-next-line import/no-unused-modules

	var preventOverflow$1 = {
	  name: 'preventOverflow',
	  enabled: true,
	  phase: 'main',
	  fn: preventOverflow,
	  requiresIfExists: ['offset']
	};

	function getHTMLElementScroll(element) {
	  return {
	    scrollLeft: element.scrollLeft,
	    scrollTop: element.scrollTop
	  };
	}

	function getNodeScroll(node) {
	  if (node === getWindow(node) || !isHTMLElement$1(node)) {
	    return getWindowScroll(node);
	  } else {
	    return getHTMLElementScroll(node);
	  }
	}

	function isElementScaled(element) {
	  var rect = element.getBoundingClientRect();
	  var scaleX = round$1(rect.width) / element.offsetWidth || 1;
	  var scaleY = round$1(rect.height) / element.offsetHeight || 1;
	  return scaleX !== 1 || scaleY !== 1;
	} // Returns the composite rect of an element relative to its offsetParent.
	// Composite means it takes into account transforms as well as layout.

	function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
	  if (isFixed === void 0) {
	    isFixed = false;
	  }
	  var isOffsetParentAnElement = isHTMLElement$1(offsetParent);
	  var offsetParentIsScaled = isHTMLElement$1(offsetParent) && isElementScaled(offsetParent);
	  var documentElement = getDocumentElement(offsetParent);
	  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
	  var scroll = {
	    scrollLeft: 0,
	    scrollTop: 0
	  };
	  var offsets = {
	    x: 0,
	    y: 0
	  };
	  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
	    if (getNodeName(offsetParent) !== 'body' ||
	    // https://github.com/popperjs/popper-core/issues/1078
	    isScrollParent(documentElement)) {
	      scroll = getNodeScroll(offsetParent);
	    }
	    if (isHTMLElement$1(offsetParent)) {
	      offsets = getBoundingClientRect(offsetParent, true);
	      offsets.x += offsetParent.clientLeft;
	      offsets.y += offsetParent.clientTop;
	    } else if (documentElement) {
	      offsets.x = getWindowScrollBarX(documentElement);
	    }
	  }
	  return {
	    x: rect.left + scroll.scrollLeft - offsets.x,
	    y: rect.top + scroll.scrollTop - offsets.y,
	    width: rect.width,
	    height: rect.height
	  };
	}

	function order(modifiers) {
	  var map = new Map();
	  var visited = new Set();
	  var result = [];
	  modifiers.forEach(function (modifier) {
	    map.set(modifier.name, modifier);
	  }); // On visiting object, check for its dependencies and visit them recursively

	  function sort(modifier) {
	    visited.add(modifier.name);
	    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
	    requires.forEach(function (dep) {
	      if (!visited.has(dep)) {
	        var depModifier = map.get(dep);
	        if (depModifier) {
	          sort(depModifier);
	        }
	      }
	    });
	    result.push(modifier);
	  }
	  modifiers.forEach(function (modifier) {
	    if (!visited.has(modifier.name)) {
	      // check for visited object
	      sort(modifier);
	    }
	  });
	  return result;
	}
	function orderModifiers(modifiers) {
	  // order based on dependencies
	  var orderedModifiers = order(modifiers); // order based on phase

	  return modifierPhases.reduce(function (acc, phase) {
	    return acc.concat(orderedModifiers.filter(function (modifier) {
	      return modifier.phase === phase;
	    }));
	  }, []);
	}

	function debounce(fn) {
	  var pending;
	  return function () {
	    if (!pending) {
	      pending = new Promise(function (resolve) {
	        Promise.resolve().then(function () {
	          pending = undefined;
	          resolve(fn());
	        });
	      });
	    }
	    return pending;
	  };
	}

	function mergeByName(modifiers) {
	  var merged = modifiers.reduce(function (merged, current) {
	    var existing = merged[current.name];
	    merged[current.name] = existing ? Object.assign({}, existing, current, {
	      options: Object.assign({}, existing.options, current.options),
	      data: Object.assign({}, existing.data, current.data)
	    }) : current;
	    return merged;
	  }, {}); // IE11 does not support Object.values

	  return Object.keys(merged).map(function (key) {
	    return merged[key];
	  });
	}

	var DEFAULT_OPTIONS = {
	  placement: 'bottom',
	  modifiers: [],
	  strategy: 'absolute'
	};
	function areValidElements() {
	  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	  return !args.some(function (element) {
	    return !(element && typeof element.getBoundingClientRect === 'function');
	  });
	}
	function popperGenerator(generatorOptions) {
	  if (generatorOptions === void 0) {
	    generatorOptions = {};
	  }
	  var _generatorOptions = generatorOptions,
	    _generatorOptions$def = _generatorOptions.defaultModifiers,
	    defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
	    _generatorOptions$def2 = _generatorOptions.defaultOptions,
	    defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
	  return function createPopper(reference, popper, options) {
	    if (options === void 0) {
	      options = defaultOptions;
	    }
	    var state = {
	      placement: 'bottom',
	      orderedModifiers: [],
	      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
	      modifiersData: {},
	      elements: {
	        reference: reference,
	        popper: popper
	      },
	      attributes: {},
	      styles: {}
	    };
	    var effectCleanupFns = [];
	    var isDestroyed = false;
	    var instance = {
	      state: state,
	      setOptions: function setOptions(setOptionsAction) {
	        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
	        cleanupModifierEffects();
	        state.options = Object.assign({}, defaultOptions, state.options, options);
	        state.scrollParents = {
	          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
	          popper: listScrollParents(popper)
	        }; // Orders the modifiers based on their dependencies and `phase`
	        // properties

	        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

	        state.orderedModifiers = orderedModifiers.filter(function (m) {
	          return m.enabled;
	        });
	        runModifierEffects();
	        return instance.update();
	      },
	      // Sync update – it will always be executed, even if not necessary. This
	      // is useful for low frequency updates where sync behavior simplifies the
	      // logic.
	      // For high frequency updates (e.g. `resize` and `scroll` events), always
	      // prefer the async Popper#update method
	      forceUpdate: function forceUpdate() {
	        if (isDestroyed) {
	          return;
	        }
	        var _state$elements = state.elements,
	          reference = _state$elements.reference,
	          popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
	        // anymore

	        if (!areValidElements(reference, popper)) {
	          return;
	        } // Store the reference and popper rects to be read by modifiers

	        state.rects = {
	          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
	          popper: getLayoutRect(popper)
	        }; // Modifiers have the ability to reset the current update cycle. The
	        // most common use case for this is the `flip` modifier changing the
	        // placement, which then needs to re-run all the modifiers, because the
	        // logic was previously ran for the previous placement and is therefore
	        // stale/incorrect

	        state.reset = false;
	        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
	        // is filled with the initial data specified by the modifier. This means
	        // it doesn't persist and is fresh on each update.
	        // To ensure persistent data, use `${name}#persistent`

	        state.orderedModifiers.forEach(function (modifier) {
	          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
	        });
	        for (var index = 0; index < state.orderedModifiers.length; index++) {
	          if (state.reset === true) {
	            state.reset = false;
	            index = -1;
	            continue;
	          }
	          var _state$orderedModifie = state.orderedModifiers[index],
	            fn = _state$orderedModifie.fn,
	            _state$orderedModifie2 = _state$orderedModifie.options,
	            _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
	            name = _state$orderedModifie.name;
	          if (typeof fn === 'function') {
	            state = fn({
	              state: state,
	              options: _options,
	              name: name,
	              instance: instance
	            }) || state;
	          }
	        }
	      },
	      // Async and optimistically optimized update – it will not be executed if
	      // not necessary (debounced to run at most once-per-tick)
	      update: debounce(function () {
	        return new Promise(function (resolve) {
	          instance.forceUpdate();
	          resolve(state);
	        });
	      }),
	      destroy: function destroy() {
	        cleanupModifierEffects();
	        isDestroyed = true;
	      }
	    };
	    if (!areValidElements(reference, popper)) {
	      return instance;
	    }
	    instance.setOptions(options).then(function (state) {
	      if (!isDestroyed && options.onFirstUpdate) {
	        options.onFirstUpdate(state);
	      }
	    }); // Modifiers have the ability to execute arbitrary code before the first
	    // update cycle runs. They will be executed in the same order as the update
	    // cycle. This is useful when a modifier adds some persistent data that
	    // other modifiers need to use, but the modifier is run after the dependent
	    // one.

	    function runModifierEffects() {
	      state.orderedModifiers.forEach(function (_ref) {
	        var name = _ref.name,
	          _ref$options = _ref.options,
	          options = _ref$options === void 0 ? {} : _ref$options,
	          effect = _ref.effect;
	        if (typeof effect === 'function') {
	          var cleanupFn = effect({
	            state: state,
	            name: name,
	            instance: instance,
	            options: options
	          });
	          var noopFn = function noopFn() {};
	          effectCleanupFns.push(cleanupFn || noopFn);
	        }
	      });
	    }
	    function cleanupModifierEffects() {
	      effectCleanupFns.forEach(function (fn) {
	        return fn();
	      });
	      effectCleanupFns = [];
	    }
	    return instance;
	  };
	}

	var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
	var createPopper = /*#__PURE__*/popperGenerator({
	  defaultModifiers: defaultModifiers
	}); // eslint-disable-next-line import/no-unused-modules

	function getContainer$1(container) {
	  return typeof container === 'function' ? container() : container;
	}

	/**
	 * Portals provide a first-class way to render children into a DOM node
	 * that exists outside the DOM hierarchy of the parent component.
	 *
	 * Demos:
	 *
	 * - [Portal](https://mui.com/base-ui/react-portal/)
	 *
	 * API:
	 *
	 * - [Portal API](https://mui.com/base-ui/react-portal/components-api/#portal)
	 */
	const Portal = /*#__PURE__*/reactExports.forwardRef(function Portal(props, forwardedRef) {
	  const {
	    children,
	    container,
	    disablePortal = false
	  } = props;
	  const [mountNode, setMountNode] = reactExports.useState(null);
	  // @ts-expect-error TODO upstream fix
	  const handleRef = useForkRef( /*#__PURE__*/ /*#__PURE__*/reactExports.isValidElement(children) ? children.ref : null, forwardedRef);
	  useEnhancedEffect$1(() => {
	    if (!disablePortal) {
	      setMountNode(getContainer$1(container) || document.body);
	    }
	  }, [container, disablePortal]);
	  useEnhancedEffect$1(() => {
	    if (mountNode && !disablePortal) {
	      setRef(forwardedRef, mountNode);
	      return () => {
	        setRef(forwardedRef, null);
	      };
	    }
	    return undefined;
	  }, [forwardedRef, mountNode, disablePortal]);
	  if (disablePortal) {
	    if ( /*#__PURE__*/reactExports.isValidElement(children)) {
	      const newProps = {
	        ref: handleRef
	      };
	      return /*#__PURE__*/reactExports.cloneElement(children, newProps);
	    }
	    return /*#__PURE__*/jsxRuntimeExports.jsx(reactExports.Fragment, {
	      children: children
	    });
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(reactExports.Fragment, {
	    children: mountNode ? /*#__PURE__*/reactDomExports.createPortal(children, mountNode) : mountNode
	  });
	});

	function getPopperUtilityClass(slot) {
	  return generateUtilityClass('MuiPopper', slot);
	}
	generateUtilityClasses('MuiPopper', ['root']);

	const _excluded$1L = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps", "ownerState"],
	  _excluded2$d = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
	function flipPlacement(placement, direction) {
	  if (direction === 'ltr') {
	    return placement;
	  }
	  switch (placement) {
	    case 'bottom-end':
	      return 'bottom-start';
	    case 'bottom-start':
	      return 'bottom-end';
	    case 'top-end':
	      return 'top-start';
	    case 'top-start':
	      return 'top-end';
	    default:
	      return placement;
	  }
	}
	function resolveAnchorEl$1(anchorEl) {
	  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
	}
	function isHTMLElement(element) {
	  return element.nodeType !== undefined;
	}
	const useUtilityClasses$1r = () => {
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, useClassNamesOverride(getPopperUtilityClass));
	};
	const defaultPopperOptions = {};
	const PopperTooltip = /*#__PURE__*/reactExports.forwardRef(function PopperTooltip(props, forwardedRef) {
	  var _slots$root;
	  const {
	      anchorEl,
	      children,
	      direction,
	      disablePortal,
	      modifiers,
	      open,
	      placement: initialPlacement,
	      popperOptions,
	      popperRef: popperRefProp,
	      slotProps = {},
	      slots = {},
	      TransitionProps
	      // @ts-ignore internal logic
	      // prevent from spreading to DOM, it can come from the parent component e.g. Select.
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1L);
	  const tooltipRef = reactExports.useRef(null);
	  const ownRef = useForkRef(tooltipRef, forwardedRef);
	  const popperRef = reactExports.useRef(null);
	  const handlePopperRef = useForkRef(popperRef, popperRefProp);
	  const handlePopperRefRef = reactExports.useRef(handlePopperRef);
	  useEnhancedEffect$1(() => {
	    handlePopperRefRef.current = handlePopperRef;
	  }, [handlePopperRef]);
	  reactExports.useImperativeHandle(popperRefProp, () => popperRef.current, []);
	  const rtlPlacement = flipPlacement(initialPlacement, direction);
	  /**
	   * placement initialized from prop but can change during lifetime if modifiers.flip.
	   * modifiers.flip is essentially a flip for controlled/uncontrolled behavior
	   */
	  const [placement, setPlacement] = reactExports.useState(rtlPlacement);
	  const [resolvedAnchorElement, setResolvedAnchorElement] = reactExports.useState(resolveAnchorEl$1(anchorEl));
	  reactExports.useEffect(() => {
	    if (popperRef.current) {
	      popperRef.current.forceUpdate();
	    }
	  });
	  reactExports.useEffect(() => {
	    if (anchorEl) {
	      setResolvedAnchorElement(resolveAnchorEl$1(anchorEl));
	    }
	  }, [anchorEl]);
	  useEnhancedEffect$1(() => {
	    if (!resolvedAnchorElement || !open) {
	      return undefined;
	    }
	    const handlePopperUpdate = data => {
	      setPlacement(data.placement);
	    };
	    let popperModifiers = [{
	      name: 'preventOverflow',
	      options: {
	        altBoundary: disablePortal
	      }
	    }, {
	      name: 'flip',
	      options: {
	        altBoundary: disablePortal
	      }
	    }, {
	      name: 'onUpdate',
	      enabled: true,
	      phase: 'afterWrite',
	      fn: ({
	        state
	      }) => {
	        handlePopperUpdate(state);
	      }
	    }];
	    if (modifiers != null) {
	      popperModifiers = popperModifiers.concat(modifiers);
	    }
	    if (popperOptions && popperOptions.modifiers != null) {
	      popperModifiers = popperModifiers.concat(popperOptions.modifiers);
	    }
	    const popper = createPopper(resolvedAnchorElement, tooltipRef.current, _extends({
	      placement: rtlPlacement
	    }, popperOptions, {
	      modifiers: popperModifiers
	    }));
	    handlePopperRefRef.current(popper);
	    return () => {
	      popper.destroy();
	      handlePopperRefRef.current(null);
	    };
	  }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
	  const childProps = {
	    placement: placement
	  };
	  if (TransitionProps !== null) {
	    childProps.TransitionProps = TransitionProps;
	  }
	  const classes = useUtilityClasses$1r();
	  const Root = (_slots$root = slots.root) != null ? _slots$root : 'div';
	  const rootProps = useSlotProps({
	    elementType: Root,
	    externalSlotProps: slotProps.root,
	    externalForwardedProps: other,
	    additionalProps: {
	      role: 'tooltip',
	      ref: ownRef
	    },
	    ownerState: props,
	    className: classes.root
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Root, _extends({}, rootProps, {
	    children: typeof children === 'function' ? children(childProps) : children
	  }));
	});

	/**
	 * Poppers rely on the 3rd party library [Popper.js](https://popper.js.org/docs/v2/) for positioning.
	 *
	 * Demos:
	 *
	 * - [Popper](https://mui.com/base-ui/react-popper/)
	 *
	 * API:
	 *
	 * - [Popper API](https://mui.com/base-ui/react-popper/components-api/#popper)
	 */
	const Popper$1 = /*#__PURE__*/reactExports.forwardRef(function Popper(props, forwardedRef) {
	  const {
	      anchorEl,
	      children,
	      container: containerProp,
	      direction = 'ltr',
	      disablePortal = false,
	      keepMounted = false,
	      modifiers,
	      open,
	      placement = 'bottom',
	      popperOptions = defaultPopperOptions,
	      popperRef,
	      style,
	      transition = false,
	      slotProps = {},
	      slots = {}
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded2$d);
	  const [exited, setExited] = reactExports.useState(true);
	  const handleEnter = () => {
	    setExited(false);
	  };
	  const handleExited = () => {
	    setExited(true);
	  };
	  if (!keepMounted && !open && (!transition || exited)) {
	    return null;
	  }

	  // If the container prop is provided, use that
	  // If the anchorEl prop is provided, use its parent body element as the container
	  // If neither are provided let the Modal take care of choosing the container
	  let container;
	  if (containerProp) {
	    container = containerProp;
	  } else if (anchorEl) {
	    const resolvedAnchorEl = resolveAnchorEl$1(anchorEl);
	    container = resolvedAnchorEl && isHTMLElement(resolvedAnchorEl) ? ownerDocument(resolvedAnchorEl).body : ownerDocument(null).body;
	  }
	  const display = !open && keepMounted && (!transition || exited) ? 'none' : undefined;
	  const transitionProps = transition ? {
	    in: open,
	    onEnter: handleEnter,
	    onExited: handleExited
	  } : undefined;
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Portal, {
	    disablePortal: disablePortal,
	    container: container,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(PopperTooltip, _extends({
	      anchorEl: anchorEl,
	      direction: direction,
	      disablePortal: disablePortal,
	      modifiers: modifiers,
	      ref: forwardedRef,
	      open: transition ? !exited : open,
	      placement: placement,
	      popperOptions: popperOptions,
	      popperRef: popperRef,
	      slotProps: slotProps,
	      slots: slots
	    }, other, {
	      style: _extends({
	        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
	        position: 'fixed',
	        // Fix Popper.js display issue
	        top: 0,
	        left: 0,
	        display
	      }, style),
	      TransitionProps: transitionProps,
	      children: children
	    }))
	  });
	});

	// Is a vertical scrollbar displayed?
	function isOverflowing(container) {
	  const doc = ownerDocument(container);
	  if (doc.body === container) {
	    return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
	  }
	  return container.scrollHeight > container.clientHeight;
	}
	function ariaHidden(element, show) {
	  if (show) {
	    element.setAttribute('aria-hidden', 'true');
	  } else {
	    element.removeAttribute('aria-hidden');
	  }
	}
	function getPaddingRight(element) {
	  return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
	}
	function isAriaHiddenForbiddenOnElement(element) {
	  // The forbidden HTML tags are the ones from ARIA specification that
	  // can be children of body and can't have aria-hidden attribute.
	  // cf. https://www.w3.org/TR/html-aria/#docconformance
	  const forbiddenTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE', 'LINK', 'MAP', 'META', 'NOSCRIPT', 'PICTURE', 'COL', 'COLGROUP', 'PARAM', 'SLOT', 'SOURCE', 'TRACK'];
	  const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
	  const isInputHidden = element.tagName === 'INPUT' && element.getAttribute('type') === 'hidden';
	  return isForbiddenTagName || isInputHidden;
	}
	function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
	  const blacklist = [mountElement, currentElement, ...elementsToExclude];
	  [].forEach.call(container.children, element => {
	    const isNotExcludedElement = blacklist.indexOf(element) === -1;
	    const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
	    if (isNotExcludedElement && isNotForbiddenElement) {
	      ariaHidden(element, show);
	    }
	  });
	}
	function findIndexOf(items, callback) {
	  let idx = -1;
	  items.some((item, index) => {
	    if (callback(item)) {
	      idx = index;
	      return true;
	    }
	    return false;
	  });
	  return idx;
	}
	function handleContainer(containerInfo, props) {
	  const restoreStyle = [];
	  const container = containerInfo.container;
	  if (!props.disableScrollLock) {
	    if (isOverflowing(container)) {
	      // Compute the size before applying overflow hidden to avoid any scroll jumps.
	      const scrollbarSize = getScrollbarSize(ownerDocument(container));
	      restoreStyle.push({
	        value: container.style.paddingRight,
	        property: 'padding-right',
	        el: container
	      });
	      // Use computed style, here to get the real padding to add our scrollbar width.
	      container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;

	      // .mui-fixed is a global helper.
	      const fixedElements = ownerDocument(container).querySelectorAll('.mui-fixed');
	      [].forEach.call(fixedElements, element => {
	        restoreStyle.push({
	          value: element.style.paddingRight,
	          property: 'padding-right',
	          el: element
	        });
	        element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
	      });
	    }
	    let scrollContainer;
	    if (container.parentNode instanceof DocumentFragment) {
	      scrollContainer = ownerDocument(container).body;
	    } else {
	      // Support html overflow-y: auto for scroll stability between pages
	      // https://css-tricks.com/snippets/css/force-vertical-scrollbar/
	      const parent = container.parentElement;
	      const containerWindow = ownerWindow(container);
	      scrollContainer = (parent == null ? void 0 : parent.nodeName) === 'HTML' && containerWindow.getComputedStyle(parent).overflowY === 'scroll' ? parent : container;
	    }

	    // Block the scroll even if no scrollbar is visible to account for mobile keyboard
	    // screensize shrink.
	    restoreStyle.push({
	      value: scrollContainer.style.overflow,
	      property: 'overflow',
	      el: scrollContainer
	    }, {
	      value: scrollContainer.style.overflowX,
	      property: 'overflow-x',
	      el: scrollContainer
	    }, {
	      value: scrollContainer.style.overflowY,
	      property: 'overflow-y',
	      el: scrollContainer
	    });
	    scrollContainer.style.overflow = 'hidden';
	  }
	  const restore = () => {
	    restoreStyle.forEach(({
	      value,
	      el,
	      property
	    }) => {
	      if (value) {
	        el.style.setProperty(property, value);
	      } else {
	        el.style.removeProperty(property);
	      }
	    });
	  };
	  return restore;
	}
	function getHiddenSiblings(container) {
	  const hiddenSiblings = [];
	  [].forEach.call(container.children, element => {
	    if (element.getAttribute('aria-hidden') === 'true') {
	      hiddenSiblings.push(element);
	    }
	  });
	  return hiddenSiblings;
	}
	/**
	 * @ignore - do not document.
	 *
	 * Proper state management for containers and the modals in those containers.
	 * Simplified, but inspired by react-overlay's ModalManager class.
	 * Used by the Modal to ensure proper styling of containers.
	 */
	class ModalManager {
	  constructor() {
	    this.containers = void 0;
	    this.modals = void 0;
	    this.modals = [];
	    this.containers = [];
	  }
	  add(modal, container) {
	    let modalIndex = this.modals.indexOf(modal);
	    if (modalIndex !== -1) {
	      return modalIndex;
	    }
	    modalIndex = this.modals.length;
	    this.modals.push(modal);

	    // If the modal we are adding is already in the DOM.
	    if (modal.modalRef) {
	      ariaHidden(modal.modalRef, false);
	    }
	    const hiddenSiblings = getHiddenSiblings(container);
	    ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
	    const containerIndex = findIndexOf(this.containers, item => item.container === container);
	    if (containerIndex !== -1) {
	      this.containers[containerIndex].modals.push(modal);
	      return modalIndex;
	    }
	    this.containers.push({
	      modals: [modal],
	      container,
	      restore: null,
	      hiddenSiblings
	    });
	    return modalIndex;
	  }
	  mount(modal, props) {
	    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
	    const containerInfo = this.containers[containerIndex];
	    if (!containerInfo.restore) {
	      containerInfo.restore = handleContainer(containerInfo, props);
	    }
	  }
	  remove(modal, ariaHiddenState = true) {
	    const modalIndex = this.modals.indexOf(modal);
	    if (modalIndex === -1) {
	      return modalIndex;
	    }
	    const containerIndex = findIndexOf(this.containers, item => item.modals.indexOf(modal) !== -1);
	    const containerInfo = this.containers[containerIndex];
	    containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
	    this.modals.splice(modalIndex, 1);

	    // If that was the last modal in a container, clean up the container.
	    if (containerInfo.modals.length === 0) {
	      // The modal might be closed before it had the chance to be mounted in the DOM.
	      if (containerInfo.restore) {
	        containerInfo.restore();
	      }
	      if (modal.modalRef) {
	        // In case the modal wasn't in the DOM yet.
	        ariaHidden(modal.modalRef, ariaHiddenState);
	      }
	      ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
	      this.containers.splice(containerIndex, 1);
	    } else {
	      // Otherwise make sure the next top modal is visible to a screen reader.
	      const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
	      // as soon as a modal is adding its modalRef is undefined. it can't set
	      // aria-hidden because the dom element doesn't exist either
	      // when modal was unmounted before modalRef gets null
	      if (nextTop.modalRef) {
	        ariaHidden(nextTop.modalRef, false);
	      }
	    }
	    return modalIndex;
	  }
	  isTopModal(modal) {
	    return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
	  }
	}

	function getContainer(container) {
	  return typeof container === 'function' ? container() : container;
	}
	function getHasTransition(children) {
	  return children ? children.props.hasOwnProperty('in') : false;
	}

	// A modal manager used to track and manage the state of open Modals.
	// Modals don't open on the server so this won't conflict with concurrent requests.
	const defaultManager = new ModalManager();
	/**
	 *
	 * Demos:
	 *
	 * - [Modal](https://mui.com/base-ui/react-modal/#hook)
	 *
	 * API:
	 *
	 * - [useModal API](https://mui.com/base-ui/react-modal/hooks-api/#use-modal)
	 */
	function useModal(parameters) {
	  const {
	    container,
	    disableEscapeKeyDown = false,
	    disableScrollLock = false,
	    // @ts-ignore internal logic - Base UI supports the manager as a prop too
	    manager = defaultManager,
	    closeAfterTransition = false,
	    onTransitionEnter,
	    onTransitionExited,
	    children,
	    onClose,
	    open,
	    rootRef
	  } = parameters;

	  // @ts-ignore internal logic
	  const modal = reactExports.useRef({});
	  const mountNodeRef = reactExports.useRef(null);
	  const modalRef = reactExports.useRef(null);
	  const handleRef = useForkRef(modalRef, rootRef);
	  const [exited, setExited] = reactExports.useState(!open);
	  const hasTransition = getHasTransition(children);
	  let ariaHiddenProp = true;
	  if (parameters['aria-hidden'] === 'false' || parameters['aria-hidden'] === false) {
	    ariaHiddenProp = false;
	  }
	  const getDoc = () => ownerDocument(mountNodeRef.current);
	  const getModal = () => {
	    modal.current.modalRef = modalRef.current;
	    modal.current.mount = mountNodeRef.current;
	    return modal.current;
	  };
	  const handleMounted = () => {
	    manager.mount(getModal(), {
	      disableScrollLock
	    });

	    // Fix a bug on Chrome where the scroll isn't initially 0.
	    if (modalRef.current) {
	      modalRef.current.scrollTop = 0;
	    }
	  };
	  const handleOpen = useEventCallback(() => {
	    const resolvedContainer = getContainer(container) || getDoc().body;
	    manager.add(getModal(), resolvedContainer);

	    // The element was already mounted.
	    if (modalRef.current) {
	      handleMounted();
	    }
	  });
	  const isTopModal = reactExports.useCallback(() => manager.isTopModal(getModal()), [manager]);
	  const handlePortalRef = useEventCallback(node => {
	    mountNodeRef.current = node;
	    if (!node) {
	      return;
	    }
	    if (open && isTopModal()) {
	      handleMounted();
	    } else if (modalRef.current) {
	      ariaHidden(modalRef.current, ariaHiddenProp);
	    }
	  });
	  const handleClose = reactExports.useCallback(() => {
	    manager.remove(getModal(), ariaHiddenProp);
	  }, [ariaHiddenProp, manager]);
	  reactExports.useEffect(() => {
	    return () => {
	      handleClose();
	    };
	  }, [handleClose]);
	  reactExports.useEffect(() => {
	    if (open) {
	      handleOpen();
	    } else if (!hasTransition || !closeAfterTransition) {
	      handleClose();
	    }
	  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
	  const createHandleKeyDown = otherHandlers => event => {
	    var _otherHandlers$onKeyD;
	    (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);

	    // The handler doesn't take event.defaultPrevented into account:
	    //
	    // event.preventDefault() is meant to stop default behaviors like
	    // clicking a checkbox to check it, hitting a button to submit a form,
	    // and hitting left arrow to move the cursor in a text input etc.
	    // Only special HTML elements have these default behaviors.
	    if (event.key !== 'Escape' || event.which === 229 ||
	    // Wait until IME is settled.
	    !isTopModal()) {
	      return;
	    }
	    if (!disableEscapeKeyDown) {
	      // Swallow the event, in case someone is listening for the escape key on the body.
	      event.stopPropagation();
	      if (onClose) {
	        onClose(event, 'escapeKeyDown');
	      }
	    }
	  };
	  const createHandleBackdropClick = otherHandlers => event => {
	    var _otherHandlers$onClic;
	    (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
	    if (event.target !== event.currentTarget) {
	      return;
	    }
	    if (onClose) {
	      onClose(event, 'backdropClick');
	    }
	  };
	  const getRootProps = (otherHandlers = {}) => {
	    const propsEventHandlers = extractEventHandlers(parameters);

	    // The custom event handlers shouldn't be spread on the root element
	    delete propsEventHandlers.onTransitionEnter;
	    delete propsEventHandlers.onTransitionExited;
	    const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);
	    return _extends({
	      role: 'presentation'
	    }, externalEventHandlers, {
	      onKeyDown: createHandleKeyDown(externalEventHandlers),
	      ref: handleRef
	    });
	  };
	  const getBackdropProps = (otherHandlers = {}) => {
	    const externalEventHandlers = otherHandlers;
	    return _extends({
	      'aria-hidden': true
	    }, externalEventHandlers, {
	      onClick: createHandleBackdropClick(externalEventHandlers),
	      open
	    });
	  };
	  const getTransitionProps = () => {
	    const handleEnter = () => {
	      setExited(false);
	      if (onTransitionEnter) {
	        onTransitionEnter();
	      }
	    };
	    const handleExited = () => {
	      setExited(true);
	      if (onTransitionExited) {
	        onTransitionExited();
	      }
	      if (closeAfterTransition) {
	        handleClose();
	      }
	    };
	    return {
	      onEnter: createChainedFunction(handleEnter, children == null ? void 0 : children.props.onEnter),
	      onExited: createChainedFunction(handleExited, children == null ? void 0 : children.props.onExited)
	    };
	  };
	  return {
	    getRootProps,
	    getBackdropProps,
	    getTransitionProps,
	    rootRef: handleRef,
	    portalRef: handlePortalRef,
	    isTopModal,
	    exited,
	    hasTransition
	  };
	}

	const INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
	function asc(a, b) {
	  return a - b;
	}
	function clamp(value, min, max) {
	  if (value == null) {
	    return min;
	  }
	  return Math.min(Math.max(min, value), max);
	}
	function findClosest(values, currentValue) {
	  var _values$reduce;
	  const {
	    index: closestIndex
	  } = (_values$reduce = values.reduce((acc, value, index) => {
	    const distance = Math.abs(currentValue - value);
	    if (acc === null || distance < acc.distance || distance === acc.distance) {
	      return {
	        distance,
	        index
	      };
	    }
	    return acc;
	  }, null)) != null ? _values$reduce : {};
	  return closestIndex;
	}
	function trackFinger(event, touchId) {
	  // The event is TouchEvent
	  if (touchId.current !== undefined && event.changedTouches) {
	    const touchEvent = event;
	    for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
	      const touch = touchEvent.changedTouches[i];
	      if (touch.identifier === touchId.current) {
	        return {
	          x: touch.clientX,
	          y: touch.clientY
	        };
	      }
	    }
	    return false;
	  }

	  // The event is MouseEvent
	  return {
	    x: event.clientX,
	    y: event.clientY
	  };
	}
	function valueToPercent(value, min, max) {
	  return (value - min) * 100 / (max - min);
	}
	function percentToValue(percent, min, max) {
	  return (max - min) * percent + min;
	}
	function getDecimalPrecision(num) {
	  // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.
	  // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.
	  if (Math.abs(num) < 1) {
	    const parts = num.toExponential().split('e-');
	    const matissaDecimalPart = parts[0].split('.')[1];
	    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
	  }
	  const decimalPart = num.toString().split('.')[1];
	  return decimalPart ? decimalPart.length : 0;
	}
	function roundValueToStep(value, step, min) {
	  const nearest = Math.round((value - min) / step) * step + min;
	  return Number(nearest.toFixed(getDecimalPrecision(step)));
	}
	function setValueIndex({
	  values,
	  newValue,
	  index
	}) {
	  const output = values.slice();
	  output[index] = newValue;
	  return output.sort(asc);
	}
	function focusThumb({
	  sliderRef,
	  activeIndex,
	  setActive
	}) {
	  var _sliderRef$current, _doc$activeElement;
	  const doc = ownerDocument(sliderRef.current);
	  if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null || (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute('data-index')) !== activeIndex) {
	    var _sliderRef$current2;
	    (_sliderRef$current2 = sliderRef.current) == null || _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
	  }
	  if (setActive) {
	    setActive(activeIndex);
	  }
	}
	function areValuesEqual(newValue, oldValue) {
	  if (typeof newValue === 'number' && typeof oldValue === 'number') {
	    return newValue === oldValue;
	  }
	  if (typeof newValue === 'object' && typeof oldValue === 'object') {
	    return areArraysEqual(newValue, oldValue);
	  }
	  return false;
	}
	const axisProps = {
	  horizontal: {
	    offset: percent => ({
	      left: `${percent}%`
	    }),
	    leap: percent => ({
	      width: `${percent}%`
	    })
	  },
	  'horizontal-reverse': {
	    offset: percent => ({
	      right: `${percent}%`
	    }),
	    leap: percent => ({
	      width: `${percent}%`
	    })
	  },
	  vertical: {
	    offset: percent => ({
	      bottom: `${percent}%`
	    }),
	    leap: percent => ({
	      height: `${percent}%`
	    })
	  }
	};
	const Identity$1 = x => x;

	// TODO: remove support for Safari < 13.
	// https://caniuse.com/#search=touch-action
	//
	// Safari, on iOS, supports touch action since v13.
	// Over 80% of the iOS phones are compatible
	// in August 2020.
	// Utilizing the CSS.supports method to check if touch-action is supported.
	// Since CSS.supports is supported on all but Edge@12 and IE and touch-action
	// is supported on both Edge@12 and IE if CSS.supports is not available that means that
	// touch-action will be supported
	let cachedSupportsTouchActionNone;
	function doesSupportTouchActionNone() {
	  if (cachedSupportsTouchActionNone === undefined) {
	    if (typeof CSS !== 'undefined' && typeof CSS.supports === 'function') {
	      cachedSupportsTouchActionNone = CSS.supports('touch-action', 'none');
	    } else {
	      cachedSupportsTouchActionNone = true;
	    }
	  }
	  return cachedSupportsTouchActionNone;
	}
	/**
	 *
	 * Demos:
	 *
	 * - [Slider](https://mui.com/base-ui/react-slider/#hook)
	 *
	 * API:
	 *
	 * - [useSlider API](https://mui.com/base-ui/react-slider/hooks-api/#use-slider)
	 */
	function useSlider(parameters) {
	  const {
	    'aria-labelledby': ariaLabelledby,
	    defaultValue,
	    disabled = false,
	    disableSwap = false,
	    isRtl = false,
	    marks: marksProp = false,
	    max = 100,
	    min = 0,
	    name,
	    onChange,
	    onChangeCommitted,
	    orientation = 'horizontal',
	    rootRef: ref,
	    scale = Identity$1,
	    step = 1,
	    tabIndex,
	    value: valueProp
	  } = parameters;
	  const touchId = reactExports.useRef();
	  // We can't use the :active browser pseudo-classes.
	  // - The active state isn't triggered when clicking on the rail.
	  // - The active state isn't transferred when inversing a range slider.
	  const [active, setActive] = reactExports.useState(-1);
	  const [open, setOpen] = reactExports.useState(-1);
	  const [dragging, setDragging] = reactExports.useState(false);
	  const moveCount = reactExports.useRef(0);
	  const [valueDerived, setValueState] = useControlled({
	    controlled: valueProp,
	    default: defaultValue != null ? defaultValue : min,
	    name: 'Slider'
	  });
	  const handleChange = onChange && ((event, value, thumbIndex) => {
	    // Redefine target to allow name and value to be read.
	    // This allows seamless integration with the most popular form libraries.
	    // https://github.com/mui/material-ui/issues/13485#issuecomment-676048492
	    // Clone the event to not override `target` of the original event.
	    const nativeEvent = event.nativeEvent || event;
	    // @ts-ignore The nativeEvent is function, not object
	    const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
	    Object.defineProperty(clonedEvent, 'target', {
	      writable: true,
	      value: {
	        value,
	        name
	      }
	    });
	    onChange(clonedEvent, value, thumbIndex);
	  });
	  const range = Array.isArray(valueDerived);
	  let values = range ? valueDerived.slice().sort(asc) : [valueDerived];
	  values = values.map(value => clamp(value, min, max));
	  const marks = marksProp === true && step !== null ? [...Array(Math.floor((max - min) / step) + 1)].map((_, index) => ({
	    value: min + step * index
	  })) : marksProp || [];
	  const marksValues = marks.map(mark => mark.value);
	  const {
	    isFocusVisibleRef,
	    onBlur: handleBlurVisible,
	    onFocus: handleFocusVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  const [focusedThumbIndex, setFocusedThumbIndex] = reactExports.useState(-1);
	  const sliderRef = reactExports.useRef();
	  const handleFocusRef = useForkRef(focusVisibleRef, sliderRef);
	  const handleRef = useForkRef(ref, handleFocusRef);
	  const createHandleHiddenInputFocus = otherHandlers => event => {
	    var _otherHandlers$onFocu;
	    const index = Number(event.currentTarget.getAttribute('data-index'));
	    handleFocusVisible(event);
	    if (isFocusVisibleRef.current === true) {
	      setFocusedThumbIndex(index);
	    }
	    setOpen(index);
	    otherHandlers == null || (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
	  };
	  const createHandleHiddenInputBlur = otherHandlers => event => {
	    var _otherHandlers$onBlur;
	    handleBlurVisible(event);
	    if (isFocusVisibleRef.current === false) {
	      setFocusedThumbIndex(-1);
	    }
	    setOpen(-1);
	    otherHandlers == null || (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
	  };
	  useEnhancedEffect$1(() => {
	    if (disabled && sliderRef.current.contains(document.activeElement)) {
	      var _document$activeEleme;
	      // This is necessary because Firefox and Safari will keep focus
	      // on a disabled element:
	      // https://codesandbox.io/p/sandbox/mui-pr-22247-forked-h151h?file=/src/App.js
	      // @ts-ignore
	      (_document$activeEleme = document.activeElement) == null || _document$activeEleme.blur();
	    }
	  }, [disabled]);
	  if (disabled && active !== -1) {
	    setActive(-1);
	  }
	  if (disabled && focusedThumbIndex !== -1) {
	    setFocusedThumbIndex(-1);
	  }
	  const createHandleHiddenInputChange = otherHandlers => event => {
	    var _otherHandlers$onChan;
	    (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event);
	    const index = Number(event.currentTarget.getAttribute('data-index'));
	    const value = values[index];
	    const marksIndex = marksValues.indexOf(value);

	    // @ts-ignore
	    let newValue = event.target.valueAsNumber;
	    if (marks && step == null) {
	      const maxMarksValue = marksValues[marksValues.length - 1];
	      if (newValue > maxMarksValue) {
	        newValue = maxMarksValue;
	      } else if (newValue < marksValues[0]) {
	        newValue = marksValues[0];
	      } else {
	        newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
	      }
	    }
	    newValue = clamp(newValue, min, max);
	    if (range) {
	      // Bound the new value to the thumb's neighbours.
	      if (disableSwap) {
	        newValue = clamp(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);
	      }
	      const previousValue = newValue;
	      newValue = setValueIndex({
	        values,
	        newValue,
	        index
	      });
	      let activeIndex = index;

	      // Potentially swap the index if needed.
	      if (!disableSwap) {
	        activeIndex = newValue.indexOf(previousValue);
	      }
	      focusThumb({
	        sliderRef,
	        activeIndex
	      });
	    }
	    setValueState(newValue);
	    setFocusedThumbIndex(index);
	    if (handleChange && !areValuesEqual(newValue, valueDerived)) {
	      handleChange(event, newValue, index);
	    }
	    if (onChangeCommitted) {
	      onChangeCommitted(event, newValue);
	    }
	  };
	  const previousIndex = reactExports.useRef();
	  let axis = orientation;
	  if (isRtl && orientation === 'horizontal') {
	    axis += '-reverse';
	  }
	  const getFingerNewValue = ({
	    finger,
	    move = false
	  }) => {
	    const {
	      current: slider
	    } = sliderRef;
	    const {
	      width,
	      height,
	      bottom,
	      left
	    } = slider.getBoundingClientRect();
	    let percent;
	    if (axis.indexOf('vertical') === 0) {
	      percent = (bottom - finger.y) / height;
	    } else {
	      percent = (finger.x - left) / width;
	    }
	    if (axis.indexOf('-reverse') !== -1) {
	      percent = 1 - percent;
	    }
	    let newValue;
	    newValue = percentToValue(percent, min, max);
	    if (step) {
	      newValue = roundValueToStep(newValue, step, min);
	    } else {
	      const closestIndex = findClosest(marksValues, newValue);
	      newValue = marksValues[closestIndex];
	    }
	    newValue = clamp(newValue, min, max);
	    let activeIndex = 0;
	    if (range) {
	      if (!move) {
	        activeIndex = findClosest(values, newValue);
	      } else {
	        activeIndex = previousIndex.current;
	      }

	      // Bound the new value to the thumb's neighbours.
	      if (disableSwap) {
	        newValue = clamp(newValue, values[activeIndex - 1] || -Infinity, values[activeIndex + 1] || Infinity);
	      }
	      const previousValue = newValue;
	      newValue = setValueIndex({
	        values,
	        newValue,
	        index: activeIndex
	      });

	      // Potentially swap the index if needed.
	      if (!(disableSwap && move)) {
	        activeIndex = newValue.indexOf(previousValue);
	        previousIndex.current = activeIndex;
	      }
	    }
	    return {
	      newValue,
	      activeIndex
	    };
	  };
	  const handleTouchMove = useEventCallback(nativeEvent => {
	    const finger = trackFinger(nativeEvent, touchId);
	    if (!finger) {
	      return;
	    }
	    moveCount.current += 1;

	    // Cancel move in case some other element consumed a mouseup event and it was not fired.
	    // @ts-ignore buttons doesn't not exists on touch event
	    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {
	      // eslint-disable-next-line @typescript-eslint/no-use-before-define
	      handleTouchEnd(nativeEvent);
	      return;
	    }
	    const {
	      newValue,
	      activeIndex
	    } = getFingerNewValue({
	      finger,
	      move: true
	    });
	    focusThumb({
	      sliderRef,
	      activeIndex,
	      setActive
	    });
	    setValueState(newValue);
	    if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
	      setDragging(true);
	    }
	    if (handleChange && !areValuesEqual(newValue, valueDerived)) {
	      handleChange(nativeEvent, newValue, activeIndex);
	    }
	  });
	  const handleTouchEnd = useEventCallback(nativeEvent => {
	    const finger = trackFinger(nativeEvent, touchId);
	    setDragging(false);
	    if (!finger) {
	      return;
	    }
	    const {
	      newValue
	    } = getFingerNewValue({
	      finger,
	      move: true
	    });
	    setActive(-1);
	    if (nativeEvent.type === 'touchend') {
	      setOpen(-1);
	    }
	    if (onChangeCommitted) {
	      onChangeCommitted(nativeEvent, newValue);
	    }
	    touchId.current = undefined;

	    // eslint-disable-next-line @typescript-eslint/no-use-before-define
	    stopListening();
	  });
	  const handleTouchStart = useEventCallback(nativeEvent => {
	    if (disabled) {
	      return;
	    }
	    // If touch-action: none; is not supported we need to prevent the scroll manually.
	    if (!doesSupportTouchActionNone()) {
	      nativeEvent.preventDefault();
	    }
	    const touch = nativeEvent.changedTouches[0];
	    if (touch != null) {
	      // A number that uniquely identifies the current finger in the touch session.
	      touchId.current = touch.identifier;
	    }
	    const finger = trackFinger(nativeEvent, touchId);
	    if (finger !== false) {
	      const {
	        newValue,
	        activeIndex
	      } = getFingerNewValue({
	        finger
	      });
	      focusThumb({
	        sliderRef,
	        activeIndex,
	        setActive
	      });
	      setValueState(newValue);
	      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
	        handleChange(nativeEvent, newValue, activeIndex);
	      }
	    }
	    moveCount.current = 0;
	    const doc = ownerDocument(sliderRef.current);
	    doc.addEventListener('touchmove', handleTouchMove, {
	      passive: true
	    });
	    doc.addEventListener('touchend', handleTouchEnd, {
	      passive: true
	    });
	  });
	  const stopListening = reactExports.useCallback(() => {
	    const doc = ownerDocument(sliderRef.current);
	    doc.removeEventListener('mousemove', handleTouchMove);
	    doc.removeEventListener('mouseup', handleTouchEnd);
	    doc.removeEventListener('touchmove', handleTouchMove);
	    doc.removeEventListener('touchend', handleTouchEnd);
	  }, [handleTouchEnd, handleTouchMove]);
	  reactExports.useEffect(() => {
	    const {
	      current: slider
	    } = sliderRef;
	    slider.addEventListener('touchstart', handleTouchStart, {
	      passive: doesSupportTouchActionNone()
	    });
	    return () => {
	      slider.removeEventListener('touchstart', handleTouchStart);
	      stopListening();
	    };
	  }, [stopListening, handleTouchStart]);
	  reactExports.useEffect(() => {
	    if (disabled) {
	      stopListening();
	    }
	  }, [disabled, stopListening]);
	  const createHandleMouseDown = otherHandlers => event => {
	    var _otherHandlers$onMous;
	    (_otherHandlers$onMous = otherHandlers.onMouseDown) == null || _otherHandlers$onMous.call(otherHandlers, event);
	    if (disabled) {
	      return;
	    }
	    if (event.defaultPrevented) {
	      return;
	    }

	    // Only handle left clicks
	    if (event.button !== 0) {
	      return;
	    }

	    // Avoid text selection
	    event.preventDefault();
	    const finger = trackFinger(event, touchId);
	    if (finger !== false) {
	      const {
	        newValue,
	        activeIndex
	      } = getFingerNewValue({
	        finger
	      });
	      focusThumb({
	        sliderRef,
	        activeIndex,
	        setActive
	      });
	      setValueState(newValue);
	      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
	        handleChange(event, newValue, activeIndex);
	      }
	    }
	    moveCount.current = 0;
	    const doc = ownerDocument(sliderRef.current);
	    doc.addEventListener('mousemove', handleTouchMove, {
	      passive: true
	    });
	    doc.addEventListener('mouseup', handleTouchEnd);
	  };
	  const trackOffset = valueToPercent(range ? values[0] : min, min, max);
	  const trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;
	  const getRootProps = (externalProps = {}) => {
	    const externalHandlers = extractEventHandlers(externalProps);
	    const ownEventHandlers = {
	      onMouseDown: createHandleMouseDown(externalHandlers || {})
	    };
	    const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);
	    return _extends({}, externalProps, {
	      ref: handleRef
	    }, mergedEventHandlers);
	  };
	  const createHandleMouseOver = otherHandlers => event => {
	    var _otherHandlers$onMous2;
	    (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null || _otherHandlers$onMous2.call(otherHandlers, event);
	    const index = Number(event.currentTarget.getAttribute('data-index'));
	    setOpen(index);
	  };
	  const createHandleMouseLeave = otherHandlers => event => {
	    var _otherHandlers$onMous3;
	    (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous3.call(otherHandlers, event);
	    setOpen(-1);
	  };
	  const getThumbProps = (externalProps = {}) => {
	    const externalHandlers = extractEventHandlers(externalProps);
	    const ownEventHandlers = {
	      onMouseOver: createHandleMouseOver(externalHandlers || {}),
	      onMouseLeave: createHandleMouseLeave(externalHandlers || {})
	    };
	    return _extends({}, externalProps, externalHandlers, ownEventHandlers);
	  };
	  const getThumbStyle = index => {
	    return {
	      // So the non active thumb doesn't show its label on hover.
	      pointerEvents: active !== -1 && active !== index ? 'none' : undefined
	    };
	  };
	  const getHiddenInputProps = (externalProps = {}) => {
	    var _parameters$step;
	    const externalHandlers = extractEventHandlers(externalProps);
	    const ownEventHandlers = {
	      onChange: createHandleHiddenInputChange(externalHandlers || {}),
	      onFocus: createHandleHiddenInputFocus(externalHandlers || {}),
	      onBlur: createHandleHiddenInputBlur(externalHandlers || {})
	    };
	    const mergedEventHandlers = _extends({}, externalHandlers, ownEventHandlers);
	    return _extends({
	      tabIndex,
	      'aria-labelledby': ariaLabelledby,
	      'aria-orientation': orientation,
	      'aria-valuemax': scale(max),
	      'aria-valuemin': scale(min),
	      name,
	      type: 'range',
	      min: parameters.min,
	      max: parameters.max,
	      step: parameters.step === null && parameters.marks ? 'any' : (_parameters$step = parameters.step) != null ? _parameters$step : undefined,
	      disabled
	    }, externalProps, mergedEventHandlers, {
	      style: _extends({}, visuallyHidden$1, {
	        direction: isRtl ? 'rtl' : 'ltr',
	        // So that VoiceOver's focus indicator matches the thumb's dimensions
	        width: '100%',
	        height: '100%'
	      })
	    });
	  };
	  return {
	    active,
	    axis: axis,
	    axisProps,
	    dragging,
	    focusedThumbIndex,
	    getHiddenInputProps,
	    getRootProps,
	    getThumbProps,
	    marks: marks,
	    open,
	    range,
	    rootRef: handleRef,
	    trackLeap,
	    trackOffset,
	    values,
	    getThumbStyle
	  };
	}

	const _excluded$1K = ["onChange", "maxRows", "minRows", "style", "value"];
	function getStyleValue(value) {
	  return parseInt(value, 10) || 0;
	}
	const styles$4 = {
	  shadow: {
	    // Visibility needed to hide the extra text area on iPads
	    visibility: 'hidden',
	    // Remove from the content flow
	    position: 'absolute',
	    // Ignore the scrollbar width
	    overflow: 'hidden',
	    height: 0,
	    top: 0,
	    left: 0,
	    // Create a new layer, increase the isolation of the computed values
	    transform: 'translateZ(0)'
	  }
	};
	function isEmpty$1(obj) {
	  return obj === undefined || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;
	}

	/**
	 *
	 * Demos:
	 *
	 * - [Textarea Autosize](https://mui.com/base-ui/react-textarea-autosize/)
	 * - [Textarea Autosize](https://mui.com/material-ui/react-textarea-autosize/)
	 *
	 * API:
	 *
	 * - [TextareaAutosize API](https://mui.com/base-ui/react-textarea-autosize/components-api/#textarea-autosize)
	 */
	const TextareaAutosize = /*#__PURE__*/reactExports.forwardRef(function TextareaAutosize(props, forwardedRef) {
	  const {
	      onChange,
	      maxRows,
	      minRows = 1,
	      style,
	      value
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1K);
	  const {
	    current: isControlled
	  } = reactExports.useRef(value != null);
	  const inputRef = reactExports.useRef(null);
	  const handleRef = useForkRef(forwardedRef, inputRef);
	  const shadowRef = reactExports.useRef(null);
	  const renders = reactExports.useRef(0);
	  const [state, setState] = reactExports.useState({
	    outerHeightStyle: 0
	  });
	  const getUpdatedState = reactExports.useCallback(() => {
	    const input = inputRef.current;
	    const containerWindow = ownerWindow(input);
	    const computedStyle = containerWindow.getComputedStyle(input);

	    // If input's width is shrunk and it's not visible, don't sync height.
	    if (computedStyle.width === '0px') {
	      return {
	        outerHeightStyle: 0
	      };
	    }
	    const inputShallow = shadowRef.current;
	    inputShallow.style.width = computedStyle.width;
	    inputShallow.value = input.value || props.placeholder || 'x';
	    if (inputShallow.value.slice(-1) === '\n') {
	      // Certain fonts which overflow the line height will cause the textarea
	      // to report a different scrollHeight depending on whether the last line
	      // is empty. Make it non-empty to avoid this issue.
	      inputShallow.value += ' ';
	    }
	    const boxSizing = computedStyle.boxSizing;
	    const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);
	    const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);

	    // The height of the inner content
	    const innerHeight = inputShallow.scrollHeight;

	    // Measure height of a textarea with a single row
	    inputShallow.value = 'x';
	    const singleRowHeight = inputShallow.scrollHeight;

	    // The height of the outer content
	    let outerHeight = innerHeight;
	    if (minRows) {
	      outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
	    }
	    if (maxRows) {
	      outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
	    }
	    outerHeight = Math.max(outerHeight, singleRowHeight);

	    // Take the box sizing into account for applying this value as a style.
	    const outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
	    const overflow = Math.abs(outerHeight - innerHeight) <= 1;
	    return {
	      outerHeightStyle,
	      overflow
	    };
	  }, [maxRows, minRows, props.placeholder]);
	  const updateState = (prevState, newState) => {
	    const {
	      outerHeightStyle,
	      overflow
	    } = newState;
	    // Need a large enough difference to update the height.
	    // This prevents infinite rendering loop.
	    if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
	      renders.current += 1;
	      return {
	        overflow,
	        outerHeightStyle
	      };
	    }
	    return prevState;
	  };
	  const syncHeight = reactExports.useCallback(() => {
	    const newState = getUpdatedState();
	    if (isEmpty$1(newState)) {
	      return;
	    }
	    setState(prevState => updateState(prevState, newState));
	  }, [getUpdatedState]);
	  useEnhancedEffect$1(() => {
	    const syncHeightWithFlushSync = () => {
	      const newState = getUpdatedState();
	      if (isEmpty$1(newState)) {
	        return;
	      }

	      // In React 18, state updates in a ResizeObserver's callback are happening after
	      // the paint, this leads to an infinite rendering.
	      //
	      // Using flushSync ensures that the states is updated before the next pain.
	      // Related issue - https://github.com/facebook/react/issues/24331
	      reactDomExports.flushSync(() => {
	        setState(prevState => updateState(prevState, newState));
	      });
	    };
	    const handleResize = () => {
	      renders.current = 0;
	      syncHeightWithFlushSync();
	    };
	    // Workaround a "ResizeObserver loop completed with undelivered notifications" error
	    // in test.
	    // Note that we might need to use this logic in production per https://github.com/WICG/resize-observer/issues/38
	    // Also see https://github.com/mui/mui-x/issues/8733
	    let rAF;
	    const debounceHandleResize = debounce$1(handleResize);
	    const input = inputRef.current;
	    const containerWindow = ownerWindow(input);
	    containerWindow.addEventListener('resize', debounceHandleResize);
	    let resizeObserver;
	    if (typeof ResizeObserver !== 'undefined') {
	      resizeObserver = new ResizeObserver(handleResize);
	      resizeObserver.observe(input);
	    }
	    return () => {
	      debounceHandleResize.clear();
	      cancelAnimationFrame(rAF);
	      containerWindow.removeEventListener('resize', debounceHandleResize);
	      if (resizeObserver) {
	        resizeObserver.disconnect();
	      }
	    };
	  }, [getUpdatedState]);
	  useEnhancedEffect$1(() => {
	    syncHeight();
	  });
	  reactExports.useEffect(() => {
	    renders.current = 0;
	  }, [value]);
	  const handleChange = event => {
	    renders.current = 0;
	    if (!isControlled) {
	      syncHeight();
	    }
	    if (onChange) {
	      onChange(event);
	    }
	  };
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx("textarea", _extends({
	      value: value,
	      onChange: handleChange,
	      ref: handleRef
	      // Apply the rows prop to get a "correct" first SSR paint
	      ,

	      rows: minRows,
	      style: _extends({
	        height: state.outerHeightStyle,
	        // Need a large enough difference to allow scrolling.
	        // This prevents infinite rendering loop.
	        overflow: state.overflow ? 'hidden' : undefined
	      }, style)
	    }, other)), /*#__PURE__*/jsxRuntimeExports.jsx("textarea", {
	      "aria-hidden": true,
	      className: props.className,
	      readOnly: true,
	      ref: shadowRef,
	      tabIndex: -1,
	      style: _extends({}, styles$4.shadow, style, {
	        paddingTop: 0,
	        paddingBottom: 0
	      })
	    })]
	  });
	});

	// https://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript
	// Give up on IE11 support for this feature
	function stripDiacritics(string) {
	  return typeof string.normalize !== 'undefined' ? string.normalize('NFD').replace(/[\u0300-\u036f]/g, '') : string;
	}
	function createFilterOptions(config = {}) {
	  const {
	    ignoreAccents = true,
	    ignoreCase = true,
	    limit,
	    matchFrom = 'any',
	    stringify,
	    trim = false
	  } = config;
	  return (options, {
	    inputValue,
	    getOptionLabel
	  }) => {
	    let input = trim ? inputValue.trim() : inputValue;
	    if (ignoreCase) {
	      input = input.toLowerCase();
	    }
	    if (ignoreAccents) {
	      input = stripDiacritics(input);
	    }
	    const filteredOptions = !input ? options : options.filter(option => {
	      let candidate = (stringify || getOptionLabel)(option);
	      if (ignoreCase) {
	        candidate = candidate.toLowerCase();
	      }
	      if (ignoreAccents) {
	        candidate = stripDiacritics(candidate);
	      }
	      return matchFrom === 'start' ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
	    });
	    return typeof limit === 'number' ? filteredOptions.slice(0, limit) : filteredOptions;
	  };
	}

	// To replace with .findIndex() once we stop IE11 support.
	function findIndex(array, comp) {
	  for (let i = 0; i < array.length; i += 1) {
	    if (comp(array[i])) {
	      return i;
	    }
	  }
	  return -1;
	}
	const defaultFilterOptions = createFilterOptions();

	// Number of options to jump in list box when `Page Up` and `Page Down` keys are used.
	const pageSize = 5;
	const defaultIsActiveElementInListbox = listboxRef => {
	  var _listboxRef$current$p;
	  return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
	};
	function useAutocomplete(props) {
	  const {
	    // eslint-disable-next-line @typescript-eslint/naming-convention
	    unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
	    // eslint-disable-next-line @typescript-eslint/naming-convention
	    unstable_classNamePrefix = 'Mui',
	    autoComplete = false,
	    autoHighlight = false,
	    autoSelect = false,
	    blurOnSelect = false,
	    clearOnBlur = !props.freeSolo,
	    clearOnEscape = false,
	    componentName = 'useAutocomplete',
	    defaultValue = props.multiple ? [] : null,
	    disableClearable = false,
	    disableCloseOnSelect = false,
	    disabled: disabledProp,
	    disabledItemsFocusable = false,
	    disableListWrap = false,
	    filterOptions = defaultFilterOptions,
	    filterSelectedOptions = false,
	    freeSolo = false,
	    getOptionDisabled,
	    getOptionKey,
	    getOptionLabel: getOptionLabelProp = option => {
	      var _option$label;
	      return (_option$label = option.label) != null ? _option$label : option;
	    },
	    groupBy,
	    handleHomeEndKeys = !props.freeSolo,
	    id: idProp,
	    includeInputInList = false,
	    inputValue: inputValueProp,
	    isOptionEqualToValue = (option, value) => option === value,
	    multiple = false,
	    onChange,
	    onClose,
	    onHighlightChange,
	    onInputChange,
	    onOpen,
	    open: openProp,
	    openOnFocus = false,
	    options,
	    readOnly = false,
	    selectOnFocus = !props.freeSolo,
	    value: valueProp
	  } = props;
	  const id = useId(idProp);
	  let getOptionLabel = getOptionLabelProp;
	  getOptionLabel = option => {
	    const optionLabel = getOptionLabelProp(option);
	    if (typeof optionLabel !== 'string') {
	      return String(optionLabel);
	    }
	    return optionLabel;
	  };
	  const ignoreFocus = reactExports.useRef(false);
	  const firstFocus = reactExports.useRef(true);
	  const inputRef = reactExports.useRef(null);
	  const listboxRef = reactExports.useRef(null);
	  const [anchorEl, setAnchorEl] = reactExports.useState(null);
	  const [focusedTag, setFocusedTag] = reactExports.useState(-1);
	  const defaultHighlighted = autoHighlight ? 0 : -1;
	  const highlightedIndexRef = reactExports.useRef(defaultHighlighted);
	  const [value, setValueState] = useControlled({
	    controlled: valueProp,
	    default: defaultValue,
	    name: componentName
	  });
	  const [inputValue, setInputValueState] = useControlled({
	    controlled: inputValueProp,
	    default: '',
	    name: componentName,
	    state: 'inputValue'
	  });
	  const [focused, setFocused] = reactExports.useState(false);
	  const resetInputValue = reactExports.useCallback((event, newValue) => {
	    // retain current `inputValue` if new option isn't selected and `clearOnBlur` is false
	    // When `multiple` is enabled, `newValue` is an array of all selected items including the newly selected item
	    const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
	    if (!isOptionSelected && !clearOnBlur) {
	      return;
	    }
	    let newInputValue;
	    if (multiple) {
	      newInputValue = '';
	    } else if (newValue == null) {
	      newInputValue = '';
	    } else {
	      const optionLabel = getOptionLabel(newValue);
	      newInputValue = typeof optionLabel === 'string' ? optionLabel : '';
	    }
	    if (inputValue === newInputValue) {
	      return;
	    }
	    setInputValueState(newInputValue);
	    if (onInputChange) {
	      onInputChange(event, newInputValue, 'reset');
	    }
	  }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
	  const [open, setOpenState] = useControlled({
	    controlled: openProp,
	    default: false,
	    name: componentName,
	    state: 'open'
	  });
	  const [inputPristine, setInputPristine] = reactExports.useState(true);
	  const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
	  const popupOpen = open && !readOnly;
	  const filteredOptions = popupOpen ? filterOptions(options.filter(option => {
	    if (filterSelectedOptions && (multiple ? value : [value]).some(value2 => value2 !== null && isOptionEqualToValue(option, value2))) {
	      return false;
	    }
	    return true;
	  }),
	  // we use the empty string to manipulate `filterOptions` to not filter any options
	  // i.e. the filter predicate always returns true
	  {
	    inputValue: inputValueIsSelectedValue && inputPristine ? '' : inputValue,
	    getOptionLabel
	  }) : [];
	  const previousProps = usePreviousProps$1({
	    filteredOptions,
	    value,
	    inputValue
	  });
	  reactExports.useEffect(() => {
	    const valueChange = value !== previousProps.value;
	    if (focused && !valueChange) {
	      return;
	    }

	    // Only reset the input's value when freeSolo if the component's value changes.
	    if (freeSolo && !valueChange) {
	      return;
	    }
	    resetInputValue(null, value);
	  }, [value, resetInputValue, focused, previousProps.value, freeSolo]);
	  const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
	  const focusTag = useEventCallback(tagToFocus => {
	    if (tagToFocus === -1) {
	      inputRef.current.focus();
	    } else {
	      anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
	    }
	  });

	  // Ensure the focusedTag is never inconsistent
	  reactExports.useEffect(() => {
	    if (multiple && focusedTag > value.length - 1) {
	      setFocusedTag(-1);
	      focusTag(-1);
	    }
	  }, [value, multiple, focusedTag, focusTag]);
	  function validOptionIndex(index, direction) {
	    if (!listboxRef.current || index < 0 || index >= filteredOptions.length) {
	      return -1;
	    }
	    let nextFocus = index;
	    while (true) {
	      const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);

	      // Same logic as MenuList.js
	      const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute('aria-disabled') === 'true';
	      if (option && option.hasAttribute('tabindex') && !nextFocusDisabled) {
	        // The next option is available
	        return nextFocus;
	      }

	      // The next option is disabled, move to the next element.
	      // with looped index
	      if (direction === 'next') {
	        nextFocus = (nextFocus + 1) % filteredOptions.length;
	      } else {
	        nextFocus = (nextFocus - 1 + filteredOptions.length) % filteredOptions.length;
	      }

	      // We end up with initial index, that means we don't have available options.
	      // All of them are disabled
	      if (nextFocus === index) {
	        return -1;
	      }
	    }
	  }
	  const setHighlightedIndex = useEventCallback(({
	    event,
	    index,
	    reason = 'auto'
	  }) => {
	    highlightedIndexRef.current = index;

	    // does the index exist?
	    if (index === -1) {
	      inputRef.current.removeAttribute('aria-activedescendant');
	    } else {
	      inputRef.current.setAttribute('aria-activedescendant', `${id}-option-${index}`);
	    }
	    if (onHighlightChange) {
	      onHighlightChange(event, index === -1 ? null : filteredOptions[index], reason);
	    }
	    if (!listboxRef.current) {
	      return;
	    }
	    const prev = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
	    if (prev) {
	      prev.classList.remove(`${unstable_classNamePrefix}-focused`);
	      prev.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
	    }
	    let listboxNode = listboxRef.current;
	    if (listboxRef.current.getAttribute('role') !== 'listbox') {
	      listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
	    }

	    // "No results"
	    if (!listboxNode) {
	      return;
	    }
	    if (index === -1) {
	      listboxNode.scrollTop = 0;
	      return;
	    }
	    const option = listboxRef.current.querySelector(`[data-option-index="${index}"]`);
	    if (!option) {
	      return;
	    }
	    option.classList.add(`${unstable_classNamePrefix}-focused`);
	    if (reason === 'keyboard') {
	      option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
	    }

	    // Scroll active descendant into view.
	    // Logic copied from https://www.w3.org/WAI/content-assets/wai-aria-practices/patterns/combobox/examples/js/select-only.js
	    // In case of mouse clicks and touch (in mobile devices) we avoid scrolling the element and keep both behaviors same.
	    // Consider this API instead once it has a better browser support:
	    // .scrollIntoView({ scrollMode: 'if-needed', block: 'nearest' });
	    if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== 'mouse' && reason !== 'touch') {
	      const element = option;
	      const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
	      const elementBottom = element.offsetTop + element.offsetHeight;
	      if (elementBottom > scrollBottom) {
	        listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
	      } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
	        listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
	      }
	    }
	  });
	  const changeHighlightedIndex = useEventCallback(({
	    event,
	    diff,
	    direction = 'next',
	    reason = 'auto'
	  }) => {
	    if (!popupOpen) {
	      return;
	    }
	    const getNextIndex = () => {
	      const maxIndex = filteredOptions.length - 1;
	      if (diff === 'reset') {
	        return defaultHighlighted;
	      }
	      if (diff === 'start') {
	        return 0;
	      }
	      if (diff === 'end') {
	        return maxIndex;
	      }
	      const newIndex = highlightedIndexRef.current + diff;
	      if (newIndex < 0) {
	        if (newIndex === -1 && includeInputInList) {
	          return -1;
	        }
	        if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
	          return 0;
	        }
	        return maxIndex;
	      }
	      if (newIndex > maxIndex) {
	        if (newIndex === maxIndex + 1 && includeInputInList) {
	          return -1;
	        }
	        if (disableListWrap || Math.abs(diff) > 1) {
	          return maxIndex;
	        }
	        return 0;
	      }
	      return newIndex;
	    };
	    const nextIndex = validOptionIndex(getNextIndex(), direction);
	    setHighlightedIndex({
	      index: nextIndex,
	      reason,
	      event
	    });

	    // Sync the content of the input with the highlighted option.
	    if (autoComplete && diff !== 'reset') {
	      if (nextIndex === -1) {
	        inputRef.current.value = inputValue;
	      } else {
	        const option = getOptionLabel(filteredOptions[nextIndex]);
	        inputRef.current.value = option;

	        // The portion of the selected suggestion that has not been typed by the user,
	        // a completion string, appears inline after the input cursor in the textbox.
	        const index = option.toLowerCase().indexOf(inputValue.toLowerCase());
	        if (index === 0 && inputValue.length > 0) {
	          inputRef.current.setSelectionRange(inputValue.length, option.length);
	        }
	      }
	    }
	  });
	  const checkHighlightedOptionExists = () => {
	    const isSameValue = (value1, value2) => {
	      const label1 = value1 ? getOptionLabel(value1) : '';
	      const label2 = value2 ? getOptionLabel(value2) : '';
	      return label1 === label2;
	    };
	    if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {
	      const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];
	      if (previousHighlightedOption) {
	        const previousHighlightedOptionExists = filteredOptions.some(option => {
	          return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);
	        });
	        if (previousHighlightedOptionExists) {
	          return true;
	        }
	      }
	    }
	    return false;
	  };
	  const syncHighlightedIndex = reactExports.useCallback(() => {
	    if (!popupOpen) {
	      return;
	    }

	    // Check if the previously highlighted option still exists in the updated filtered options list and if the value and inputValue haven't changed
	    // If it exists and the value and the inputValue haven't changed, return, otherwise continue execution
	    if (checkHighlightedOptionExists()) {
	      return;
	    }
	    const valueItem = multiple ? value[0] : value;

	    // The popup is empty, reset
	    if (filteredOptions.length === 0 || valueItem == null) {
	      changeHighlightedIndex({
	        diff: 'reset'
	      });
	      return;
	    }
	    if (!listboxRef.current) {
	      return;
	    }

	    // Synchronize the value with the highlighted index
	    if (valueItem != null) {
	      const currentOption = filteredOptions[highlightedIndexRef.current];

	      // Keep the current highlighted index if possible
	      if (multiple && currentOption && findIndex(value, val => isOptionEqualToValue(currentOption, val)) !== -1) {
	        return;
	      }
	      const itemIndex = findIndex(filteredOptions, optionItem => isOptionEqualToValue(optionItem, valueItem));
	      if (itemIndex === -1) {
	        changeHighlightedIndex({
	          diff: 'reset'
	        });
	      } else {
	        setHighlightedIndex({
	          index: itemIndex
	        });
	      }
	      return;
	    }

	    // Prevent the highlighted index to leak outside the boundaries.
	    if (highlightedIndexRef.current >= filteredOptions.length - 1) {
	      setHighlightedIndex({
	        index: filteredOptions.length - 1
	      });
	      return;
	    }

	    // Restore the focus to the previous index.
	    setHighlightedIndex({
	      index: highlightedIndexRef.current
	    });
	    // Ignore filteredOptions (and options, isOptionEqualToValue, getOptionLabel) not to break the scroll position
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [
	  // Only sync the highlighted index when the option switch between empty and not
	  filteredOptions.length,
	  // Don't sync the highlighted index with the value when multiple
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  multiple ? false : value, filterSelectedOptions, changeHighlightedIndex, setHighlightedIndex, popupOpen, inputValue, multiple]);
	  const handleListboxRef = useEventCallback(node => {
	    setRef(listboxRef, node);
	    if (!node) {
	      return;
	    }
	    syncHighlightedIndex();
	  });
	  reactExports.useEffect(() => {
	    syncHighlightedIndex();
	  }, [syncHighlightedIndex]);
	  const handleOpen = event => {
	    if (open) {
	      return;
	    }
	    setOpenState(true);
	    setInputPristine(true);
	    if (onOpen) {
	      onOpen(event);
	    }
	  };
	  const handleClose = (event, reason) => {
	    if (!open) {
	      return;
	    }
	    setOpenState(false);
	    if (onClose) {
	      onClose(event, reason);
	    }
	  };
	  const handleValue = (event, newValue, reason, details) => {
	    if (multiple) {
	      if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
	        return;
	      }
	    } else if (value === newValue) {
	      return;
	    }
	    if (onChange) {
	      onChange(event, newValue, reason, details);
	    }
	    setValueState(newValue);
	  };
	  const isTouch = reactExports.useRef(false);
	  const selectNewValue = (event, option, reasonProp = 'selectOption', origin = 'options') => {
	    let reason = reasonProp;
	    let newValue = option;
	    if (multiple) {
	      newValue = Array.isArray(value) ? value.slice() : [];
	      const itemIndex = findIndex(newValue, valueItem => isOptionEqualToValue(option, valueItem));
	      if (itemIndex === -1) {
	        newValue.push(option);
	      } else if (origin !== 'freeSolo') {
	        newValue.splice(itemIndex, 1);
	        reason = 'removeOption';
	      }
	    }
	    resetInputValue(event, newValue);
	    handleValue(event, newValue, reason, {
	      option
	    });
	    if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
	      handleClose(event, reason);
	    }
	    if (blurOnSelect === true || blurOnSelect === 'touch' && isTouch.current || blurOnSelect === 'mouse' && !isTouch.current) {
	      inputRef.current.blur();
	    }
	  };
	  function validTagIndex(index, direction) {
	    if (index === -1) {
	      return -1;
	    }
	    let nextFocus = index;
	    while (true) {
	      // Out of range
	      if (direction === 'next' && nextFocus === value.length || direction === 'previous' && nextFocus === -1) {
	        return -1;
	      }
	      const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);

	      // Same logic as MenuList.js
	      if (!option || !option.hasAttribute('tabindex') || option.disabled || option.getAttribute('aria-disabled') === 'true') {
	        nextFocus += direction === 'next' ? 1 : -1;
	      } else {
	        return nextFocus;
	      }
	    }
	  }
	  const handleFocusTag = (event, direction) => {
	    if (!multiple) {
	      return;
	    }
	    if (inputValue === '') {
	      handleClose(event, 'toggleInput');
	    }
	    let nextTag = focusedTag;
	    if (focusedTag === -1) {
	      if (inputValue === '' && direction === 'previous') {
	        nextTag = value.length - 1;
	      }
	    } else {
	      nextTag += direction === 'next' ? 1 : -1;
	      if (nextTag < 0) {
	        nextTag = 0;
	      }
	      if (nextTag === value.length) {
	        nextTag = -1;
	      }
	    }
	    nextTag = validTagIndex(nextTag, direction);
	    setFocusedTag(nextTag);
	    focusTag(nextTag);
	  };
	  const handleClear = event => {
	    ignoreFocus.current = true;
	    setInputValueState('');
	    if (onInputChange) {
	      onInputChange(event, '', 'clear');
	    }
	    handleValue(event, multiple ? [] : null, 'clear');
	  };
	  const handleKeyDown = other => event => {
	    if (other.onKeyDown) {
	      other.onKeyDown(event);
	    }
	    if (event.defaultMuiPrevented) {
	      return;
	    }
	    if (focusedTag !== -1 && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) === -1) {
	      setFocusedTag(-1);
	      focusTag(-1);
	    }

	    // Wait until IME is settled.
	    if (event.which !== 229) {
	      switch (event.key) {
	        case 'Home':
	          if (popupOpen && handleHomeEndKeys) {
	            // Prevent scroll of the page
	            event.preventDefault();
	            changeHighlightedIndex({
	              diff: 'start',
	              direction: 'next',
	              reason: 'keyboard',
	              event
	            });
	          }
	          break;
	        case 'End':
	          if (popupOpen && handleHomeEndKeys) {
	            // Prevent scroll of the page
	            event.preventDefault();
	            changeHighlightedIndex({
	              diff: 'end',
	              direction: 'previous',
	              reason: 'keyboard',
	              event
	            });
	          }
	          break;
	        case 'PageUp':
	          // Prevent scroll of the page
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: -pageSize,
	            direction: 'previous',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;
	        case 'PageDown':
	          // Prevent scroll of the page
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: pageSize,
	            direction: 'next',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;
	        case 'ArrowDown':
	          // Prevent cursor move
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: 1,
	            direction: 'next',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;
	        case 'ArrowUp':
	          // Prevent cursor move
	          event.preventDefault();
	          changeHighlightedIndex({
	            diff: -1,
	            direction: 'previous',
	            reason: 'keyboard',
	            event
	          });
	          handleOpen(event);
	          break;
	        case 'ArrowLeft':
	          handleFocusTag(event, 'previous');
	          break;
	        case 'ArrowRight':
	          handleFocusTag(event, 'next');
	          break;
	        case 'Enter':
	          if (highlightedIndexRef.current !== -1 && popupOpen) {
	            const option = filteredOptions[highlightedIndexRef.current];
	            const disabled = getOptionDisabled ? getOptionDisabled(option) : false;

	            // Avoid early form validation, let the end-users continue filling the form.
	            event.preventDefault();
	            if (disabled) {
	              return;
	            }
	            selectNewValue(event, option, 'selectOption');

	            // Move the selection to the end.
	            if (autoComplete) {
	              inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
	            }
	          } else if (freeSolo && inputValue !== '' && inputValueIsSelectedValue === false) {
	            if (multiple) {
	              // Allow people to add new values before they submit the form.
	              event.preventDefault();
	            }
	            selectNewValue(event, inputValue, 'createOption', 'freeSolo');
	          }
	          break;
	        case 'Escape':
	          if (popupOpen) {
	            // Avoid Opera to exit fullscreen mode.
	            event.preventDefault();
	            // Avoid the Modal to handle the event.
	            event.stopPropagation();
	            handleClose(event, 'escape');
	          } else if (clearOnEscape && (inputValue !== '' || multiple && value.length > 0)) {
	            // Avoid Opera to exit fullscreen mode.
	            event.preventDefault();
	            // Avoid the Modal to handle the event.
	            event.stopPropagation();
	            handleClear(event);
	          }
	          break;
	        case 'Backspace':
	          if (multiple && !readOnly && inputValue === '' && value.length > 0) {
	            const index = focusedTag === -1 ? value.length - 1 : focusedTag;
	            const newValue = value.slice();
	            newValue.splice(index, 1);
	            handleValue(event, newValue, 'removeOption', {
	              option: value[index]
	            });
	          }
	          break;
	        case 'Delete':
	          if (multiple && !readOnly && inputValue === '' && value.length > 0 && focusedTag !== -1) {
	            const index = focusedTag;
	            const newValue = value.slice();
	            newValue.splice(index, 1);
	            handleValue(event, newValue, 'removeOption', {
	              option: value[index]
	            });
	          }
	          break;
	      }
	    }
	  };
	  const handleFocus = event => {
	    setFocused(true);
	    if (openOnFocus && !ignoreFocus.current) {
	      handleOpen(event);
	    }
	  };
	  const handleBlur = event => {
	    // Ignore the event when using the scrollbar with IE11
	    if (unstable_isActiveElementInListbox(listboxRef)) {
	      inputRef.current.focus();
	      return;
	    }
	    setFocused(false);
	    firstFocus.current = true;
	    ignoreFocus.current = false;
	    if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
	      selectNewValue(event, filteredOptions[highlightedIndexRef.current], 'blur');
	    } else if (autoSelect && freeSolo && inputValue !== '') {
	      selectNewValue(event, inputValue, 'blur', 'freeSolo');
	    } else if (clearOnBlur) {
	      resetInputValue(event, value);
	    }
	    handleClose(event, 'blur');
	  };
	  const handleInputChange = event => {
	    const newValue = event.target.value;
	    if (inputValue !== newValue) {
	      setInputValueState(newValue);
	      setInputPristine(false);
	      if (onInputChange) {
	        onInputChange(event, newValue, 'input');
	      }
	    }
	    if (newValue === '') {
	      if (!disableClearable && !multiple) {
	        handleValue(event, null, 'clear');
	      }
	    } else {
	      handleOpen(event);
	    }
	  };
	  const handleOptionMouseMove = event => {
	    const index = Number(event.currentTarget.getAttribute('data-option-index'));
	    if (highlightedIndexRef.current !== index) {
	      setHighlightedIndex({
	        event,
	        index,
	        reason: 'mouse'
	      });
	    }
	  };
	  const handleOptionTouchStart = event => {
	    setHighlightedIndex({
	      event,
	      index: Number(event.currentTarget.getAttribute('data-option-index')),
	      reason: 'touch'
	    });
	    isTouch.current = true;
	  };
	  const handleOptionClick = event => {
	    const index = Number(event.currentTarget.getAttribute('data-option-index'));
	    selectNewValue(event, filteredOptions[index], 'selectOption');
	    isTouch.current = false;
	  };
	  const handleTagDelete = index => event => {
	    const newValue = value.slice();
	    newValue.splice(index, 1);
	    handleValue(event, newValue, 'removeOption', {
	      option: value[index]
	    });
	  };
	  const handlePopupIndicator = event => {
	    if (open) {
	      handleClose(event, 'toggleInput');
	    } else {
	      handleOpen(event);
	    }
	  };

	  // Prevent input blur when interacting with the combobox
	  const handleMouseDown = event => {
	    // Prevent focusing the input if click is anywhere outside the Autocomplete
	    if (!event.currentTarget.contains(event.target)) {
	      return;
	    }
	    if (event.target.getAttribute('id') !== id) {
	      event.preventDefault();
	    }
	  };

	  // Focus the input when interacting with the combobox
	  const handleClick = event => {
	    // Prevent focusing the input if click is anywhere outside the Autocomplete
	    if (!event.currentTarget.contains(event.target)) {
	      return;
	    }
	    inputRef.current.focus();
	    if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
	      inputRef.current.select();
	    }
	    firstFocus.current = false;
	  };
	  const handleInputMouseDown = event => {
	    if (!disabledProp && (inputValue === '' || !open)) {
	      handlePopupIndicator(event);
	    }
	  };
	  let dirty = freeSolo && inputValue.length > 0;
	  dirty = dirty || (multiple ? value.length > 0 : value !== null);
	  let groupedOptions = filteredOptions;
	  if (groupBy) {
	    groupedOptions = filteredOptions.reduce((acc, option, index) => {
	      const group = groupBy(option);
	      if (acc.length > 0 && acc[acc.length - 1].group === group) {
	        acc[acc.length - 1].options.push(option);
	      } else {
	        acc.push({
	          key: index,
	          index,
	          group,
	          options: [option]
	        });
	      }
	      return acc;
	    }, []);
	  }
	  if (disabledProp && focused) {
	    handleBlur();
	  }
	  return {
	    getRootProps: (other = {}) => _extends({
	      'aria-owns': listboxAvailable ? `${id}-listbox` : null
	    }, other, {
	      onKeyDown: handleKeyDown(other),
	      onMouseDown: handleMouseDown,
	      onClick: handleClick
	    }),
	    getInputLabelProps: () => ({
	      id: `${id}-label`,
	      htmlFor: id
	    }),
	    getInputProps: () => ({
	      id,
	      value: inputValue,
	      onBlur: handleBlur,
	      onFocus: handleFocus,
	      onChange: handleInputChange,
	      onMouseDown: handleInputMouseDown,
	      // if open then this is handled imperatively so don't let react override
	      // only have an opinion about this when closed
	      'aria-activedescendant': popupOpen ? '' : null,
	      'aria-autocomplete': autoComplete ? 'both' : 'list',
	      'aria-controls': listboxAvailable ? `${id}-listbox` : undefined,
	      'aria-expanded': listboxAvailable,
	      // Disable browser's suggestion that might overlap with the popup.
	      // Handle autocomplete but not autofill.
	      autoComplete: 'off',
	      ref: inputRef,
	      autoCapitalize: 'none',
	      spellCheck: 'false',
	      role: 'combobox',
	      disabled: disabledProp
	    }),
	    getClearProps: () => ({
	      tabIndex: -1,
	      type: 'button',
	      onClick: handleClear
	    }),
	    getPopupIndicatorProps: () => ({
	      tabIndex: -1,
	      type: 'button',
	      onClick: handlePopupIndicator
	    }),
	    getTagProps: ({
	      index
	    }) => _extends({
	      key: index,
	      'data-tag-index': index,
	      tabIndex: -1
	    }, !readOnly && {
	      onDelete: handleTagDelete(index)
	    }),
	    getListboxProps: () => ({
	      role: 'listbox',
	      id: `${id}-listbox`,
	      'aria-labelledby': `${id}-label`,
	      ref: handleListboxRef,
	      onMouseDown: event => {
	        // Prevent blur
	        event.preventDefault();
	      }
	    }),
	    getOptionProps: ({
	      index,
	      option
	    }) => {
	      var _getOptionKey;
	      const selected = (multiple ? value : [value]).some(value2 => value2 != null && isOptionEqualToValue(option, value2));
	      const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
	      return {
	        key: (_getOptionKey = getOptionKey == null ? void 0 : getOptionKey(option)) != null ? _getOptionKey : getOptionLabel(option),
	        tabIndex: -1,
	        role: 'option',
	        id: `${id}-option-${index}`,
	        onMouseMove: handleOptionMouseMove,
	        onClick: handleOptionClick,
	        onTouchStart: handleOptionTouchStart,
	        'data-option-index': index,
	        'aria-disabled': disabled,
	        'aria-selected': selected
	      };
	    },
	    id,
	    inputValue,
	    value,
	    dirty,
	    expanded: popupOpen && anchorEl,
	    popupOpen,
	    focused: focused || focusedTag !== -1,
	    anchorEl,
	    setAnchorEl,
	    focusedTag,
	    groupedOptions
	  };
	}

	const _excluded$1J = ["anchorEl", "component", "components", "componentsProps", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "transition", "slots", "slotProps"];
	const PopperRoot = styled$1(Popper$1, {
	  name: 'MuiPopper',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});

	/**
	 *
	 * Demos:
	 *
	 * - [Autocomplete](https://mui.com/material-ui/react-autocomplete/)
	 * - [Menu](https://mui.com/material-ui/react-menu/)
	 * - [Popper](https://mui.com/material-ui/react-popper/)
	 *
	 * API:
	 *
	 * - [Popper API](https://mui.com/material-ui/api/popper/)
	 */
	const Popper = /*#__PURE__*/reactExports.forwardRef(function Popper(inProps, ref) {
	  var _slots$root;
	  const theme = useTheme$2();
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPopper'
	  });
	  const {
	      anchorEl,
	      component,
	      components,
	      componentsProps,
	      container,
	      disablePortal,
	      keepMounted,
	      modifiers,
	      open,
	      placement,
	      popperOptions,
	      popperRef,
	      transition,
	      slots,
	      slotProps
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1J);
	  const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components == null ? void 0 : components.Root;
	  const otherProps = _extends({
	    anchorEl,
	    container,
	    disablePortal,
	    keepMounted,
	    modifiers,
	    open,
	    placement,
	    popperOptions,
	    popperRef,
	    transition
	  }, other);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(PopperRoot, _extends({
	    as: component,
	    direction: theme == null ? void 0 : theme.direction,
	    slots: {
	      root: RootComponent
	    },
	    slotProps: slotProps != null ? slotProps : componentsProps
	  }, otherProps, {
	    ref: ref
	  }));
	});
	var MuiPopper = Popper;

	function getListSubheaderUtilityClass(slot) {
	  return generateUtilityClass('MuiListSubheader', slot);
	}
	generateUtilityClasses('MuiListSubheader', ['root', 'colorPrimary', 'colorInherit', 'gutters', 'inset', 'sticky']);

	const _excluded$1I = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];
	const useUtilityClasses$1q = ownerState => {
	  const {
	    classes,
	    color,
	    disableGutters,
	    inset,
	    disableSticky
	  } = ownerState;
	  const slots = {
	    root: ['root', color !== 'default' && `color${capitalize(color)}`, !disableGutters && 'gutters', inset && 'inset', !disableSticky && 'sticky']
	  };
	  return composeClasses(slots, getListSubheaderUtilityClass, classes);
	};
	const ListSubheaderRoot = styled$1('li', {
	  name: 'MuiListSubheader',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], !ownerState.disableGutters && styles.gutters, ownerState.inset && styles.inset, !ownerState.disableSticky && styles.sticky];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  boxSizing: 'border-box',
	  lineHeight: '48px',
	  listStyle: 'none',
	  color: (theme.vars || theme).palette.text.secondary,
	  fontFamily: theme.typography.fontFamily,
	  fontWeight: theme.typography.fontWeightMedium,
	  fontSize: theme.typography.pxToRem(14)
	}, ownerState.color === 'primary' && {
	  color: (theme.vars || theme).palette.primary.main
	}, ownerState.color === 'inherit' && {
	  color: 'inherit'
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, ownerState.inset && {
	  paddingLeft: 72
	}, !ownerState.disableSticky && {
	  position: 'sticky',
	  top: 0,
	  zIndex: 1,
	  backgroundColor: (theme.vars || theme).palette.background.paper
	}));
	const ListSubheader = /*#__PURE__*/reactExports.forwardRef(function ListSubheader(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListSubheader'
	  });
	  const {
	      className,
	      color = 'default',
	      component = 'li',
	      disableGutters = false,
	      disableSticky = false,
	      inset = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1I);
	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    disableGutters,
	    disableSticky,
	    inset
	  });
	  const classes = useUtilityClasses$1q(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ListSubheaderRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	ListSubheader.muiSkipListHighlight = true;
	var ListSubheader$1 = ListSubheader;

	var CancelIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
	}), 'Cancel');

	function getChipUtilityClass(slot) {
	  return generateUtilityClass('MuiChip', slot);
	}
	const chipClasses = generateUtilityClasses('MuiChip', ['root', 'sizeSmall', 'sizeMedium', 'colorError', 'colorInfo', 'colorPrimary', 'colorSecondary', 'colorSuccess', 'colorWarning', 'disabled', 'clickable', 'clickableColorPrimary', 'clickableColorSecondary', 'deletable', 'deletableColorPrimary', 'deletableColorSecondary', 'outlined', 'filled', 'outlinedPrimary', 'outlinedSecondary', 'filledPrimary', 'filledSecondary', 'avatar', 'avatarSmall', 'avatarMedium', 'avatarColorPrimary', 'avatarColorSecondary', 'icon', 'iconSmall', 'iconMedium', 'iconColorPrimary', 'iconColorSecondary', 'label', 'labelSmall', 'labelMedium', 'deleteIcon', 'deleteIconSmall', 'deleteIconMedium', 'deleteIconColorPrimary', 'deleteIconColorSecondary', 'deleteIconOutlinedColorPrimary', 'deleteIconOutlinedColorSecondary', 'deleteIconFilledColorPrimary', 'deleteIconFilledColorSecondary', 'focusVisible']);
	var chipClasses$1 = chipClasses;

	const _excluded$1H = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"];
	const useUtilityClasses$1p = ownerState => {
	  const {
	    classes,
	    disabled,
	    size,
	    color,
	    iconColor,
	    onDelete,
	    clickable,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, disabled && 'disabled', `size${capitalize(size)}`, `color${capitalize(color)}`, clickable && 'clickable', clickable && `clickableColor${capitalize(color)}`, onDelete && 'deletable', onDelete && `deletableColor${capitalize(color)}`, `${variant}${capitalize(color)}`],
	    label: ['label', `label${capitalize(size)}`],
	    avatar: ['avatar', `avatar${capitalize(size)}`, `avatarColor${capitalize(color)}`],
	    icon: ['icon', `icon${capitalize(size)}`, `iconColor${capitalize(iconColor)}`],
	    deleteIcon: ['deleteIcon', `deleteIcon${capitalize(size)}`, `deleteIconColor${capitalize(color)}`, `deleteIcon${capitalize(variant)}Color${capitalize(color)}`]
	  };
	  return composeClasses(slots, getChipUtilityClass, classes);
	};
	const ChipRoot = styled$1('div', {
	  name: 'MuiChip',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    const {
	      color,
	      iconColor,
	      clickable,
	      onDelete,
	      size,
	      variant
	    } = ownerState;
	    return [{
	      [`& .${chipClasses$1.avatar}`]: styles.avatar
	    }, {
	      [`& .${chipClasses$1.avatar}`]: styles[`avatar${capitalize(size)}`]
	    }, {
	      [`& .${chipClasses$1.avatar}`]: styles[`avatarColor${capitalize(color)}`]
	    }, {
	      [`& .${chipClasses$1.icon}`]: styles.icon
	    }, {
	      [`& .${chipClasses$1.icon}`]: styles[`icon${capitalize(size)}`]
	    }, {
	      [`& .${chipClasses$1.icon}`]: styles[`iconColor${capitalize(iconColor)}`]
	    }, {
	      [`& .${chipClasses$1.deleteIcon}`]: styles.deleteIcon
	    }, {
	      [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIcon${capitalize(size)}`]
	    }, {
	      [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIconColor${capitalize(color)}`]
	    }, {
	      [`& .${chipClasses$1.deleteIcon}`]: styles[`deleteIcon${capitalize(variant)}Color${capitalize(color)}`]
	    }, styles.root, styles[`size${capitalize(size)}`], styles[`color${capitalize(color)}`], clickable && styles.clickable, clickable && color !== 'default' && styles[`clickableColor${capitalize(color)})`], onDelete && styles.deletable, onDelete && color !== 'default' && styles[`deletableColor${capitalize(color)}`], styles[variant], styles[`${variant}${capitalize(color)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const textColor = theme.palette.mode === 'light' ? theme.palette.grey[700] : theme.palette.grey[300];
	  return _extends({
	    maxWidth: '100%',
	    fontFamily: theme.typography.fontFamily,
	    fontSize: theme.typography.pxToRem(13),
	    display: 'inline-flex',
	    alignItems: 'center',
	    justifyContent: 'center',
	    height: 32,
	    color: (theme.vars || theme).palette.text.primary,
	    backgroundColor: (theme.vars || theme).palette.action.selected,
	    borderRadius: 32 / 2,
	    whiteSpace: 'nowrap',
	    transition: theme.transitions.create(['background-color', 'box-shadow']),
	    // reset cursor explicitly in case ButtonBase is used
	    cursor: 'unset',
	    // We disable the focus ring for mouse, touch and keyboard users.
	    outline: 0,
	    textDecoration: 'none',
	    border: 0,
	    // Remove `button` border
	    padding: 0,
	    // Remove `button` padding
	    verticalAlign: 'middle',
	    boxSizing: 'border-box',
	    [`&.${chipClasses$1.disabled}`]: {
	      opacity: (theme.vars || theme).palette.action.disabledOpacity,
	      pointerEvents: 'none'
	    },
	    [`& .${chipClasses$1.avatar}`]: {
	      marginLeft: 5,
	      marginRight: -6,
	      width: 24,
	      height: 24,
	      color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
	      fontSize: theme.typography.pxToRem(12)
	    },
	    [`& .${chipClasses$1.avatarColorPrimary}`]: {
	      color: (theme.vars || theme).palette.primary.contrastText,
	      backgroundColor: (theme.vars || theme).palette.primary.dark
	    },
	    [`& .${chipClasses$1.avatarColorSecondary}`]: {
	      color: (theme.vars || theme).palette.secondary.contrastText,
	      backgroundColor: (theme.vars || theme).palette.secondary.dark
	    },
	    [`& .${chipClasses$1.avatarSmall}`]: {
	      marginLeft: 4,
	      marginRight: -4,
	      width: 18,
	      height: 18,
	      fontSize: theme.typography.pxToRem(10)
	    },
	    [`& .${chipClasses$1.icon}`]: _extends({
	      marginLeft: 5,
	      marginRight: -6
	    }, ownerState.size === 'small' && {
	      fontSize: 18,
	      marginLeft: 4,
	      marginRight: -4
	    }, ownerState.iconColor === ownerState.color && _extends({
	      color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
	    }, ownerState.color !== 'default' && {
	      color: 'inherit'
	    })),
	    [`& .${chipClasses$1.deleteIcon}`]: _extends({
	      WebkitTapHighlightColor: 'transparent',
	      color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : alpha(theme.palette.text.primary, 0.26),
	      fontSize: 22,
	      cursor: 'pointer',
	      margin: '0 5px 0 -6px',
	      '&:hover': {
	        color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : alpha(theme.palette.text.primary, 0.4)
	      }
	    }, ownerState.size === 'small' && {
	      fontSize: 16,
	      marginRight: 4,
	      marginLeft: -4
	    }, ownerState.color !== 'default' && {
	      color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : alpha(theme.palette[ownerState.color].contrastText, 0.7),
	      '&:hover, &:active': {
	        color: (theme.vars || theme).palette[ownerState.color].contrastText
	      }
	    })
	  }, ownerState.size === 'small' && {
	    height: 24
	  }, ownerState.color !== 'default' && {
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
	    color: (theme.vars || theme).palette[ownerState.color].contrastText
	  }, ownerState.onDelete && {
	    [`&.${chipClasses$1.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  }, ownerState.onDelete && ownerState.color !== 'default' && {
	    [`&.${chipClasses$1.focusVisible}`]: {
	      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
	    }
	  });
	}, ({
	  theme,
	  ownerState
	}) => _extends({}, ownerState.clickable && {
	  userSelect: 'none',
	  WebkitTapHighlightColor: 'transparent',
	  cursor: 'pointer',
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
	  },
	  [`&.${chipClasses$1.focusVisible}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	  },
	  '&:active': {
	    boxShadow: (theme.vars || theme).shadows[1]
	  }
	}, ownerState.clickable && ownerState.color !== 'default' && {
	  [`&:hover, &.${chipClasses$1.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
	  }
	}), ({
	  theme,
	  ownerState
	}) => _extends({}, ownerState.variant === 'outlined' && {
	  backgroundColor: 'transparent',
	  border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[700]}`,
	  [`&.${chipClasses$1.clickable}:hover`]: {
	    backgroundColor: (theme.vars || theme).palette.action.hover
	  },
	  [`&.${chipClasses$1.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`& .${chipClasses$1.avatar}`]: {
	    marginLeft: 4
	  },
	  [`& .${chipClasses$1.avatarSmall}`]: {
	    marginLeft: 2
	  },
	  [`& .${chipClasses$1.icon}`]: {
	    marginLeft: 4
	  },
	  [`& .${chipClasses$1.iconSmall}`]: {
	    marginLeft: 2
	  },
	  [`& .${chipClasses$1.deleteIcon}`]: {
	    marginRight: 5
	  },
	  [`& .${chipClasses$1.deleteIconSmall}`]: {
	    marginRight: 3
	  }
	}, ownerState.variant === 'outlined' && ownerState.color !== 'default' && {
	  color: (theme.vars || theme).palette[ownerState.color].main,
	  border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7)}`,
	  [`&.${chipClasses$1.clickable}:hover`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
	  },
	  [`&.${chipClasses$1.focusVisible}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
	  },
	  [`& .${chipClasses$1.deleteIcon}`]: {
	    color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : alpha(theme.palette[ownerState.color].main, 0.7),
	    '&:hover, &:active': {
	      color: (theme.vars || theme).palette[ownerState.color].main
	    }
	  }
	}));
	const ChipLabel = styled$1('span', {
	  name: 'MuiChip',
	  slot: 'Label',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    const {
	      size
	    } = ownerState;
	    return [styles.label, styles[`label${capitalize(size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  overflow: 'hidden',
	  textOverflow: 'ellipsis',
	  paddingLeft: 12,
	  paddingRight: 12,
	  whiteSpace: 'nowrap'
	}, ownerState.variant === 'outlined' && {
	  paddingLeft: 11,
	  paddingRight: 11
	}, ownerState.size === 'small' && {
	  paddingLeft: 8,
	  paddingRight: 8
	}, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
	  paddingLeft: 7,
	  paddingRight: 7
	}));
	function isDeleteKeyboardEvent(keyboardEvent) {
	  return keyboardEvent.key === 'Backspace' || keyboardEvent.key === 'Delete';
	}

	/**
	 * Chips represent complex entities in small blocks, such as a contact.
	 */
	const Chip = /*#__PURE__*/reactExports.forwardRef(function Chip(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiChip'
	  });
	  const {
	      avatar: avatarProp,
	      className,
	      clickable: clickableProp,
	      color = 'default',
	      component: ComponentProp,
	      deleteIcon: deleteIconProp,
	      disabled = false,
	      icon: iconProp,
	      label,
	      onClick,
	      onDelete,
	      onKeyDown,
	      onKeyUp,
	      size = 'medium',
	      variant = 'filled',
	      tabIndex,
	      skipFocusWhenDisabled = false // TODO v6: Rename to `focusableWhenDisabled`.
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1H);
	  const chipRef = reactExports.useRef(null);
	  const handleRef = useForkRef(chipRef, ref);
	  const handleDeleteIconClick = event => {
	    // Stop the event from bubbling up to the `Chip`
	    event.stopPropagation();
	    if (onDelete) {
	      onDelete(event);
	    }
	  };
	  const handleKeyDown = event => {
	    // Ignore events from children of `Chip`.
	    if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
	      // Will be handled in keyUp, otherwise some browsers
	      // might init navigation
	      event.preventDefault();
	    }
	    if (onKeyDown) {
	      onKeyDown(event);
	    }
	  };
	  const handleKeyUp = event => {
	    // Ignore events from children of `Chip`.
	    if (event.currentTarget === event.target) {
	      if (onDelete && isDeleteKeyboardEvent(event)) {
	        onDelete(event);
	      } else if (event.key === 'Escape' && chipRef.current) {
	        chipRef.current.blur();
	      }
	    }
	    if (onKeyUp) {
	      onKeyUp(event);
	    }
	  };
	  const clickable = clickableProp !== false && onClick ? true : clickableProp;
	  const component = clickable || onDelete ? ButtonBase$1 : ComponentProp || 'div';
	  const ownerState = _extends({}, props, {
	    component,
	    disabled,
	    size,
	    color,
	    iconColor: /*#__PURE__*/ /*#__PURE__*/reactExports.isValidElement(iconProp) ? iconProp.props.color || color : color,
	    onDelete: !!onDelete,
	    clickable,
	    variant
	  });
	  const classes = useUtilityClasses$1p(ownerState);
	  const moreProps = component === ButtonBase$1 ? _extends({
	    component: ComponentProp || 'div',
	    focusVisibleClassName: classes.focusVisible
	  }, onDelete && {
	    disableRipple: true
	  }) : {};
	  let deleteIcon = null;
	  if (onDelete) {
	    deleteIcon = deleteIconProp && /*#__PURE__*/reactExports.isValidElement(deleteIconProp) ? ( /*#__PURE__*/reactExports.cloneElement(deleteIconProp, {
	      className: clsx(deleteIconProp.props.className, classes.deleteIcon),
	      onClick: handleDeleteIconClick
	    })) : /*#__PURE__*/jsxRuntimeExports.jsx(CancelIcon, {
	      className: clsx(classes.deleteIcon),
	      onClick: handleDeleteIconClick
	    });
	  }
	  let avatar = null;
	  if (avatarProp && /*#__PURE__*/reactExports.isValidElement(avatarProp)) {
	    avatar = /*#__PURE__*/reactExports.cloneElement(avatarProp, {
	      className: clsx(classes.avatar, avatarProp.props.className)
	    });
	  }
	  let icon = null;
	  if (iconProp && /*#__PURE__*/reactExports.isValidElement(iconProp)) {
	    icon = /*#__PURE__*/reactExports.cloneElement(iconProp, {
	      className: clsx(classes.icon, iconProp.props.className)
	    });
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(ChipRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    disabled: clickable && disabled ? true : undefined,
	    onClick: onClick,
	    onKeyDown: handleKeyDown,
	    onKeyUp: handleKeyUp,
	    ref: handleRef,
	    tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
	    ownerState: ownerState
	  }, moreProps, other, {
	    children: [avatar || icon, /*#__PURE__*/jsxRuntimeExports.jsx(ChipLabel, {
	      className: clsx(classes.label),
	      ownerState: ownerState,
	      children: label
	    }), deleteIcon]
	  }));
	});
	var Chip$1 = Chip;

	function formControlState({
	  props,
	  states,
	  muiFormControl
	}) {
	  return states.reduce((acc, state) => {
	    acc[state] = props[state];
	    if (muiFormControl) {
	      if (typeof props[state] === 'undefined') {
	        acc[state] = muiFormControl[state];
	      }
	    }
	    return acc;
	  }, {});
	}

	/**
	 * @ignore - internal component.
	 */
	const FormControlContext = /*#__PURE__*/reactExports.createContext(undefined);
	var FormControlContext$1 = FormControlContext;

	function useFormControl() {
	  return reactExports.useContext(FormControlContext$1);
	}

	function GlobalStyles(props) {
	  return /*#__PURE__*/jsxRuntimeExports.jsx(GlobalStyles$1, _extends({}, props, {
	    defaultTheme: defaultTheme$1,
	    themeId: THEME_ID
	  }));
	}

	// Supports determination of isControlled().
	// Controlled input accepts its current value as a prop.
	//
	// @see https://facebook.github.io/react/docs/forms.html#controlled-components
	// @param value
	// @returns {boolean} true if string (including '') or number (including zero)
	function hasValue(value) {
	  return value != null && !(Array.isArray(value) && value.length === 0);
	}

	// Determine if field is empty or filled.
	// Response determines if label is presented above field or as placeholder.
	//
	// @param obj
	// @param SSR
	// @returns {boolean} False when not present or empty string.
	//                    True when any number or string with length.
	function isFilled(obj, SSR = false) {
	  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
	}

	// Determine if an Input is adorned on start.
	// It's corresponding to the left with LTR.
	//
	// @param obj
	// @returns {boolean} False when no adornments.
	//                    True when adorned at the start.
	function isAdornedStart(obj) {
	  return obj.startAdornment;
	}

	function getInputBaseUtilityClass(slot) {
	  return generateUtilityClass('MuiInputBase', slot);
	}
	const inputBaseClasses = generateUtilityClasses('MuiInputBase', ['root', 'formControl', 'focused', 'disabled', 'adornedStart', 'adornedEnd', 'error', 'sizeSmall', 'multiline', 'colorSecondary', 'fullWidth', 'hiddenLabel', 'readOnly', 'input', 'inputSizeSmall', 'inputMultiline', 'inputTypeSearch', 'inputAdornedStart', 'inputAdornedEnd', 'inputHiddenLabel']);
	var inputBaseClasses$1 = inputBaseClasses;

	const _excluded$1G = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
	const rootOverridesResolver = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.formControl && styles.formControl, ownerState.startAdornment && styles.adornedStart, ownerState.endAdornment && styles.adornedEnd, ownerState.error && styles.error, ownerState.size === 'small' && styles.sizeSmall, ownerState.multiline && styles.multiline, ownerState.color && styles[`color${capitalize(ownerState.color)}`], ownerState.fullWidth && styles.fullWidth, ownerState.hiddenLabel && styles.hiddenLabel];
	};
	const inputOverridesResolver = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.input, ownerState.size === 'small' && styles.inputSizeSmall, ownerState.multiline && styles.inputMultiline, ownerState.type === 'search' && styles.inputTypeSearch, ownerState.startAdornment && styles.inputAdornedStart, ownerState.endAdornment && styles.inputAdornedEnd, ownerState.hiddenLabel && styles.inputHiddenLabel];
	};
	const useUtilityClasses$1o = ownerState => {
	  const {
	    classes,
	    color,
	    disabled,
	    error,
	    endAdornment,
	    focused,
	    formControl,
	    fullWidth,
	    hiddenLabel,
	    multiline,
	    readOnly,
	    size,
	    startAdornment,
	    type
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${capitalize(color)}`, disabled && 'disabled', error && 'error', fullWidth && 'fullWidth', focused && 'focused', formControl && 'formControl', size && size !== 'medium' && `size${capitalize(size)}`, multiline && 'multiline', startAdornment && 'adornedStart', endAdornment && 'adornedEnd', hiddenLabel && 'hiddenLabel', readOnly && 'readOnly'],
	    input: ['input', disabled && 'disabled', type === 'search' && 'inputTypeSearch', multiline && 'inputMultiline', size === 'small' && 'inputSizeSmall', hiddenLabel && 'inputHiddenLabel', startAdornment && 'inputAdornedStart', endAdornment && 'inputAdornedEnd', readOnly && 'readOnly']
	  };
	  return composeClasses(slots, getInputBaseUtilityClass, classes);
	};
	const InputBaseRoot = styled$1('div', {
	  name: 'MuiInputBase',
	  slot: 'Root',
	  overridesResolver: rootOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.body1, {
	  color: (theme.vars || theme).palette.text.primary,
	  lineHeight: '1.4375em',
	  // 23px
	  boxSizing: 'border-box',
	  // Prevent padding issue with fullWidth.
	  position: 'relative',
	  cursor: 'text',
	  display: 'inline-flex',
	  alignItems: 'center',
	  [`&.${inputBaseClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.text.disabled,
	    cursor: 'default'
	  }
	}, ownerState.multiline && _extends({
	  padding: '4px 0 5px'
	}, ownerState.size === 'small' && {
	  paddingTop: 1
	}), ownerState.fullWidth && {
	  width: '100%'
	}));
	const InputBaseComponent = styled$1('input', {
	  name: 'MuiInputBase',
	  slot: 'Input',
	  overridesResolver: inputOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => {
	  const light = theme.palette.mode === 'light';
	  const placeholder = _extends({
	    color: 'currentColor'
	  }, theme.vars ? {
	    opacity: theme.vars.opacity.inputPlaceholder
	  } : {
	    opacity: light ? 0.42 : 0.5
	  }, {
	    transition: theme.transitions.create('opacity', {
	      duration: theme.transitions.duration.shorter
	    })
	  });
	  const placeholderHidden = {
	    opacity: '0 !important'
	  };
	  const placeholderVisible = theme.vars ? {
	    opacity: theme.vars.opacity.inputPlaceholder
	  } : {
	    opacity: light ? 0.42 : 0.5
	  };
	  return _extends({
	    font: 'inherit',
	    letterSpacing: 'inherit',
	    color: 'currentColor',
	    padding: '4px 0 5px',
	    border: 0,
	    boxSizing: 'content-box',
	    background: 'none',
	    height: '1.4375em',
	    // Reset 23pxthe native input line-height
	    margin: 0,
	    // Reset for Safari
	    WebkitTapHighlightColor: 'transparent',
	    display: 'block',
	    // Make the flex item shrink with Firefox
	    minWidth: 0,
	    width: '100%',
	    // Fix IE11 width issue
	    animationName: 'mui-auto-fill-cancel',
	    animationDuration: '10ms',
	    '&::-webkit-input-placeholder': placeholder,
	    '&::-moz-placeholder': placeholder,
	    // Firefox 19+
	    '&:-ms-input-placeholder': placeholder,
	    // IE11
	    '&::-ms-input-placeholder': placeholder,
	    // Edge
	    '&:focus': {
	      outline: 0
	    },
	    // Reset Firefox invalid required input style
	    '&:invalid': {
	      boxShadow: 'none'
	    },
	    '&::-webkit-search-decoration': {
	      // Remove the padding when type=search.
	      WebkitAppearance: 'none'
	    },
	    // Show and hide the placeholder logic
	    [`label[data-shrink=false] + .${inputBaseClasses$1.formControl} &`]: {
	      '&::-webkit-input-placeholder': placeholderHidden,
	      '&::-moz-placeholder': placeholderHidden,
	      // Firefox 19+
	      '&:-ms-input-placeholder': placeholderHidden,
	      // IE11
	      '&::-ms-input-placeholder': placeholderHidden,
	      // Edge
	      '&:focus::-webkit-input-placeholder': placeholderVisible,
	      '&:focus::-moz-placeholder': placeholderVisible,
	      // Firefox 19+
	      '&:focus:-ms-input-placeholder': placeholderVisible,
	      // IE11
	      '&:focus::-ms-input-placeholder': placeholderVisible // Edge
	    },
	    [`&.${inputBaseClasses$1.disabled}`]: {
	      opacity: 1,
	      // Reset iOS opacity
	      WebkitTextFillColor: (theme.vars || theme).palette.text.disabled // Fix opacity Safari bug
	    },
	    '&:-webkit-autofill': {
	      animationDuration: '5000s',
	      animationName: 'mui-auto-fill'
	    }
	  }, ownerState.size === 'small' && {
	    paddingTop: 1
	  }, ownerState.multiline && {
	    height: 'auto',
	    resize: 'none',
	    padding: 0,
	    paddingTop: 0
	  }, ownerState.type === 'search' && {
	    // Improve type search style.
	    MozAppearance: 'textfield'
	  });
	});
	const inputGlobalStyles = /*#__PURE__*/jsxRuntimeExports.jsx(GlobalStyles, {
	  styles: {
	    '@keyframes mui-auto-fill': {
	      from: {
	        display: 'block'
	      }
	    },
	    '@keyframes mui-auto-fill-cancel': {
	      from: {
	        display: 'block'
	      }
	    }
	  }
	});

	/**
	 * `InputBase` contains as few styles as possible.
	 * It aims to be a simple building block for creating an input.
	 * It contains a load of style reset and some state logic.
	 */
	const InputBase = /*#__PURE__*/reactExports.forwardRef(function InputBase(inProps, ref) {
	  var _slotProps$input;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiInputBase'
	  });
	  const {
	      'aria-describedby': ariaDescribedby,
	      autoComplete,
	      autoFocus,
	      className,
	      components = {},
	      componentsProps = {},
	      defaultValue,
	      disabled,
	      disableInjectingGlobalStyles,
	      endAdornment,
	      fullWidth = false,
	      id,
	      inputComponent = 'input',
	      inputProps: inputPropsProp = {},
	      inputRef: inputRefProp,
	      maxRows,
	      minRows,
	      multiline = false,
	      name,
	      onBlur,
	      onChange,
	      onClick,
	      onFocus,
	      onKeyDown,
	      onKeyUp,
	      placeholder,
	      readOnly,
	      renderSuffix,
	      rows,
	      slotProps = {},
	      slots = {},
	      startAdornment,
	      type = 'text',
	      value: valueProp
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1G);
	  const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
	  const {
	    current: isControlled
	  } = reactExports.useRef(value != null);
	  const inputRef = reactExports.useRef();
	  const handleInputRefWarning = reactExports.useCallback(instance => {
	  }, []);
	  const handleInputRef = useForkRef(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
	  const [focused, setFocused] = reactExports.useState(false);
	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['color', 'disabled', 'error', 'hiddenLabel', 'size', 'required', 'filled']
	  });
	  fcs.focused = muiFormControl ? muiFormControl.focused : focused;

	  // The blur won't fire when the disabled state is set on a focused input.
	  // We need to book keep the focused state manually.
	  reactExports.useEffect(() => {
	    if (!muiFormControl && disabled && focused) {
	      setFocused(false);
	      if (onBlur) {
	        onBlur();
	      }
	    }
	  }, [muiFormControl, disabled, focused, onBlur]);
	  const onFilled = muiFormControl && muiFormControl.onFilled;
	  const onEmpty = muiFormControl && muiFormControl.onEmpty;
	  const checkDirty = reactExports.useCallback(obj => {
	    if (isFilled(obj)) {
	      if (onFilled) {
	        onFilled();
	      }
	    } else if (onEmpty) {
	      onEmpty();
	    }
	  }, [onFilled, onEmpty]);
	  useEnhancedEffect$1(() => {
	    if (isControlled) {
	      checkDirty({
	        value
	      });
	    }
	  }, [value, checkDirty, isControlled]);
	  const handleFocus = event => {
	    // Fix a bug with IE11 where the focus/blur events are triggered
	    // while the component is disabled.
	    if (fcs.disabled) {
	      event.stopPropagation();
	      return;
	    }
	    if (onFocus) {
	      onFocus(event);
	    }
	    if (inputPropsProp.onFocus) {
	      inputPropsProp.onFocus(event);
	    }
	    if (muiFormControl && muiFormControl.onFocus) {
	      muiFormControl.onFocus(event);
	    } else {
	      setFocused(true);
	    }
	  };
	  const handleBlur = event => {
	    if (onBlur) {
	      onBlur(event);
	    }
	    if (inputPropsProp.onBlur) {
	      inputPropsProp.onBlur(event);
	    }
	    if (muiFormControl && muiFormControl.onBlur) {
	      muiFormControl.onBlur(event);
	    } else {
	      setFocused(false);
	    }
	  };
	  const handleChange = (event, ...args) => {
	    if (!isControlled) {
	      const element = event.target || inputRef.current;
	      if (element == null) {
	        throw new Error(formatMuiErrorMessage(1));
	      }
	      checkDirty({
	        value: element.value
	      });
	    }
	    if (inputPropsProp.onChange) {
	      inputPropsProp.onChange(event, ...args);
	    }

	    // Perform in the willUpdate
	    if (onChange) {
	      onChange(event, ...args);
	    }
	  };

	  // Check the input state on mount, in case it was filled by the user
	  // or auto filled by the browser before the hydration (for SSR).
	  reactExports.useEffect(() => {
	    checkDirty(inputRef.current);
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	  const handleClick = event => {
	    if (inputRef.current && event.currentTarget === event.target) {
	      inputRef.current.focus();
	    }
	    if (onClick) {
	      onClick(event);
	    }
	  };
	  let InputComponent = inputComponent;
	  let inputProps = inputPropsProp;
	  if (multiline && InputComponent === 'input') {
	    if (rows) {
	      inputProps = _extends({
	        type: undefined,
	        minRows: rows,
	        maxRows: rows
	      }, inputProps);
	    } else {
	      inputProps = _extends({
	        type: undefined,
	        maxRows,
	        minRows
	      }, inputProps);
	    }
	    InputComponent = TextareaAutosize;
	  }
	  const handleAutoFill = event => {
	    // Provide a fake value as Chrome might not let you access it for security reasons.
	    checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
	      value: 'x'
	    });
	  };
	  reactExports.useEffect(() => {
	    if (muiFormControl) {
	      muiFormControl.setAdornedStart(Boolean(startAdornment));
	    }
	  }, [muiFormControl, startAdornment]);
	  const ownerState = _extends({}, props, {
	    color: fcs.color || 'primary',
	    disabled: fcs.disabled,
	    endAdornment,
	    error: fcs.error,
	    focused: fcs.focused,
	    formControl: muiFormControl,
	    fullWidth,
	    hiddenLabel: fcs.hiddenLabel,
	    multiline,
	    size: fcs.size,
	    startAdornment,
	    type
	  });
	  const classes = useUtilityClasses$1o(ownerState);
	  const Root = slots.root || components.Root || InputBaseRoot;
	  const rootProps = slotProps.root || componentsProps.root || {};
	  const Input = slots.input || components.Input || InputBaseComponent;
	  inputProps = _extends({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	    children: [!disableInjectingGlobalStyles && inputGlobalStyles, /*#__PURE__*/jsxRuntimeExports.jsxs(Root, _extends({}, rootProps, !isHostComponent(Root) && {
	      ownerState: _extends({}, ownerState, rootProps.ownerState)
	    }, {
	      ref: ref,
	      onClick: handleClick
	    }, other, {
	      className: clsx(classes.root, rootProps.className, className, readOnly && 'MuiInputBase-readOnly'),
	      children: [startAdornment, /*#__PURE__*/jsxRuntimeExports.jsx(FormControlContext$1.Provider, {
	        value: null,
	        children: /*#__PURE__*/jsxRuntimeExports.jsx(Input, _extends({
	          ownerState: ownerState,
	          "aria-invalid": fcs.error,
	          "aria-describedby": ariaDescribedby,
	          autoComplete: autoComplete,
	          autoFocus: autoFocus,
	          defaultValue: defaultValue,
	          disabled: fcs.disabled,
	          id: id,
	          onAnimationStart: handleAutoFill,
	          name: name,
	          placeholder: placeholder,
	          readOnly: readOnly,
	          required: fcs.required,
	          rows: rows,
	          value: value,
	          onKeyDown: onKeyDown,
	          onKeyUp: onKeyUp,
	          type: type
	        }, inputProps, !isHostComponent(Input) && {
	          as: InputComponent,
	          ownerState: _extends({}, ownerState, inputProps.ownerState)
	        }, {
	          ref: handleInputRef,
	          className: clsx(classes.input, inputProps.className, readOnly && 'MuiInputBase-readOnly'),
	          onBlur: handleBlur,
	          onChange: handleChange,
	          onFocus: handleFocus
	        }))
	      }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
	        startAdornment
	      })) : null]
	    }))]
	  });
	});
	var InputBase$1 = InputBase;

	function getInputUtilityClass(slot) {
	  return generateUtilityClass('MuiInput', slot);
	}
	const inputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiInput', ['root', 'underline', 'input']));
	var inputClasses$1 = inputClasses;

	function getOutlinedInputUtilityClass(slot) {
	  return generateUtilityClass('MuiOutlinedInput', slot);
	}
	const outlinedInputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiOutlinedInput', ['root', 'notchedOutline', 'input']));
	var outlinedInputClasses$1 = outlinedInputClasses;

	function getFilledInputUtilityClass(slot) {
	  return generateUtilityClass('MuiFilledInput', slot);
	}
	const filledInputClasses = _extends({}, inputBaseClasses$1, generateUtilityClasses('MuiFilledInput', ['root', 'underline', 'input']));
	var filledInputClasses$1 = filledInputClasses;

	var ArrowDropDownIcon$1 = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M7 10l5 5 5-5z"
	}), 'ArrowDropDown');

	function getAutocompleteUtilityClass(slot) {
	  return generateUtilityClass('MuiAutocomplete', slot);
	}
	const autocompleteClasses = generateUtilityClasses('MuiAutocomplete', ['root', 'expanded', 'fullWidth', 'focused', 'focusVisible', 'tag', 'tagSizeSmall', 'tagSizeMedium', 'hasPopupIcon', 'hasClearIcon', 'inputRoot', 'input', 'inputFocused', 'endAdornment', 'clearIndicator', 'popupIndicator', 'popupIndicatorOpen', 'popper', 'popperDisablePortal', 'paper', 'listbox', 'loading', 'noOptions', 'option', 'groupLabel', 'groupUl']);
	var autocompleteClasses$1 = autocompleteClasses;

	var _ClearIcon, _ArrowDropDownIcon;
	const _excluded$1F = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionKey", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "slotProps", "value"],
	  _excluded2$c = ["ref"],
	  _excluded3$6 = ["key"];
	const useUtilityClasses$1n = ownerState => {
	  const {
	    classes,
	    disablePortal,
	    expanded,
	    focused,
	    fullWidth,
	    hasClearIcon,
	    hasPopupIcon,
	    inputFocused,
	    popupOpen,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', expanded && 'expanded', focused && 'focused', fullWidth && 'fullWidth', hasClearIcon && 'hasClearIcon', hasPopupIcon && 'hasPopupIcon'],
	    inputRoot: ['inputRoot'],
	    input: ['input', inputFocused && 'inputFocused'],
	    tag: ['tag', `tagSize${capitalize(size)}`],
	    endAdornment: ['endAdornment'],
	    clearIndicator: ['clearIndicator'],
	    popupIndicator: ['popupIndicator', popupOpen && 'popupIndicatorOpen'],
	    popper: ['popper', disablePortal && 'popperDisablePortal'],
	    paper: ['paper'],
	    listbox: ['listbox'],
	    loading: ['loading'],
	    noOptions: ['noOptions'],
	    option: ['option'],
	    groupLabel: ['groupLabel'],
	    groupUl: ['groupUl']
	  };
	  return composeClasses(slots, getAutocompleteUtilityClass, classes);
	};
	const AutocompleteRoot = styled$1('div', {
	  name: 'MuiAutocomplete',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    const {
	      fullWidth,
	      hasClearIcon,
	      hasPopupIcon,
	      inputFocused,
	      size
	    } = ownerState;
	    return [{
	      [`& .${autocompleteClasses$1.tag}`]: styles.tag
	    }, {
	      [`& .${autocompleteClasses$1.tag}`]: styles[`tagSize${capitalize(size)}`]
	    }, {
	      [`& .${autocompleteClasses$1.inputRoot}`]: styles.inputRoot
	    }, {
	      [`& .${autocompleteClasses$1.input}`]: styles.input
	    }, {
	      [`& .${autocompleteClasses$1.input}`]: inputFocused && styles.inputFocused
	    }, styles.root, fullWidth && styles.fullWidth, hasPopupIcon && styles.hasPopupIcon, hasClearIcon && styles.hasClearIcon];
	  }
	})(({
	  ownerState
	}) => _extends({
	  [`&.${autocompleteClasses$1.focused} .${autocompleteClasses$1.clearIndicator}`]: {
	    visibility: 'visible'
	  },
	  /* Avoid double tap issue on iOS */
	  '@media (pointer: fine)': {
	    [`&:hover .${autocompleteClasses$1.clearIndicator}`]: {
	      visibility: 'visible'
	    }
	  }
	}, ownerState.fullWidth && {
	  width: '100%'
	}, {
	  [`& .${autocompleteClasses$1.tag}`]: _extends({
	    margin: 3,
	    maxWidth: 'calc(100% - 6px)'
	  }, ownerState.size === 'small' && {
	    margin: 2,
	    maxWidth: 'calc(100% - 4px)'
	  }),
	  [`& .${autocompleteClasses$1.inputRoot}`]: {
	    flexWrap: 'wrap',
	    [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
	      paddingRight: 26 + 4
	    },
	    [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
	      paddingRight: 52 + 4
	    },
	    [`& .${autocompleteClasses$1.input}`]: {
	      width: 0,
	      minWidth: 30
	    }
	  },
	  [`& .${inputClasses$1.root}`]: {
	    paddingBottom: 1,
	    '& .MuiInput-input': {
	      padding: '4px 4px 4px 0px'
	    }
	  },
	  [`& .${inputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
	    [`& .${inputClasses$1.input}`]: {
	      padding: '2px 4px 3px 0'
	    }
	  },
	  [`& .${outlinedInputClasses$1.root}`]: {
	    padding: 9,
	    [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
	      paddingRight: 26 + 4 + 9
	    },
	    [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
	      paddingRight: 52 + 4 + 9
	    },
	    [`& .${autocompleteClasses$1.input}`]: {
	      padding: '7.5px 4px 7.5px 5px'
	    },
	    [`& .${autocompleteClasses$1.endAdornment}`]: {
	      right: 9
	    }
	  },
	  [`& .${outlinedInputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
	    // Don't specify paddingRight, as it overrides the default value set when there is only
	    // one of the popup or clear icon as the specificity is equal so the latter one wins
	    paddingTop: 6,
	    paddingBottom: 6,
	    paddingLeft: 6,
	    [`& .${autocompleteClasses$1.input}`]: {
	      padding: '2.5px 4px 2.5px 8px'
	    }
	  },
	  [`& .${filledInputClasses$1.root}`]: {
	    paddingTop: 19,
	    paddingLeft: 8,
	    [`.${autocompleteClasses$1.hasPopupIcon}&, .${autocompleteClasses$1.hasClearIcon}&`]: {
	      paddingRight: 26 + 4 + 9
	    },
	    [`.${autocompleteClasses$1.hasPopupIcon}.${autocompleteClasses$1.hasClearIcon}&`]: {
	      paddingRight: 52 + 4 + 9
	    },
	    [`& .${filledInputClasses$1.input}`]: {
	      padding: '7px 4px'
	    },
	    [`& .${autocompleteClasses$1.endAdornment}`]: {
	      right: 9
	    }
	  },
	  [`& .${filledInputClasses$1.root}.${inputBaseClasses$1.sizeSmall}`]: {
	    paddingBottom: 1,
	    [`& .${filledInputClasses$1.input}`]: {
	      padding: '2.5px 4px'
	    }
	  },
	  [`& .${inputBaseClasses$1.hiddenLabel}`]: {
	    paddingTop: 8
	  },
	  [`& .${filledInputClasses$1.root}.${inputBaseClasses$1.hiddenLabel}`]: {
	    paddingTop: 0,
	    paddingBottom: 0,
	    [`& .${autocompleteClasses$1.input}`]: {
	      paddingTop: 16,
	      paddingBottom: 17
	    }
	  },
	  [`& .${filledInputClasses$1.root}.${inputBaseClasses$1.hiddenLabel}.${inputBaseClasses$1.sizeSmall}`]: {
	    [`& .${autocompleteClasses$1.input}`]: {
	      paddingTop: 8,
	      paddingBottom: 9
	    }
	  },
	  [`& .${autocompleteClasses$1.input}`]: _extends({
	    flexGrow: 1,
	    textOverflow: 'ellipsis',
	    opacity: 0
	  }, ownerState.inputFocused && {
	    opacity: 1
	  })
	}));
	const AutocompleteEndAdornment = styled$1('div', {
	  name: 'MuiAutocomplete',
	  slot: 'EndAdornment',
	  overridesResolver: (props, styles) => styles.endAdornment
	})({
	  // We use a position absolute to support wrapping tags.
	  position: 'absolute',
	  right: 0,
	  top: 'calc(50% - 14px)' // Center vertically
	});
	const AutocompleteClearIndicator = styled$1(IconButton$1, {
	  name: 'MuiAutocomplete',
	  slot: 'ClearIndicator',
	  overridesResolver: (props, styles) => styles.clearIndicator
	})({
	  marginRight: -2,
	  padding: 4,
	  visibility: 'hidden'
	});
	const AutocompletePopupIndicator = styled$1(IconButton$1, {
	  name: 'MuiAutocomplete',
	  slot: 'PopupIndicator',
	  overridesResolver: ({
	    ownerState
	  }, styles) => _extends({}, styles.popupIndicator, ownerState.popupOpen && styles.popupIndicatorOpen)
	})(({
	  ownerState
	}) => _extends({
	  padding: 2,
	  marginRight: -2
	}, ownerState.popupOpen && {
	  transform: 'rotate(180deg)'
	}));
	const AutocompletePopper = styled$1(MuiPopper, {
	  name: 'MuiAutocomplete',
	  slot: 'Popper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${autocompleteClasses$1.option}`]: styles.option
	    }, styles.popper, ownerState.disablePortal && styles.popperDisablePortal];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  zIndex: (theme.vars || theme).zIndex.modal
	}, ownerState.disablePortal && {
	  position: 'absolute'
	}));
	const AutocompletePaper = styled$1(MuiPaper, {
	  name: 'MuiAutocomplete',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})(({
	  theme
	}) => _extends({}, theme.typography.body1, {
	  overflow: 'auto'
	}));
	const AutocompleteLoading = styled$1('div', {
	  name: 'MuiAutocomplete',
	  slot: 'Loading',
	  overridesResolver: (props, styles) => styles.loading
	})(({
	  theme
	}) => ({
	  color: (theme.vars || theme).palette.text.secondary,
	  padding: '14px 16px'
	}));
	const AutocompleteNoOptions = styled$1('div', {
	  name: 'MuiAutocomplete',
	  slot: 'NoOptions',
	  overridesResolver: (props, styles) => styles.noOptions
	})(({
	  theme
	}) => ({
	  color: (theme.vars || theme).palette.text.secondary,
	  padding: '14px 16px'
	}));
	const AutocompleteListbox = styled$1('div', {
	  name: 'MuiAutocomplete',
	  slot: 'Listbox',
	  overridesResolver: (props, styles) => styles.listbox
	})(({
	  theme
	}) => ({
	  listStyle: 'none',
	  margin: 0,
	  padding: '8px 0',
	  maxHeight: '40vh',
	  overflow: 'auto',
	  position: 'relative',
	  [`& .${autocompleteClasses$1.option}`]: {
	    minHeight: 48,
	    display: 'flex',
	    overflow: 'hidden',
	    justifyContent: 'flex-start',
	    alignItems: 'center',
	    cursor: 'pointer',
	    paddingTop: 6,
	    boxSizing: 'border-box',
	    outline: '0',
	    WebkitTapHighlightColor: 'transparent',
	    paddingBottom: 6,
	    paddingLeft: 16,
	    paddingRight: 16,
	    [theme.breakpoints.up('sm')]: {
	      minHeight: 'auto'
	    },
	    [`&.${autocompleteClasses$1.focused}`]: {
	      backgroundColor: (theme.vars || theme).palette.action.hover,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    },
	    '&[aria-disabled="true"]': {
	      opacity: (theme.vars || theme).palette.action.disabledOpacity,
	      pointerEvents: 'none'
	    },
	    [`&.${autocompleteClasses$1.focusVisible}`]: {
	      backgroundColor: (theme.vars || theme).palette.action.focus
	    },
	    '&[aria-selected="true"]': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	      [`&.${autocompleteClasses$1.focused}`]: {
	        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: (theme.vars || theme).palette.action.selected
	        }
	      },
	      [`&.${autocompleteClasses$1.focusVisible}`]: {
	        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	      }
	    }
	  }
	}));
	const AutocompleteGroupLabel = styled$1(ListSubheader$1, {
	  name: 'MuiAutocomplete',
	  slot: 'GroupLabel',
	  overridesResolver: (props, styles) => styles.groupLabel
	})(({
	  theme
	}) => ({
	  backgroundColor: (theme.vars || theme).palette.background.paper,
	  top: -8
	}));
	const AutocompleteGroupUl = styled$1('ul', {
	  name: 'MuiAutocomplete',
	  slot: 'GroupUl',
	  overridesResolver: (props, styles) => styles.groupUl
	})({
	  padding: 0,
	  [`& .${autocompleteClasses$1.option}`]: {
	    paddingLeft: 24
	  }
	});
	const Autocomplete = /*#__PURE__*/reactExports.forwardRef(function Autocomplete(inProps, ref) {
	  var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAutocomplete'
	  });

	  /* eslint-disable @typescript-eslint/no-unused-vars */
	  const {
	      autoComplete = false,
	      autoHighlight = false,
	      autoSelect = false,
	      blurOnSelect = false,
	      ChipProps,
	      className,
	      clearIcon = _ClearIcon || (_ClearIcon = /*#__PURE__*/jsxRuntimeExports.jsx(ClearIcon$1, {
	        fontSize: "small"
	      })),
	      clearOnBlur = !props.freeSolo,
	      clearOnEscape = false,
	      clearText = 'Clear',
	      closeText = 'Close',
	      componentsProps = {},
	      defaultValue = props.multiple ? [] : null,
	      disableClearable = false,
	      disableCloseOnSelect = false,
	      disabled = false,
	      disabledItemsFocusable = false,
	      disableListWrap = false,
	      disablePortal = false,
	      filterSelectedOptions = false,
	      forcePopupIcon = 'auto',
	      freeSolo = false,
	      fullWidth = false,
	      getLimitTagsText = more => `+${more}`,
	      getOptionLabel: getOptionLabelProp,
	      groupBy,
	      handleHomeEndKeys = !props.freeSolo,
	      includeInputInList = false,
	      limitTags = -1,
	      ListboxComponent = 'ul',
	      ListboxProps,
	      loading = false,
	      loadingText = 'Loading…',
	      multiple = false,
	      noOptionsText = 'No options',
	      openOnFocus = false,
	      openText = 'Open',
	      PaperComponent = MuiPaper,
	      PopperComponent = MuiPopper,
	      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /*#__PURE__*/jsxRuntimeExports.jsx(ArrowDropDownIcon$1, {})),
	      readOnly = false,
	      renderGroup: renderGroupProp,
	      renderInput,
	      renderOption: renderOptionProp,
	      renderTags,
	      selectOnFocus = !props.freeSolo,
	      size = 'medium',
	      slotProps = {}
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1F);
	  /* eslint-enable @typescript-eslint/no-unused-vars */

	  const {
	    getRootProps,
	    getInputProps,
	    getInputLabelProps,
	    getPopupIndicatorProps,
	    getClearProps,
	    getTagProps,
	    getListboxProps,
	    getOptionProps,
	    value,
	    dirty,
	    expanded,
	    id,
	    popupOpen,
	    focused,
	    focusedTag,
	    anchorEl,
	    setAnchorEl,
	    inputValue,
	    groupedOptions
	  } = useAutocomplete(_extends({}, props, {
	    componentName: 'Autocomplete'
	  }));
	  const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
	  const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
	  const {
	    onMouseDown: handleInputMouseDown
	  } = getInputProps();
	  const {
	    ref: externalListboxRef
	  } = ListboxProps != null ? ListboxProps : {};
	  const _getListboxProps = getListboxProps(),
	    {
	      ref: listboxRef
	    } = _getListboxProps,
	    otherListboxProps = _objectWithoutPropertiesLoose(_getListboxProps, _excluded2$c);
	  const combinedListboxRef = useForkRef(listboxRef, externalListboxRef);
	  const defaultGetOptionLabel = option => {
	    var _option$label;
	    return (_option$label = option.label) != null ? _option$label : option;
	  };
	  const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;

	  // If you modify this, make sure to keep the `AutocompleteOwnerState` type in sync.
	  const ownerState = _extends({}, props, {
	    disablePortal,
	    expanded,
	    focused,
	    fullWidth,
	    getOptionLabel,
	    hasClearIcon,
	    hasPopupIcon,
	    inputFocused: focusedTag === -1,
	    popupOpen,
	    size
	  });
	  const classes = useUtilityClasses$1n(ownerState);
	  let startAdornment;
	  if (multiple && value.length > 0) {
	    const getCustomizedTagProps = params => _extends({
	      className: classes.tag,
	      disabled
	    }, getTagProps(params));
	    if (renderTags) {
	      startAdornment = renderTags(value, getCustomizedTagProps, ownerState);
	    } else {
	      startAdornment = value.map((option, index) => /*#__PURE__*/jsxRuntimeExports.jsx(Chip$1, _extends({
	        label: getOptionLabel(option),
	        size: size
	      }, getCustomizedTagProps({
	        index
	      }), ChipProps)));
	    }
	  }
	  if (limitTags > -1 && Array.isArray(startAdornment)) {
	    const more = startAdornment.length - limitTags;
	    if (!focused && more > 0) {
	      startAdornment = startAdornment.splice(0, limitTags);
	      startAdornment.push( /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	        className: classes.tag,
	        children: getLimitTagsText(more)
	      }, startAdornment.length));
	    }
	  }
	  const defaultRenderGroup = params => /*#__PURE__*/jsxRuntimeExports.jsxs("li", {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(AutocompleteGroupLabel, {
	      className: classes.groupLabel,
	      ownerState: ownerState,
	      component: "div",
	      children: params.group
	    }), /*#__PURE__*/jsxRuntimeExports.jsx(AutocompleteGroupUl, {
	      className: classes.groupUl,
	      ownerState: ownerState,
	      children: params.children
	    })]
	  }, params.key);
	  const renderGroup = renderGroupProp || defaultRenderGroup;
	  const defaultRenderOption = (props2, option) => {
	    const {
	        key
	      } = props2,
	      otherProps = _objectWithoutPropertiesLoose(props2, _excluded3$6);
	    return /*#__PURE__*/jsxRuntimeExports.jsx("li", _extends({}, otherProps, {
	      children: getOptionLabel(option)
	    }), key);
	  };
	  const renderOption = renderOptionProp || defaultRenderOption;
	  const renderListOption = (option, index) => {
	    const optionProps = getOptionProps({
	      option,
	      index
	    });
	    return renderOption(_extends({}, optionProps, {
	      className: classes.option
	    }), option, {
	      selected: optionProps['aria-selected'],
	      index,
	      inputValue
	    }, ownerState);
	  };
	  const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;
	  const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;
	  const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;
	  const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(AutocompleteRoot, _extends({
	      ref: ref,
	      className: clsx(classes.root, className),
	      ownerState: ownerState
	    }, getRootProps(other), {
	      children: renderInput({
	        id,
	        disabled,
	        fullWidth: true,
	        size: size === 'small' ? 'small' : undefined,
	        InputLabelProps: getInputLabelProps(),
	        InputProps: _extends({
	          ref: setAnchorEl,
	          className: classes.inputRoot,
	          startAdornment,
	          onClick: event => {
	            if (event.target === event.currentTarget) {
	              handleInputMouseDown(event);
	            }
	          }
	        }, (hasClearIcon || hasPopupIcon) && {
	          endAdornment: /*#__PURE__*/jsxRuntimeExports.jsxs(AutocompleteEndAdornment, {
	            className: classes.endAdornment,
	            ownerState: ownerState,
	            children: [hasClearIcon ? /*#__PURE__*/jsxRuntimeExports.jsx(AutocompleteClearIndicator, _extends({}, getClearProps(), {
	              "aria-label": clearText,
	              title: clearText,
	              ownerState: ownerState
	            }, clearIndicatorSlotProps, {
	              className: clsx(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),
	              children: clearIcon
	            })) : null, hasPopupIcon ? /*#__PURE__*/jsxRuntimeExports.jsx(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {
	              disabled: disabled,
	              "aria-label": popupOpen ? closeText : openText,
	              title: popupOpen ? closeText : openText,
	              ownerState: ownerState
	            }, popupIndicatorSlotProps, {
	              className: clsx(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),
	              children: popupIcon
	            })) : null]
	          })
	        }),
	        inputProps: _extends({
	          className: classes.input,
	          disabled,
	          readOnly
	        }, getInputProps())
	      })
	    })), anchorEl ? /*#__PURE__*/jsxRuntimeExports.jsx(AutocompletePopper, _extends({
	      as: PopperComponent,
	      disablePortal: disablePortal,
	      style: {
	        width: anchorEl ? anchorEl.clientWidth : null
	      },
	      ownerState: ownerState,
	      role: "presentation",
	      anchorEl: anchorEl,
	      open: popupOpen
	    }, popperSlotProps, {
	      className: clsx(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),
	      children: /*#__PURE__*/jsxRuntimeExports.jsxs(AutocompletePaper, _extends({
	        ownerState: ownerState,
	        as: PaperComponent
	      }, paperSlotProps, {
	        className: clsx(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),
	        children: [loading && groupedOptions.length === 0 ? /*#__PURE__*/jsxRuntimeExports.jsx(AutocompleteLoading, {
	          className: classes.loading,
	          ownerState: ownerState,
	          children: loadingText
	        }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /*#__PURE__*/jsxRuntimeExports.jsx(AutocompleteNoOptions, {
	          className: classes.noOptions,
	          ownerState: ownerState,
	          role: "presentation",
	          onMouseDown: event => {
	            // Prevent input blur when interacting with the "no options" content
	            event.preventDefault();
	          },
	          children: noOptionsText
	        }) : null, groupedOptions.length > 0 ? /*#__PURE__*/jsxRuntimeExports.jsx(AutocompleteListbox, _extends({
	          as: ListboxComponent,
	          className: classes.listbox,
	          ownerState: ownerState
	        }, otherListboxProps, ListboxProps, {
	          ref: combinedListboxRef,
	          children: groupedOptions.map((option, index) => {
	            if (groupBy) {
	              return renderGroup({
	                key: option.key,
	                group: option.group,
	                children: option.options.map((option2, index2) => renderListOption(option2, option.index + index2))
	              });
	            }
	            return renderListOption(option, index);
	          })
	        })) : null]
	      }))
	    })) : null]
	  });
	});
	var Autocomplete$1 = Autocomplete;

	var Person = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
	}), 'Person');

	function getAvatarUtilityClass(slot) {
	  return generateUtilityClass('MuiAvatar', slot);
	}
	generateUtilityClasses('MuiAvatar', ['root', 'colorDefault', 'circular', 'rounded', 'square', 'img', 'fallback']);

	const _excluded$1E = ["alt", "children", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"];
	const useUtilityClasses$1m = ownerState => {
	  const {
	    classes,
	    variant,
	    colorDefault
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, colorDefault && 'colorDefault'],
	    img: ['img'],
	    fallback: ['fallback']
	  };
	  return composeClasses(slots, getAvatarUtilityClass, classes);
	};
	const AvatarRoot = styled$1('div', {
	  name: 'MuiAvatar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], ownerState.colorDefault && styles.colorDefault];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  position: 'relative',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  flexShrink: 0,
	  width: 40,
	  height: 40,
	  fontFamily: theme.typography.fontFamily,
	  fontSize: theme.typography.pxToRem(20),
	  lineHeight: 1,
	  borderRadius: '50%',
	  overflow: 'hidden',
	  userSelect: 'none'
	}, ownerState.variant === 'rounded' && {
	  borderRadius: (theme.vars || theme).shape.borderRadius
	}, ownerState.variant === 'square' && {
	  borderRadius: 0
	}, ownerState.colorDefault && _extends({
	  color: (theme.vars || theme).palette.background.default
	}, theme.vars ? {
	  backgroundColor: theme.vars.palette.Avatar.defaultBg
	} : {
	  backgroundColor: theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
	})));
	const AvatarImg = styled$1('img', {
	  name: 'MuiAvatar',
	  slot: 'Img',
	  overridesResolver: (props, styles) => styles.img
	})({
	  width: '100%',
	  height: '100%',
	  textAlign: 'center',
	  // Handle non-square image. The property isn't supported by IE11.
	  objectFit: 'cover',
	  // Hide alt text.
	  color: 'transparent',
	  // Hide the image broken icon, only works on Chrome.
	  textIndent: 10000
	});
	const AvatarFallback = styled$1(Person, {
	  name: 'MuiAvatar',
	  slot: 'Fallback',
	  overridesResolver: (props, styles) => styles.fallback
	})({
	  width: '75%',
	  height: '75%'
	});
	function useLoaded({
	  crossOrigin,
	  referrerPolicy,
	  src,
	  srcSet
	}) {
	  const [loaded, setLoaded] = reactExports.useState(false);
	  reactExports.useEffect(() => {
	    if (!src && !srcSet) {
	      return undefined;
	    }
	    setLoaded(false);
	    let active = true;
	    const image = new Image();
	    image.onload = () => {
	      if (!active) {
	        return;
	      }
	      setLoaded('loaded');
	    };
	    image.onerror = () => {
	      if (!active) {
	        return;
	      }
	      setLoaded('error');
	    };
	    image.crossOrigin = crossOrigin;
	    image.referrerPolicy = referrerPolicy;
	    image.src = src;
	    if (srcSet) {
	      image.srcset = srcSet;
	    }
	    return () => {
	      active = false;
	    };
	  }, [crossOrigin, referrerPolicy, src, srcSet]);
	  return loaded;
	}
	const Avatar = /*#__PURE__*/reactExports.forwardRef(function Avatar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiAvatar'
	  });
	  const {
	      alt,
	      children: childrenProp,
	      className,
	      component = 'div',
	      imgProps,
	      sizes,
	      src,
	      srcSet,
	      variant = 'circular'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1E);
	  let children = null;

	  // Use a hook instead of onError on the img element to support server-side rendering.
	  const loaded = useLoaded(_extends({}, imgProps, {
	    src,
	    srcSet
	  }));
	  const hasImg = src || srcSet;
	  const hasImgNotFailing = hasImg && loaded !== 'error';
	  const ownerState = _extends({}, props, {
	    colorDefault: !hasImgNotFailing,
	    component,
	    variant
	  });
	  const classes = useUtilityClasses$1m(ownerState);
	  if (hasImgNotFailing) {
	    children = /*#__PURE__*/jsxRuntimeExports.jsx(AvatarImg, _extends({
	      alt: alt,
	      srcSet: srcSet,
	      src: src,
	      sizes: sizes,
	      ownerState: ownerState,
	      className: classes.img
	    }, imgProps));
	  } else if (childrenProp != null) {
	    children = childrenProp;
	  } else if (hasImg && alt) {
	    children = alt[0];
	  } else {
	    children = /*#__PURE__*/jsxRuntimeExports.jsx(AvatarFallback, {
	      ownerState: ownerState,
	      className: classes.fallback
	    });
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(AvatarRoot, _extends({
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other, {
	    children: children
	  }));
	});
	var Avatar$1 = Avatar;

	const _excluded$1D = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
	const styles$3 = {
	  entering: {
	    opacity: 1
	  },
	  entered: {
	    opacity: 1
	  }
	};

	/**
	 * The Fade transition is used by the [Modal](/material-ui/react-modal/) component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */
	const Fade = /*#__PURE__*/reactExports.forwardRef(function Fade(props, ref) {
	  const theme = useTheme();
	  const defaultTimeout = {
	    enter: theme.transitions.duration.enteringScreen,
	    exit: theme.transitions.duration.leavingScreen
	  };
	  const {
	      addEndListener,
	      appear = true,
	      children,
	      easing,
	      in: inProp,
	      onEnter,
	      onEntered,
	      onEntering,
	      onExit,
	      onExited,
	      onExiting,
	      style,
	      timeout = defaultTimeout,
	      // eslint-disable-next-line react/prop-types
	      TransitionComponent = Transition$1
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1D);
	  const nodeRef = reactExports.useRef(null);
	  const handleRef = useForkRef(nodeRef, children.ref, ref);
	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current;

	      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };
	  const handleEntering = normalizedTransitionCallback(onEntering);
	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    reflow(node); // So the animation always start from the start.

	    const transitionProps = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });
	    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
	    node.style.transition = theme.transitions.create('opacity', transitionProps);
	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback(onEntered);
	  const handleExiting = normalizedTransitionCallback(onExiting);
	  const handleExit = normalizedTransitionCallback(node => {
	    const transitionProps = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });
	    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
	    node.style.transition = theme.transitions.create('opacity', transitionProps);
	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);
	  const handleAddEndListener = next => {
	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends({
	    appear: appear,
	    in: inProp,
	    nodeRef: nodeRef ,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    timeout: timeout
	  }, other, {
	    children: (state, childProps) => {
	      return /*#__PURE__*/reactExports.cloneElement(children, _extends({
	        style: _extends({
	          opacity: 0,
	          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	        }, styles$3[state], style, children.props.style),
	        ref: handleRef
	      }, childProps));
	    }
	  }));
	});
	var Fade$1 = Fade;

	function getBackdropUtilityClass(slot) {
	  return generateUtilityClass('MuiBackdrop', slot);
	}
	generateUtilityClasses('MuiBackdrop', ['root', 'invisible']);

	const _excluded$1C = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
	const useUtilityClasses$1l = ownerState => {
	  const {
	    classes,
	    invisible
	  } = ownerState;
	  const slots = {
	    root: ['root', invisible && 'invisible']
	  };
	  return composeClasses(slots, getBackdropUtilityClass, classes);
	};
	const BackdropRoot = styled$1('div', {
	  name: 'MuiBackdrop',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.invisible && styles.invisible];
	  }
	})(({
	  ownerState
	}) => _extends({
	  position: 'fixed',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  right: 0,
	  bottom: 0,
	  top: 0,
	  left: 0,
	  backgroundColor: 'rgba(0, 0, 0, 0.5)',
	  WebkitTapHighlightColor: 'transparent'
	}, ownerState.invisible && {
	  backgroundColor: 'transparent'
	}));
	const Backdrop = /*#__PURE__*/reactExports.forwardRef(function Backdrop(inProps, ref) {
	  var _slotProps$root, _ref, _slots$root;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiBackdrop'
	  });
	  const {
	      children,
	      className,
	      component = 'div',
	      components = {},
	      componentsProps = {},
	      invisible = false,
	      open,
	      slotProps = {},
	      slots = {},
	      TransitionComponent = Fade$1,
	      transitionDuration
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1C);
	  const ownerState = _extends({}, props, {
	    component,
	    invisible
	  });
	  const classes = useUtilityClasses$1l(ownerState);
	  const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends({
	    in: open,
	    timeout: transitionDuration
	  }, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(BackdropRoot, _extends({
	      "aria-hidden": true
	    }, rootSlotProps, {
	      as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
	      className: clsx(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
	      ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
	      classes: classes,
	      ref: ref,
	      children: children
	    }))
	  }));
	});
	var Backdrop$1 = Backdrop;

	function getBadgeUtilityClass(slot) {
	  return generateUtilityClass('MuiBadge', slot);
	}
	const badgeClasses = generateUtilityClasses('MuiBadge', ['root', 'badge', 'dot', 'standard', 'anchorOriginTopRight', 'anchorOriginBottomRight', 'anchorOriginTopLeft', 'anchorOriginBottomLeft', 'invisible', 'colorError', 'colorInfo', 'colorPrimary', 'colorSecondary', 'colorSuccess', 'colorWarning', 'overlapRectangular', 'overlapCircular',
	// TODO: v6 remove the overlap value from these class keys
	'anchorOriginTopLeftCircular', 'anchorOriginTopLeftRectangular', 'anchorOriginTopRightCircular', 'anchorOriginTopRightRectangular', 'anchorOriginBottomLeftCircular', 'anchorOriginBottomLeftRectangular', 'anchorOriginBottomRightCircular', 'anchorOriginBottomRightRectangular']);
	var badgeClasses$1 = badgeClasses;

	const _excluded$1B = ["anchorOrigin", "className", "classes", "component", "components", "componentsProps", "children", "overlap", "color", "invisible", "max", "badgeContent", "slots", "slotProps", "showZero", "variant"];
	const RADIUS_STANDARD = 10;
	const RADIUS_DOT = 4;
	const useUtilityClasses$1k = ownerState => {
	  const {
	    color,
	    anchorOrigin,
	    invisible,
	    overlap,
	    variant,
	    classes = {}
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    badge: ['badge', variant, invisible && 'invisible', `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}`, `anchorOrigin${capitalize(anchorOrigin.vertical)}${capitalize(anchorOrigin.horizontal)}${capitalize(overlap)}`, `overlap${capitalize(overlap)}`, color !== 'default' && `color${capitalize(color)}`]
	  };
	  return composeClasses(slots, getBadgeUtilityClass, classes);
	};
	const BadgeRoot = styled$1('span', {
	  name: 'MuiBadge',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  position: 'relative',
	  display: 'inline-flex',
	  // For correct alignment with the text.
	  verticalAlign: 'middle',
	  flexShrink: 0
	});
	const BadgeBadge = styled$1('span', {
	  name: 'MuiBadge',
	  slot: 'Badge',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.badge, styles[ownerState.variant], styles[`anchorOrigin${capitalize(ownerState.anchorOrigin.vertical)}${capitalize(ownerState.anchorOrigin.horizontal)}${capitalize(ownerState.overlap)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`], ownerState.invisible && styles.invisible];
	  }
	})(({
	  theme
	}) => {
	  var _theme$vars;
	  return {
	    display: 'flex',
	    flexDirection: 'row',
	    flexWrap: 'wrap',
	    justifyContent: 'center',
	    alignContent: 'center',
	    alignItems: 'center',
	    position: 'absolute',
	    boxSizing: 'border-box',
	    fontFamily: theme.typography.fontFamily,
	    fontWeight: theme.typography.fontWeightMedium,
	    fontSize: theme.typography.pxToRem(12),
	    minWidth: RADIUS_STANDARD * 2,
	    lineHeight: 1,
	    padding: '0 6px',
	    height: RADIUS_STANDARD * 2,
	    borderRadius: RADIUS_STANDARD,
	    zIndex: 1,
	    // Render the badge on top of potential ripples.
	    transition: theme.transitions.create('transform', {
	      easing: theme.transitions.easing.easeInOut,
	      duration: theme.transitions.duration.enteringScreen
	    }),
	    variants: [...Object.keys(((_theme$vars = theme.vars) != null ? _theme$vars : theme).palette).filter(key => {
	      var _theme$vars2, _theme$vars3;
	      return ((_theme$vars2 = theme.vars) != null ? _theme$vars2 : theme).palette[key].main && ((_theme$vars3 = theme.vars) != null ? _theme$vars3 : theme).palette[key].contrastText;
	    }).map(color => ({
	      props: {
	        color
	      },
	      style: {
	        backgroundColor: (theme.vars || theme).palette[color].main,
	        color: (theme.vars || theme).palette[color].contrastText
	      }
	    })), {
	      props: {
	        variant: 'dot'
	      },
	      style: {
	        borderRadius: RADIUS_DOT,
	        height: RADIUS_DOT * 2,
	        minWidth: RADIUS_DOT * 2,
	        padding: 0
	      }
	    }, {
	      props: ({
	        ownerState
	      }) => ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular',
	      style: {
	        top: 0,
	        right: 0,
	        transform: 'scale(1) translate(50%, -50%)',
	        transformOrigin: '100% 0%',
	        [`&.${badgeClasses$1.invisible}`]: {
	          transform: 'scale(0) translate(50%, -50%)'
	        }
	      }
	    }, {
	      props: ({
	        ownerState
	      }) => ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'rectangular',
	      style: {
	        bottom: 0,
	        right: 0,
	        transform: 'scale(1) translate(50%, 50%)',
	        transformOrigin: '100% 100%',
	        [`&.${badgeClasses$1.invisible}`]: {
	          transform: 'scale(0) translate(50%, 50%)'
	        }
	      }
	    }, {
	      props: ({
	        ownerState
	      }) => ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular',
	      style: {
	        top: 0,
	        left: 0,
	        transform: 'scale(1) translate(-50%, -50%)',
	        transformOrigin: '0% 0%',
	        [`&.${badgeClasses$1.invisible}`]: {
	          transform: 'scale(0) translate(-50%, -50%)'
	        }
	      }
	    }, {
	      props: ({
	        ownerState
	      }) => ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'rectangular',
	      style: {
	        bottom: 0,
	        left: 0,
	        transform: 'scale(1) translate(-50%, 50%)',
	        transformOrigin: '0% 100%',
	        [`&.${badgeClasses$1.invisible}`]: {
	          transform: 'scale(0) translate(-50%, 50%)'
	        }
	      }
	    }, {
	      props: ({
	        ownerState
	      }) => ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular',
	      style: {
	        top: '14%',
	        right: '14%',
	        transform: 'scale(1) translate(50%, -50%)',
	        transformOrigin: '100% 0%',
	        [`&.${badgeClasses$1.invisible}`]: {
	          transform: 'scale(0) translate(50%, -50%)'
	        }
	      }
	    }, {
	      props: ({
	        ownerState
	      }) => ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'right' && ownerState.overlap === 'circular',
	      style: {
	        bottom: '14%',
	        right: '14%',
	        transform: 'scale(1) translate(50%, 50%)',
	        transformOrigin: '100% 100%',
	        [`&.${badgeClasses$1.invisible}`]: {
	          transform: 'scale(0) translate(50%, 50%)'
	        }
	      }
	    }, {
	      props: ({
	        ownerState
	      }) => ownerState.anchorOrigin.vertical === 'top' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular',
	      style: {
	        top: '14%',
	        left: '14%',
	        transform: 'scale(1) translate(-50%, -50%)',
	        transformOrigin: '0% 0%',
	        [`&.${badgeClasses$1.invisible}`]: {
	          transform: 'scale(0) translate(-50%, -50%)'
	        }
	      }
	    }, {
	      props: ({
	        ownerState
	      }) => ownerState.anchorOrigin.vertical === 'bottom' && ownerState.anchorOrigin.horizontal === 'left' && ownerState.overlap === 'circular',
	      style: {
	        bottom: '14%',
	        left: '14%',
	        transform: 'scale(1) translate(-50%, 50%)',
	        transformOrigin: '0% 100%',
	        [`&.${badgeClasses$1.invisible}`]: {
	          transform: 'scale(0) translate(-50%, 50%)'
	        }
	      }
	    }, {
	      props: {
	        invisible: true
	      },
	      style: {
	        transition: theme.transitions.create('transform', {
	          easing: theme.transitions.easing.easeInOut,
	          duration: theme.transitions.duration.leavingScreen
	        })
	      }
	    }]
	  };
	});
	const Badge = /*#__PURE__*/reactExports.forwardRef(function Badge(inProps, ref) {
	  var _ref, _slots$root, _ref2, _slots$badge, _slotProps$root, _slotProps$badge;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiBadge'
	  });
	  const {
	      anchorOrigin: anchorOriginProp = {
	        vertical: 'top',
	        horizontal: 'right'
	      },
	      className,
	      component,
	      components = {},
	      componentsProps = {},
	      children,
	      overlap: overlapProp = 'rectangular',
	      color: colorProp = 'default',
	      invisible: invisibleProp = false,
	      max: maxProp = 99,
	      badgeContent: badgeContentProp,
	      slots,
	      slotProps,
	      showZero = false,
	      variant: variantProp = 'standard'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1B);
	  const {
	    badgeContent,
	    invisible: invisibleFromHook,
	    max,
	    displayValue: displayValueFromHook
	  } = useBadge({
	    max: maxProp,
	    invisible: invisibleProp,
	    badgeContent: badgeContentProp,
	    showZero
	  });
	  const prevProps = usePreviousProps$1({
	    anchorOrigin: anchorOriginProp,
	    color: colorProp,
	    overlap: overlapProp,
	    variant: variantProp,
	    badgeContent: badgeContentProp
	  });
	  const invisible = invisibleFromHook || badgeContent == null && variantProp !== 'dot';
	  const {
	    color = colorProp,
	    overlap = overlapProp,
	    anchorOrigin = anchorOriginProp,
	    variant = variantProp
	  } = invisible ? prevProps : props;
	  const displayValue = variant !== 'dot' ? displayValueFromHook : undefined;
	  const ownerState = _extends({}, props, {
	    badgeContent,
	    invisible,
	    max,
	    displayValue,
	    showZero,
	    anchorOrigin,
	    color,
	    overlap,
	    variant
	  });
	  const classes = useUtilityClasses$1k(ownerState);

	  // support both `slots` and `components` for backward compatibility
	  const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : BadgeRoot;
	  const BadgeSlot = (_ref2 = (_slots$badge = slots == null ? void 0 : slots.badge) != null ? _slots$badge : components.Badge) != null ? _ref2 : BadgeBadge;
	  const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
	  const badgeSlotProps = (_slotProps$badge = slotProps == null ? void 0 : slotProps.badge) != null ? _slotProps$badge : componentsProps.badge;
	  const rootProps = useSlotProps({
	    elementType: RootSlot,
	    externalSlotProps: rootSlotProps,
	    externalForwardedProps: other,
	    additionalProps: {
	      ref,
	      as: component
	    },
	    ownerState,
	    className: clsx(rootSlotProps == null ? void 0 : rootSlotProps.className, classes.root, className)
	  });
	  const badgeProps = useSlotProps({
	    elementType: BadgeSlot,
	    externalSlotProps: badgeSlotProps,
	    ownerState,
	    className: clsx(classes.badge, badgeSlotProps == null ? void 0 : badgeSlotProps.className)
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(RootSlot, _extends({}, rootProps, {
	    children: [children, /*#__PURE__*/jsxRuntimeExports.jsx(BadgeSlot, _extends({}, badgeProps, {
	      children: displayValue
	    }))]
	  }));
	});
	var Badge$1 = Badge;

	function getButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiButton', slot);
	}
	const buttonClasses = generateUtilityClasses('MuiButton', ['root', 'text', 'textInherit', 'textPrimary', 'textSecondary', 'textSuccess', 'textError', 'textInfo', 'textWarning', 'outlined', 'outlinedInherit', 'outlinedPrimary', 'outlinedSecondary', 'outlinedSuccess', 'outlinedError', 'outlinedInfo', 'outlinedWarning', 'contained', 'containedInherit', 'containedPrimary', 'containedSecondary', 'containedSuccess', 'containedError', 'containedInfo', 'containedWarning', 'disableElevation', 'focusVisible', 'disabled', 'colorInherit', 'textSizeSmall', 'textSizeMedium', 'textSizeLarge', 'outlinedSizeSmall', 'outlinedSizeMedium', 'outlinedSizeLarge', 'containedSizeSmall', 'containedSizeMedium', 'containedSizeLarge', 'sizeMedium', 'sizeSmall', 'sizeLarge', 'fullWidth', 'startIcon', 'endIcon', 'iconSizeSmall', 'iconSizeMedium', 'iconSizeLarge']);
	var buttonClasses$1 = buttonClasses;

	/**
	 * @ignore - internal component.
	 */
	const ButtonGroupContext = /*#__PURE__*/reactExports.createContext({});
	var ButtonGroupContext$1 = ButtonGroupContext;

	/**
	 * @ignore - internal component.
	 */
	const ButtonGroupButtonContext = /*#__PURE__*/reactExports.createContext(undefined);
	var ButtonGroupButtonContext$1 = ButtonGroupButtonContext;

	const _excluded$1A = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
	const useUtilityClasses$1j = ownerState => {
	  const {
	    color,
	    disableElevation,
	    fullWidth,
	    size,
	    variant,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, `${variant}${capitalize(color)}`, `size${capitalize(size)}`, `${variant}Size${capitalize(size)}`, color === 'inherit' && 'colorInherit', disableElevation && 'disableElevation', fullWidth && 'fullWidth'],
	    label: ['label'],
	    startIcon: ['startIcon', `iconSize${capitalize(size)}`],
	    endIcon: ['endIcon', `iconSize${capitalize(size)}`]
	  };
	  const composedClasses = composeClasses(slots, getButtonUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const commonIconStyles = ownerState => _extends({}, ownerState.size === 'small' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 18
	  }
	}, ownerState.size === 'medium' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 20
	  }
	}, ownerState.size === 'large' && {
	  '& > *:nth-of-type(1)': {
	    fontSize: 22
	  }
	});
	const ButtonRoot = styled$1(ButtonBase$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`${ownerState.variant}${capitalize(ownerState.color)}`], styles[`size${capitalize(ownerState.size)}`], styles[`${ownerState.variant}Size${capitalize(ownerState.size)}`], ownerState.color === 'inherit' && styles.colorInherit, ownerState.disableElevation && styles.disableElevation, ownerState.fullWidth && styles.fullWidth];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _theme$palette$getCon, _theme$palette;
	  const inheritContainedBackgroundColor = theme.palette.mode === 'light' ? theme.palette.grey[300] : theme.palette.grey[800];
	  const inheritContainedHoverBackgroundColor = theme.palette.mode === 'light' ? theme.palette.grey.A100 : theme.palette.grey[700];
	  return _extends({}, theme.typography.button, {
	    minWidth: 64,
	    padding: '6px 16px',
	    borderRadius: (theme.vars || theme).shape.borderRadius,
	    transition: theme.transitions.create(['background-color', 'box-shadow', 'border-color', 'color'], {
	      duration: theme.transitions.duration.short
	    }),
	    '&:hover': _extends({
	      textDecoration: 'none',
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity),
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
	      border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    }, ownerState.variant === 'contained' && {
	      backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
	      boxShadow: (theme.vars || theme).shadows[4],
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        boxShadow: (theme.vars || theme).shadows[2],
	        backgroundColor: (theme.vars || theme).palette.grey[300]
	      }
	    }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
	      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
	      }
	    }),
	    '&:active': _extends({}, ownerState.variant === 'contained' && {
	      boxShadow: (theme.vars || theme).shadows[8]
	    }),
	    [`&.${buttonClasses$1.focusVisible}`]: _extends({}, ownerState.variant === 'contained' && {
	      boxShadow: (theme.vars || theme).shadows[6]
	    }),
	    [`&.${buttonClasses$1.disabled}`]: _extends({
	      color: (theme.vars || theme).palette.action.disabled
	    }, ownerState.variant === 'outlined' && {
	      border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
	    }, ownerState.variant === 'contained' && {
	      color: (theme.vars || theme).palette.action.disabled,
	      boxShadow: (theme.vars || theme).shadows[0],
	      backgroundColor: (theme.vars || theme).palette.action.disabledBackground
	    })
	  }, ownerState.variant === 'text' && {
	    padding: '6px 8px'
	  }, ownerState.variant === 'text' && ownerState.color !== 'inherit' && {
	    color: (theme.vars || theme).palette[ownerState.color].main
	  }, ownerState.variant === 'outlined' && {
	    padding: '5px 15px',
	    border: '1px solid currentColor'
	  }, ownerState.variant === 'outlined' && ownerState.color !== 'inherit' && {
	    color: (theme.vars || theme).palette[ownerState.color].main,
	    border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${alpha(theme.palette[ownerState.color].main, 0.5)}`
	  }, ownerState.variant === 'contained' && {
	    color: theme.vars ?
	    // this is safe because grey does not change between default light/dark mode
	    theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
	    backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
	    boxShadow: (theme.vars || theme).shadows[2]
	  }, ownerState.variant === 'contained' && ownerState.color !== 'inherit' && {
	    color: (theme.vars || theme).palette[ownerState.color].contrastText,
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].main
	  }, ownerState.color === 'inherit' && {
	    color: 'inherit',
	    borderColor: 'currentColor'
	  }, ownerState.size === 'small' && ownerState.variant === 'text' && {
	    padding: '4px 5px',
	    fontSize: theme.typography.pxToRem(13)
	  }, ownerState.size === 'large' && ownerState.variant === 'text' && {
	    padding: '8px 11px',
	    fontSize: theme.typography.pxToRem(15)
	  }, ownerState.size === 'small' && ownerState.variant === 'outlined' && {
	    padding: '3px 9px',
	    fontSize: theme.typography.pxToRem(13)
	  }, ownerState.size === 'large' && ownerState.variant === 'outlined' && {
	    padding: '7px 21px',
	    fontSize: theme.typography.pxToRem(15)
	  }, ownerState.size === 'small' && ownerState.variant === 'contained' && {
	    padding: '4px 10px',
	    fontSize: theme.typography.pxToRem(13)
	  }, ownerState.size === 'large' && ownerState.variant === 'contained' && {
	    padding: '8px 22px',
	    fontSize: theme.typography.pxToRem(15)
	  }, ownerState.fullWidth && {
	    width: '100%'
	  });
	}, ({
	  ownerState
	}) => ownerState.disableElevation && {
	  boxShadow: 'none',
	  '&:hover': {
	    boxShadow: 'none'
	  },
	  [`&.${buttonClasses$1.focusVisible}`]: {
	    boxShadow: 'none'
	  },
	  '&:active': {
	    boxShadow: 'none'
	  },
	  [`&.${buttonClasses$1.disabled}`]: {
	    boxShadow: 'none'
	  }
	});
	const ButtonStartIcon = styled$1('span', {
	  name: 'MuiButton',
	  slot: 'StartIcon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.startIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'inherit',
	  marginRight: 8,
	  marginLeft: -4
	}, ownerState.size === 'small' && {
	  marginLeft: -2
	}, commonIconStyles(ownerState)));
	const ButtonEndIcon = styled$1('span', {
	  name: 'MuiButton',
	  slot: 'EndIcon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.endIcon, styles[`iconSize${capitalize(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'inherit',
	  marginRight: -4,
	  marginLeft: 8
	}, ownerState.size === 'small' && {
	  marginRight: -2
	}, commonIconStyles(ownerState)));
	const Button = /*#__PURE__*/reactExports.forwardRef(function Button(inProps, ref) {
	  // props priority: `inProps` > `contextProps` > `themeDefaultProps`
	  const contextProps = reactExports.useContext(ButtonGroupContext$1);
	  const buttonGroupButtonContextPositionClassName = reactExports.useContext(ButtonGroupButtonContext$1);
	  const resolvedProps = resolveProps(contextProps, inProps);
	  const props = useThemeProps({
	    props: resolvedProps,
	    name: 'MuiButton'
	  });
	  const {
	      children,
	      color = 'primary',
	      component = 'button',
	      className,
	      disabled = false,
	      disableElevation = false,
	      disableFocusRipple = false,
	      endIcon: endIconProp,
	      focusVisibleClassName,
	      fullWidth = false,
	      size = 'medium',
	      startIcon: startIconProp,
	      type,
	      variant = 'text'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1A);
	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    disabled,
	    disableElevation,
	    disableFocusRipple,
	    fullWidth,
	    size,
	    type,
	    variant
	  });
	  const classes = useUtilityClasses$1j(ownerState);
	  const startIcon = startIconProp && /*#__PURE__*/jsxRuntimeExports.jsx(ButtonStartIcon, {
	    className: classes.startIcon,
	    ownerState: ownerState,
	    children: startIconProp
	  });
	  const endIcon = endIconProp && /*#__PURE__*/jsxRuntimeExports.jsx(ButtonEndIcon, {
	    className: classes.endIcon,
	    ownerState: ownerState,
	    children: endIconProp
	  });
	  const positionClassName = buttonGroupButtonContextPositionClassName || '';
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(ButtonRoot, _extends({
	    ownerState: ownerState,
	    className: clsx(contextProps.className, classes.root, className, positionClassName),
	    component: component,
	    disabled: disabled,
	    focusRipple: !disableFocusRipple,
	    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	    ref: ref,
	    type: type
	  }, other, {
	    classes: classes,
	    children: [startIcon, children, endIcon]
	  }));
	});
	var Button$1 = Button;

	function getCardUtilityClass(slot) {
	  return generateUtilityClass('MuiCard', slot);
	}
	generateUtilityClasses('MuiCard', ['root']);

	const _excluded$1z = ["className", "raised"];
	const useUtilityClasses$1i = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getCardUtilityClass, classes);
	};
	const CardRoot = styled$1(MuiPaper, {
	  name: 'MuiCard',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(() => {
	  return {
	    overflow: 'hidden'
	  };
	});
	const Card = /*#__PURE__*/reactExports.forwardRef(function Card(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCard'
	  });
	  const {
	      className,
	      raised = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1z);
	  const ownerState = _extends({}, props, {
	    raised
	  });
	  const classes = useUtilityClasses$1i(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(CardRoot, _extends({
	    className: clsx(classes.root, className),
	    elevation: raised ? 8 : undefined,
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	var Card$1 = Card;

	function getCardContentUtilityClass(slot) {
	  return generateUtilityClass('MuiCardContent', slot);
	}
	generateUtilityClasses('MuiCardContent', ['root']);

	const _excluded$1y = ["className", "component"];
	const useUtilityClasses$1h = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getCardContentUtilityClass, classes);
	};
	const CardContentRoot = styled$1('div', {
	  name: 'MuiCardContent',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(() => {
	  return {
	    padding: 16,
	    '&:last-child': {
	      paddingBottom: 24
	    }
	  };
	});
	const CardContent = /*#__PURE__*/reactExports.forwardRef(function CardContent(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCardContent'
	  });
	  const {
	      className,
	      component = 'div'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1y);
	  const ownerState = _extends({}, props, {
	    component
	  });
	  const classes = useUtilityClasses$1h(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(CardContentRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	var CardContent$1 = CardContent;

	function getCardHeaderUtilityClass(slot) {
	  return generateUtilityClass('MuiCardHeader', slot);
	}
	const cardHeaderClasses = generateUtilityClasses('MuiCardHeader', ['root', 'avatar', 'action', 'content', 'title', 'subheader']);
	var cardHeaderClasses$1 = cardHeaderClasses;

	const _excluded$1x = ["action", "avatar", "className", "component", "disableTypography", "subheader", "subheaderTypographyProps", "title", "titleTypographyProps"];
	const useUtilityClasses$1g = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    avatar: ['avatar'],
	    action: ['action'],
	    content: ['content'],
	    title: ['title'],
	    subheader: ['subheader']
	  };
	  return composeClasses(slots, getCardHeaderUtilityClass, classes);
	};
	const CardHeaderRoot = styled$1('div', {
	  name: 'MuiCardHeader',
	  slot: 'Root',
	  overridesResolver: (props, styles) => _extends({
	    [`& .${cardHeaderClasses$1.title}`]: styles.title,
	    [`& .${cardHeaderClasses$1.subheader}`]: styles.subheader
	  }, styles.root)
	})({
	  display: 'flex',
	  alignItems: 'center',
	  padding: 16
	});
	const CardHeaderAvatar = styled$1('div', {
	  name: 'MuiCardHeader',
	  slot: 'Avatar',
	  overridesResolver: (props, styles) => styles.avatar
	})({
	  display: 'flex',
	  flex: '0 0 auto',
	  marginRight: 16
	});
	const CardHeaderAction = styled$1('div', {
	  name: 'MuiCardHeader',
	  slot: 'Action',
	  overridesResolver: (props, styles) => styles.action
	})({
	  flex: '0 0 auto',
	  alignSelf: 'flex-start',
	  marginTop: -4,
	  marginRight: -8,
	  marginBottom: -4
	});
	const CardHeaderContent = styled$1('div', {
	  name: 'MuiCardHeader',
	  slot: 'Content',
	  overridesResolver: (props, styles) => styles.content
	})({
	  flex: '1 1 auto'
	});
	const CardHeader = /*#__PURE__*/reactExports.forwardRef(function CardHeader(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCardHeader'
	  });
	  const {
	      action,
	      avatar,
	      className,
	      component = 'div',
	      disableTypography = false,
	      subheader: subheaderProp,
	      subheaderTypographyProps,
	      title: titleProp,
	      titleTypographyProps
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1x);
	  const ownerState = _extends({}, props, {
	    component,
	    disableTypography
	  });
	  const classes = useUtilityClasses$1g(ownerState);
	  let title = titleProp;
	  if (title != null && title.type !== Typography$1 && !disableTypography) {
	    title = /*#__PURE__*/jsxRuntimeExports.jsx(Typography$1, _extends({
	      variant: avatar ? 'body2' : 'h5',
	      className: classes.title,
	      component: "span",
	      display: "block"
	    }, titleTypographyProps, {
	      children: title
	    }));
	  }
	  let subheader = subheaderProp;
	  if (subheader != null && subheader.type !== Typography$1 && !disableTypography) {
	    subheader = /*#__PURE__*/jsxRuntimeExports.jsx(Typography$1, _extends({
	      variant: avatar ? 'body2' : 'body1',
	      className: classes.subheader,
	      color: "text.secondary",
	      component: "span",
	      display: "block"
	    }, subheaderTypographyProps, {
	      children: subheader
	    }));
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(CardHeaderRoot, _extends({
	    className: clsx(classes.root, className),
	    as: component,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: [avatar && /*#__PURE__*/jsxRuntimeExports.jsx(CardHeaderAvatar, {
	      className: classes.avatar,
	      ownerState: ownerState,
	      children: avatar
	    }), /*#__PURE__*/jsxRuntimeExports.jsxs(CardHeaderContent, {
	      className: classes.content,
	      ownerState: ownerState,
	      children: [title, subheader]
	    }), action && /*#__PURE__*/jsxRuntimeExports.jsx(CardHeaderAction, {
	      className: classes.action,
	      ownerState: ownerState,
	      children: action
	    })]
	  }));
	});
	var CardHeader$1 = CardHeader;

	function getSwitchBaseUtilityClass(slot) {
	  return generateUtilityClass('PrivateSwitchBase', slot);
	}
	generateUtilityClasses('PrivateSwitchBase', ['root', 'checked', 'disabled', 'input', 'edgeStart', 'edgeEnd']);

	const _excluded$1w = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
	const useUtilityClasses$1f = ownerState => {
	  const {
	    classes,
	    checked,
	    disabled,
	    edge
	  } = ownerState;
	  const slots = {
	    root: ['root', checked && 'checked', disabled && 'disabled', edge && `edge${capitalize(edge)}`],
	    input: ['input']
	  };
	  return composeClasses(slots, getSwitchBaseUtilityClass, classes);
	};
	const SwitchBaseRoot = styled$1(ButtonBase$1)(({
	  ownerState
	}) => _extends({
	  padding: 9,
	  borderRadius: '50%'
	}, ownerState.edge === 'start' && {
	  marginLeft: ownerState.size === 'small' ? -3 : -12
	}, ownerState.edge === 'end' && {
	  marginRight: ownerState.size === 'small' ? -3 : -12
	}));
	const SwitchBaseInput = styled$1('input', {
	  shouldForwardProp: rootShouldForwardProp
	})({
	  cursor: 'inherit',
	  position: 'absolute',
	  opacity: 0,
	  width: '100%',
	  height: '100%',
	  top: 0,
	  left: 0,
	  margin: 0,
	  padding: 0,
	  zIndex: 1
	});

	/**
	 * @ignore - internal component.
	 */
	const SwitchBase = /*#__PURE__*/reactExports.forwardRef(function SwitchBase(props, ref) {
	  const {
	      autoFocus,
	      checked: checkedProp,
	      checkedIcon,
	      className,
	      defaultChecked,
	      disabled: disabledProp,
	      disableFocusRipple = false,
	      edge = false,
	      icon,
	      id,
	      inputProps,
	      inputRef,
	      name,
	      onBlur,
	      onChange,
	      onFocus,
	      readOnly,
	      required = false,
	      tabIndex,
	      type,
	      value
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1w);
	  const [checked, setCheckedState] = useControlled({
	    controlled: checkedProp,
	    default: Boolean(defaultChecked),
	    name: 'SwitchBase',
	    state: 'checked'
	  });
	  const muiFormControl = useFormControl();
	  const handleFocus = event => {
	    if (onFocus) {
	      onFocus(event);
	    }
	    if (muiFormControl && muiFormControl.onFocus) {
	      muiFormControl.onFocus(event);
	    }
	  };
	  const handleBlur = event => {
	    if (onBlur) {
	      onBlur(event);
	    }
	    if (muiFormControl && muiFormControl.onBlur) {
	      muiFormControl.onBlur(event);
	    }
	  };
	  const handleInputChange = event => {
	    // Workaround for https://github.com/facebook/react/issues/9023
	    if (event.nativeEvent.defaultPrevented) {
	      return;
	    }
	    const newChecked = event.target.checked;
	    setCheckedState(newChecked);
	    if (onChange) {
	      // TODO v6: remove the second argument.
	      onChange(event, newChecked);
	    }
	  };
	  let disabled = disabledProp;
	  if (muiFormControl) {
	    if (typeof disabled === 'undefined') {
	      disabled = muiFormControl.disabled;
	    }
	  }
	  const hasLabelFor = type === 'checkbox' || type === 'radio';
	  const ownerState = _extends({}, props, {
	    checked,
	    disabled,
	    disableFocusRipple,
	    edge
	  });
	  const classes = useUtilityClasses$1f(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(SwitchBaseRoot, _extends({
	    component: "span",
	    className: clsx(classes.root, className),
	    centerRipple: true,
	    focusRipple: !disableFocusRipple,
	    disabled: disabled,
	    tabIndex: null,
	    role: undefined,
	    onFocus: handleFocus,
	    onBlur: handleBlur,
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(SwitchBaseInput, _extends({
	      autoFocus: autoFocus,
	      checked: checkedProp,
	      defaultChecked: defaultChecked,
	      className: classes.input,
	      disabled: disabled,
	      id: hasLabelFor ? id : undefined,
	      name: name,
	      onChange: handleInputChange,
	      readOnly: readOnly,
	      ref: inputRef,
	      required: required,
	      ownerState: ownerState,
	      tabIndex: tabIndex,
	      type: type
	    }, type === 'checkbox' && value === undefined ? {} : {
	      value
	    }, inputProps)), checked ? checkedIcon : icon]
	  }));
	});
	var SwitchBase$1 = SwitchBase;

	var CheckBoxOutlineBlankIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
	}), 'CheckBoxOutlineBlank');

	var CheckBoxIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
	}), 'CheckBox');

	var IndeterminateCheckBoxIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
	}), 'IndeterminateCheckBox');

	function getCheckboxUtilityClass(slot) {
	  return generateUtilityClass('MuiCheckbox', slot);
	}
	const checkboxClasses = generateUtilityClasses('MuiCheckbox', ['root', 'checked', 'disabled', 'indeterminate', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium']);
	var checkboxClasses$1 = checkboxClasses;

	const _excluded$1v = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"];
	const useUtilityClasses$1e = ownerState => {
	  const {
	    classes,
	    indeterminate,
	    color,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', indeterminate && 'indeterminate', `color${capitalize(color)}`, `size${capitalize(size)}`]
	  };
	  const composedClasses = composeClasses(slots, getCheckboxUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const CheckboxRoot = styled$1(SwitchBase$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiCheckbox',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.indeterminate && styles.indeterminate, styles[`size${capitalize(ownerState.size)}`], ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  color: (theme.vars || theme).palette.text.secondary
	}, !ownerState.disableRipple && {
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.color !== 'default' && {
	  [`&.${checkboxClasses$1.checked}, &.${checkboxClasses$1.indeterminate}`]: {
	    color: (theme.vars || theme).palette[ownerState.color].main
	  },
	  [`&.${checkboxClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.action.disabled
	  }
	}));
	const defaultCheckedIcon$1 = /*#__PURE__*/jsxRuntimeExports.jsx(CheckBoxIcon, {});
	const defaultIcon$1 = /*#__PURE__*/jsxRuntimeExports.jsx(CheckBoxOutlineBlankIcon, {});
	const defaultIndeterminateIcon = /*#__PURE__*/jsxRuntimeExports.jsx(IndeterminateCheckBoxIcon, {});
	const Checkbox = /*#__PURE__*/reactExports.forwardRef(function Checkbox(inProps, ref) {
	  var _icon$props$fontSize, _indeterminateIcon$pr;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiCheckbox'
	  });
	  const {
	      checkedIcon = defaultCheckedIcon$1,
	      color = 'primary',
	      icon: iconProp = defaultIcon$1,
	      indeterminate = false,
	      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
	      inputProps,
	      size = 'medium',
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1v);
	  const icon = indeterminate ? indeterminateIconProp : iconProp;
	  const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
	  const ownerState = _extends({}, props, {
	    color,
	    indeterminate,
	    size
	  });
	  const classes = useUtilityClasses$1e(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(CheckboxRoot, _extends({
	    type: "checkbox",
	    inputProps: _extends({
	      'data-indeterminate': indeterminate
	    }, inputProps),
	    icon: /*#__PURE__*/reactExports.cloneElement(icon, {
	      fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size
	    }),
	    checkedIcon: /*#__PURE__*/reactExports.cloneElement(indeterminateIcon, {
	      fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size
	    }),
	    ownerState: ownerState,
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other, {
	    classes: classes
	  }));
	});
	var Checkbox$1 = Checkbox;

	function getModalUtilityClass(slot) {
	  return generateUtilityClass('MuiModal', slot);
	}
	generateUtilityClasses('MuiModal', ['root', 'hidden', 'backdrop']);

	const _excluded$1u = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onTransitionEnter", "onTransitionExited", "open", "slotProps", "slots", "theme"];
	const useUtilityClasses$1d = ownerState => {
	  const {
	    open,
	    exited,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', !open && exited && 'hidden'],
	    backdrop: ['backdrop']
	  };
	  return composeClasses(slots, getModalUtilityClass, classes);
	};
	const ModalRoot = styled$1('div', {
	  name: 'MuiModal',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.open && ownerState.exited && styles.hidden];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  position: 'fixed',
	  zIndex: (theme.vars || theme).zIndex.modal,
	  right: 0,
	  bottom: 0,
	  top: 0,
	  left: 0
	}, !ownerState.open && ownerState.exited && {
	  visibility: 'hidden'
	}));
	const ModalBackdrop = styled$1(Backdrop$1, {
	  name: 'MuiModal',
	  slot: 'Backdrop',
	  overridesResolver: (props, styles) => {
	    return styles.backdrop;
	  }
	})({
	  zIndex: -1
	});

	/**
	 * Modal is a lower-level construct that is leveraged by the following components:
	 *
	 * - [Dialog](/material-ui/api/dialog/)
	 * - [Drawer](/material-ui/api/drawer/)
	 * - [Menu](/material-ui/api/menu/)
	 * - [Popover](/material-ui/api/popover/)
	 *
	 * If you are creating a modal dialog, you probably want to use the [Dialog](/material-ui/api/dialog/) component
	 * rather than directly using Modal.
	 *
	 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
	 */
	const Modal = /*#__PURE__*/reactExports.forwardRef(function Modal(inProps, ref) {
	  var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
	  const props = useThemeProps({
	    name: 'MuiModal',
	    props: inProps
	  });
	  const {
	      BackdropComponent = ModalBackdrop,
	      BackdropProps,
	      className,
	      closeAfterTransition = false,
	      children,
	      container,
	      component,
	      components = {},
	      componentsProps = {},
	      disableAutoFocus = false,
	      disableEnforceFocus = false,
	      disableEscapeKeyDown = false,
	      disablePortal = false,
	      disableRestoreFocus = false,
	      disableScrollLock = false,
	      hideBackdrop = false,
	      keepMounted = false,
	      onBackdropClick,
	      open,
	      slotProps,
	      slots
	      // eslint-disable-next-line react/prop-types
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1u);
	  const propsWithDefaults = _extends({}, props, {
	    closeAfterTransition,
	    disableAutoFocus,
	    disableEnforceFocus,
	    disableEscapeKeyDown,
	    disablePortal,
	    disableRestoreFocus,
	    disableScrollLock,
	    hideBackdrop,
	    keepMounted
	  });
	  const {
	    getRootProps,
	    getBackdropProps,
	    getTransitionProps,
	    portalRef,
	    isTopModal,
	    exited,
	    hasTransition
	  } = useModal(_extends({}, propsWithDefaults, {
	    rootRef: ref
	  }));
	  const ownerState = _extends({}, propsWithDefaults, {
	    exited
	  });
	  const classes = useUtilityClasses$1d(ownerState);
	  const childProps = {};
	  if (children.props.tabIndex === undefined) {
	    childProps.tabIndex = '-1';
	  }

	  // It's a Transition like component
	  if (hasTransition) {
	    const {
	      onEnter,
	      onExited
	    } = getTransitionProps();
	    childProps.onEnter = onEnter;
	    childProps.onExited = onExited;
	  }
	  const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
	  const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
	  const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
	  const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
	  const rootProps = useSlotProps({
	    elementType: RootSlot,
	    externalSlotProps: rootSlotProps,
	    externalForwardedProps: other,
	    getSlotProps: getRootProps,
	    additionalProps: {
	      ref,
	      as: component
	    },
	    ownerState,
	    className: clsx(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
	  });
	  const backdropProps = useSlotProps({
	    elementType: BackdropSlot,
	    externalSlotProps: backdropSlotProps,
	    additionalProps: BackdropProps,
	    getSlotProps: otherHandlers => {
	      return getBackdropProps(_extends({}, otherHandlers, {
	        onClick: e => {
	          if (onBackdropClick) {
	            onBackdropClick(e);
	          }
	          if (otherHandlers != null && otherHandlers.onClick) {
	            otherHandlers.onClick(e);
	          }
	        }
	      }));
	    },
	    className: clsx(backdropSlotProps == null ? void 0 : backdropSlotProps.className, BackdropProps == null ? void 0 : BackdropProps.className, classes == null ? void 0 : classes.backdrop),
	    ownerState
	  });
	  if (!keepMounted && !open && (!hasTransition || exited)) {
	    return null;
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Portal, {
	    ref: portalRef,
	    container: container,
	    disablePortal: disablePortal,
	    children: /*#__PURE__*/jsxRuntimeExports.jsxs(RootSlot, _extends({}, rootProps, {
	      children: [!hideBackdrop && BackdropComponent ? /*#__PURE__*/jsxRuntimeExports.jsx(BackdropSlot, _extends({}, backdropProps)) : null, /*#__PURE__*/jsxRuntimeExports.jsx(FocusTrap, {
	        disableEnforceFocus: disableEnforceFocus,
	        disableAutoFocus: disableAutoFocus,
	        disableRestoreFocus: disableRestoreFocus,
	        isEnabled: isTopModal,
	        open: open,
	        children: /*#__PURE__*/reactExports.cloneElement(children, childProps)
	      })]
	    }))
	  });
	});
	var Modal$1 = Modal;

	function getDialogUtilityClass(slot) {
	  return generateUtilityClass('MuiDialog', slot);
	}
	const dialogClasses = generateUtilityClasses('MuiDialog', ['root', 'scrollPaper', 'scrollBody', 'container', 'paper', 'paperScrollPaper', 'paperScrollBody', 'paperWidthFalse', 'paperWidthXs', 'paperWidthSm', 'paperWidthMd', 'paperWidthLg', 'paperWidthXl', 'paperFullWidth', 'paperFullScreen']);
	var dialogClasses$1 = dialogClasses;

	const DialogContext = /*#__PURE__*/reactExports.createContext({});
	var DialogContext$1 = DialogContext;

	const _excluded$1t = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
	const DialogBackdrop = styled$1(Backdrop$1, {
	  name: 'MuiDialog',
	  slot: 'Backdrop',
	  overrides: (props, styles) => styles.backdrop
	})({
	  // Improve scrollable dialog support.
	  zIndex: -1
	});
	const useUtilityClasses$1c = ownerState => {
	  const {
	    classes,
	    scroll,
	    maxWidth,
	    fullWidth,
	    fullScreen
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    container: ['container', `scroll${capitalize(scroll)}`],
	    paper: ['paper', `paperScroll${capitalize(scroll)}`, `paperWidth${capitalize(String(maxWidth))}`, fullWidth && 'paperFullWidth', fullScreen && 'paperFullScreen']
	  };
	  return composeClasses(slots, getDialogUtilityClass, classes);
	};
	const DialogRoot = styled$1(Modal$1, {
	  name: 'MuiDialog',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  '@media print': {
	    // Use !important to override the Modal inline-style.
	    position: 'absolute !important'
	  }
	});
	const DialogContainer = styled$1('div', {
	  name: 'MuiDialog',
	  slot: 'Container',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.container, styles[`scroll${capitalize(ownerState.scroll)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  height: '100%',
	  '@media print': {
	    height: 'auto'
	  },
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	}, ownerState.scroll === 'paper' && {
	  display: 'flex',
	  justifyContent: 'center',
	  alignItems: 'center'
	}, ownerState.scroll === 'body' && {
	  overflowY: 'auto',
	  overflowX: 'hidden',
	  textAlign: 'center',
	  '&::after': {
	    content: '""',
	    display: 'inline-block',
	    verticalAlign: 'middle',
	    height: '100%',
	    width: '0'
	  }
	}));
	const DialogPaper = styled$1(MuiPaper, {
	  name: 'MuiDialog',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.paper, styles[`scrollPaper${capitalize(ownerState.scroll)}`], styles[`paperWidth${capitalize(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles.paperFullWidth, ownerState.fullScreen && styles.paperFullScreen];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  margin: 32,
	  position: 'relative',
	  overflowY: 'auto',
	  // Fix IE11 issue, to remove at some point.
	  '@media print': {
	    overflowY: 'visible',
	    boxShadow: 'none'
	  }
	}, ownerState.scroll === 'paper' && {
	  display: 'flex',
	  flexDirection: 'column',
	  maxHeight: 'calc(100% - 64px)'
	}, ownerState.scroll === 'body' && {
	  display: 'inline-block',
	  verticalAlign: 'middle',
	  textAlign: 'left' // 'initial' doesn't work on IE11
	}, !ownerState.maxWidth && {
	  maxWidth: 'calc(100% - 64px)'
	}, ownerState.maxWidth === 'xs' && {
	  maxWidth: theme.breakpoints.unit === 'px' ? Math.max(theme.breakpoints.values.xs, 444) : `max(${theme.breakpoints.values.xs}${theme.breakpoints.unit}, 444px)`,
	  [`&.${dialogClasses$1.paperScrollBody}`]: {
	    [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
	      maxWidth: 'calc(100% - 64px)'
	    }
	  }
	}, ownerState.maxWidth && ownerState.maxWidth !== 'xs' && {
	  maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
	  [`&.${dialogClasses$1.paperScrollBody}`]: {
	    [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
	      maxWidth: 'calc(100% - 64px)'
	    }
	  }
	}, ownerState.fullWidth && {
	  width: 'calc(100% - 64px)'
	}, ownerState.fullScreen && {
	  margin: 0,
	  width: '100%',
	  maxWidth: '100%',
	  height: '100%',
	  maxHeight: 'none',
	  borderRadius: 0,
	  [`&.${dialogClasses$1.paperScrollBody}`]: {
	    margin: 0,
	    maxWidth: '100%'
	  }
	}));

	/**
	 * Dialogs are overlaid modal paper based components with a backdrop.
	 */
	const Dialog = /*#__PURE__*/reactExports.forwardRef(function Dialog(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDialog'
	  });
	  const theme = useTheme();
	  const defaultTransitionDuration = {
	    enter: theme.transitions.duration.enteringScreen,
	    exit: theme.transitions.duration.leavingScreen
	  };
	  const {
	      'aria-describedby': ariaDescribedby,
	      'aria-labelledby': ariaLabelledbyProp,
	      BackdropComponent,
	      BackdropProps,
	      children,
	      className,
	      disableEscapeKeyDown = false,
	      fullScreen = false,
	      fullWidth = false,
	      maxWidth = 'sm',
	      onBackdropClick,
	      onClose,
	      open,
	      PaperComponent = MuiPaper,
	      PaperProps = {},
	      scroll = 'paper',
	      TransitionComponent = Fade$1,
	      transitionDuration = defaultTransitionDuration,
	      TransitionProps
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1t);
	  const ownerState = _extends({}, props, {
	    disableEscapeKeyDown,
	    fullScreen,
	    fullWidth,
	    maxWidth,
	    scroll
	  });
	  const classes = useUtilityClasses$1c(ownerState);
	  const backdropClick = reactExports.useRef();
	  const handleMouseDown = event => {
	    // We don't want to close the dialog when clicking the dialog content.
	    // Make sure the event starts and ends on the same DOM element.
	    backdropClick.current = event.target === event.currentTarget;
	  };
	  const handleBackdropClick = event => {
	    // Ignore the events not coming from the "backdrop".
	    if (!backdropClick.current) {
	      return;
	    }
	    backdropClick.current = null;
	    if (onBackdropClick) {
	      onBackdropClick(event);
	    }
	    if (onClose) {
	      onClose(event, 'backdropClick');
	    }
	  };
	  const ariaLabelledby = useId(ariaLabelledbyProp);
	  const dialogContextValue = reactExports.useMemo(() => {
	    return {
	      titleId: ariaLabelledby
	    };
	  }, [ariaLabelledby]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(DialogRoot, _extends({
	    className: clsx(classes.root, className),
	    closeAfterTransition: true,
	    components: {
	      Backdrop: DialogBackdrop
	    },
	    componentsProps: {
	      backdrop: _extends({
	        transitionDuration,
	        as: BackdropComponent
	      }, BackdropProps)
	    },
	    disableEscapeKeyDown: disableEscapeKeyDown,
	    onClose: onClose,
	    open: open,
	    ref: ref,
	    onClick: handleBackdropClick,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends({
	      appear: true,
	      in: open,
	      timeout: transitionDuration,
	      role: "presentation"
	    }, TransitionProps, {
	      children: /*#__PURE__*/jsxRuntimeExports.jsx(DialogContainer, {
	        className: clsx(classes.container),
	        onMouseDown: handleMouseDown,
	        ownerState: ownerState,
	        children: /*#__PURE__*/jsxRuntimeExports.jsx(DialogPaper, _extends({
	          as: PaperComponent,
	          elevation: 24,
	          role: "dialog",
	          "aria-describedby": ariaDescribedby,
	          "aria-labelledby": ariaLabelledby
	        }, PaperProps, {
	          className: clsx(classes.paper, PaperProps.className),
	          ownerState: ownerState,
	          children: /*#__PURE__*/jsxRuntimeExports.jsx(DialogContext$1.Provider, {
	            value: dialogContextValue,
	            children: children
	          })
	        }))
	      })
	    }))
	  }));
	});
	var Dialog$1 = Dialog;

	function getDialogActionsUtilityClass(slot) {
	  return generateUtilityClass('MuiDialogActions', slot);
	}
	generateUtilityClasses('MuiDialogActions', ['root', 'spacing']);

	const _excluded$1s = ["className", "disableSpacing"];
	const useUtilityClasses$1b = ownerState => {
	  const {
	    classes,
	    disableSpacing
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableSpacing && 'spacing']
	  };
	  return composeClasses(slots, getDialogActionsUtilityClass, classes);
	};
	const DialogActionsRoot = styled$1('div', {
	  name: 'MuiDialogActions',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disableSpacing && styles.spacing];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex',
	  alignItems: 'center',
	  padding: 8,
	  justifyContent: 'flex-end',
	  flex: '0 0 auto'
	}, !ownerState.disableSpacing && {
	  '& > :not(style) ~ :not(style)': {
	    marginLeft: 8
	  }
	}));
	const DialogActions = /*#__PURE__*/reactExports.forwardRef(function DialogActions(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDialogActions'
	  });
	  const {
	      className,
	      disableSpacing = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1s);
	  const ownerState = _extends({}, props, {
	    disableSpacing
	  });
	  const classes = useUtilityClasses$1b(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(DialogActionsRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	var DialogActions$1 = DialogActions;

	function getDialogContentUtilityClass(slot) {
	  return generateUtilityClass('MuiDialogContent', slot);
	}
	generateUtilityClasses('MuiDialogContent', ['root', 'dividers']);

	function getDialogTitleUtilityClass(slot) {
	  return generateUtilityClass('MuiDialogTitle', slot);
	}
	const dialogTitleClasses = generateUtilityClasses('MuiDialogTitle', ['root']);
	var dialogTitleClasses$1 = dialogTitleClasses;

	const _excluded$1r = ["className", "dividers"];
	const useUtilityClasses$1a = ownerState => {
	  const {
	    classes,
	    dividers
	  } = ownerState;
	  const slots = {
	    root: ['root', dividers && 'dividers']
	  };
	  return composeClasses(slots, getDialogContentUtilityClass, classes);
	};
	const DialogContentRoot = styled$1('div', {
	  name: 'MuiDialogContent',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.dividers && styles.dividers];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  flex: '1 1 auto',
	  // Add iOS momentum scrolling for iOS < 13.0
	  WebkitOverflowScrolling: 'touch',
	  overflowY: 'auto',
	  padding: '20px 24px'
	}, ownerState.dividers ? {
	  padding: '16px 24px',
	  borderTop: `1px solid ${(theme.vars || theme).palette.divider}`,
	  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
	} : {
	  [`.${dialogTitleClasses$1.root} + &`]: {
	    paddingTop: 0
	  }
	}));
	const DialogContent = /*#__PURE__*/reactExports.forwardRef(function DialogContent(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDialogContent'
	  });
	  const {
	      className,
	      dividers = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1r);
	  const ownerState = _extends({}, props, {
	    dividers
	  });
	  const classes = useUtilityClasses$1a(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(DialogContentRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	var DialogContent$1 = DialogContent;

	function getDialogContentTextUtilityClass(slot) {
	  return generateUtilityClass('MuiDialogContentText', slot);
	}
	generateUtilityClasses('MuiDialogContentText', ['root']);

	const _excluded$1q = ["children", "className"];
	const useUtilityClasses$19 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  const composedClasses = composeClasses(slots, getDialogContentTextUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const DialogContentTextRoot = styled$1(Typography$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiDialogContentText',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const DialogContentText = /*#__PURE__*/reactExports.forwardRef(function DialogContentText(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDialogContentText'
	  });
	  const {
	      className
	    } = props,
	    ownerState = _objectWithoutPropertiesLoose(props, _excluded$1q);
	  const classes = useUtilityClasses$19(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(DialogContentTextRoot, _extends({
	    component: "p",
	    variant: "body1",
	    color: "text.secondary",
	    ref: ref,
	    ownerState: ownerState,
	    className: clsx(classes.root, className)
	  }, props, {
	    classes: classes
	  }));
	});
	var DialogContentText$1 = DialogContentText;

	const _excluded$1p = ["className", "id"];
	const useUtilityClasses$18 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getDialogTitleUtilityClass, classes);
	};
	const DialogTitleRoot = styled$1(Typography$1, {
	  name: 'MuiDialogTitle',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  padding: '16px 24px',
	  flex: '0 0 auto'
	});
	const DialogTitle = /*#__PURE__*/reactExports.forwardRef(function DialogTitle(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDialogTitle'
	  });
	  const {
	      className,
	      id: idProp
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1p);
	  const ownerState = props;
	  const classes = useUtilityClasses$18(ownerState);
	  const {
	    titleId = idProp
	  } = reactExports.useContext(DialogContext$1);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(DialogTitleRoot, _extends({
	    component: "h2",
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref,
	    variant: "h6",
	    id: idProp != null ? idProp : titleId
	  }, other));
	});
	var DialogTitle$1 = DialogTitle;

	function getDividerUtilityClass(slot) {
	  return generateUtilityClass('MuiDivider', slot);
	}
	const dividerClasses = generateUtilityClasses('MuiDivider', ['root', 'absolute', 'fullWidth', 'inset', 'middle', 'flexItem', 'light', 'vertical', 'withChildren', 'withChildrenVertical', 'textAlignRight', 'textAlignLeft', 'wrapper', 'wrapperVertical']);
	var dividerClasses$1 = dividerClasses;

	const _excluded$1o = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"];
	const useUtilityClasses$17 = ownerState => {
	  const {
	    absolute,
	    children,
	    classes,
	    flexItem,
	    light,
	    orientation,
	    textAlign,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', absolute && 'absolute', variant, light && 'light', orientation === 'vertical' && 'vertical', flexItem && 'flexItem', children && 'withChildren', children && orientation === 'vertical' && 'withChildrenVertical', textAlign === 'right' && orientation !== 'vertical' && 'textAlignRight', textAlign === 'left' && orientation !== 'vertical' && 'textAlignLeft'],
	    wrapper: ['wrapper', orientation === 'vertical' && 'wrapperVertical']
	  };
	  return composeClasses(slots, getDividerUtilityClass, classes);
	};
	const DividerRoot = styled$1('div', {
	  name: 'MuiDivider',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.absolute && styles.absolute, styles[ownerState.variant], ownerState.light && styles.light, ownerState.orientation === 'vertical' && styles.vertical, ownerState.flexItem && styles.flexItem, ownerState.children && styles.withChildren, ownerState.children && ownerState.orientation === 'vertical' && styles.withChildrenVertical, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && styles.textAlignRight, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && styles.textAlignLeft];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  margin: 0,
	  // Reset browser default style.
	  flexShrink: 0,
	  borderWidth: 0,
	  borderStyle: 'solid',
	  borderColor: (theme.vars || theme).palette.divider,
	  borderBottomWidth: 'thin'
	}, ownerState.absolute && {
	  position: 'absolute',
	  bottom: 0,
	  left: 0,
	  width: '100%'
	}, ownerState.light && {
	  borderColor: theme.vars ? `rgba(${theme.vars.palette.dividerChannel} / 0.08)` : alpha(theme.palette.divider, 0.08)
	}, ownerState.variant === 'inset' && {
	  marginLeft: 72
	}, ownerState.variant === 'middle' && ownerState.orientation === 'horizontal' && {
	  marginLeft: theme.spacing(2),
	  marginRight: theme.spacing(2)
	}, ownerState.variant === 'middle' && ownerState.orientation === 'vertical' && {
	  marginTop: theme.spacing(1),
	  marginBottom: theme.spacing(1)
	}, ownerState.orientation === 'vertical' && {
	  height: '100%',
	  borderBottomWidth: 0,
	  borderRightWidth: 'thin'
	}, ownerState.flexItem && {
	  alignSelf: 'stretch',
	  height: 'auto'
	}), ({
	  ownerState
	}) => _extends({}, ownerState.children && {
	  display: 'flex',
	  whiteSpace: 'nowrap',
	  textAlign: 'center',
	  border: 0,
	  '&::before, &::after': {
	    content: '""',
	    alignSelf: 'center'
	  }
	}), ({
	  theme,
	  ownerState
	}) => _extends({}, ownerState.children && ownerState.orientation !== 'vertical' && {
	  '&::before, &::after': {
	    width: '100%',
	    borderTop: `thin solid ${(theme.vars || theme).palette.divider}`
	  }
	}), ({
	  theme,
	  ownerState
	}) => _extends({}, ownerState.children && ownerState.orientation === 'vertical' && {
	  flexDirection: 'column',
	  '&::before, &::after': {
	    height: '100%',
	    borderLeft: `thin solid ${(theme.vars || theme).palette.divider}`
	  }
	}), ({
	  ownerState
	}) => _extends({}, ownerState.textAlign === 'right' && ownerState.orientation !== 'vertical' && {
	  '&::before': {
	    width: '90%'
	  },
	  '&::after': {
	    width: '10%'
	  }
	}, ownerState.textAlign === 'left' && ownerState.orientation !== 'vertical' && {
	  '&::before': {
	    width: '10%'
	  },
	  '&::after': {
	    width: '90%'
	  }
	}));
	const DividerWrapper = styled$1('span', {
	  name: 'MuiDivider',
	  slot: 'Wrapper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.wrapper, ownerState.orientation === 'vertical' && styles.wrapperVertical];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'inline-block',
	  paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,
	  paddingRight: `calc(${theme.spacing(1)} * 1.2)`
	}, ownerState.orientation === 'vertical' && {
	  paddingTop: `calc(${theme.spacing(1)} * 1.2)`,
	  paddingBottom: `calc(${theme.spacing(1)} * 1.2)`
	}));
	const Divider = /*#__PURE__*/reactExports.forwardRef(function Divider(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDivider'
	  });
	  const {
	      absolute = false,
	      children,
	      className,
	      component = children ? 'div' : 'hr',
	      flexItem = false,
	      light = false,
	      orientation = 'horizontal',
	      role = component !== 'hr' ? 'separator' : undefined,
	      textAlign = 'center',
	      variant = 'fullWidth'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1o);
	  const ownerState = _extends({}, props, {
	    absolute,
	    component,
	    flexItem,
	    light,
	    orientation,
	    role,
	    textAlign,
	    variant
	  });
	  const classes = useUtilityClasses$17(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(DividerRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    role: role,
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: children ? /*#__PURE__*/jsxRuntimeExports.jsx(DividerWrapper, {
	      className: classes.wrapper,
	      ownerState: ownerState,
	      children: children
	    }) : null
	  }));
	});

	/**
	 * The following flag is used to ensure that this component isn't tabbable i.e.
	 * does not get highlight/focus inside of MUI List.
	 */
	Divider.muiSkipListHighlight = true;
	var Divider$1 = Divider;

	const _excluded$1n = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
	const useUtilityClasses$16 = ownerState => {
	  const {
	    classes,
	    disableUnderline
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableUnderline && 'underline'],
	    input: ['input']
	  };
	  const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const FilledInputRoot = styled$1(InputBaseRoot, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiFilledInput',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  var _palette;
	  const light = theme.palette.mode === 'light';
	  const bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
	  const backgroundColor = light ? 'rgba(0, 0, 0, 0.06)' : 'rgba(255, 255, 255, 0.09)';
	  const hoverBackground = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.13)';
	  const disabledBackground = light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)';
	  return _extends({
	    position: 'relative',
	    backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor,
	    borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
	    borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
	    transition: theme.transitions.create('background-color', {
	      duration: theme.transitions.duration.shorter,
	      easing: theme.transitions.easing.easeOut
	    }),
	    '&:hover': {
	      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
	      }
	    },
	    [`&.${filledInputClasses$1.focused}`]: {
	      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
	    },
	    [`&.${filledInputClasses$1.disabled}`]: {
	      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
	    }
	  }, !ownerState.disableUnderline && {
	    '&::after': {
	      borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || 'primary']) == null ? void 0 : _palette.main}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '""',
	      position: 'absolute',
	      right: 0,
	      transform: 'scaleX(0)',
	      transition: theme.transitions.create('transform', {
	        duration: theme.transitions.duration.shorter,
	        easing: theme.transitions.easing.easeOut
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.
	    },
	    [`&.${filledInputClasses$1.focused}:after`]: {
	      // translateX(0) is a workaround for Safari transform scale bug
	      // See https://github.com/mui/material-ui/issues/31766
	      transform: 'scaleX(1) translateX(0)'
	    },
	    [`&.${filledInputClasses$1.error}`]: {
	      '&::before, &::after': {
	        borderBottomColor: (theme.vars || theme).palette.error.main
	      }
	    },
	    '&::before': {
	      borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '"\\00a0"',
	      position: 'absolute',
	      right: 0,
	      transition: theme.transitions.create('border-bottom-color', {
	        duration: theme.transitions.duration.shorter
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.
	    },
	    [`&:hover:not(.${filledInputClasses$1.disabled}, .${filledInputClasses$1.error}):before`]: {
	      borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
	    },
	    [`&.${filledInputClasses$1.disabled}:before`]: {
	      borderBottomStyle: 'dotted'
	    }
	  }, ownerState.startAdornment && {
	    paddingLeft: 12
	  }, ownerState.endAdornment && {
	    paddingRight: 12
	  }, ownerState.multiline && _extends({
	    padding: '25px 12px 8px'
	  }, ownerState.size === 'small' && {
	    paddingTop: 21,
	    paddingBottom: 4
	  }, ownerState.hiddenLabel && {
	    paddingTop: 16,
	    paddingBottom: 17
	  }, ownerState.hiddenLabel && ownerState.size === 'small' && {
	    paddingTop: 8,
	    paddingBottom: 9
	  }));
	});
	const FilledInputInput = styled$1(InputBaseComponent, {
	  name: 'MuiFilledInput',
	  slot: 'Input',
	  overridesResolver: inputOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  paddingTop: 25,
	  paddingRight: 12,
	  paddingBottom: 8,
	  paddingLeft: 12
	}, !theme.vars && {
	  '&:-webkit-autofill': {
	    WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
	    WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
	    caretColor: theme.palette.mode === 'light' ? null : '#fff',
	    borderTopLeftRadius: 'inherit',
	    borderTopRightRadius: 'inherit'
	  }
	}, theme.vars && {
	  '&:-webkit-autofill': {
	    borderTopLeftRadius: 'inherit',
	    borderTopRightRadius: 'inherit'
	  },
	  [theme.getColorSchemeSelector('dark')]: {
	    '&:-webkit-autofill': {
	      WebkitBoxShadow: '0 0 0 100px #266798 inset',
	      WebkitTextFillColor: '#fff',
	      caretColor: '#fff'
	    }
	  }
	}, ownerState.size === 'small' && {
	  paddingTop: 21,
	  paddingBottom: 4
	}, ownerState.hiddenLabel && {
	  paddingTop: 16,
	  paddingBottom: 17
	}, ownerState.startAdornment && {
	  paddingLeft: 0
	}, ownerState.endAdornment && {
	  paddingRight: 0
	}, ownerState.hiddenLabel && ownerState.size === 'small' && {
	  paddingTop: 8,
	  paddingBottom: 9
	}, ownerState.multiline && {
	  paddingTop: 0,
	  paddingBottom: 0,
	  paddingLeft: 0,
	  paddingRight: 0
	}));
	const FilledInput = /*#__PURE__*/reactExports.forwardRef(function FilledInput(inProps, ref) {
	  var _ref, _slots$root, _ref2, _slots$input;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFilledInput'
	  });
	  const {
	      components = {},
	      componentsProps: componentsPropsProp,
	      fullWidth = false,
	      // declare here to prevent spreading to DOM
	      inputComponent = 'input',
	      multiline = false,
	      slotProps,
	      slots = {},
	      type = 'text'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1n);
	  const ownerState = _extends({}, props, {
	    fullWidth,
	    inputComponent,
	    multiline,
	    type
	  });
	  const classes = useUtilityClasses$16(props);
	  const filledInputComponentsProps = {
	    root: {
	      ownerState
	    },
	    input: {
	      ownerState
	    }
	  };
	  const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(filledInputComponentsProps, slotProps != null ? slotProps : componentsPropsProp) : filledInputComponentsProps;
	  const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
	  const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
	  return /*#__PURE__*/jsxRuntimeExports.jsx(InputBase$1, _extends({
	    slots: {
	      root: RootSlot,
	      input: InputSlot
	    },
	    componentsProps: componentsProps,
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other, {
	    classes: classes
	  }));
	});
	FilledInput.muiName = 'Input';
	var FilledInput$1 = FilledInput;

	function getFormControlUtilityClasses(slot) {
	  return generateUtilityClass('MuiFormControl', slot);
	}
	generateUtilityClasses('MuiFormControl', ['root', 'marginNone', 'marginNormal', 'marginDense', 'fullWidth', 'disabled']);

	const _excluded$1m = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
	const useUtilityClasses$15 = ownerState => {
	  const {
	    classes,
	    margin,
	    fullWidth
	  } = ownerState;
	  const slots = {
	    root: ['root', margin !== 'none' && `margin${capitalize(margin)}`, fullWidth && 'fullWidth']
	  };
	  return composeClasses(slots, getFormControlUtilityClasses, classes);
	};
	const FormControlRoot = styled$1('div', {
	  name: 'MuiFormControl',
	  slot: 'Root',
	  overridesResolver: ({
	    ownerState
	  }, styles) => {
	    return _extends({}, styles.root, styles[`margin${capitalize(ownerState.margin)}`], ownerState.fullWidth && styles.fullWidth);
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'inline-flex',
	  flexDirection: 'column',
	  position: 'relative',
	  // Reset fieldset default style.
	  minWidth: 0,
	  padding: 0,
	  margin: 0,
	  border: 0,
	  verticalAlign: 'top'
	}, ownerState.margin === 'normal' && {
	  marginTop: 16,
	  marginBottom: 8
	}, ownerState.margin === 'dense' && {
	  marginTop: 8,
	  marginBottom: 4
	}, ownerState.fullWidth && {
	  width: '100%'
	}));

	/**
	 * Provides context such as filled/focused/error/required for form inputs.
	 * Relying on the context provides high flexibility and ensures that the state always stays
	 * consistent across the children of the `FormControl`.
	 * This context is used by the following components:
	 *
	 *  - FormLabel
	 *  - FormHelperText
	 *  - Input
	 *  - InputLabel
	 *
	 * You can find one composition example below and more going to [the demos](/material-ui/react-text-field/#components).
	 *
	 * ```jsx
	 * <FormControl>
	 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
	 *   <Input id="my-input" aria-describedby="my-helper-text" />
	 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
	 * </FormControl>
	 * ```
	 *
	 * ⚠️ Only one `InputBase` can be used within a FormControl because it creates visual inconsistencies.
	 * For instance, only one input can be focused at the same time, the state shouldn't be shared.
	 */
	const FormControl = /*#__PURE__*/reactExports.forwardRef(function FormControl(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormControl'
	  });
	  const {
	      children,
	      className,
	      color = 'primary',
	      component = 'div',
	      disabled = false,
	      error = false,
	      focused: visuallyFocused,
	      fullWidth = false,
	      hiddenLabel = false,
	      margin = 'none',
	      required = false,
	      size = 'medium',
	      variant = 'outlined'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1m);
	  const ownerState = _extends({}, props, {
	    color,
	    component,
	    disabled,
	    error,
	    fullWidth,
	    hiddenLabel,
	    margin,
	    required,
	    size,
	    variant
	  });
	  const classes = useUtilityClasses$15(ownerState);
	  const [adornedStart, setAdornedStart] = reactExports.useState(() => {
	    // We need to iterate through the children and find the Input in order
	    // to fully support server-side rendering.
	    let initialAdornedStart = false;
	    if (children) {
	      reactExports.Children.forEach(children, child => {
	        if (!isMuiElement(child, ['Input', 'Select'])) {
	          return;
	        }
	        const input = isMuiElement(child, ['Select']) ? child.props.input : child;
	        if (input && isAdornedStart(input.props)) {
	          initialAdornedStart = true;
	        }
	      });
	    }
	    return initialAdornedStart;
	  });
	  const [filled, setFilled] = reactExports.useState(() => {
	    // We need to iterate through the children and find the Input in order
	    // to fully support server-side rendering.
	    let initialFilled = false;
	    if (children) {
	      reactExports.Children.forEach(children, child => {
	        if (!isMuiElement(child, ['Input', 'Select'])) {
	          return;
	        }
	        if (isFilled(child.props, true) || isFilled(child.props.inputProps, true)) {
	          initialFilled = true;
	        }
	      });
	    }
	    return initialFilled;
	  });
	  const [focusedState, setFocused] = reactExports.useState(false);
	  if (disabled && focusedState) {
	    setFocused(false);
	  }
	  const focused = visuallyFocused !== undefined && !disabled ? visuallyFocused : focusedState;
	  let registerEffect;
	  const childContext = reactExports.useMemo(() => {
	    return {
	      adornedStart,
	      setAdornedStart,
	      color,
	      disabled,
	      error,
	      filled,
	      focused,
	      fullWidth,
	      hiddenLabel,
	      size,
	      onBlur: () => {
	        setFocused(false);
	      },
	      onEmpty: () => {
	        setFilled(false);
	      },
	      onFilled: () => {
	        setFilled(true);
	      },
	      onFocus: () => {
	        setFocused(true);
	      },
	      registerEffect,
	      required,
	      variant
	    };
	  }, [adornedStart, color, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(FormControlContext$1.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(FormControlRoot, _extends({
	      as: component,
	      ownerState: ownerState,
	      className: clsx(classes.root, className),
	      ref: ref
	    }, other, {
	      children: children
	    }))
	  });
	});
	var FormControl$1 = FormControl;

	const Stack = createStack({
	  createStyledComponent: styled$1('div', {
	    name: 'MuiStack',
	    slot: 'Root',
	    overridesResolver: (props, styles) => styles.root
	  }),
	  useThemeProps: inProps => useThemeProps({
	    props: inProps,
	    name: 'MuiStack'
	  })
	});
	var Stack$1 = Stack;

	function getFormControlLabelUtilityClasses(slot) {
	  return generateUtilityClass('MuiFormControlLabel', slot);
	}
	const formControlLabelClasses = generateUtilityClasses('MuiFormControlLabel', ['root', 'labelPlacementStart', 'labelPlacementTop', 'labelPlacementBottom', 'disabled', 'label', 'error', 'required', 'asterisk']);
	var formControlLabelClasses$1 = formControlLabelClasses;

	const _excluded$1l = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "required", "slotProps", "value"];
	const useUtilityClasses$14 = ownerState => {
	  const {
	    classes,
	    disabled,
	    labelPlacement,
	    error,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', `labelPlacement${capitalize(labelPlacement)}`, error && 'error', required && 'required'],
	    label: ['label', disabled && 'disabled'],
	    asterisk: ['asterisk', error && 'error']
	  };
	  return composeClasses(slots, getFormControlLabelUtilityClasses, classes);
	};
	const FormControlLabelRoot = styled$1('label', {
	  name: 'MuiFormControlLabel',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${formControlLabelClasses$1.label}`]: styles.label
	    }, styles.root, styles[`labelPlacement${capitalize(ownerState.labelPlacement)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'inline-flex',
	  alignItems: 'center',
	  cursor: 'pointer',
	  // For correct alignment with the text.
	  verticalAlign: 'middle',
	  WebkitTapHighlightColor: 'transparent',
	  marginLeft: -11,
	  marginRight: 16,
	  // used for row presentation of radio/checkbox
	  [`&.${formControlLabelClasses$1.disabled}`]: {
	    cursor: 'default'
	  }
	}, ownerState.labelPlacement === 'start' && {
	  flexDirection: 'row-reverse',
	  marginLeft: 16,
	  // used for row presentation of radio/checkbox
	  marginRight: -11
	}, ownerState.labelPlacement === 'top' && {
	  flexDirection: 'column-reverse',
	  marginLeft: 16
	}, ownerState.labelPlacement === 'bottom' && {
	  flexDirection: 'column',
	  marginLeft: 16
	}, {
	  [`& .${formControlLabelClasses$1.label}`]: {
	    [`&.${formControlLabelClasses$1.disabled}`]: {
	      color: (theme.vars || theme).palette.text.disabled
	    }
	  }
	}));
	const AsteriskComponent$1 = styled$1('span', {
	  name: 'MuiFormControlLabel',
	  slot: 'Asterisk',
	  overridesResolver: (props, styles) => styles.asterisk
	})(({
	  theme
	}) => ({
	  [`&.${formControlLabelClasses$1.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}));

	/**
	 * Drop-in replacement of the `Radio`, `Switch` and `Checkbox` component.
	 * Use this component if you want to display an extra label.
	 */
	const FormControlLabel = /*#__PURE__*/reactExports.forwardRef(function FormControlLabel(inProps, ref) {
	  var _ref, _slotProps$typography;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormControlLabel'
	  });
	  const {
	      className,
	      componentsProps = {},
	      control,
	      disabled: disabledProp,
	      disableTypography,
	      label: labelProp,
	      labelPlacement = 'end',
	      required: requiredProp,
	      slotProps = {}
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1l);
	  const muiFormControl = useFormControl();
	  const disabled = (_ref = disabledProp != null ? disabledProp : control.props.disabled) != null ? _ref : muiFormControl == null ? void 0 : muiFormControl.disabled;
	  const required = requiredProp != null ? requiredProp : control.props.required;
	  const controlProps = {
	    disabled,
	    required
	  };
	  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(key => {
	    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {
	      controlProps[key] = props[key];
	    }
	  });
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['error']
	  });
	  const ownerState = _extends({}, props, {
	    disabled,
	    labelPlacement,
	    required,
	    error: fcs.error
	  });
	  const classes = useUtilityClasses$14(ownerState);
	  const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;
	  let label = labelProp;
	  if (label != null && label.type !== Typography$1 && !disableTypography) {
	    label = /*#__PURE__*/jsxRuntimeExports.jsx(Typography$1, _extends({
	      component: "span"
	    }, typographySlotProps, {
	      className: clsx(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),
	      children: label
	    }));
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(FormControlLabelRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [/*#__PURE__*/reactExports.cloneElement(control, controlProps), required ? /*#__PURE__*/jsxRuntimeExports.jsxs(Stack$1, {
	      display: "block",
	      children: [label, /*#__PURE__*/jsxRuntimeExports.jsxs(AsteriskComponent$1, {
	        ownerState: ownerState,
	        "aria-hidden": true,
	        className: classes.asterisk,
	        children: ["\u2009", '*']
	      })]
	    }) : label]
	  }));
	});
	var FormControlLabel$1 = FormControlLabel;

	function getFormGroupUtilityClass(slot) {
	  return generateUtilityClass('MuiFormGroup', slot);
	}
	generateUtilityClasses('MuiFormGroup', ['root', 'row', 'error']);

	const _excluded$1k = ["className", "row"];
	const useUtilityClasses$13 = ownerState => {
	  const {
	    classes,
	    row,
	    error
	  } = ownerState;
	  const slots = {
	    root: ['root', row && 'row', error && 'error']
	  };
	  return composeClasses(slots, getFormGroupUtilityClass, classes);
	};
	const FormGroupRoot = styled$1('div', {
	  name: 'MuiFormGroup',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.row && styles.row];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex',
	  flexDirection: 'column',
	  flexWrap: 'wrap'
	}, ownerState.row && {
	  flexDirection: 'row'
	}));

	/**
	 * `FormGroup` wraps controls such as `Checkbox` and `Switch`.
	 * It provides compact row layout.
	 * For the `Radio`, you should be using the `RadioGroup` component instead of this one.
	 */
	const FormGroup = /*#__PURE__*/reactExports.forwardRef(function FormGroup(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormGroup'
	  });
	  const {
	      className,
	      row = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1k);
	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['error']
	  });
	  const ownerState = _extends({}, props, {
	    row,
	    error: fcs.error
	  });
	  const classes = useUtilityClasses$13(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(FormGroupRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	var FormGroup$1 = FormGroup;

	function getFormHelperTextUtilityClasses(slot) {
	  return generateUtilityClass('MuiFormHelperText', slot);
	}
	const formHelperTextClasses = generateUtilityClasses('MuiFormHelperText', ['root', 'error', 'disabled', 'sizeSmall', 'sizeMedium', 'contained', 'focused', 'filled', 'required']);
	var formHelperTextClasses$1 = formHelperTextClasses;

	var _span$3;
	const _excluded$1j = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
	const useUtilityClasses$12 = ownerState => {
	  const {
	    classes,
	    contained,
	    size,
	    disabled,
	    error,
	    filled,
	    focused,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', error && 'error', size && `size${capitalize(size)}`, contained && 'contained', focused && 'focused', filled && 'filled', required && 'required']
	  };
	  return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
	};
	const FormHelperTextRoot = styled$1('p', {
	  name: 'MuiFormHelperText',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.size && styles[`size${capitalize(ownerState.size)}`], ownerState.contained && styles.contained, ownerState.filled && styles.filled];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  color: (theme.vars || theme).palette.text.secondary
	}, theme.typography.caption, {
	  textAlign: 'left',
	  marginTop: 3,
	  marginRight: 0,
	  marginBottom: 0,
	  marginLeft: 0,
	  [`&.${formHelperTextClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.text.disabled
	  },
	  [`&.${formHelperTextClasses$1.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}, ownerState.size === 'small' && {
	  marginTop: 4
	}, ownerState.contained && {
	  marginLeft: 14,
	  marginRight: 14
	}));
	const FormHelperText = /*#__PURE__*/reactExports.forwardRef(function FormHelperText(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormHelperText'
	  });
	  const {
	      children,
	      className,
	      component = 'p'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1j);
	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['variant', 'size', 'disabled', 'error', 'filled', 'focused', 'required']
	  });
	  const ownerState = _extends({}, props, {
	    component,
	    contained: fcs.variant === 'filled' || fcs.variant === 'outlined',
	    variant: fcs.variant,
	    size: fcs.size,
	    disabled: fcs.disabled,
	    error: fcs.error,
	    filled: fcs.filled,
	    focused: fcs.focused,
	    required: fcs.required
	  });
	  const classes = useUtilityClasses$12(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(FormHelperTextRoot, _extends({
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other, {
	    children: children === ' ' ?
	    // notranslate needed while Google Translate will not fix zero-width space issue
	    _span$3 || (_span$3 = /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	      className: "notranslate",
	      children: "\u200B"
	    })) : children
	  }));
	});
	var FormHelperText$1 = FormHelperText;

	function getFormLabelUtilityClasses(slot) {
	  return generateUtilityClass('MuiFormLabel', slot);
	}
	const formLabelClasses = generateUtilityClasses('MuiFormLabel', ['root', 'colorSecondary', 'focused', 'disabled', 'error', 'filled', 'required', 'asterisk']);
	var formLabelClasses$1 = formLabelClasses;

	const _excluded$1i = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
	const useUtilityClasses$11 = ownerState => {
	  const {
	    classes,
	    color,
	    focused,
	    disabled,
	    error,
	    filled,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${capitalize(color)}`, disabled && 'disabled', error && 'error', filled && 'filled', focused && 'focused', required && 'required'],
	    asterisk: ['asterisk', error && 'error']
	  };
	  return composeClasses(slots, getFormLabelUtilityClasses, classes);
	};
	const FormLabelRoot = styled$1('label', {
	  name: 'MuiFormLabel',
	  slot: 'Root',
	  overridesResolver: ({
	    ownerState
	  }, styles) => {
	    return _extends({}, styles.root, ownerState.color === 'secondary' && styles.colorSecondary, ownerState.filled && styles.filled);
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  color: (theme.vars || theme).palette.text.secondary
	}, theme.typography.body1, {
	  lineHeight: '1.4375em',
	  padding: 0,
	  position: 'relative',
	  [`&.${formLabelClasses$1.focused}`]: {
	    color: (theme.vars || theme).palette[ownerState.color].main
	  },
	  [`&.${formLabelClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.text.disabled
	  },
	  [`&.${formLabelClasses$1.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}));
	const AsteriskComponent = styled$1('span', {
	  name: 'MuiFormLabel',
	  slot: 'Asterisk',
	  overridesResolver: (props, styles) => styles.asterisk
	})(({
	  theme
	}) => ({
	  [`&.${formLabelClasses$1.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}));
	const FormLabel = /*#__PURE__*/reactExports.forwardRef(function FormLabel(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiFormLabel'
	  });
	  const {
	      children,
	      className,
	      component = 'label'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1i);
	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']
	  });
	  const ownerState = _extends({}, props, {
	    color: fcs.color || 'primary',
	    component,
	    disabled: fcs.disabled,
	    error: fcs.error,
	    filled: fcs.filled,
	    focused: fcs.focused,
	    required: fcs.required
	  });
	  const classes = useUtilityClasses$11(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(FormLabelRoot, _extends({
	    as: component,
	    ownerState: ownerState,
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other, {
	    children: [children, fcs.required && /*#__PURE__*/jsxRuntimeExports.jsxs(AsteriskComponent, {
	      ownerState: ownerState,
	      "aria-hidden": true,
	      className: classes.asterisk,
	      children: ["\u2009", '*']
	    })]
	  }));
	});
	var FormLabel$1 = FormLabel;

	/**
	 * @ignore - internal component.
	 */
	const GridContext = /*#__PURE__*/reactExports.createContext();
	var GridContext$1 = GridContext;

	function getGridUtilityClass(slot) {
	  return generateUtilityClass('MuiGrid', slot);
	}
	const SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	const DIRECTIONS = ['column-reverse', 'column', 'row-reverse', 'row'];
	const WRAPS = ['nowrap', 'wrap-reverse', 'wrap'];
	const GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
	const gridClasses = generateUtilityClasses('MuiGrid', ['root', 'container', 'item', 'zeroMinWidth',
	// spacings
	...SPACINGS.map(spacing => `spacing-xs-${spacing}`),
	// direction values
	...DIRECTIONS.map(direction => `direction-xs-${direction}`),
	// wrap values
	...WRAPS.map(wrap => `wrap-xs-${wrap}`),
	// grid sizes for all breakpoints
	...GRID_SIZES.map(size => `grid-xs-${size}`), ...GRID_SIZES.map(size => `grid-sm-${size}`), ...GRID_SIZES.map(size => `grid-md-${size}`), ...GRID_SIZES.map(size => `grid-lg-${size}`), ...GRID_SIZES.map(size => `grid-xl-${size}`)]);

	const _excluded$1h = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "rowSpacing", "spacing", "wrap", "zeroMinWidth"];
	function getOffset(val) {
	  const parse = parseFloat(val);
	  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;
	}
	function generateGrid({
	  theme,
	  ownerState
	}) {
	  let size;
	  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {
	    // Use side effect over immutability for better performance.
	    let styles = {};
	    if (ownerState[breakpoint]) {
	      size = ownerState[breakpoint];
	    }
	    if (!size) {
	      return globalStyles;
	    }
	    if (size === true) {
	      // For the auto layouting
	      styles = {
	        flexBasis: 0,
	        flexGrow: 1,
	        maxWidth: '100%'
	      };
	    } else if (size === 'auto') {
	      styles = {
	        flexBasis: 'auto',
	        flexGrow: 0,
	        flexShrink: 0,
	        maxWidth: 'none',
	        width: 'auto'
	      };
	    } else {
	      const columnsBreakpointValues = resolveBreakpointValues({
	        values: ownerState.columns,
	        breakpoints: theme.breakpoints.values
	      });
	      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;
	      if (columnValue === undefined || columnValue === null) {
	        return globalStyles;
	      }
	      // Keep 7 significant numbers.
	      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;
	      let more = {};
	      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
	        const themeSpacing = theme.spacing(ownerState.columnSpacing);
	        if (themeSpacing !== '0px') {
	          const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;
	          more = {
	            flexBasis: fullWidth,
	            maxWidth: fullWidth
	          };
	        }
	      }

	      // Close to the bootstrap implementation:
	      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41
	      styles = _extends({
	        flexBasis: width,
	        flexGrow: 0,
	        maxWidth: width
	      }, more);
	    }

	    // No need for a media query for the first size.
	    if (theme.breakpoints.values[breakpoint] === 0) {
	      Object.assign(globalStyles, styles);
	    } else {
	      globalStyles[theme.breakpoints.up(breakpoint)] = styles;
	    }
	    return globalStyles;
	  }, {});
	}
	function generateDirection({
	  theme,
	  ownerState
	}) {
	  const directionValues = resolveBreakpointValues({
	    values: ownerState.direction,
	    breakpoints: theme.breakpoints.values
	  });
	  return handleBreakpoints({
	    theme
	  }, directionValues, propValue => {
	    const output = {
	      flexDirection: propValue
	    };
	    if (propValue.indexOf('column') === 0) {
	      output[`& > .${gridClasses.item}`] = {
	        maxWidth: 'none'
	      };
	    }
	    return output;
	  });
	}

	/**
	 * Extracts zero value breakpoint keys before a non-zero value breakpoint key.
	 * @example { xs: 0, sm: 0, md: 2, lg: 0, xl: 0 } or [0, 0, 2, 0, 0]
	 * @returns [xs, sm]
	 */
	function extractZeroValueBreakpointKeys({
	  breakpoints,
	  values
	}) {
	  let nonZeroKey = '';
	  Object.keys(values).forEach(key => {
	    if (nonZeroKey !== '') {
	      return;
	    }
	    if (values[key] !== 0) {
	      nonZeroKey = key;
	    }
	  });
	  const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {
	    return breakpoints[a] - breakpoints[b];
	  });
	  return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));
	}
	function generateRowGap({
	  theme,
	  ownerState
	}) {
	  const {
	    container,
	    rowSpacing
	  } = ownerState;
	  let styles = {};
	  if (container && rowSpacing !== 0) {
	    const rowSpacingValues = resolveBreakpointValues({
	      values: rowSpacing,
	      breakpoints: theme.breakpoints.values
	    });
	    let zeroValueBreakpointKeys;
	    if (typeof rowSpacingValues === 'object') {
	      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
	        breakpoints: theme.breakpoints.values,
	        values: rowSpacingValues
	      });
	    }
	    styles = handleBreakpoints({
	      theme
	    }, rowSpacingValues, (propValue, breakpoint) => {
	      var _zeroValueBreakpointK;
	      const themeSpacing = theme.spacing(propValue);
	      if (themeSpacing !== '0px') {
	        return {
	          marginTop: `-${getOffset(themeSpacing)}`,
	          [`& > .${gridClasses.item}`]: {
	            paddingTop: getOffset(themeSpacing)
	          }
	        };
	      }
	      if ((_zeroValueBreakpointK = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK.includes(breakpoint)) {
	        return {};
	      }
	      return {
	        marginTop: 0,
	        [`& > .${gridClasses.item}`]: {
	          paddingTop: 0
	        }
	      };
	    });
	  }
	  return styles;
	}
	function generateColumnGap({
	  theme,
	  ownerState
	}) {
	  const {
	    container,
	    columnSpacing
	  } = ownerState;
	  let styles = {};
	  if (container && columnSpacing !== 0) {
	    const columnSpacingValues = resolveBreakpointValues({
	      values: columnSpacing,
	      breakpoints: theme.breakpoints.values
	    });
	    let zeroValueBreakpointKeys;
	    if (typeof columnSpacingValues === 'object') {
	      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
	        breakpoints: theme.breakpoints.values,
	        values: columnSpacingValues
	      });
	    }
	    styles = handleBreakpoints({
	      theme
	    }, columnSpacingValues, (propValue, breakpoint) => {
	      var _zeroValueBreakpointK2;
	      const themeSpacing = theme.spacing(propValue);
	      if (themeSpacing !== '0px') {
	        return {
	          width: `calc(100% + ${getOffset(themeSpacing)})`,
	          marginLeft: `-${getOffset(themeSpacing)}`,
	          [`& > .${gridClasses.item}`]: {
	            paddingLeft: getOffset(themeSpacing)
	          }
	        };
	      }
	      if ((_zeroValueBreakpointK2 = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK2.includes(breakpoint)) {
	        return {};
	      }
	      return {
	        width: '100%',
	        marginLeft: 0,
	        [`& > .${gridClasses.item}`]: {
	          paddingLeft: 0
	        }
	      };
	    });
	  }
	  return styles;
	}
	function resolveSpacingStyles(spacing, breakpoints, styles = {}) {
	  // undefined/null or `spacing` <= 0
	  if (!spacing || spacing <= 0) {
	    return [];
	  }
	  // in case of string/number `spacing`
	  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {
	    return [styles[`spacing-xs-${String(spacing)}`]];
	  }
	  // in case of object `spacing`
	  const spacingStyles = [];
	  breakpoints.forEach(breakpoint => {
	    const value = spacing[breakpoint];
	    if (Number(value) > 0) {
	      spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);
	    }
	  });
	  return spacingStyles;
	}

	// Default CSS values
	// flex: '0 1 auto',
	// flexDirection: 'row',
	// alignItems: 'flex-start',
	// flexWrap: 'nowrap',
	// justifyContent: 'flex-start',
	const GridRoot = styled$1('div', {
	  name: 'MuiGrid',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    const {
	      container,
	      direction,
	      item,
	      spacing,
	      wrap,
	      zeroMinWidth,
	      breakpoints
	    } = ownerState;
	    let spacingStyles = [];

	    // in case of grid item
	    if (container) {
	      spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);
	    }
	    const breakpointsStyles = [];
	    breakpoints.forEach(breakpoint => {
	      const value = ownerState[breakpoint];
	      if (value) {
	        breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);
	      }
	    });
	    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];
	  }
	})(({
	  ownerState
	}) => _extends({
	  boxSizing: 'border-box'
	}, ownerState.container && {
	  display: 'flex',
	  flexWrap: 'wrap',
	  width: '100%'
	}, ownerState.item && {
	  margin: 0 // For instance, it's useful when used with a `figure` element.
	}, ownerState.zeroMinWidth && {
	  minWidth: 0
	}, ownerState.wrap !== 'wrap' && {
	  flexWrap: ownerState.wrap
	}), generateDirection, generateRowGap, generateColumnGap, generateGrid);
	function resolveSpacingClasses(spacing, breakpoints) {
	  // undefined/null or `spacing` <= 0
	  if (!spacing || spacing <= 0) {
	    return [];
	  }
	  // in case of string/number `spacing`
	  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {
	    return [`spacing-xs-${String(spacing)}`];
	  }
	  // in case of object `spacing`
	  const classes = [];
	  breakpoints.forEach(breakpoint => {
	    const value = spacing[breakpoint];
	    if (Number(value) > 0) {
	      const className = `spacing-${breakpoint}-${String(value)}`;
	      classes.push(className);
	    }
	  });
	  return classes;
	}
	const useUtilityClasses$10 = ownerState => {
	  const {
	    classes,
	    container,
	    direction,
	    item,
	    spacing,
	    wrap,
	    zeroMinWidth,
	    breakpoints
	  } = ownerState;
	  let spacingClasses = [];

	  // in case of grid item
	  if (container) {
	    spacingClasses = resolveSpacingClasses(spacing, breakpoints);
	  }
	  const breakpointsClasses = [];
	  breakpoints.forEach(breakpoint => {
	    const value = ownerState[breakpoint];
	    if (value) {
	      breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);
	    }
	  });
	  const slots = {
	    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...spacingClasses, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]
	  };
	  return composeClasses(slots, getGridUtilityClass, classes);
	};
	const Grid = /*#__PURE__*/reactExports.forwardRef(function Grid(inProps, ref) {
	  const themeProps = useThemeProps({
	    props: inProps,
	    name: 'MuiGrid'
	  });
	  const {
	    breakpoints
	  } = useTheme();
	  const props = extendSxProp(themeProps);
	  const {
	      className,
	      columns: columnsProp,
	      columnSpacing: columnSpacingProp,
	      component = 'div',
	      container = false,
	      direction = 'row',
	      item = false,
	      rowSpacing: rowSpacingProp,
	      spacing = 0,
	      wrap = 'wrap',
	      zeroMinWidth = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1h);
	  const rowSpacing = rowSpacingProp || spacing;
	  const columnSpacing = columnSpacingProp || spacing;
	  const columnsContext = reactExports.useContext(GridContext$1);

	  // columns set with default breakpoint unit of 12
	  const columns = container ? columnsProp || 12 : columnsContext;
	  const breakpointsValues = {};
	  const otherFiltered = _extends({}, other);
	  breakpoints.keys.forEach(breakpoint => {
	    if (other[breakpoint] != null) {
	      breakpointsValues[breakpoint] = other[breakpoint];
	      delete otherFiltered[breakpoint];
	    }
	  });
	  const ownerState = _extends({}, props, {
	    columns,
	    container,
	    direction,
	    item,
	    rowSpacing,
	    columnSpacing,
	    wrap,
	    zeroMinWidth,
	    spacing
	  }, breakpointsValues, {
	    breakpoints: breakpoints.keys
	  });
	  const classes = useUtilityClasses$10(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(GridContext$1.Provider, {
	    value: columns,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(GridRoot, _extends({
	      ownerState: ownerState,
	      className: clsx(classes.root, className),
	      as: component,
	      ref: ref
	    }, otherFiltered))
	  });
	});
	var Grid$1 = Grid;

	const _excluded$1g = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
	function getScale(value) {
	  return `scale(${value}, ${value ** 2})`;
	}
	const styles$2 = {
	  entering: {
	    opacity: 1,
	    transform: getScale(1)
	  },
	  entered: {
	    opacity: 1,
	    transform: 'none'
	  }
	};

	/*
	 TODO v6: remove
	 Conditionally apply a workaround for the CSS transition bug in Safari 15.4 / WebKit browsers.
	 */
	const isWebKit154 = typeof navigator !== 'undefined' && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);

	/**
	 * The Grow transition is used by the [Tooltip](/material-ui/react-tooltip/) and
	 * [Popover](/material-ui/react-popover/) components.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */
	const Grow = /*#__PURE__*/reactExports.forwardRef(function Grow(props, ref) {
	  const {
	      addEndListener,
	      appear = true,
	      children,
	      easing,
	      in: inProp,
	      onEnter,
	      onEntered,
	      onEntering,
	      onExit,
	      onExited,
	      onExiting,
	      style,
	      timeout = 'auto',
	      // eslint-disable-next-line react/prop-types
	      TransitionComponent = Transition$1
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1g);
	  const timer = reactExports.useRef();
	  const autoTimeout = reactExports.useRef();
	  const theme = useTheme();
	  const nodeRef = reactExports.useRef(null);
	  const handleRef = useForkRef(nodeRef, children.ref, ref);
	  const normalizedTransitionCallback = callback => maybeIsAppearing => {
	    if (callback) {
	      const node = nodeRef.current;

	      // onEnterXxx and onExitXxx callbacks have a different arguments.length value.
	      if (maybeIsAppearing === undefined) {
	        callback(node);
	      } else {
	        callback(node, maybeIsAppearing);
	      }
	    }
	  };
	  const handleEntering = normalizedTransitionCallback(onEntering);
	  const handleEnter = normalizedTransitionCallback((node, isAppearing) => {
	    reflow(node); // So the animation always start from the start.

	    const {
	      duration: transitionDuration,
	      delay,
	      easing: transitionTimingFunction
	    } = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'enter'
	    });
	    let duration;
	    if (timeout === 'auto') {
	      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	      autoTimeout.current = duration;
	    } else {
	      duration = transitionDuration;
	    }
	    node.style.transition = [theme.transitions.create('opacity', {
	      duration,
	      delay
	    }), theme.transitions.create('transform', {
	      duration: isWebKit154 ? duration : duration * 0.666,
	      delay,
	      easing: transitionTimingFunction
	    })].join(',');
	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  const handleEntered = normalizedTransitionCallback(onEntered);
	  const handleExiting = normalizedTransitionCallback(onExiting);
	  const handleExit = normalizedTransitionCallback(node => {
	    const {
	      duration: transitionDuration,
	      delay,
	      easing: transitionTimingFunction
	    } = getTransitionProps({
	      style,
	      timeout,
	      easing
	    }, {
	      mode: 'exit'
	    });
	    let duration;
	    if (timeout === 'auto') {
	      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	      autoTimeout.current = duration;
	    } else {
	      duration = transitionDuration;
	    }
	    node.style.transition = [theme.transitions.create('opacity', {
	      duration,
	      delay
	    }), theme.transitions.create('transform', {
	      duration: isWebKit154 ? duration : duration * 0.666,
	      delay: isWebKit154 ? delay : delay || duration * 0.333,
	      easing: transitionTimingFunction
	    })].join(',');
	    node.style.opacity = 0;
	    node.style.transform = getScale(0.75);
	    if (onExit) {
	      onExit(node);
	    }
	  });
	  const handleExited = normalizedTransitionCallback(onExited);
	  const handleAddEndListener = next => {
	    if (timeout === 'auto') {
	      timer.current = setTimeout(next, autoTimeout.current || 0);
	    }
	    if (addEndListener) {
	      // Old call signature before `react-transition-group` implemented `nodeRef`
	      addEndListener(nodeRef.current, next);
	    }
	  };
	  reactExports.useEffect(() => {
	    return () => {
	      clearTimeout(timer.current);
	    };
	  }, []);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends({
	    appear: appear,
	    in: inProp,
	    nodeRef: nodeRef,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: handleAddEndListener,
	    timeout: timeout === 'auto' ? null : timeout
	  }, other, {
	    children: (state, childProps) => {
	      return /*#__PURE__*/reactExports.cloneElement(children, _extends({
	        style: _extends({
	          opacity: 0,
	          transform: getScale(0.75),
	          visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	        }, styles$2[state], style, children.props.style),
	        ref: handleRef
	      }, childProps));
	    }
	  }));
	});
	Grow.muiSupportAuto = true;
	var Grow$1 = Grow;

	/**
	 * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.
	 */

	/**
	 * @deprecated Not used internally. Use `MediaQueryList` from lib.dom.d.ts instead.
	 */

	/**
	 * @deprecated Not used internally. Use `(event: MediaQueryListEvent) => void` instead.
	 */

	function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
	  const [match, setMatch] = reactExports.useState(() => {
	    if (noSsr && matchMedia) {
	      return matchMedia(query).matches;
	    }
	    if (ssrMatchMedia) {
	      return ssrMatchMedia(query).matches;
	    }

	    // Once the component is mounted, we rely on the
	    // event listeners to return the correct matches value.
	    return defaultMatches;
	  });
	  useEnhancedEffect$1(() => {
	    let active = true;
	    if (!matchMedia) {
	      return undefined;
	    }
	    const queryList = matchMedia(query);
	    const updateMatch = () => {
	      // Workaround Safari wrong implementation of matchMedia
	      // TODO can we remove it?
	      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677
	      if (active) {
	        setMatch(queryList.matches);
	      }
	    };
	    updateMatch();
	    // TODO: Use `addEventListener` once support for Safari < 14 is dropped
	    queryList.addListener(updateMatch);
	    return () => {
	      active = false;
	      queryList.removeListener(updateMatch);
	    };
	  }, [query, matchMedia]);
	  return match;
	}

	// eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814
	const maybeReactUseSyncExternalStore = React$1['useSyncExternalStore' + ''];
	function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
	  const getDefaultSnapshot = reactExports.useCallback(() => defaultMatches, [defaultMatches]);
	  const getServerSnapshot = reactExports.useMemo(() => {
	    if (noSsr && matchMedia) {
	      return () => matchMedia(query).matches;
	    }
	    if (ssrMatchMedia !== null) {
	      const {
	        matches
	      } = ssrMatchMedia(query);
	      return () => matches;
	    }
	    return getDefaultSnapshot;
	  }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);
	  const [getSnapshot, subscribe] = reactExports.useMemo(() => {
	    if (matchMedia === null) {
	      return [getDefaultSnapshot, () => () => {}];
	    }
	    const mediaQueryList = matchMedia(query);
	    return [() => mediaQueryList.matches, notify => {
	      // TODO: Use `addEventListener` once support for Safari < 14 is dropped
	      mediaQueryList.addListener(notify);
	      return () => {
	        mediaQueryList.removeListener(notify);
	      };
	    }];
	  }, [getDefaultSnapshot, matchMedia, query]);
	  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	  return match;
	}
	function useMediaQuery(queryInput, options = {}) {
	  const theme = useTheme$2();
	  // Wait for jsdom to support the match media feature.
	  // All the browsers MUI support have this built-in.
	  // This defensive check is here for simplicity.
	  // Most of the time, the match media logic isn't central to people tests.
	  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';
	  const {
	    defaultMatches = false,
	    matchMedia = supportMatchMedia ? window.matchMedia : null,
	    ssrMatchMedia = null,
	    noSsr = false
	  } = getThemeProps({
	    name: 'MuiUseMediaQuery',
	    props: options,
	    theme
	  });
	  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;
	  query = query.replace(/^@media( ?)/m, '');

	  // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable
	  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;
	  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
	  return match;
	}

	const _excluded$1f = ["initialWidth", "width"];
	const breakpointKeys = ['xs', 'sm', 'md', 'lg', 'xl'];

	// By default, returns true if screen width is the same or greater than the given breakpoint.
	const isWidthUp = (breakpoint, width, inclusive = true) => {
	  if (inclusive) {
	    return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);
	  }
	  return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);
	};

	// By default, returns true if screen width is less than the given breakpoint.
	const isWidthDown = (breakpoint, width, inclusive = false) => {
	  if (inclusive) {
	    return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);
	  }
	  return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);
	};
	const withWidth = (options = {}) => Component => {
	  const {
	    withTheme: withThemeOption = false,
	    noSSR = false,
	    initialWidth: initialWidthOption
	  } = options;
	  function WithWidth(props) {
	    const contextTheme = useTheme();
	    const theme = props.theme || contextTheme;
	    const _getThemeProps = getThemeProps({
	        theme,
	        name: 'MuiWithWidth',
	        props
	      }),
	      {
	        initialWidth,
	        width
	      } = _getThemeProps,
	      other = _objectWithoutPropertiesLoose(_getThemeProps, _excluded$1f);
	    const [mountedState, setMountedState] = reactExports.useState(false);
	    useEnhancedEffect$1(() => {
	      setMountedState(true);
	    }, []);

	    /**
	     * innerWidth |xs      sm      md      lg      xl
	     *            |-------|-------|-------|-------|------>
	     * width      |  xs   |  sm   |  md   |  lg   |  xl
	     */
	    const keys = theme.breakpoints.keys.slice().reverse();
	    const widthComputed = keys.reduce((output, key) => {
	      // eslint-disable-next-line react-hooks/rules-of-hooks
	      const matches = useMediaQuery(theme.breakpoints.up(key));
	      return !output && matches ? key : output;
	    }, null);
	    const more = _extends({
	      width: width || (mountedState || noSSR ? widthComputed : undefined) || initialWidth || initialWidthOption
	    }, withThemeOption ? {
	      theme
	    } : {}, other);

	    // When rendering the component on the server,
	    // we have no idea about the client browser screen width.
	    // In order to prevent blinks and help the reconciliation of the React tree
	    // we are not rendering the child component.
	    //
	    // An alternative is to use the `initialWidth` property.
	    if (more.width === undefined) {
	      return null;
	    }
	    return /*#__PURE__*/jsxRuntimeExports.jsx(Component, _extends({}, more));
	  }
	  return WithWidth;
	};
	var withWidth$1 = withWidth;

	function HiddenJs(props) {
	  const {
	    children,
	    only,
	    width
	  } = props;
	  const theme = useTheme();
	  let visible = true;

	  // `only` check is faster to get out sooner if used.
	  if (only) {
	    if (Array.isArray(only)) {
	      for (let i = 0; i < only.length; i += 1) {
	        const breakpoint = only[i];
	        if (width === breakpoint) {
	          visible = false;
	          break;
	        }
	      }
	    } else if (only && width === only) {
	      visible = false;
	    }
	  }

	  // Allow `only` to be combined with other props. If already hidden, no need to check others.
	  if (visible) {
	    // determine visibility based on the smallest size up
	    for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {
	      const breakpoint = theme.breakpoints.keys[i];
	      const breakpointUp = props[`${breakpoint}Up`];
	      const breakpointDown = props[`${breakpoint}Down`];
	      if (breakpointUp && isWidthUp(breakpoint, width) || breakpointDown && isWidthDown(breakpoint, width)) {
	        visible = false;
	        break;
	      }
	    }
	  }
	  if (!visible) {
	    return null;
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(reactExports.Fragment, {
	    children: children
	  });
	}
	var HiddenJs$1 = withWidth$1()(HiddenJs);

	function getHiddenCssUtilityClass(slot) {
	  return generateUtilityClass('PrivateHiddenCss', slot);
	}
	generateUtilityClasses('PrivateHiddenCss', ['root', 'xlDown', 'xlUp', 'onlyXl', 'lgDown', 'lgUp', 'onlyLg', 'mdDown', 'mdUp', 'onlyMd', 'smDown', 'smUp', 'onlySm', 'xsDown', 'xsUp', 'onlyXs']);

	const _excluded$1e = ["children", "className", "only"];
	const useUtilityClasses$$ = ownerState => {
	  const {
	    classes,
	    breakpoints
	  } = ownerState;
	  const slots = {
	    root: ['root', ...breakpoints.map(({
	      breakpoint,
	      dir
	    }) => {
	      return dir === 'only' ? `${dir}${capitalize(breakpoint)}` : `${breakpoint}${capitalize(dir)}`;
	    })]
	  };
	  return composeClasses(slots, getHiddenCssUtilityClass, classes);
	};
	const HiddenCssRoot = styled$1('div', {
	  name: 'PrivateHiddenCss',
	  slot: 'Root'
	})(({
	  theme,
	  ownerState
	}) => {
	  const hidden = {
	    display: 'none'
	  };
	  return _extends({}, ownerState.breakpoints.map(({
	    breakpoint,
	    dir
	  }) => {
	    if (dir === 'only') {
	      return {
	        [theme.breakpoints.only(breakpoint)]: hidden
	      };
	    }
	    return dir === 'up' ? {
	      [theme.breakpoints.up(breakpoint)]: hidden
	    } : {
	      [theme.breakpoints.down(breakpoint)]: hidden
	    };
	  }).reduce((r, o) => {
	    Object.keys(o).forEach(k => {
	      r[k] = o[k];
	    });
	    return r;
	  }, {}));
	});

	/**
	 * @ignore - internal component.
	 */
	function HiddenCss(props) {
	  const {
	      children,
	      className,
	      only
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1e);
	  const theme = useTheme();
	  const breakpoints = [];
	  for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {
	    const breakpoint = theme.breakpoints.keys[i];
	    const breakpointUp = other[`${breakpoint}Up`];
	    const breakpointDown = other[`${breakpoint}Down`];
	    if (breakpointUp) {
	      breakpoints.push({
	        breakpoint,
	        dir: 'up'
	      });
	    }
	    if (breakpointDown) {
	      breakpoints.push({
	        breakpoint,
	        dir: 'down'
	      });
	    }
	  }
	  if (only) {
	    const onlyBreakpoints = Array.isArray(only) ? only : [only];
	    onlyBreakpoints.forEach(breakpoint => {
	      breakpoints.push({
	        breakpoint,
	        dir: 'only'
	      });
	    });
	  }
	  const ownerState = _extends({}, props, {
	    breakpoints
	  });
	  const classes = useUtilityClasses$$(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(HiddenCssRoot, {
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    children: children
	  });
	}

	const _excluded$1d = ["implementation", "lgDown", "lgUp", "mdDown", "mdUp", "smDown", "smUp", "xlDown", "xlUp", "xsDown", "xsUp"];
	function Hidden(props) {
	  const {
	      implementation = 'js',
	      lgDown = false,
	      lgUp = false,
	      mdDown = false,
	      mdUp = false,
	      smDown = false,
	      smUp = false,
	      xlDown = false,
	      xlUp = false,
	      xsDown = false,
	      xsUp = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1d);
	  if (implementation === 'js') {
	    return /*#__PURE__*/jsxRuntimeExports.jsx(HiddenJs$1, _extends({
	      lgDown: lgDown,
	      lgUp: lgUp,
	      mdDown: mdDown,
	      mdUp: mdUp,
	      smDown: smDown,
	      smUp: smUp,
	      xlDown: xlDown,
	      xlUp: xlUp,
	      xsDown: xsDown,
	      xsUp: xsUp
	    }, other));
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(HiddenCss, _extends({
	    lgDown: lgDown,
	    lgUp: lgUp,
	    mdDown: mdDown,
	    mdUp: mdUp,
	    smDown: smDown,
	    smUp: smUp,
	    xlDown: xlDown,
	    xlUp: xlUp,
	    xsDown: xsDown,
	    xsUp: xsUp
	  }, other));
	}

	const _excluded$1c = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
	const useUtilityClasses$_ = ownerState => {
	  const {
	    classes,
	    disableUnderline
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableUnderline && 'underline'],
	    input: ['input']
	  };
	  const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const InputRoot = styled$1(InputBaseRoot, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiInput',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [...rootOverridesResolver(props, styles), !ownerState.disableUnderline && styles.underline];
	  }
	})(({
	  theme,
	  ownerState
	}) => {
	  const light = theme.palette.mode === 'light';
	  let bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
	  if (theme.vars) {
	    bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
	  }
	  return _extends({
	    position: 'relative'
	  }, ownerState.formControl && {
	    'label + &': {
	      marginTop: 16
	    }
	  }, !ownerState.disableUnderline && {
	    '&::after': {
	      borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '""',
	      position: 'absolute',
	      right: 0,
	      transform: 'scaleX(0)',
	      transition: theme.transitions.create('transform', {
	        duration: theme.transitions.duration.shorter,
	        easing: theme.transitions.easing.easeOut
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.
	    },
	    [`&.${inputClasses$1.focused}:after`]: {
	      // translateX(0) is a workaround for Safari transform scale bug
	      // See https://github.com/mui/material-ui/issues/31766
	      transform: 'scaleX(1) translateX(0)'
	    },
	    [`&.${inputClasses$1.error}`]: {
	      '&::before, &::after': {
	        borderBottomColor: (theme.vars || theme).palette.error.main
	      }
	    },
	    '&::before': {
	      borderBottom: `1px solid ${bottomLineColor}`,
	      left: 0,
	      bottom: 0,
	      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
	      content: '"\\00a0"',
	      position: 'absolute',
	      right: 0,
	      transition: theme.transitions.create('border-bottom-color', {
	        duration: theme.transitions.duration.shorter
	      }),
	      pointerEvents: 'none' // Transparent to the hover style.
	    },
	    [`&:hover:not(.${inputClasses$1.disabled}, .${inputClasses$1.error}):before`]: {
	      borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        borderBottom: `1px solid ${bottomLineColor}`
	      }
	    },
	    [`&.${inputClasses$1.disabled}:before`]: {
	      borderBottomStyle: 'dotted'
	    }
	  });
	});
	const InputInput = styled$1(InputBaseComponent, {
	  name: 'MuiInput',
	  slot: 'Input',
	  overridesResolver: inputOverridesResolver
	})({});
	const Input = /*#__PURE__*/reactExports.forwardRef(function Input(inProps, ref) {
	  var _ref, _slots$root, _ref2, _slots$input;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiInput'
	  });
	  const {
	      disableUnderline,
	      components = {},
	      componentsProps: componentsPropsProp,
	      fullWidth = false,
	      inputComponent = 'input',
	      multiline = false,
	      slotProps,
	      slots = {},
	      type = 'text'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1c);
	  const classes = useUtilityClasses$_(props);
	  const ownerState = {
	    disableUnderline
	  };
	  const inputComponentsProps = {
	    root: {
	      ownerState
	    }
	  };
	  const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? deepmerge(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
	  const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
	  const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
	  return /*#__PURE__*/jsxRuntimeExports.jsx(InputBase$1, _extends({
	    slots: {
	      root: RootSlot,
	      input: InputSlot
	    },
	    slotProps: componentsProps,
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other, {
	    classes: classes
	  }));
	});
	Input.muiName = 'Input';
	var Input$1 = Input;

	function getInputAdornmentUtilityClass(slot) {
	  return generateUtilityClass('MuiInputAdornment', slot);
	}
	const inputAdornmentClasses = generateUtilityClasses('MuiInputAdornment', ['root', 'filled', 'standard', 'outlined', 'positionStart', 'positionEnd', 'disablePointerEvents', 'hiddenLabel', 'sizeSmall']);
	var inputAdornmentClasses$1 = inputAdornmentClasses;

	var _span$2;
	const _excluded$1b = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];
	const overridesResolver$3 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, styles[`position${capitalize(ownerState.position)}`], ownerState.disablePointerEvents === true && styles.disablePointerEvents, styles[ownerState.variant]];
	};
	const useUtilityClasses$Z = ownerState => {
	  const {
	    classes,
	    disablePointerEvents,
	    hiddenLabel,
	    position,
	    size,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', disablePointerEvents && 'disablePointerEvents', position && `position${capitalize(position)}`, variant, hiddenLabel && 'hiddenLabel', size && `size${capitalize(size)}`]
	  };
	  return composeClasses(slots, getInputAdornmentUtilityClass, classes);
	};
	const InputAdornmentRoot = styled$1('div', {
	  name: 'MuiInputAdornment',
	  slot: 'Root',
	  overridesResolver: overridesResolver$3
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'flex',
	  height: '0.01em',
	  // Fix IE11 flexbox alignment. To remove at some point.
	  maxHeight: '2em',
	  alignItems: 'center',
	  whiteSpace: 'nowrap',
	  color: (theme.vars || theme).palette.action.active
	}, ownerState.variant === 'filled' && {
	  // Styles applied to the root element if `variant="filled"`.
	  [`&.${inputAdornmentClasses$1.positionStart}&:not(.${inputAdornmentClasses$1.hiddenLabel})`]: {
	    marginTop: 16
	  }
	}, ownerState.position === 'start' && {
	  // Styles applied to the root element if `position="start"`.
	  marginRight: 8
	}, ownerState.position === 'end' && {
	  // Styles applied to the root element if `position="end"`.
	  marginLeft: 8
	}, ownerState.disablePointerEvents === true && {
	  // Styles applied to the root element if `disablePointerEvents={true}`.
	  pointerEvents: 'none'
	}));
	const InputAdornment = /*#__PURE__*/reactExports.forwardRef(function InputAdornment(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiInputAdornment'
	  });
	  const {
	      children,
	      className,
	      component = 'div',
	      disablePointerEvents = false,
	      disableTypography = false,
	      position,
	      variant: variantProp
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1b);
	  const muiFormControl = useFormControl() || {};
	  let variant = variantProp;
	  if (variantProp && muiFormControl.variant) ;
	  if (muiFormControl && !variant) {
	    variant = muiFormControl.variant;
	  }
	  const ownerState = _extends({}, props, {
	    hiddenLabel: muiFormControl.hiddenLabel,
	    size: muiFormControl.size,
	    disablePointerEvents,
	    position,
	    variant
	  });
	  const classes = useUtilityClasses$Z(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(FormControlContext$1.Provider, {
	    value: null,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(InputAdornmentRoot, _extends({
	      as: component,
	      ownerState: ownerState,
	      className: clsx(classes.root, className),
	      ref: ref
	    }, other, {
	      children: typeof children === 'string' && !disableTypography ? /*#__PURE__*/jsxRuntimeExports.jsx(Typography$1, {
	        color: "text.secondary",
	        children: children
	      }) : /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	        children: [position === 'start' ? ( /* notranslate needed while Google Translate will not fix zero-width space issue */_span$2 || (_span$2 = /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	          className: "notranslate",
	          children: "\u200B"
	        }))) : null, children]
	      })
	    }))
	  });
	});
	var InputAdornment$1 = InputAdornment;

	function getInputLabelUtilityClasses(slot) {
	  return generateUtilityClass('MuiInputLabel', slot);
	}
	generateUtilityClasses('MuiInputLabel', ['root', 'focused', 'disabled', 'error', 'required', 'asterisk', 'formControl', 'sizeSmall', 'shrink', 'animated', 'standard', 'filled', 'outlined']);

	const _excluded$1a = ["disableAnimation", "margin", "shrink", "variant", "className"];
	const useUtilityClasses$Y = ownerState => {
	  const {
	    classes,
	    formControl,
	    size,
	    shrink,
	    disableAnimation,
	    variant,
	    required
	  } = ownerState;
	  const slots = {
	    root: ['root', formControl && 'formControl', !disableAnimation && 'animated', shrink && 'shrink', size && size !== 'normal' && `size${capitalize(size)}`, variant],
	    asterisk: [required && 'asterisk']
	  };
	  const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
	  return _extends({}, classes, composedClasses);
	};
	const InputLabelRoot = styled$1(FormLabel$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiInputLabel',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${formLabelClasses$1.asterisk}`]: styles.asterisk
	    }, styles.root, ownerState.formControl && styles.formControl, ownerState.size === 'small' && styles.sizeSmall, ownerState.shrink && styles.shrink, !ownerState.disableAnimation && styles.animated, ownerState.focused && styles.focused, styles[ownerState.variant]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'block',
	  transformOrigin: 'top left',
	  whiteSpace: 'nowrap',
	  overflow: 'hidden',
	  textOverflow: 'ellipsis',
	  maxWidth: '100%'
	}, ownerState.formControl && {
	  position: 'absolute',
	  left: 0,
	  top: 0,
	  // slight alteration to spec spacing to match visual spec result
	  transform: 'translate(0, 20px) scale(1)'
	}, ownerState.size === 'small' && {
	  // Compensation for the `Input.inputSizeSmall` style.
	  transform: 'translate(0, 17px) scale(1)'
	}, ownerState.shrink && {
	  transform: 'translate(0, -1.5px) scale(0.75)',
	  transformOrigin: 'top left',
	  maxWidth: '133%'
	}, !ownerState.disableAnimation && {
	  transition: theme.transitions.create(['color', 'transform', 'max-width'], {
	    duration: theme.transitions.duration.shorter,
	    easing: theme.transitions.easing.easeOut
	  })
	}, ownerState.variant === 'filled' && _extends({
	  // Chrome's autofill feature gives the input field a yellow background.
	  // Since the input field is behind the label in the HTML tree,
	  // the input field is drawn last and hides the label with an opaque background color.
	  // zIndex: 1 will raise the label above opaque background-colors of input.
	  zIndex: 1,
	  pointerEvents: 'none',
	  transform: 'translate(12px, 16px) scale(1)',
	  maxWidth: 'calc(100% - 24px)'
	}, ownerState.size === 'small' && {
	  transform: 'translate(12px, 13px) scale(1)'
	}, ownerState.shrink && _extends({
	  userSelect: 'none',
	  pointerEvents: 'auto',
	  transform: 'translate(12px, 7px) scale(0.75)',
	  maxWidth: 'calc(133% - 24px)'
	}, ownerState.size === 'small' && {
	  transform: 'translate(12px, 4px) scale(0.75)'
	})), ownerState.variant === 'outlined' && _extends({
	  // see comment above on filled.zIndex
	  zIndex: 1,
	  pointerEvents: 'none',
	  transform: 'translate(14px, 16px) scale(1)',
	  maxWidth: 'calc(100% - 24px)'
	}, ownerState.size === 'small' && {
	  transform: 'translate(14px, 9px) scale(1)'
	}, ownerState.shrink && {
	  userSelect: 'none',
	  pointerEvents: 'auto',
	  // Theoretically, we should have (8+5)*2/0.75 = 34px
	  // but it feels a better when it bleeds a bit on the left, so 32px.
	  maxWidth: 'calc(133% - 32px)',
	  transform: 'translate(14px, -9px) scale(0.75)'
	})));
	const InputLabel = /*#__PURE__*/reactExports.forwardRef(function InputLabel(inProps, ref) {
	  const props = useThemeProps({
	    name: 'MuiInputLabel',
	    props: inProps
	  });
	  const {
	      disableAnimation = false,
	      shrink: shrinkProp,
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1a);
	  const muiFormControl = useFormControl();
	  let shrink = shrinkProp;
	  if (typeof shrink === 'undefined' && muiFormControl) {
	    shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
	  }
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['size', 'variant', 'required', 'focused']
	  });
	  const ownerState = _extends({}, props, {
	    disableAnimation,
	    formControl: muiFormControl,
	    shrink,
	    size: fcs.size,
	    variant: fcs.variant,
	    required: fcs.required,
	    focused: fcs.focused
	  });
	  const classes = useUtilityClasses$Y(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(InputLabelRoot, _extends({
	    "data-shrink": shrink,
	    ownerState: ownerState,
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other, {
	    classes: classes
	  }));
	});
	var InputLabel$1 = InputLabel;

	/**
	 * @ignore - internal component.
	 */
	const ListContext = /*#__PURE__*/reactExports.createContext({});
	var ListContext$1 = ListContext;

	function getListUtilityClass(slot) {
	  return generateUtilityClass('MuiList', slot);
	}
	generateUtilityClasses('MuiList', ['root', 'padding', 'dense', 'subheader']);

	const _excluded$19 = ["children", "className", "component", "dense", "disablePadding", "subheader"];
	const useUtilityClasses$X = ownerState => {
	  const {
	    classes,
	    disablePadding,
	    dense,
	    subheader
	  } = ownerState;
	  const slots = {
	    root: ['root', !disablePadding && 'padding', dense && 'dense', subheader && 'subheader']
	  };
	  return composeClasses(slots, getListUtilityClass, classes);
	};
	const ListRoot = styled$1('ul', {
	  name: 'MuiList',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disablePadding && styles.padding, ownerState.dense && styles.dense, ownerState.subheader && styles.subheader];
	  }
	})(({
	  ownerState
	}) => _extends({
	  listStyle: 'none',
	  margin: 0,
	  padding: 0,
	  position: 'relative'
	}, !ownerState.disablePadding && {
	  paddingTop: 8,
	  paddingBottom: 8
	}, ownerState.subheader && {
	  paddingTop: 0
	}));
	const List = /*#__PURE__*/reactExports.forwardRef(function List(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiList'
	  });
	  const {
	      children,
	      className,
	      component = 'ul',
	      dense = false,
	      disablePadding = false,
	      subheader
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$19);
	  const context = reactExports.useMemo(() => ({
	    dense
	  }), [dense]);
	  const ownerState = _extends({}, props, {
	    component,
	    dense,
	    disablePadding
	  });
	  const classes = useUtilityClasses$X(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ListContext$1.Provider, {
	    value: context,
	    children: /*#__PURE__*/jsxRuntimeExports.jsxs(ListRoot, _extends({
	      as: component,
	      className: clsx(classes.root, className),
	      ref: ref,
	      ownerState: ownerState
	    }, other, {
	      children: [subheader, children]
	    }))
	  });
	});
	var List$1 = List;

	function getListItemUtilityClass(slot) {
	  return generateUtilityClass('MuiListItem', slot);
	}
	const listItemClasses = generateUtilityClasses('MuiListItem', ['root', 'container', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'padding', 'button', 'secondaryAction', 'selected']);
	var listItemClasses$1 = listItemClasses;

	const listItemButtonClasses = generateUtilityClasses('MuiListItemButton', ['root', 'focusVisible', 'dense', 'alignItemsFlexStart', 'disabled', 'divider', 'gutters', 'selected']);
	var listItemButtonClasses$1 = listItemButtonClasses;

	function getListItemSecondaryActionClassesUtilityClass(slot) {
	  return generateUtilityClass('MuiListItemSecondaryAction', slot);
	}
	generateUtilityClasses('MuiListItemSecondaryAction', ['root', 'disableGutters']);

	const _excluded$18 = ["className"];
	const useUtilityClasses$W = ownerState => {
	  const {
	    disableGutters,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', disableGutters && 'disableGutters']
	  };
	  return composeClasses(slots, getListItemSecondaryActionClassesUtilityClass, classes);
	};
	const ListItemSecondaryActionRoot = styled$1('div', {
	  name: 'MuiListItemSecondaryAction',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.disableGutters && styles.disableGutters];
	  }
	})(({
	  ownerState
	}) => _extends({
	  position: 'absolute',
	  right: 16,
	  top: '50%',
	  transform: 'translateY(-50%)'
	}, ownerState.disableGutters && {
	  right: 0
	}));

	/**
	 * Must be used as the last child of ListItem to function properly.
	 */
	const ListItemSecondaryAction = /*#__PURE__*/reactExports.forwardRef(function ListItemSecondaryAction(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItemSecondaryAction'
	  });
	  const {
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$18);
	  const context = reactExports.useContext(ListContext$1);
	  const ownerState = _extends({}, props, {
	    disableGutters: context.disableGutters
	  });
	  const classes = useUtilityClasses$W(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ListItemSecondaryActionRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	ListItemSecondaryAction.muiName = 'ListItemSecondaryAction';
	var ListItemSecondaryAction$1 = ListItemSecondaryAction;

	const _excluded$17 = ["className"],
	  _excluded2$b = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected", "slotProps", "slots"];
	const overridesResolver$2 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.dense && styles.dense, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters, !ownerState.disablePadding && styles.padding, ownerState.button && styles.button, ownerState.hasSecondaryAction && styles.secondaryAction];
	};
	const useUtilityClasses$V = ownerState => {
	  const {
	    alignItems,
	    button,
	    classes,
	    dense,
	    disabled,
	    disableGutters,
	    disablePadding,
	    divider,
	    hasSecondaryAction,
	    selected
	  } = ownerState;
	  const slots = {
	    root: ['root', dense && 'dense', !disableGutters && 'gutters', !disablePadding && 'padding', divider && 'divider', disabled && 'disabled', button && 'button', alignItems === 'flex-start' && 'alignItemsFlexStart', hasSecondaryAction && 'secondaryAction', selected && 'selected'],
	    container: ['container']
	  };
	  return composeClasses(slots, getListItemUtilityClass, classes);
	};
	const ListItemRoot = styled$1('div', {
	  name: 'MuiListItem',
	  slot: 'Root',
	  overridesResolver: overridesResolver$2
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'flex',
	  justifyContent: 'flex-start',
	  alignItems: 'center',
	  position: 'relative',
	  textDecoration: 'none',
	  width: '100%',
	  boxSizing: 'border-box',
	  textAlign: 'left'
	}, !ownerState.disablePadding && _extends({
	  paddingTop: 8,
	  paddingBottom: 8
	}, ownerState.dense && {
	  paddingTop: 4,
	  paddingBottom: 4
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, !!ownerState.secondaryAction && {
	  // Add some space to avoid collision as `ListItemSecondaryAction`
	  // is absolutely positioned.
	  paddingRight: 48
	}), !!ownerState.secondaryAction && {
	  [`& > .${listItemButtonClasses$1.root}`]: {
	    paddingRight: 48
	  }
	}, {
	  [`&.${listItemClasses$1.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`&.${listItemClasses$1.selected}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	    [`&.${listItemClasses$1.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  },
	  [`&.${listItemClasses$1.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  }
	}, ownerState.alignItems === 'flex-start' && {
	  alignItems: 'flex-start'
	}, ownerState.divider && {
	  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
	  backgroundClip: 'padding-box'
	}, ownerState.button && {
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.shortest
	  }),
	  '&:hover': {
	    textDecoration: 'none',
	    backgroundColor: (theme.vars || theme).palette.action.hover,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  },
	  [`&.${listItemClasses$1.selected}:hover`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
	    }
	  }
	}, ownerState.hasSecondaryAction && {
	  // Add some space to avoid collision as `ListItemSecondaryAction`
	  // is absolutely positioned.
	  paddingRight: 48
	}));
	const ListItemContainer = styled$1('li', {
	  name: 'MuiListItem',
	  slot: 'Container',
	  overridesResolver: (props, styles) => styles.container
	})({
	  position: 'relative'
	});

	/**
	 * Uses an additional container component if `ListItemSecondaryAction` is the last child.
	 */
	const ListItem = /*#__PURE__*/reactExports.forwardRef(function ListItem(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItem'
	  });
	  const {
	      alignItems = 'center',
	      autoFocus = false,
	      button = false,
	      children: childrenProp,
	      className,
	      component: componentProp,
	      components = {},
	      componentsProps = {},
	      ContainerComponent = 'li',
	      ContainerProps: {
	        className: ContainerClassName
	      } = {},
	      dense = false,
	      disabled = false,
	      disableGutters = false,
	      disablePadding = false,
	      divider = false,
	      focusVisibleClassName,
	      secondaryAction,
	      selected = false,
	      slotProps = {},
	      slots = {}
	    } = props,
	    ContainerProps = _objectWithoutPropertiesLoose(props.ContainerProps, _excluded$17),
	    other = _objectWithoutPropertiesLoose(props, _excluded2$b);
	  const context = reactExports.useContext(ListContext$1);
	  const childContext = reactExports.useMemo(() => ({
	    dense: dense || context.dense || false,
	    alignItems,
	    disableGutters
	  }), [alignItems, context.dense, dense, disableGutters]);
	  const listItemRef = reactExports.useRef(null);
	  useEnhancedEffect$1(() => {
	    if (autoFocus) {
	      if (listItemRef.current) {
	        listItemRef.current.focus();
	      }
	    }
	  }, [autoFocus]);
	  const children = reactExports.Children.toArray(childrenProp);

	  // v4 implementation, deprecated in v5, will be removed in v6
	  const hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);
	  const ownerState = _extends({}, props, {
	    alignItems,
	    autoFocus,
	    button,
	    dense: childContext.dense,
	    disabled,
	    disableGutters,
	    disablePadding,
	    divider,
	    hasSecondaryAction,
	    selected
	  });
	  const classes = useUtilityClasses$V(ownerState);
	  const handleRef = useForkRef(listItemRef, ref);
	  const Root = slots.root || components.Root || ListItemRoot;
	  const rootProps = slotProps.root || componentsProps.root || {};
	  const componentProps = _extends({
	    className: clsx(classes.root, rootProps.className, className),
	    disabled
	  }, other);
	  let Component = componentProp || 'li';
	  if (button) {
	    componentProps.component = componentProp || 'div';
	    componentProps.focusVisibleClassName = clsx(listItemClasses$1.focusVisible, focusVisibleClassName);
	    Component = ButtonBase$1;
	  }

	  // v4 implementation, deprecated in v5, will be removed in v6
	  if (hasSecondaryAction) {
	    // Use div by default.
	    Component = !componentProps.component && !componentProp ? 'div' : Component;

	    // Avoid nesting of li > li.
	    if (ContainerComponent === 'li') {
	      if (Component === 'li') {
	        Component = 'div';
	      } else if (componentProps.component === 'li') {
	        componentProps.component = 'div';
	      }
	    }
	    return /*#__PURE__*/jsxRuntimeExports.jsx(ListContext$1.Provider, {
	      value: childContext,
	      children: /*#__PURE__*/jsxRuntimeExports.jsxs(ListItemContainer, _extends({
	        as: ContainerComponent,
	        className: clsx(classes.container, ContainerClassName),
	        ref: handleRef,
	        ownerState: ownerState
	      }, ContainerProps, {
	        children: [/*#__PURE__*/jsxRuntimeExports.jsx(Root, _extends({}, rootProps, !isHostComponent(Root) && {
	          as: Component,
	          ownerState: _extends({}, ownerState, rootProps.ownerState)
	        }, componentProps, {
	          children: children
	        })), children.pop()]
	      }))
	    });
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ListContext$1.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/jsxRuntimeExports.jsxs(Root, _extends({}, rootProps, {
	      as: Component,
	      ref: handleRef
	    }, !isHostComponent(Root) && {
	      ownerState: _extends({}, ownerState, rootProps.ownerState)
	    }, componentProps, {
	      children: [children, secondaryAction && /*#__PURE__*/jsxRuntimeExports.jsx(ListItemSecondaryAction$1, {
	        children: secondaryAction
	      })]
	    }))
	  });
	});
	var ListItem$1 = ListItem;

	function getListItemAvatarUtilityClass(slot) {
	  return generateUtilityClass('MuiListItemAvatar', slot);
	}
	generateUtilityClasses('MuiListItemAvatar', ['root', 'alignItemsFlexStart']);

	const _excluded$16 = ["className"];
	const useUtilityClasses$U = ownerState => {
	  const {
	    alignItems,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', alignItems === 'flex-start' && 'alignItemsFlexStart']
	  };
	  return composeClasses(slots, getListItemAvatarUtilityClass, classes);
	};
	const ListItemAvatarRoot = styled$1('div', {
	  name: 'MuiListItemAvatar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.alignItems === 'flex-start' && styles.alignItemsFlexStart];
	  }
	})(({
	  ownerState
	}) => _extends({
	  minWidth: 56,
	  flexShrink: 0
	}, ownerState.alignItems === 'flex-start' && {
	  marginTop: 8
	}));

	/**
	 * A simple wrapper to apply `List` styles to an `Avatar`.
	 */
	const ListItemAvatar = /*#__PURE__*/reactExports.forwardRef(function ListItemAvatar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItemAvatar'
	  });
	  const {
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$16);
	  const context = reactExports.useContext(ListContext$1);
	  const ownerState = _extends({}, props, {
	    alignItems: context.alignItems
	  });
	  const classes = useUtilityClasses$U(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ListItemAvatarRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other));
	});
	var ListItemAvatar$1 = ListItemAvatar;

	const listItemIconClasses = generateUtilityClasses('MuiListItemIcon', ['root', 'alignItemsFlexStart']);
	var listItemIconClasses$1 = listItemIconClasses;

	function getListItemTextUtilityClass(slot) {
	  return generateUtilityClass('MuiListItemText', slot);
	}
	const listItemTextClasses = generateUtilityClasses('MuiListItemText', ['root', 'multiline', 'dense', 'inset', 'primary', 'secondary']);
	var listItemTextClasses$1 = listItemTextClasses;

	const _excluded$15 = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];
	const useUtilityClasses$T = ownerState => {
	  const {
	    classes,
	    inset,
	    primary,
	    secondary,
	    dense
	  } = ownerState;
	  const slots = {
	    root: ['root', inset && 'inset', dense && 'dense', primary && secondary && 'multiline'],
	    primary: ['primary'],
	    secondary: ['secondary']
	  };
	  return composeClasses(slots, getListItemTextUtilityClass, classes);
	};
	const ListItemTextRoot = styled$1('div', {
	  name: 'MuiListItemText',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${listItemTextClasses$1.primary}`]: styles.primary
	    }, {
	      [`& .${listItemTextClasses$1.secondary}`]: styles.secondary
	    }, styles.root, ownerState.inset && styles.inset, ownerState.primary && ownerState.secondary && styles.multiline, ownerState.dense && styles.dense];
	  }
	})(({
	  ownerState
	}) => _extends({
	  flex: '1 1 auto',
	  minWidth: 0,
	  marginTop: 4,
	  marginBottom: 4
	}, ownerState.primary && ownerState.secondary && {
	  marginTop: 6,
	  marginBottom: 6
	}, ownerState.inset && {
	  paddingLeft: 56
	}));
	const ListItemText = /*#__PURE__*/reactExports.forwardRef(function ListItemText(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiListItemText'
	  });
	  const {
	      children,
	      className,
	      disableTypography = false,
	      inset = false,
	      primary: primaryProp,
	      primaryTypographyProps,
	      secondary: secondaryProp,
	      secondaryTypographyProps
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$15);
	  const {
	    dense
	  } = reactExports.useContext(ListContext$1);
	  let primary = primaryProp != null ? primaryProp : children;
	  let secondary = secondaryProp;
	  const ownerState = _extends({}, props, {
	    disableTypography,
	    inset,
	    primary: !!primary,
	    secondary: !!secondary,
	    dense
	  });
	  const classes = useUtilityClasses$T(ownerState);
	  if (primary != null && primary.type !== Typography$1 && !disableTypography) {
	    primary = /*#__PURE__*/jsxRuntimeExports.jsx(Typography$1, _extends({
	      variant: dense ? 'body2' : 'body1',
	      className: classes.primary,
	      component: primaryTypographyProps != null && primaryTypographyProps.variant ? undefined : 'span',
	      display: "block"
	    }, primaryTypographyProps, {
	      children: primary
	    }));
	  }
	  if (secondary != null && secondary.type !== Typography$1 && !disableTypography) {
	    secondary = /*#__PURE__*/jsxRuntimeExports.jsx(Typography$1, _extends({
	      variant: "body2",
	      className: classes.secondary,
	      color: "text.secondary",
	      display: "block"
	    }, secondaryTypographyProps, {
	      children: secondary
	    }));
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(ListItemTextRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref
	  }, other, {
	    children: [primary, secondary]
	  }));
	});
	var ListItemText$1 = ListItemText;

	const _excluded$14 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
	function nextItem$1(list, item, disableListWrap) {
	  if (list === item) {
	    return list.firstChild;
	  }
	  if (item && item.nextElementSibling) {
	    return item.nextElementSibling;
	  }
	  return disableListWrap ? null : list.firstChild;
	}
	function previousItem$1(list, item, disableListWrap) {
	  if (list === item) {
	    return disableListWrap ? list.firstChild : list.lastChild;
	  }
	  if (item && item.previousElementSibling) {
	    return item.previousElementSibling;
	  }
	  return disableListWrap ? null : list.lastChild;
	}
	function textCriteriaMatches(nextFocus, textCriteria) {
	  if (textCriteria === undefined) {
	    return true;
	  }
	  let text = nextFocus.innerText;
	  if (text === undefined) {
	    // jsdom doesn't support innerText
	    text = nextFocus.textContent;
	  }
	  text = text.trim().toLowerCase();
	  if (text.length === 0) {
	    return false;
	  }
	  if (textCriteria.repeating) {
	    return text[0] === textCriteria.keys[0];
	  }
	  return text.indexOf(textCriteria.keys.join('')) === 0;
	}
	function moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
	  let wrappedOnce = false;
	  let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
	  while (nextFocus) {
	    // Prevent infinite loop.
	    if (nextFocus === list.firstChild) {
	      if (wrappedOnce) {
	        return false;
	      }
	      wrappedOnce = true;
	    }

	    // Same logic as useAutocomplete.js
	    const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';
	    if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
	      // Move to the next element.
	      nextFocus = traversalFunction(list, nextFocus, disableListWrap);
	    } else {
	      nextFocus.focus();
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * A permanently displayed menu following https://www.w3.org/WAI/ARIA/apg/patterns/menu-button/.
	 * It's exposed to help customization of the [`Menu`](/material-ui/api/menu/) component if you
	 * use it separately you need to move focus into the component manually. Once
	 * the focus is placed inside the component it is fully keyboard accessible.
	 */
	const MenuList = /*#__PURE__*/reactExports.forwardRef(function MenuList(props, ref) {
	  const {
	      // private
	      // eslint-disable-next-line react/prop-types
	      actions,
	      autoFocus = false,
	      autoFocusItem = false,
	      children,
	      className,
	      disabledItemsFocusable = false,
	      disableListWrap = false,
	      onKeyDown,
	      variant = 'selectedMenu'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$14);
	  const listRef = reactExports.useRef(null);
	  const textCriteriaRef = reactExports.useRef({
	    keys: [],
	    repeating: true,
	    previousKeyMatched: true,
	    lastTime: null
	  });
	  useEnhancedEffect$1(() => {
	    if (autoFocus) {
	      listRef.current.focus();
	    }
	  }, [autoFocus]);
	  reactExports.useImperativeHandle(actions, () => ({
	    adjustStyleForScrollbar: (containerElement, theme) => {
	      // Let's ignore that piece of logic if users are already overriding the width
	      // of the menu.
	      const noExplicitWidth = !listRef.current.style.width;
	      if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
	        const scrollbarSize = `${getScrollbarSize(ownerDocument(containerElement))}px`;
	        listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
	        listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
	      }
	      return listRef.current;
	    }
	  }), []);
	  const handleKeyDown = event => {
	    const list = listRef.current;
	    const key = event.key;
	    /**
	     * @type {Element} - will always be defined since we are in a keydown handler
	     * attached to an element. A keydown event is either dispatched to the activeElement
	     * or document.body or document.documentElement. Only the first case will
	     * trigger this specific handler.
	     */
	    const currentFocus = ownerDocument(list).activeElement;
	    if (key === 'ArrowDown') {
	      // Prevent scroll of the page
	      event.preventDefault();
	      moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem$1);
	    } else if (key === 'ArrowUp') {
	      event.preventDefault();
	      moveFocus$1(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem$1);
	    } else if (key === 'Home') {
	      event.preventDefault();
	      moveFocus$1(list, null, disableListWrap, disabledItemsFocusable, nextItem$1);
	    } else if (key === 'End') {
	      event.preventDefault();
	      moveFocus$1(list, null, disableListWrap, disabledItemsFocusable, previousItem$1);
	    } else if (key.length === 1) {
	      const criteria = textCriteriaRef.current;
	      const lowerKey = key.toLowerCase();
	      const currTime = performance.now();
	      if (criteria.keys.length > 0) {
	        // Reset
	        if (currTime - criteria.lastTime > 500) {
	          criteria.keys = [];
	          criteria.repeating = true;
	          criteria.previousKeyMatched = true;
	        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
	          criteria.repeating = false;
	        }
	      }
	      criteria.lastTime = currTime;
	      criteria.keys.push(lowerKey);
	      const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
	      if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus$1(list, currentFocus, false, disabledItemsFocusable, nextItem$1, criteria))) {
	        event.preventDefault();
	      } else {
	        criteria.previousKeyMatched = false;
	      }
	    }
	    if (onKeyDown) {
	      onKeyDown(event);
	    }
	  };
	  const handleRef = useForkRef(listRef, ref);

	  /**
	   * the index of the item should receive focus
	   * in a `variant="selectedMenu"` it's the first `selected` item
	   * otherwise it's the very first item.
	   */
	  let activeItemIndex = -1;
	  // since we inject focus related props into children we have to do a lookahead
	  // to check if there is a `selected` item. We're looking for the last `selected`
	  // item and use the first valid item as a fallback
	  reactExports.Children.forEach(children, (child, index) => {
	    if (! /*#__PURE__*/reactExports.isValidElement(child)) {
	      if (activeItemIndex === index) {
	        activeItemIndex += 1;
	        if (activeItemIndex >= children.length) {
	          // there are no focusable items within the list.
	          activeItemIndex = -1;
	        }
	      }
	      return;
	    }
	    if (!child.props.disabled) {
	      if (variant === 'selectedMenu' && child.props.selected) {
	        activeItemIndex = index;
	      } else if (activeItemIndex === -1) {
	        activeItemIndex = index;
	      }
	    }
	    if (activeItemIndex === index && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
	      activeItemIndex += 1;
	      if (activeItemIndex >= children.length) {
	        // there are no focusable items within the list.
	        activeItemIndex = -1;
	      }
	    }
	  });
	  const items = reactExports.Children.map(children, (child, index) => {
	    if (index === activeItemIndex) {
	      const newChildProps = {};
	      if (autoFocusItem) {
	        newChildProps.autoFocus = true;
	      }
	      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {
	        newChildProps.tabIndex = 0;
	      }
	      return /*#__PURE__*/reactExports.cloneElement(child, newChildProps);
	    }
	    return child;
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(List$1, _extends({
	    role: "menu",
	    ref: handleRef,
	    className: className,
	    onKeyDown: handleKeyDown,
	    tabIndex: autoFocus ? 0 : -1
	  }, other, {
	    children: items
	  }));
	});
	var MenuList$1 = MenuList;

	function getPopoverUtilityClass(slot) {
	  return generateUtilityClass('MuiPopover', slot);
	}
	generateUtilityClasses('MuiPopover', ['root', 'paper']);

	const _excluded$13 = ["onEntering"],
	  _excluded2$a = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "slots", "slotProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps", "disableScrollLock"],
	  _excluded3$5 = ["slotProps"];
	function getOffsetTop(rect, vertical) {
	  let offset = 0;
	  if (typeof vertical === 'number') {
	    offset = vertical;
	  } else if (vertical === 'center') {
	    offset = rect.height / 2;
	  } else if (vertical === 'bottom') {
	    offset = rect.height;
	  }
	  return offset;
	}
	function getOffsetLeft(rect, horizontal) {
	  let offset = 0;
	  if (typeof horizontal === 'number') {
	    offset = horizontal;
	  } else if (horizontal === 'center') {
	    offset = rect.width / 2;
	  } else if (horizontal === 'right') {
	    offset = rect.width;
	  }
	  return offset;
	}
	function getTransformOriginValue(transformOrigin) {
	  return [transformOrigin.horizontal, transformOrigin.vertical].map(n => typeof n === 'number' ? `${n}px` : n).join(' ');
	}
	function resolveAnchorEl(anchorEl) {
	  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
	}
	const useUtilityClasses$S = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    paper: ['paper']
	  };
	  return composeClasses(slots, getPopoverUtilityClass, classes);
	};
	const PopoverRoot = styled$1(Modal$1, {
	  name: 'MuiPopover',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const PopoverPaper = styled$1(MuiPaper, {
	  name: 'MuiPopover',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})({
	  position: 'absolute',
	  overflowY: 'auto',
	  overflowX: 'hidden',
	  // So we see the popover when it's empty.
	  // It's most likely on issue on userland.
	  minWidth: 16,
	  minHeight: 16,
	  maxWidth: 'calc(100% - 32px)',
	  maxHeight: 'calc(100% - 32px)',
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	});
	const Popover = /*#__PURE__*/reactExports.forwardRef(function Popover(inProps, ref) {
	  var _slotProps$paper, _slots$root, _slots$paper;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPopover'
	  });
	  const {
	      action,
	      anchorEl,
	      anchorOrigin = {
	        vertical: 'top',
	        horizontal: 'left'
	      },
	      anchorPosition,
	      anchorReference = 'anchorEl',
	      children,
	      className,
	      container: containerProp,
	      elevation = 8,
	      marginThreshold = 16,
	      open,
	      PaperProps: PaperPropsProp = {},
	      slots,
	      slotProps,
	      transformOrigin = {
	        vertical: 'top',
	        horizontal: 'left'
	      },
	      TransitionComponent = Grow$1,
	      transitionDuration: transitionDurationProp = 'auto',
	      TransitionProps: {
	        onEntering
	      } = {},
	      disableScrollLock = false
	    } = props,
	    TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$13),
	    other = _objectWithoutPropertiesLoose(props, _excluded2$a);
	  const externalPaperSlotProps = (_slotProps$paper = slotProps == null ? void 0 : slotProps.paper) != null ? _slotProps$paper : PaperPropsProp;
	  const paperRef = reactExports.useRef();
	  const handlePaperRef = useForkRef(paperRef, externalPaperSlotProps.ref);
	  const ownerState = _extends({}, props, {
	    anchorOrigin,
	    anchorReference,
	    elevation,
	    marginThreshold,
	    externalPaperSlotProps,
	    transformOrigin,
	    TransitionComponent,
	    transitionDuration: transitionDurationProp,
	    TransitionProps
	  });
	  const classes = useUtilityClasses$S(ownerState);

	  // Returns the top/left offset of the position
	  // to attach to on the anchor element (or body if none is provided)
	  const getAnchorOffset = reactExports.useCallback(() => {
	    if (anchorReference === 'anchorPosition') {
	      return anchorPosition;
	    }
	    const resolvedAnchorEl = resolveAnchorEl(anchorEl);

	    // If an anchor element wasn't provided, just use the parent body element of this Popover
	    const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
	    const anchorRect = anchorElement.getBoundingClientRect();
	    return {
	      top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
	      left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
	    };
	  }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);

	  // Returns the base transform origin using the element
	  const getTransformOrigin = reactExports.useCallback(elemRect => {
	    return {
	      vertical: getOffsetTop(elemRect, transformOrigin.vertical),
	      horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
	    };
	  }, [transformOrigin.horizontal, transformOrigin.vertical]);
	  const getPositioningStyle = reactExports.useCallback(element => {
	    const elemRect = {
	      width: element.offsetWidth,
	      height: element.offsetHeight
	    };

	    // Get the transform origin point on the element itself
	    const elemTransformOrigin = getTransformOrigin(elemRect);
	    if (anchorReference === 'none') {
	      return {
	        top: null,
	        left: null,
	        transformOrigin: getTransformOriginValue(elemTransformOrigin)
	      };
	    }

	    // Get the offset of the anchoring element
	    const anchorOffset = getAnchorOffset();

	    // Calculate element positioning
	    let top = anchorOffset.top - elemTransformOrigin.vertical;
	    let left = anchorOffset.left - elemTransformOrigin.horizontal;
	    const bottom = top + elemRect.height;
	    const right = left + elemRect.width;

	    // Use the parent window of the anchorEl if provided
	    const containerWindow = ownerWindow(resolveAnchorEl(anchorEl));

	    // Window thresholds taking required margin into account
	    const heightThreshold = containerWindow.innerHeight - marginThreshold;
	    const widthThreshold = containerWindow.innerWidth - marginThreshold;

	    // Check if the vertical axis needs shifting
	    if (marginThreshold !== null && top < marginThreshold) {
	      const diff = top - marginThreshold;
	      top -= diff;
	      elemTransformOrigin.vertical += diff;
	    } else if (marginThreshold !== null && bottom > heightThreshold) {
	      const diff = bottom - heightThreshold;
	      top -= diff;
	      elemTransformOrigin.vertical += diff;
	    }

	    // Check if the horizontal axis needs shifting
	    if (marginThreshold !== null && left < marginThreshold) {
	      const diff = left - marginThreshold;
	      left -= diff;
	      elemTransformOrigin.horizontal += diff;
	    } else if (right > widthThreshold) {
	      const diff = right - widthThreshold;
	      left -= diff;
	      elemTransformOrigin.horizontal += diff;
	    }
	    return {
	      top: `${Math.round(top)}px`,
	      left: `${Math.round(left)}px`,
	      transformOrigin: getTransformOriginValue(elemTransformOrigin)
	    };
	  }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
	  const [isPositioned, setIsPositioned] = reactExports.useState(open);
	  const setPositioningStyles = reactExports.useCallback(() => {
	    const element = paperRef.current;
	    if (!element) {
	      return;
	    }
	    const positioning = getPositioningStyle(element);
	    if (positioning.top !== null) {
	      element.style.top = positioning.top;
	    }
	    if (positioning.left !== null) {
	      element.style.left = positioning.left;
	    }
	    element.style.transformOrigin = positioning.transformOrigin;
	    setIsPositioned(true);
	  }, [getPositioningStyle]);
	  reactExports.useEffect(() => {
	    if (disableScrollLock) {
	      window.addEventListener('scroll', setPositioningStyles);
	    }
	    return () => window.removeEventListener('scroll', setPositioningStyles);
	  }, [anchorEl, disableScrollLock, setPositioningStyles]);
	  const handleEntering = (element, isAppearing) => {
	    if (onEntering) {
	      onEntering(element, isAppearing);
	    }
	    setPositioningStyles();
	  };
	  const handleExited = () => {
	    setIsPositioned(false);
	  };
	  reactExports.useEffect(() => {
	    if (open) {
	      setPositioningStyles();
	    }
	  });
	  reactExports.useImperativeHandle(action, () => open ? {
	    updatePosition: () => {
	      setPositioningStyles();
	    }
	  } : null, [open, setPositioningStyles]);
	  reactExports.useEffect(() => {
	    if (!open) {
	      return undefined;
	    }
	    const handleResize = debounce$1(() => {
	      setPositioningStyles();
	    });
	    const containerWindow = ownerWindow(anchorEl);
	    containerWindow.addEventListener('resize', handleResize);
	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);
	    };
	  }, [anchorEl, open, setPositioningStyles]);
	  let transitionDuration = transitionDurationProp;
	  if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
	    transitionDuration = undefined;
	  }

	  // If the container prop is provided, use that
	  // If the anchorEl prop is provided, use its parent body element as the container
	  // If neither are provided let the Modal take care of choosing the container
	  const container = containerProp || (anchorEl ? ownerDocument(resolveAnchorEl(anchorEl)).body : undefined);
	  const RootSlot = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : PopoverRoot;
	  const PaperSlot = (_slots$paper = slots == null ? void 0 : slots.paper) != null ? _slots$paper : PopoverPaper;
	  const paperProps = useSlotProps({
	    elementType: PaperSlot,
	    externalSlotProps: _extends({}, externalPaperSlotProps, {
	      style: isPositioned ? externalPaperSlotProps.style : _extends({}, externalPaperSlotProps.style, {
	        opacity: 0
	      })
	    }),
	    additionalProps: {
	      elevation,
	      ref: handlePaperRef
	    },
	    ownerState,
	    className: clsx(classes.paper, externalPaperSlotProps == null ? void 0 : externalPaperSlotProps.className)
	  });
	  const _useSlotProps = useSlotProps({
	      elementType: RootSlot,
	      externalSlotProps: (slotProps == null ? void 0 : slotProps.root) || {},
	      externalForwardedProps: other,
	      additionalProps: {
	        ref,
	        slotProps: {
	          backdrop: {
	            invisible: true
	          }
	        },
	        container,
	        open
	      },
	      ownerState,
	      className: clsx(classes.root, className)
	    }),
	    {
	      slotProps: rootSlotPropsProp
	    } = _useSlotProps,
	    rootProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded3$5);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(RootSlot, _extends({}, rootProps, !isHostComponent(RootSlot) && {
	    slotProps: rootSlotPropsProp,
	    disableScrollLock
	  }, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends({
	      appear: true,
	      in: open,
	      onEntering: handleEntering,
	      onExited: handleExited,
	      timeout: transitionDuration
	    }, TransitionProps, {
	      children: /*#__PURE__*/jsxRuntimeExports.jsx(PaperSlot, _extends({}, paperProps, {
	        children: children
	      }))
	    }))
	  }));
	});
	var Popover$1 = Popover;

	function getMenuUtilityClass(slot) {
	  return generateUtilityClass('MuiMenu', slot);
	}
	generateUtilityClasses('MuiMenu', ['root', 'paper', 'list']);

	const _excluded$12 = ["onEntering"],
	  _excluded2$9 = ["autoFocus", "children", "className", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant", "slots", "slotProps"];
	const RTL_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'right'
	};
	const LTR_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'left'
	};
	const useUtilityClasses$R = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    paper: ['paper'],
	    list: ['list']
	  };
	  return composeClasses(slots, getMenuUtilityClass, classes);
	};
	const MenuRoot = styled$1(Popover$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiMenu',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const MenuPaper = styled$1(PopoverPaper, {
	  name: 'MuiMenu',
	  slot: 'Paper',
	  overridesResolver: (props, styles) => styles.paper
	})({
	  // specZ: The maximum height of a simple menu should be one or more rows less than the view
	  // height. This ensures a tappable area outside of the simple menu with which to dismiss
	  // the menu.
	  maxHeight: 'calc(100% - 96px)',
	  // Add iOS momentum scrolling for iOS < 13.0
	  WebkitOverflowScrolling: 'touch'
	});
	const MenuMenuList = styled$1(MenuList$1, {
	  name: 'MuiMenu',
	  slot: 'List',
	  overridesResolver: (props, styles) => styles.list
	})({
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0
	});
	const Menu = /*#__PURE__*/reactExports.forwardRef(function Menu(inProps, ref) {
	  var _slots$paper, _slotProps$paper;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiMenu'
	  });
	  const {
	      autoFocus = true,
	      children,
	      className,
	      disableAutoFocusItem = false,
	      MenuListProps = {},
	      onClose,
	      open,
	      PaperProps = {},
	      PopoverClasses,
	      transitionDuration = 'auto',
	      TransitionProps: {
	        onEntering
	      } = {},
	      variant = 'selectedMenu',
	      slots = {},
	      slotProps = {}
	    } = props,
	    TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded$12),
	    other = _objectWithoutPropertiesLoose(props, _excluded2$9);
	  const theme = useTheme();
	  const isRtl = theme.direction === 'rtl';
	  const ownerState = _extends({}, props, {
	    autoFocus,
	    disableAutoFocusItem,
	    MenuListProps,
	    onEntering,
	    PaperProps,
	    transitionDuration,
	    TransitionProps,
	    variant
	  });
	  const classes = useUtilityClasses$R(ownerState);
	  const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
	  const menuListActionsRef = reactExports.useRef(null);
	  const handleEntering = (element, isAppearing) => {
	    if (menuListActionsRef.current) {
	      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
	    }
	    if (onEntering) {
	      onEntering(element, isAppearing);
	    }
	  };
	  const handleListKeyDown = event => {
	    if (event.key === 'Tab') {
	      event.preventDefault();
	      if (onClose) {
	        onClose(event, 'tabKeyDown');
	      }
	    }
	  };

	  /**
	   * the index of the item should receive focus
	   * in a `variant="selectedMenu"` it's the first `selected` item
	   * otherwise it's the very first item.
	   */
	  let activeItemIndex = -1;
	  // since we inject focus related props into children we have to do a lookahead
	  // to check if there is a `selected` item. We're looking for the last `selected`
	  // item and use the first valid item as a fallback
	  reactExports.Children.map(children, (child, index) => {
	    if (! /*#__PURE__*/reactExports.isValidElement(child)) {
	      return;
	    }
	    if (!child.props.disabled) {
	      if (variant === 'selectedMenu' && child.props.selected) {
	        activeItemIndex = index;
	      } else if (activeItemIndex === -1) {
	        activeItemIndex = index;
	      }
	    }
	  });
	  const PaperSlot = (_slots$paper = slots.paper) != null ? _slots$paper : MenuPaper;
	  const paperExternalSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : PaperProps;
	  const rootSlotProps = useSlotProps({
	    elementType: slots.root,
	    externalSlotProps: slotProps.root,
	    ownerState,
	    className: [classes.root, className]
	  });
	  const paperSlotProps = useSlotProps({
	    elementType: PaperSlot,
	    externalSlotProps: paperExternalSlotProps,
	    ownerState,
	    className: classes.paper
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(MenuRoot, _extends({
	    onClose: onClose,
	    anchorOrigin: {
	      vertical: 'bottom',
	      horizontal: isRtl ? 'right' : 'left'
	    },
	    transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
	    slots: {
	      paper: PaperSlot,
	      root: slots.root
	    },
	    slotProps: {
	      root: rootSlotProps,
	      paper: paperSlotProps
	    },
	    open: open,
	    ref: ref,
	    transitionDuration: transitionDuration,
	    TransitionProps: _extends({
	      onEntering: handleEntering
	    }, TransitionProps),
	    ownerState: ownerState
	  }, other, {
	    classes: PopoverClasses,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(MenuMenuList, _extends({
	      onKeyDown: handleListKeyDown,
	      actions: menuListActionsRef,
	      autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
	      autoFocusItem: autoFocusItem,
	      variant: variant
	    }, MenuListProps, {
	      className: clsx(classes.list, MenuListProps.className),
	      children: children
	    }))
	  }));
	});
	var Menu$1 = Menu;

	function getMenuItemUtilityClass(slot) {
	  return generateUtilityClass('MuiMenuItem', slot);
	}
	const menuItemClasses = generateUtilityClasses('MuiMenuItem', ['root', 'focusVisible', 'dense', 'disabled', 'divider', 'gutters', 'selected']);
	var menuItemClasses$1 = menuItemClasses;

	const _excluded$11 = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
	const overridesResolver$1 = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
	};
	const useUtilityClasses$Q = ownerState => {
	  const {
	    disabled,
	    dense,
	    divider,
	    disableGutters,
	    selected,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', dense && 'dense', disabled && 'disabled', !disableGutters && 'gutters', divider && 'divider', selected && 'selected']
	  };
	  const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const MenuItemRoot = styled$1(ButtonBase$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiMenuItem',
	  slot: 'Root',
	  overridesResolver: overridesResolver$1
	})(({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.body1, {
	  display: 'flex',
	  justifyContent: 'flex-start',
	  alignItems: 'center',
	  position: 'relative',
	  textDecoration: 'none',
	  minHeight: 48,
	  paddingTop: 6,
	  paddingBottom: 6,
	  boxSizing: 'border-box',
	  whiteSpace: 'nowrap'
	}, !ownerState.disableGutters && {
	  paddingLeft: 16,
	  paddingRight: 16
	}, ownerState.divider && {
	  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
	  backgroundClip: 'padding-box'
	}, {
	  '&:hover': {
	    textDecoration: 'none',
	    backgroundColor: (theme.vars || theme).palette.action.hover,
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  },
	  [`&.${menuItemClasses$1.selected}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	    [`&.${menuItemClasses$1.focusVisible}`]: {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
	    }
	  },
	  [`&.${menuItemClasses$1.selected}:hover`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
	    }
	  },
	  [`&.${menuItemClasses$1.focusVisible}`]: {
	    backgroundColor: (theme.vars || theme).palette.action.focus
	  },
	  [`&.${menuItemClasses$1.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  },
	  [`& + .${dividerClasses$1.root}`]: {
	    marginTop: theme.spacing(1),
	    marginBottom: theme.spacing(1)
	  },
	  [`& + .${dividerClasses$1.inset}`]: {
	    marginLeft: 52
	  },
	  [`& .${listItemTextClasses$1.root}`]: {
	    marginTop: 0,
	    marginBottom: 0
	  },
	  [`& .${listItemTextClasses$1.inset}`]: {
	    paddingLeft: 36
	  },
	  [`& .${listItemIconClasses$1.root}`]: {
	    minWidth: 36
	  }
	}, !ownerState.dense && {
	  [theme.breakpoints.up('sm')]: {
	    minHeight: 'auto'
	  }
	}, ownerState.dense && _extends({
	  minHeight: 32,
	  // https://m2.material.io/components/menus#specs > Dense
	  paddingTop: 4,
	  paddingBottom: 4
	}, theme.typography.body2, {
	  [`& .${listItemIconClasses$1.root} svg`]: {
	    fontSize: '1.25rem'
	  }
	})));
	const MenuItem = /*#__PURE__*/reactExports.forwardRef(function MenuItem(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiMenuItem'
	  });
	  const {
	      autoFocus = false,
	      component = 'li',
	      dense = false,
	      divider = false,
	      disableGutters = false,
	      focusVisibleClassName,
	      role = 'menuitem',
	      tabIndex: tabIndexProp,
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$11);
	  const context = reactExports.useContext(ListContext$1);
	  const childContext = reactExports.useMemo(() => ({
	    dense: dense || context.dense || false,
	    disableGutters
	  }), [context.dense, dense, disableGutters]);
	  const menuItemRef = reactExports.useRef(null);
	  useEnhancedEffect$1(() => {
	    if (autoFocus) {
	      if (menuItemRef.current) {
	        menuItemRef.current.focus();
	      }
	    }
	  }, [autoFocus]);
	  const ownerState = _extends({}, props, {
	    dense: childContext.dense,
	    divider,
	    disableGutters
	  });
	  const classes = useUtilityClasses$Q(props);
	  const handleRef = useForkRef(menuItemRef, ref);
	  let tabIndex;
	  if (!props.disabled) {
	    tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ListContext$1.Provider, {
	    value: childContext,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(MenuItemRoot, _extends({
	      ref: handleRef,
	      role: role,
	      tabIndex: tabIndex,
	      component: component,
	      focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	      className: clsx(classes.root, className)
	    }, other, {
	      ownerState: ownerState,
	      classes: classes
	    }))
	  });
	});
	var MenuItem$1 = MenuItem;

	function getNativeSelectUtilityClasses(slot) {
	  return generateUtilityClass('MuiNativeSelect', slot);
	}
	const nativeSelectClasses = generateUtilityClasses('MuiNativeSelect', ['root', 'select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput', 'error']);
	var nativeSelectClasses$1 = nativeSelectClasses;

	const _excluded$10 = ["className", "disabled", "error", "IconComponent", "inputRef", "variant"];
	const useUtilityClasses$P = ownerState => {
	  const {
	    classes,
	    variant,
	    disabled,
	    multiple,
	    open,
	    error
	  } = ownerState;
	  const slots = {
	    select: ['select', variant, disabled && 'disabled', multiple && 'multiple', error && 'error'],
	    icon: ['icon', `icon${capitalize(variant)}`, open && 'iconOpen', disabled && 'disabled']
	  };
	  return composeClasses(slots, getNativeSelectUtilityClasses, classes);
	};
	const nativeSelectSelectStyles = ({
	  ownerState,
	  theme
	}) => _extends({
	  MozAppearance: 'none',
	  // Reset
	  WebkitAppearance: 'none',
	  // Reset
	  // When interacting quickly, the text can end up selected.
	  // Native select can't be selected either.
	  userSelect: 'none',
	  borderRadius: 0,
	  // Reset
	  cursor: 'pointer',
	  '&:focus': _extends({}, theme.vars ? {
	    backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
	  } : {
	    backgroundColor: theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)'
	  }, {
	    borderRadius: 0 // Reset Chrome style
	  }),
	  // Remove IE11 arrow
	  '&::-ms-expand': {
	    display: 'none'
	  },
	  [`&.${nativeSelectClasses$1.disabled}`]: {
	    cursor: 'default'
	  },
	  '&[multiple]': {
	    height: 'auto'
	  },
	  '&:not([multiple]) option, &:not([multiple]) optgroup': {
	    backgroundColor: (theme.vars || theme).palette.background.paper
	  },
	  // Bump specificity to allow extending custom inputs
	  '&&&': {
	    paddingRight: 24,
	    minWidth: 16 // So it doesn't collapse.
	  }
	}, ownerState.variant === 'filled' && {
	  '&&&': {
	    paddingRight: 32
	  }
	}, ownerState.variant === 'outlined' && {
	  borderRadius: (theme.vars || theme).shape.borderRadius,
	  '&:focus': {
	    borderRadius: (theme.vars || theme).shape.borderRadius // Reset the reset for Chrome style
	  },
	  '&&&': {
	    paddingRight: 32
	  }
	});
	const NativeSelectSelect = styled$1('select', {
	  name: 'MuiNativeSelect',
	  slot: 'Select',
	  shouldForwardProp: rootShouldForwardProp,
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.select, styles[ownerState.variant], ownerState.error && styles.error, {
	      [`&.${nativeSelectClasses$1.multiple}`]: styles.multiple
	    }];
	  }
	})(nativeSelectSelectStyles);
	const nativeSelectIconStyles = ({
	  ownerState,
	  theme
	}) => _extends({
	  // We use a position absolute over a flexbox in order to forward the pointer events
	  // to the input and to support wrapping tags..
	  position: 'absolute',
	  right: 0,
	  top: 'calc(50% - .5em)',
	  // Center vertically, height is 1em
	  pointerEvents: 'none',
	  // Don't block pointer events on the select under the icon.
	  color: (theme.vars || theme).palette.action.active,
	  [`&.${nativeSelectClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.action.disabled
	  }
	}, ownerState.open && {
	  transform: 'rotate(180deg)'
	}, ownerState.variant === 'filled' && {
	  right: 7
	}, ownerState.variant === 'outlined' && {
	  right: 7
	});
	const NativeSelectIcon = styled$1('svg', {
	  name: 'MuiNativeSelect',
	  slot: 'Icon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
	  }
	})(nativeSelectIconStyles);

	/**
	 * @ignore - internal component.
	 */
	const NativeSelectInput = /*#__PURE__*/reactExports.forwardRef(function NativeSelectInput(props, ref) {
	  const {
	      className,
	      disabled,
	      error,
	      IconComponent,
	      inputRef,
	      variant = 'standard'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$10);
	  const ownerState = _extends({}, props, {
	    disabled,
	    variant,
	    error
	  });
	  const classes = useUtilityClasses$P(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(NativeSelectSelect, _extends({
	      ownerState: ownerState,
	      className: clsx(classes.select, className),
	      disabled: disabled,
	      ref: inputRef || ref
	    }, other)), props.multiple ? null : /*#__PURE__*/jsxRuntimeExports.jsx(NativeSelectIcon, {
	      as: IconComponent,
	      ownerState: ownerState,
	      className: classes.icon
	    })]
	  });
	});
	var NativeSelectInput$1 = NativeSelectInput;

	var _span$1;
	const _excluded$$ = ["children", "classes", "className", "label", "notched"];
	const NotchedOutlineRoot$1 = styled$1('fieldset', {
	  shouldForwardProp: rootShouldForwardProp
	})({
	  textAlign: 'left',
	  position: 'absolute',
	  bottom: 0,
	  right: 0,
	  top: -5,
	  left: 0,
	  margin: 0,
	  padding: '0 8px',
	  pointerEvents: 'none',
	  borderRadius: 'inherit',
	  borderStyle: 'solid',
	  borderWidth: 1,
	  overflow: 'hidden',
	  minWidth: '0%'
	});
	const NotchedOutlineLegend = styled$1('legend', {
	  shouldForwardProp: rootShouldForwardProp
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  float: 'unset',
	  // Fix conflict with bootstrap
	  width: 'auto',
	  // Fix conflict with bootstrap
	  overflow: 'hidden'
	}, !ownerState.withLabel && {
	  padding: 0,
	  lineHeight: '11px',
	  // sync with `height` in `legend` styles
	  transition: theme.transitions.create('width', {
	    duration: 150,
	    easing: theme.transitions.easing.easeOut
	  })
	}, ownerState.withLabel && _extends({
	  display: 'block',
	  // Fix conflict with normalize.css and sanitize.css
	  padding: 0,
	  height: 11,
	  // sync with `lineHeight` in `legend` styles
	  fontSize: '0.75em',
	  visibility: 'hidden',
	  maxWidth: 0.01,
	  transition: theme.transitions.create('max-width', {
	    duration: 50,
	    easing: theme.transitions.easing.easeOut
	  }),
	  whiteSpace: 'nowrap',
	  '& > span': {
	    paddingLeft: 5,
	    paddingRight: 5,
	    display: 'inline-block',
	    opacity: 0,
	    visibility: 'visible'
	  }
	}, ownerState.notched && {
	  maxWidth: '100%',
	  transition: theme.transitions.create('max-width', {
	    duration: 100,
	    easing: theme.transitions.easing.easeOut,
	    delay: 50
	  })
	})));

	/**
	 * @ignore - internal component.
	 */
	function NotchedOutline(props) {
	  const {
	      className,
	      label,
	      notched
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$$);
	  const withLabel = label != null && label !== '';
	  const ownerState = _extends({}, props, {
	    notched,
	    withLabel
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(NotchedOutlineRoot$1, _extends({
	    "aria-hidden": true,
	    className: className,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(NotchedOutlineLegend, {
	      ownerState: ownerState,
	      children: withLabel ? /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	        children: label
	      }) :
	      // notranslate needed while Google Translate will not fix zero-width space issue
	      _span$1 || (_span$1 = /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	        className: "notranslate",
	        children: "\u200B"
	      }))
	    })
	  }));
	}

	const _excluded$_ = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
	const useUtilityClasses$O = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    notchedOutline: ['notchedOutline'],
	    input: ['input']
	  };
	  const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const OutlinedInputRoot = styled$1(InputBaseRoot, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiOutlinedInput',
	  slot: 'Root',
	  overridesResolver: rootOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => {
	  const borderColor = theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
	  return _extends({
	    position: 'relative',
	    borderRadius: (theme.vars || theme).shape.borderRadius,
	    [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
	      borderColor: (theme.vars || theme).palette.text.primary
	    },
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      [`&:hover .${outlinedInputClasses$1.notchedOutline}`]: {
	        borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
	      }
	    },
	    [`&.${outlinedInputClasses$1.focused} .${outlinedInputClasses$1.notchedOutline}`]: {
	      borderColor: (theme.vars || theme).palette[ownerState.color].main,
	      borderWidth: 2
	    },
	    [`&.${outlinedInputClasses$1.error} .${outlinedInputClasses$1.notchedOutline}`]: {
	      borderColor: (theme.vars || theme).palette.error.main
	    },
	    [`&.${outlinedInputClasses$1.disabled} .${outlinedInputClasses$1.notchedOutline}`]: {
	      borderColor: (theme.vars || theme).palette.action.disabled
	    }
	  }, ownerState.startAdornment && {
	    paddingLeft: 14
	  }, ownerState.endAdornment && {
	    paddingRight: 14
	  }, ownerState.multiline && _extends({
	    padding: '16.5px 14px'
	  }, ownerState.size === 'small' && {
	    padding: '8.5px 14px'
	  }));
	});
	const NotchedOutlineRoot = styled$1(NotchedOutline, {
	  name: 'MuiOutlinedInput',
	  slot: 'NotchedOutline',
	  overridesResolver: (props, styles) => styles.notchedOutline
	})(({
	  theme
	}) => {
	  const borderColor = theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
	  return {
	    borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
	  };
	});
	const OutlinedInputInput = styled$1(InputBaseComponent, {
	  name: 'MuiOutlinedInput',
	  slot: 'Input',
	  overridesResolver: inputOverridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  padding: '16.5px 14px'
	}, !theme.vars && {
	  '&:-webkit-autofill': {
	    WebkitBoxShadow: theme.palette.mode === 'light' ? null : '0 0 0 100px #266798 inset',
	    WebkitTextFillColor: theme.palette.mode === 'light' ? null : '#fff',
	    caretColor: theme.palette.mode === 'light' ? null : '#fff',
	    borderRadius: 'inherit'
	  }
	}, theme.vars && {
	  '&:-webkit-autofill': {
	    borderRadius: 'inherit'
	  },
	  [theme.getColorSchemeSelector('dark')]: {
	    '&:-webkit-autofill': {
	      WebkitBoxShadow: '0 0 0 100px #266798 inset',
	      WebkitTextFillColor: '#fff',
	      caretColor: '#fff'
	    }
	  }
	}, ownerState.size === 'small' && {
	  padding: '8.5px 14px'
	}, ownerState.multiline && {
	  padding: 0
	}, ownerState.startAdornment && {
	  paddingLeft: 0
	}, ownerState.endAdornment && {
	  paddingRight: 0
	}));
	const OutlinedInput = /*#__PURE__*/reactExports.forwardRef(function OutlinedInput(inProps, ref) {
	  var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiOutlinedInput'
	  });
	  const {
	      components = {},
	      fullWidth = false,
	      inputComponent = 'input',
	      label,
	      multiline = false,
	      notched,
	      slots = {},
	      type = 'text'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$_);
	  const classes = useUtilityClasses$O(props);
	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['color', 'disabled', 'error', 'focused', 'hiddenLabel', 'size', 'required']
	  });
	  const ownerState = _extends({}, props, {
	    color: fcs.color || 'primary',
	    disabled: fcs.disabled,
	    error: fcs.error,
	    focused: fcs.focused,
	    formControl: muiFormControl,
	    fullWidth,
	    hiddenLabel: fcs.hiddenLabel,
	    multiline,
	    size: fcs.size,
	    type
	  });
	  const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
	  const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
	  return /*#__PURE__*/jsxRuntimeExports.jsx(InputBase$1, _extends({
	    slots: {
	      root: RootSlot,
	      input: InputSlot
	    },
	    renderSuffix: state => /*#__PURE__*/jsxRuntimeExports.jsx(NotchedOutlineRoot, {
	      ownerState: ownerState,
	      className: classes.notchedOutline,
	      label: label != null && label !== '' && fcs.required ? _React$Fragment || (_React$Fragment = /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	        children: [label, "\u2009", '*']
	      })) : label,
	      notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)
	    }),
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other, {
	    classes: _extends({}, classes, {
	      notchedOutline: null
	    })
	  }));
	});
	OutlinedInput.muiName = 'Input';
	var OutlinedInput$1 = OutlinedInput;

	var RadioButtonUncheckedIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
	}), 'RadioButtonUnchecked');

	var RadioButtonCheckedIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
	}), 'RadioButtonChecked');

	const RadioButtonIconRoot = styled$1('span', {
	  shouldForwardProp: rootShouldForwardProp
	})({
	  position: 'relative',
	  display: 'flex'
	});
	const RadioButtonIconBackground = styled$1(RadioButtonUncheckedIcon)({
	  // Scale applied to prevent dot misalignment in Safari
	  transform: 'scale(1)'
	});
	const RadioButtonIconDot = styled$1(RadioButtonCheckedIcon)(({
	  theme,
	  ownerState
	}) => _extends({
	  left: 0,
	  position: 'absolute',
	  transform: 'scale(0)',
	  transition: theme.transitions.create('transform', {
	    easing: theme.transitions.easing.easeIn,
	    duration: theme.transitions.duration.shortest
	  })
	}, ownerState.checked && {
	  transform: 'scale(1)',
	  transition: theme.transitions.create('transform', {
	    easing: theme.transitions.easing.easeOut,
	    duration: theme.transitions.duration.shortest
	  })
	}));

	/**
	 * @ignore - internal component.
	 */
	function RadioButtonIcon(props) {
	  const {
	    checked = false,
	    classes = {},
	    fontSize
	  } = props;
	  const ownerState = _extends({}, props, {
	    checked
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(RadioButtonIconRoot, {
	    className: classes.root,
	    ownerState: ownerState,
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(RadioButtonIconBackground, {
	      fontSize: fontSize,
	      className: classes.background,
	      ownerState: ownerState
	    }), /*#__PURE__*/jsxRuntimeExports.jsx(RadioButtonIconDot, {
	      fontSize: fontSize,
	      className: classes.dot,
	      ownerState: ownerState
	    })]
	  });
	}

	/**
	 * @ignore - internal component.
	 */
	const RadioGroupContext = /*#__PURE__*/reactExports.createContext(undefined);
	var RadioGroupContext$1 = RadioGroupContext;

	function useRadioGroup() {
	  return reactExports.useContext(RadioGroupContext$1);
	}

	function getRadioUtilityClass(slot) {
	  return generateUtilityClass('MuiRadio', slot);
	}
	const radioClasses = generateUtilityClasses('MuiRadio', ['root', 'checked', 'disabled', 'colorPrimary', 'colorSecondary', 'sizeSmall']);
	var radioClasses$1 = radioClasses;

	const _excluded$Z = ["checked", "checkedIcon", "color", "icon", "name", "onChange", "size", "className"];
	const useUtilityClasses$N = ownerState => {
	  const {
	    classes,
	    color,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', `color${capitalize(color)}`, size !== 'medium' && `size${capitalize(size)}`]
	  };
	  return _extends({}, classes, composeClasses(slots, getRadioUtilityClass, classes));
	};
	const RadioRoot = styled$1(SwitchBase$1, {
	  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',
	  name: 'MuiRadio',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.size !== 'medium' && styles[`size${capitalize(ownerState.size)}`], styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  color: (theme.vars || theme).palette.text.secondary
	}, !ownerState.disableRipple && {
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.color !== 'default' && {
	  [`&.${radioClasses$1.checked}`]: {
	    color: (theme.vars || theme).palette[ownerState.color].main
	  }
	}, {
	  [`&.${radioClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.action.disabled
	  }
	}));
	function areEqualValues$1(a, b) {
	  if (typeof b === 'object' && b !== null) {
	    return a === b;
	  }

	  // The value could be a number, the DOM will stringify it anyway.
	  return String(a) === String(b);
	}
	const defaultCheckedIcon = /*#__PURE__*/jsxRuntimeExports.jsx(RadioButtonIcon, {
	  checked: true
	});
	const defaultIcon = /*#__PURE__*/jsxRuntimeExports.jsx(RadioButtonIcon, {});
	const Radio = /*#__PURE__*/reactExports.forwardRef(function Radio(inProps, ref) {
	  var _defaultIcon$props$fo, _defaultCheckedIcon$p;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiRadio'
	  });
	  const {
	      checked: checkedProp,
	      checkedIcon = defaultCheckedIcon,
	      color = 'primary',
	      icon = defaultIcon,
	      name: nameProp,
	      onChange: onChangeProp,
	      size = 'medium',
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$Z);
	  const ownerState = _extends({}, props, {
	    color,
	    size
	  });
	  const classes = useUtilityClasses$N(ownerState);
	  const radioGroup = useRadioGroup();
	  let checked = checkedProp;
	  const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);
	  let name = nameProp;
	  if (radioGroup) {
	    if (typeof checked === 'undefined') {
	      checked = areEqualValues$1(radioGroup.value, props.value);
	    }
	    if (typeof name === 'undefined') {
	      name = radioGroup.name;
	    }
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(RadioRoot, _extends({
	    type: "radio",
	    icon: /*#__PURE__*/reactExports.cloneElement(icon, {
	      fontSize: (_defaultIcon$props$fo = defaultIcon.props.fontSize) != null ? _defaultIcon$props$fo : size
	    }),
	    checkedIcon: /*#__PURE__*/reactExports.cloneElement(checkedIcon, {
	      fontSize: (_defaultCheckedIcon$p = defaultCheckedIcon.props.fontSize) != null ? _defaultCheckedIcon$p : size
	    }),
	    ownerState: ownerState,
	    classes: classes,
	    name: name,
	    checked: checked,
	    onChange: onChange,
	    ref: ref,
	    className: clsx(classes.root, className)
	  }, other));
	});
	var Radio$1 = Radio;

	const _excluded$Y = ["actions", "children", "defaultValue", "name", "onChange", "value"];
	const RadioGroup = /*#__PURE__*/reactExports.forwardRef(function RadioGroup(props, ref) {
	  const {
	      // private
	      // eslint-disable-next-line react/prop-types
	      actions,
	      children,
	      defaultValue,
	      name: nameProp,
	      onChange,
	      value: valueProp
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$Y);
	  const rootRef = reactExports.useRef(null);
	  const [value, setValueState] = useControlled({
	    controlled: valueProp,
	    default: defaultValue,
	    name: 'RadioGroup'
	  });
	  reactExports.useImperativeHandle(actions, () => ({
	    focus: () => {
	      let input = rootRef.current.querySelector('input:not(:disabled):checked');
	      if (!input) {
	        input = rootRef.current.querySelector('input:not(:disabled)');
	      }
	      if (input) {
	        input.focus();
	      }
	    }
	  }), []);
	  const handleRef = useForkRef(ref, rootRef);
	  const name = useId(nameProp);
	  const contextValue = reactExports.useMemo(() => ({
	    name,
	    onChange(event) {
	      setValueState(event.target.value);
	      if (onChange) {
	        onChange(event, event.target.value);
	      }
	    },
	    value
	  }), [name, onChange, setValueState, value]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(RadioGroupContext$1.Provider, {
	    value: contextValue,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(FormGroup$1, _extends({
	      role: "radiogroup",
	      ref: handleRef
	    }, other, {
	      children: children
	    }))
	  });
	});
	var RadioGroup$1 = RadioGroup;

	function getSelectUtilityClasses(slot) {
	  return generateUtilityClass('MuiSelect', slot);
	}
	const selectClasses = generateUtilityClasses('MuiSelect', ['root', 'select', 'multiple', 'filled', 'outlined', 'standard', 'disabled', 'focused', 'icon', 'iconOpen', 'iconFilled', 'iconOutlined', 'iconStandard', 'nativeInput', 'error']);
	var selectClasses$1 = selectClasses;

	var _span;
	const _excluded$X = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "error", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
	const SelectSelect = styled$1('div', {
	  name: 'MuiSelect',
	  slot: 'Select',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [
	    // Win specificity over the input base
	    {
	      [`&.${selectClasses$1.select}`]: styles.select
	    }, {
	      [`&.${selectClasses$1.select}`]: styles[ownerState.variant]
	    }, {
	      [`&.${selectClasses$1.error}`]: styles.error
	    }, {
	      [`&.${selectClasses$1.multiple}`]: styles.multiple
	    }];
	  }
	})(nativeSelectSelectStyles, {
	  // Win specificity over the input base
	  [`&.${selectClasses$1.select}`]: {
	    height: 'auto',
	    // Resets for multiple select with chips
	    minHeight: '1.4375em',
	    // Required for select\text-field height consistency
	    textOverflow: 'ellipsis',
	    whiteSpace: 'nowrap',
	    overflow: 'hidden'
	  }
	});
	const SelectIcon = styled$1('svg', {
	  name: 'MuiSelect',
	  slot: 'Icon',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.icon, ownerState.variant && styles[`icon${capitalize(ownerState.variant)}`], ownerState.open && styles.iconOpen];
	  }
	})(nativeSelectIconStyles);
	const SelectNativeInput = styled$1('input', {
	  shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'classes',
	  name: 'MuiSelect',
	  slot: 'NativeInput',
	  overridesResolver: (props, styles) => styles.nativeInput
	})({
	  bottom: 0,
	  left: 0,
	  position: 'absolute',
	  opacity: 0,
	  pointerEvents: 'none',
	  width: '100%',
	  boxSizing: 'border-box'
	});
	function areEqualValues(a, b) {
	  if (typeof b === 'object' && b !== null) {
	    return a === b;
	  }

	  // The value could be a number, the DOM will stringify it anyway.
	  return String(a) === String(b);
	}
	function isEmpty(display) {
	  return display == null || typeof display === 'string' && !display.trim();
	}
	const useUtilityClasses$M = ownerState => {
	  const {
	    classes,
	    variant,
	    disabled,
	    multiple,
	    open,
	    error
	  } = ownerState;
	  const slots = {
	    select: ['select', variant, disabled && 'disabled', multiple && 'multiple', error && 'error'],
	    icon: ['icon', `icon${capitalize(variant)}`, open && 'iconOpen', disabled && 'disabled'],
	    nativeInput: ['nativeInput']
	  };
	  return composeClasses(slots, getSelectUtilityClasses, classes);
	};

	/**
	 * @ignore - internal component.
	 */
	const SelectInput = /*#__PURE__*/reactExports.forwardRef(function SelectInput(props, ref) {
	  var _MenuProps$slotProps;
	  const {
	      'aria-describedby': ariaDescribedby,
	      'aria-label': ariaLabel,
	      autoFocus,
	      autoWidth,
	      children,
	      className,
	      defaultOpen,
	      defaultValue,
	      disabled,
	      displayEmpty,
	      error = false,
	      IconComponent,
	      inputRef: inputRefProp,
	      labelId,
	      MenuProps = {},
	      multiple,
	      name,
	      onBlur,
	      onChange,
	      onClose,
	      onFocus,
	      onOpen,
	      open: openProp,
	      readOnly,
	      renderValue,
	      SelectDisplayProps = {},
	      tabIndex: tabIndexProp
	      // catching `type` from Input which makes no sense for SelectInput
	      ,

	      value: valueProp,
	      variant = 'standard'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$X);
	  const [value, setValueState] = useControlled({
	    controlled: valueProp,
	    default: defaultValue,
	    name: 'Select'
	  });
	  const [openState, setOpenState] = useControlled({
	    controlled: openProp,
	    default: defaultOpen,
	    name: 'Select'
	  });
	  const inputRef = reactExports.useRef(null);
	  const displayRef = reactExports.useRef(null);
	  const [displayNode, setDisplayNode] = reactExports.useState(null);
	  const {
	    current: isOpenControlled
	  } = reactExports.useRef(openProp != null);
	  const [menuMinWidthState, setMenuMinWidthState] = reactExports.useState();
	  const handleRef = useForkRef(ref, inputRefProp);
	  const handleDisplayRef = reactExports.useCallback(node => {
	    displayRef.current = node;
	    if (node) {
	      setDisplayNode(node);
	    }
	  }, []);
	  const anchorElement = displayNode == null ? void 0 : displayNode.parentNode;
	  reactExports.useImperativeHandle(handleRef, () => ({
	    focus: () => {
	      displayRef.current.focus();
	    },
	    node: inputRef.current,
	    value
	  }), [value]);

	  // Resize menu on `defaultOpen` automatic toggle.
	  reactExports.useEffect(() => {
	    if (defaultOpen && openState && displayNode && !isOpenControlled) {
	      setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
	      displayRef.current.focus();
	    }
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [displayNode, autoWidth]);
	  // `isOpenControlled` is ignored because the component should never switch between controlled and uncontrolled modes.
	  // `defaultOpen` and `openState` are ignored to avoid unnecessary callbacks.
	  reactExports.useEffect(() => {
	    if (autoFocus) {
	      displayRef.current.focus();
	    }
	  }, [autoFocus]);
	  reactExports.useEffect(() => {
	    if (!labelId) {
	      return undefined;
	    }
	    const label = ownerDocument(displayRef.current).getElementById(labelId);
	    if (label) {
	      const handler = () => {
	        if (getSelection().isCollapsed) {
	          displayRef.current.focus();
	        }
	      };
	      label.addEventListener('click', handler);
	      return () => {
	        label.removeEventListener('click', handler);
	      };
	    }
	    return undefined;
	  }, [labelId]);
	  const update = (open, event) => {
	    if (open) {
	      if (onOpen) {
	        onOpen(event);
	      }
	    } else if (onClose) {
	      onClose(event);
	    }
	    if (!isOpenControlled) {
	      setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
	      setOpenState(open);
	    }
	  };
	  const handleMouseDown = event => {
	    // Ignore everything but left-click
	    if (event.button !== 0) {
	      return;
	    }
	    // Hijack the default focus behavior.
	    event.preventDefault();
	    displayRef.current.focus();
	    update(true, event);
	  };
	  const handleClose = event => {
	    update(false, event);
	  };
	  const childrenArray = reactExports.Children.toArray(children);

	  // Support autofill.
	  const handleChange = event => {
	    const child = childrenArray.find(childItem => childItem.props.value === event.target.value);
	    if (child === undefined) {
	      return;
	    }
	    setValueState(child.props.value);
	    if (onChange) {
	      onChange(event, child);
	    }
	  };
	  const handleItemClick = child => event => {
	    let newValue;

	    // We use the tabindex attribute to signal the available options.
	    if (!event.currentTarget.hasAttribute('tabindex')) {
	      return;
	    }
	    if (multiple) {
	      newValue = Array.isArray(value) ? value.slice() : [];
	      const itemIndex = value.indexOf(child.props.value);
	      if (itemIndex === -1) {
	        newValue.push(child.props.value);
	      } else {
	        newValue.splice(itemIndex, 1);
	      }
	    } else {
	      newValue = child.props.value;
	    }
	    if (child.props.onClick) {
	      child.props.onClick(event);
	    }
	    if (value !== newValue) {
	      setValueState(newValue);
	      if (onChange) {
	        // Redefine target to allow name and value to be read.
	        // This allows seamless integration with the most popular form libraries.
	        // https://github.com/mui/material-ui/issues/13485#issuecomment-676048492
	        // Clone the event to not override `target` of the original event.
	        const nativeEvent = event.nativeEvent || event;
	        const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
	        Object.defineProperty(clonedEvent, 'target', {
	          writable: true,
	          value: {
	            value: newValue,
	            name
	          }
	        });
	        onChange(clonedEvent, child);
	      }
	    }
	    if (!multiple) {
	      update(false, event);
	    }
	  };
	  const handleKeyDown = event => {
	    if (!readOnly) {
	      const validKeys = [' ', 'ArrowUp', 'ArrowDown',
	      // The native select doesn't respond to enter on macOS, but it's recommended by
	      // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
	      'Enter'];
	      if (validKeys.indexOf(event.key) !== -1) {
	        event.preventDefault();
	        update(true, event);
	      }
	    }
	  };
	  const open = displayNode !== null && openState;
	  const handleBlur = event => {
	    // if open event.stopImmediatePropagation
	    if (!open && onBlur) {
	      // Preact support, target is read only property on a native event.
	      Object.defineProperty(event, 'target', {
	        writable: true,
	        value: {
	          value,
	          name
	        }
	      });
	      onBlur(event);
	    }
	  };
	  delete other['aria-invalid'];
	  let display;
	  let displaySingle;
	  const displayMultiple = [];
	  let computeDisplay = false;

	  // No need to display any value if the field is empty.
	  if (isFilled({
	    value
	  }) || displayEmpty) {
	    if (renderValue) {
	      display = renderValue(value);
	    } else {
	      computeDisplay = true;
	    }
	  }
	  const items = childrenArray.map(child => {
	    if (! /*#__PURE__*/reactExports.isValidElement(child)) {
	      return null;
	    }
	    let selected;
	    if (multiple) {
	      if (!Array.isArray(value)) {
	        throw new Error(formatMuiErrorMessage(2));
	      }
	      selected = value.some(v => areEqualValues(v, child.props.value));
	      if (selected && computeDisplay) {
	        displayMultiple.push(child.props.children);
	      }
	    } else {
	      selected = areEqualValues(value, child.props.value);
	      if (selected && computeDisplay) {
	        displaySingle = child.props.children;
	      }
	    }
	    return /*#__PURE__*/reactExports.cloneElement(child, {
	      'aria-selected': selected ? 'true' : 'false',
	      onClick: handleItemClick(child),
	      onKeyUp: event => {
	        if (event.key === ' ') {
	          // otherwise our MenuItems dispatches a click event
	          // it's not behavior of the native <option> and causes
	          // the select to close immediately since we open on space keydown
	          event.preventDefault();
	        }
	        if (child.props.onKeyUp) {
	          child.props.onKeyUp(event);
	        }
	      },
	      role: 'option',
	      selected,
	      value: undefined,
	      // The value is most likely not a valid HTML attribute.
	      'data-value': child.props.value // Instead, we provide it as a data attribute.
	    });
	  });
	  if (computeDisplay) {
	    if (multiple) {
	      if (displayMultiple.length === 0) {
	        display = null;
	      } else {
	        display = displayMultiple.reduce((output, child, index) => {
	          output.push(child);
	          if (index < displayMultiple.length - 1) {
	            output.push(', ');
	          }
	          return output;
	        }, []);
	      }
	    } else {
	      display = displaySingle;
	    }
	  }

	  // Avoid performing a layout computation in the render method.
	  let menuMinWidth = menuMinWidthState;
	  if (!autoWidth && isOpenControlled && displayNode) {
	    menuMinWidth = anchorElement.clientWidth;
	  }
	  let tabIndex;
	  if (typeof tabIndexProp !== 'undefined') {
	    tabIndex = tabIndexProp;
	  } else {
	    tabIndex = disabled ? null : 0;
	  }
	  const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : undefined);
	  const ownerState = _extends({}, props, {
	    variant,
	    value,
	    open,
	    error
	  });
	  const classes = useUtilityClasses$M(ownerState);
	  const paperProps = _extends({}, MenuProps.PaperProps, (_MenuProps$slotProps = MenuProps.slotProps) == null ? void 0 : _MenuProps$slotProps.paper);
	  const listboxId = useId();
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(SelectSelect, _extends({
	      ref: handleDisplayRef,
	      tabIndex: tabIndex,
	      role: "combobox",
	      "aria-controls": listboxId,
	      "aria-disabled": disabled ? 'true' : undefined,
	      "aria-expanded": open ? 'true' : 'false',
	      "aria-haspopup": "listbox",
	      "aria-label": ariaLabel,
	      "aria-labelledby": [labelId, buttonId].filter(Boolean).join(' ') || undefined,
	      "aria-describedby": ariaDescribedby,
	      onKeyDown: handleKeyDown,
	      onMouseDown: disabled || readOnly ? null : handleMouseDown,
	      onBlur: handleBlur,
	      onFocus: onFocus
	    }, SelectDisplayProps, {
	      ownerState: ownerState,
	      className: clsx(SelectDisplayProps.className, classes.select, className)
	      // The id is required for proper a11y
	      ,

	      id: buttonId,
	      children: isEmpty(display) ?
	      // notranslate needed while Google Translate will not fix zero-width space issue
	      _span || (_span = /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	        className: "notranslate",
	        children: "\u200B"
	      })) : display
	    })), /*#__PURE__*/jsxRuntimeExports.jsx(SelectNativeInput, _extends({
	      "aria-invalid": error,
	      value: Array.isArray(value) ? value.join(',') : value,
	      name: name,
	      ref: inputRef,
	      "aria-hidden": true,
	      onChange: handleChange,
	      tabIndex: -1,
	      disabled: disabled,
	      className: classes.nativeInput,
	      autoFocus: autoFocus,
	      ownerState: ownerState
	    }, other)), /*#__PURE__*/jsxRuntimeExports.jsx(SelectIcon, {
	      as: IconComponent,
	      className: classes.icon,
	      ownerState: ownerState
	    }), /*#__PURE__*/jsxRuntimeExports.jsx(Menu$1, _extends({
	      id: `menu-${name || ''}`,
	      anchorEl: anchorElement,
	      open: open,
	      onClose: handleClose,
	      anchorOrigin: {
	        vertical: 'bottom',
	        horizontal: 'center'
	      },
	      transformOrigin: {
	        vertical: 'top',
	        horizontal: 'center'
	      }
	    }, MenuProps, {
	      MenuListProps: _extends({
	        'aria-labelledby': labelId,
	        role: 'listbox',
	        'aria-multiselectable': multiple ? 'true' : undefined,
	        disableListWrap: true,
	        id: listboxId
	      }, MenuProps.MenuListProps),
	      slotProps: _extends({}, MenuProps.slotProps, {
	        paper: _extends({}, paperProps, {
	          style: _extends({
	            minWidth: menuMinWidth
	          }, paperProps != null ? paperProps.style : null)
	        })
	      }),
	      children: items
	    }))]
	  });
	});
	var SelectInput$1 = SelectInput;

	const _excluded$W = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"],
	  _excluded2$8 = ["root"];
	const useUtilityClasses$L = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  return classes;
	};
	const styledRootConfig = {
	  name: 'MuiSelect',
	  overridesResolver: (props, styles) => styles.root,
	  shouldForwardProp: prop => rootShouldForwardProp(prop) && prop !== 'variant',
	  slot: 'Root'
	};
	const StyledInput = styled$1(Input$1, styledRootConfig)('');
	const StyledOutlinedInput = styled$1(OutlinedInput$1, styledRootConfig)('');
	const StyledFilledInput = styled$1(FilledInput$1, styledRootConfig)('');
	const Select = /*#__PURE__*/reactExports.forwardRef(function Select(inProps, ref) {
	  const props = useThemeProps({
	    name: 'MuiSelect',
	    props: inProps
	  });
	  const {
	      autoWidth = false,
	      children,
	      classes: classesProp = {},
	      className,
	      defaultOpen = false,
	      displayEmpty = false,
	      IconComponent = ArrowDropDownIcon$1,
	      id,
	      input,
	      inputProps,
	      label,
	      labelId,
	      MenuProps,
	      multiple = false,
	      native = false,
	      onClose,
	      onOpen,
	      open,
	      renderValue,
	      SelectDisplayProps,
	      variant: variantProp = 'outlined'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$W);
	  const inputComponent = native ? NativeSelectInput$1 : SelectInput$1;
	  const muiFormControl = useFormControl();
	  const fcs = formControlState({
	    props,
	    muiFormControl,
	    states: ['variant', 'error']
	  });
	  const variant = fcs.variant || variantProp;
	  const ownerState = _extends({}, props, {
	    variant,
	    classes: classesProp
	  });
	  const classes = useUtilityClasses$L(ownerState);
	  const restOfClasses = _objectWithoutPropertiesLoose(classes, _excluded2$8);
	  const InputComponent = input || {
	    standard: /*#__PURE__*/jsxRuntimeExports.jsx(StyledInput, {
	      ownerState: ownerState
	    }),
	    outlined: /*#__PURE__*/jsxRuntimeExports.jsx(StyledOutlinedInput, {
	      label: label,
	      ownerState: ownerState
	    }),
	    filled: /*#__PURE__*/jsxRuntimeExports.jsx(StyledFilledInput, {
	      ownerState: ownerState
	    })
	  }[variant];
	  const inputComponentRef = useForkRef(ref, InputComponent.ref);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(reactExports.Fragment, {
	    children: /*#__PURE__*/reactExports.cloneElement(InputComponent, _extends({
	      // Most of the logic is implemented in `SelectInput`.
	      // The `Select` component is a simple API wrapper to expose something better to play with.
	      inputComponent,
	      inputProps: _extends({
	        children,
	        error: fcs.error,
	        IconComponent,
	        variant,
	        type: undefined,
	        // We render a select. We can ignore the type provided by the `Input`.
	        multiple
	      }, native ? {
	        id
	      } : {
	        autoWidth,
	        defaultOpen,
	        displayEmpty,
	        labelId,
	        MenuProps,
	        onClose,
	        onOpen,
	        open,
	        renderValue,
	        SelectDisplayProps: _extends({
	          id
	        }, SelectDisplayProps)
	      }, inputProps, {
	        classes: inputProps ? deepmerge(restOfClasses, inputProps.classes) : restOfClasses
	      }, input ? input.props.inputProps : {})
	    }, multiple && native && variant === 'outlined' ? {
	      notched: true
	    } : {}, {
	      ref: inputComponentRef,
	      className: clsx(InputComponent.props.className, className, classes.root)
	    }, !input && {
	      variant
	    }, other))
	  });
	});
	Select.muiName = 'Select';
	var Select$1 = Select;

	const shouldSpreadAdditionalProps = Slot => {
	  return !Slot || !isHostComponent(Slot);
	};
	var shouldSpreadAdditionalProps$1 = shouldSpreadAdditionalProps;

	function getSliderUtilityClass(slot) {
	  return generateUtilityClass('MuiSlider', slot);
	}
	const sliderClasses = generateUtilityClasses('MuiSlider', ['root', 'active', 'colorPrimary', 'colorSecondary', 'colorError', 'colorInfo', 'colorSuccess', 'colorWarning', 'disabled', 'dragging', 'focusVisible', 'mark', 'markActive', 'marked', 'markLabel', 'markLabelActive', 'rail', 'sizeSmall', 'thumb', 'thumbColorPrimary', 'thumbColorSecondary', 'thumbColorError', 'thumbColorSuccess', 'thumbColorInfo', 'thumbColorWarning', 'track', 'trackInverted', 'trackFalse', 'thumbSizeSmall', 'valueLabel', 'valueLabelOpen', 'valueLabelCircle', 'valueLabelLabel', 'vertical']);
	var sliderClasses$1 = sliderClasses;

	const useValueLabelClasses = props => {
	  const {
	    open
	  } = props;
	  const utilityClasses = {
	    offset: clsx(open && sliderClasses$1.valueLabelOpen),
	    circle: sliderClasses$1.valueLabelCircle,
	    label: sliderClasses$1.valueLabelLabel
	  };
	  return utilityClasses;
	};

	/**
	 * @ignore - internal component.
	 */
	function SliderValueLabel$1(props) {
	  const {
	    children,
	    className,
	    value
	  } = props;
	  const classes = useValueLabelClasses(props);
	  if (!children) {
	    return null;
	  }
	  return /*#__PURE__*/reactExports.cloneElement(children, {
	    className: clsx(children.props.className)
	  }, /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	    children: [children.props.children, /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	      className: clsx(classes.offset, className),
	      "aria-hidden": true,
	      children: /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	        className: classes.circle,
	        children: /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	          className: classes.label,
	          children: value
	        })
	      })
	    })]
	  }));
	}

	const _excluded$V = ["aria-label", "aria-valuetext", "aria-labelledby", "component", "components", "componentsProps", "color", "classes", "className", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "size", "step", "scale", "slotProps", "slots", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat"];
	function Identity(x) {
	  return x;
	}
	const SliderRoot = styled$1('span', {
	  name: 'MuiSlider',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[`color${capitalize(ownerState.color)}`], ownerState.size !== 'medium' && styles[`size${capitalize(ownerState.size)}`], ownerState.marked && styles.marked, ownerState.orientation === 'vertical' && styles.vertical, ownerState.track === 'inverted' && styles.trackInverted, ownerState.track === false && styles.trackFalse];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  borderRadius: 12,
	  boxSizing: 'content-box',
	  display: 'inline-block',
	  position: 'relative',
	  cursor: 'pointer',
	  touchAction: 'none',
	  color: (theme.vars || theme).palette[ownerState.color].main,
	  WebkitTapHighlightColor: 'transparent'
	}, ownerState.orientation === 'horizontal' && _extends({
	  height: 4,
	  width: '100%',
	  padding: '13px 0',
	  // The primary input mechanism of the device includes a pointing device of limited accuracy.
	  '@media (pointer: coarse)': {
	    // Reach 42px touch target, about ~8mm on screen.
	    padding: '20px 0'
	  }
	}, ownerState.size === 'small' && {
	  height: 2
	}, ownerState.marked && {
	  marginBottom: 20
	}), ownerState.orientation === 'vertical' && _extends({
	  height: '100%',
	  width: 4,
	  padding: '0 13px',
	  // The primary input mechanism of the device includes a pointing device of limited accuracy.
	  '@media (pointer: coarse)': {
	    // Reach 42px touch target, about ~8mm on screen.
	    padding: '0 20px'
	  }
	}, ownerState.size === 'small' && {
	  width: 2
	}, ownerState.marked && {
	  marginRight: 44
	}), {
	  '@media print': {
	    colorAdjust: 'exact'
	  },
	  [`&.${sliderClasses$1.disabled}`]: {
	    pointerEvents: 'none',
	    cursor: 'default',
	    color: (theme.vars || theme).palette.grey[400]
	  },
	  [`&.${sliderClasses$1.dragging}`]: {
	    [`& .${sliderClasses$1.thumb}, & .${sliderClasses$1.track}`]: {
	      transition: 'none'
	    }
	  }
	}));
	const SliderRail = styled$1('span', {
	  name: 'MuiSlider',
	  slot: 'Rail',
	  overridesResolver: (props, styles) => styles.rail
	})(({
	  ownerState
	}) => _extends({
	  display: 'block',
	  position: 'absolute',
	  borderRadius: 'inherit',
	  backgroundColor: 'currentColor',
	  opacity: 0.38
	}, ownerState.orientation === 'horizontal' && {
	  width: '100%',
	  height: 'inherit',
	  top: '50%',
	  transform: 'translateY(-50%)'
	}, ownerState.orientation === 'vertical' && {
	  height: '100%',
	  width: 'inherit',
	  left: '50%',
	  transform: 'translateX(-50%)'
	}, ownerState.track === 'inverted' && {
	  opacity: 1
	}));
	const SliderTrack = styled$1('span', {
	  name: 'MuiSlider',
	  slot: 'Track',
	  overridesResolver: (props, styles) => styles.track
	})(({
	  theme,
	  ownerState
	}) => {
	  const color =
	  // Same logic as the LinearProgress track color
	  theme.palette.mode === 'light' ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.5);
	  return _extends({
	    display: 'block',
	    position: 'absolute',
	    borderRadius: 'inherit',
	    border: '1px solid currentColor',
	    backgroundColor: 'currentColor',
	    transition: theme.transitions.create(['left', 'width', 'bottom', 'height'], {
	      duration: theme.transitions.duration.shortest
	    })
	  }, ownerState.size === 'small' && {
	    border: 'none'
	  }, ownerState.orientation === 'horizontal' && {
	    height: 'inherit',
	    top: '50%',
	    transform: 'translateY(-50%)'
	  }, ownerState.orientation === 'vertical' && {
	    width: 'inherit',
	    left: '50%',
	    transform: 'translateX(-50%)'
	  }, ownerState.track === false && {
	    display: 'none'
	  }, ownerState.track === 'inverted' && {
	    backgroundColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color,
	    borderColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color
	  });
	});
	const SliderThumb = styled$1('span', {
	  name: 'MuiSlider',
	  slot: 'Thumb',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.thumb, styles[`thumbColor${capitalize(ownerState.color)}`], ownerState.size !== 'medium' && styles[`thumbSize${capitalize(ownerState.size)}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  position: 'absolute',
	  width: 20,
	  height: 20,
	  boxSizing: 'border-box',
	  borderRadius: '50%',
	  outline: 0,
	  backgroundColor: 'currentColor',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  transition: theme.transitions.create(['box-shadow', 'left', 'bottom'], {
	    duration: theme.transitions.duration.shortest
	  })
	}, ownerState.size === 'small' && {
	  width: 12,
	  height: 12
	}, ownerState.orientation === 'horizontal' && {
	  top: '50%',
	  transform: 'translate(-50%, -50%)'
	}, ownerState.orientation === 'vertical' && {
	  left: '50%',
	  transform: 'translate(-50%, 50%)'
	}, {
	  '&::before': _extends({
	    position: 'absolute',
	    content: '""',
	    borderRadius: 'inherit',
	    width: '100%',
	    height: '100%',
	    boxShadow: (theme.vars || theme).shadows[2]
	  }, ownerState.size === 'small' && {
	    boxShadow: 'none'
	  }),
	  '&::after': {
	    position: 'absolute',
	    content: '""',
	    borderRadius: '50%',
	    // 42px is the hit target
	    width: 42,
	    height: 42,
	    top: '50%',
	    left: '50%',
	    transform: 'translate(-50%, -50%)'
	  },
	  [`&:hover, &.${sliderClasses$1.focusVisible}`]: {
	    boxShadow: `0px 0px 0px 8px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : alpha(theme.palette[ownerState.color].main, 0.16)}`,
	    '@media (hover: none)': {
	      boxShadow: 'none'
	    }
	  },
	  [`&.${sliderClasses$1.active}`]: {
	    boxShadow: `0px 0px 0px 14px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : alpha(theme.palette[ownerState.color].main, 0.16)}`
	  },
	  [`&.${sliderClasses$1.disabled}`]: {
	    '&:hover': {
	      boxShadow: 'none'
	    }
	  }
	}));
	const SliderValueLabel = styled$1(SliderValueLabel$1, {
	  name: 'MuiSlider',
	  slot: 'ValueLabel',
	  overridesResolver: (props, styles) => styles.valueLabel
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  [`&.${sliderClasses$1.valueLabelOpen}`]: {
	    transform: `${ownerState.orientation === 'vertical' ? 'translateY(-50%)' : 'translateY(-100%)'} scale(1)`
	  },
	  zIndex: 1,
	  whiteSpace: 'nowrap'
	}, theme.typography.body2, {
	  fontWeight: 500,
	  transition: theme.transitions.create(['transform'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  transform: `${ownerState.orientation === 'vertical' ? 'translateY(-50%)' : 'translateY(-100%)'} scale(0)`,
	  position: 'absolute',
	  backgroundColor: (theme.vars || theme).palette.grey[600],
	  borderRadius: 2,
	  color: (theme.vars || theme).palette.common.white,
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center',
	  padding: '0.25rem 0.75rem'
	}, ownerState.orientation === 'horizontal' && {
	  top: '-10px',
	  transformOrigin: 'bottom center',
	  '&::before': {
	    position: 'absolute',
	    content: '""',
	    width: 8,
	    height: 8,
	    transform: 'translate(-50%, 50%) rotate(45deg)',
	    backgroundColor: 'inherit',
	    bottom: 0,
	    left: '50%'
	  }
	}, ownerState.orientation === 'vertical' && {
	  right: ownerState.size === 'small' ? '20px' : '30px',
	  top: '50%',
	  transformOrigin: 'right center',
	  '&::before': {
	    position: 'absolute',
	    content: '""',
	    width: 8,
	    height: 8,
	    transform: 'translate(-50%, -50%) rotate(45deg)',
	    backgroundColor: 'inherit',
	    right: -8,
	    top: '50%'
	  }
	}, ownerState.size === 'small' && {
	  fontSize: theme.typography.pxToRem(12),
	  padding: '0.25rem 0.5rem'
	}));
	const SliderMark = styled$1('span', {
	  name: 'MuiSlider',
	  slot: 'Mark',
	  shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'markActive',
	  overridesResolver: (props, styles) => {
	    const {
	      markActive
	    } = props;
	    return [styles.mark, markActive && styles.markActive];
	  }
	})(({
	  theme,
	  ownerState,
	  markActive
	}) => _extends({
	  position: 'absolute',
	  width: 2,
	  height: 2,
	  borderRadius: 1,
	  backgroundColor: 'currentColor'
	}, ownerState.orientation === 'horizontal' && {
	  top: '50%',
	  transform: 'translate(-1px, -50%)'
	}, ownerState.orientation === 'vertical' && {
	  left: '50%',
	  transform: 'translate(-50%, 1px)'
	}, markActive && {
	  backgroundColor: (theme.vars || theme).palette.background.paper,
	  opacity: 0.8
	}));
	const SliderMarkLabel = styled$1('span', {
	  name: 'MuiSlider',
	  slot: 'MarkLabel',
	  shouldForwardProp: prop => slotShouldForwardProp(prop) && prop !== 'markLabelActive',
	  overridesResolver: (props, styles) => styles.markLabel
	})(({
	  theme,
	  ownerState,
	  markLabelActive
	}) => _extends({}, theme.typography.body2, {
	  color: (theme.vars || theme).palette.text.secondary,
	  position: 'absolute',
	  whiteSpace: 'nowrap'
	}, ownerState.orientation === 'horizontal' && {
	  top: 30,
	  transform: 'translateX(-50%)',
	  '@media (pointer: coarse)': {
	    top: 40
	  }
	}, ownerState.orientation === 'vertical' && {
	  left: 36,
	  transform: 'translateY(50%)',
	  '@media (pointer: coarse)': {
	    left: 44
	  }
	}, markLabelActive && {
	  color: (theme.vars || theme).palette.text.primary
	}));
	const useUtilityClasses$K = ownerState => {
	  const {
	    disabled,
	    dragging,
	    marked,
	    orientation,
	    track,
	    classes,
	    color,
	    size
	  } = ownerState;
	  const slots = {
	    root: ['root', disabled && 'disabled', dragging && 'dragging', marked && 'marked', orientation === 'vertical' && 'vertical', track === 'inverted' && 'trackInverted', track === false && 'trackFalse', color && `color${capitalize(color)}`, size && `size${capitalize(size)}`],
	    rail: ['rail'],
	    track: ['track'],
	    mark: ['mark'],
	    markActive: ['markActive'],
	    markLabel: ['markLabel'],
	    markLabelActive: ['markLabelActive'],
	    valueLabel: ['valueLabel'],
	    thumb: ['thumb', disabled && 'disabled', size && `thumbSize${capitalize(size)}`, color && `thumbColor${capitalize(color)}`],
	    active: ['active'],
	    disabled: ['disabled'],
	    focusVisible: ['focusVisible']
	  };
	  return composeClasses(slots, getSliderUtilityClass, classes);
	};
	const Forward = ({
	  children
	}) => children;
	const Slider = /*#__PURE__*/reactExports.forwardRef(function Slider(inputProps, ref) {
	  var _ref, _slots$root, _ref2, _slots$rail, _ref3, _slots$track, _ref4, _slots$thumb, _ref5, _slots$valueLabel, _ref6, _slots$mark, _ref7, _slots$markLabel, _ref8, _slots$input, _slotProps$root, _slotProps$rail, _slotProps$track, _slotProps$thumb, _slotProps$valueLabel, _slotProps$mark, _slotProps$markLabel, _slotProps$input;
	  const props = useThemeProps({
	    props: inputProps,
	    name: 'MuiSlider'
	  });
	  const theme = useTheme();
	  const isRtl = theme.direction === 'rtl';
	  const {
	      'aria-label': ariaLabel,
	      'aria-valuetext': ariaValuetext,
	      'aria-labelledby': ariaLabelledby,
	      // eslint-disable-next-line react/prop-types
	      component = 'span',
	      components = {},
	      componentsProps = {},
	      color = 'primary',
	      classes: classesProp,
	      className,
	      disableSwap = false,
	      disabled = false,
	      getAriaLabel,
	      getAriaValueText,
	      marks: marksProp = false,
	      max = 100,
	      min = 0,
	      orientation = 'horizontal',
	      size = 'medium',
	      step = 1,
	      scale = Identity,
	      slotProps,
	      slots,
	      track = 'normal',
	      valueLabelDisplay = 'off',
	      valueLabelFormat = Identity
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$V);
	  const ownerState = _extends({}, props, {
	    isRtl,
	    max,
	    min,
	    classes: classesProp,
	    disabled,
	    disableSwap,
	    orientation,
	    marks: marksProp,
	    color,
	    size,
	    step,
	    scale,
	    track,
	    valueLabelDisplay,
	    valueLabelFormat
	  });
	  const {
	    axisProps,
	    getRootProps,
	    getHiddenInputProps,
	    getThumbProps,
	    open,
	    active,
	    axis,
	    focusedThumbIndex,
	    range,
	    dragging,
	    marks,
	    values,
	    trackOffset,
	    trackLeap,
	    getThumbStyle
	  } = useSlider(_extends({}, ownerState, {
	    rootRef: ref
	  }));
	  ownerState.marked = marks.length > 0 && marks.some(mark => mark.label);
	  ownerState.dragging = dragging;
	  ownerState.focusedThumbIndex = focusedThumbIndex;
	  const classes = useUtilityClasses$K(ownerState);

	  // support both `slots` and `components` for backward compatibility
	  const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : SliderRoot;
	  const RailSlot = (_ref2 = (_slots$rail = slots == null ? void 0 : slots.rail) != null ? _slots$rail : components.Rail) != null ? _ref2 : SliderRail;
	  const TrackSlot = (_ref3 = (_slots$track = slots == null ? void 0 : slots.track) != null ? _slots$track : components.Track) != null ? _ref3 : SliderTrack;
	  const ThumbSlot = (_ref4 = (_slots$thumb = slots == null ? void 0 : slots.thumb) != null ? _slots$thumb : components.Thumb) != null ? _ref4 : SliderThumb;
	  const ValueLabelSlot = (_ref5 = (_slots$valueLabel = slots == null ? void 0 : slots.valueLabel) != null ? _slots$valueLabel : components.ValueLabel) != null ? _ref5 : SliderValueLabel;
	  const MarkSlot = (_ref6 = (_slots$mark = slots == null ? void 0 : slots.mark) != null ? _slots$mark : components.Mark) != null ? _ref6 : SliderMark;
	  const MarkLabelSlot = (_ref7 = (_slots$markLabel = slots == null ? void 0 : slots.markLabel) != null ? _slots$markLabel : components.MarkLabel) != null ? _ref7 : SliderMarkLabel;
	  const InputSlot = (_ref8 = (_slots$input = slots == null ? void 0 : slots.input) != null ? _slots$input : components.Input) != null ? _ref8 : 'input';
	  const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
	  const railSlotProps = (_slotProps$rail = slotProps == null ? void 0 : slotProps.rail) != null ? _slotProps$rail : componentsProps.rail;
	  const trackSlotProps = (_slotProps$track = slotProps == null ? void 0 : slotProps.track) != null ? _slotProps$track : componentsProps.track;
	  const thumbSlotProps = (_slotProps$thumb = slotProps == null ? void 0 : slotProps.thumb) != null ? _slotProps$thumb : componentsProps.thumb;
	  const valueLabelSlotProps = (_slotProps$valueLabel = slotProps == null ? void 0 : slotProps.valueLabel) != null ? _slotProps$valueLabel : componentsProps.valueLabel;
	  const markSlotProps = (_slotProps$mark = slotProps == null ? void 0 : slotProps.mark) != null ? _slotProps$mark : componentsProps.mark;
	  const markLabelSlotProps = (_slotProps$markLabel = slotProps == null ? void 0 : slotProps.markLabel) != null ? _slotProps$markLabel : componentsProps.markLabel;
	  const inputSlotProps = (_slotProps$input = slotProps == null ? void 0 : slotProps.input) != null ? _slotProps$input : componentsProps.input;
	  const rootProps = useSlotProps({
	    elementType: RootSlot,
	    getSlotProps: getRootProps,
	    externalSlotProps: rootSlotProps,
	    externalForwardedProps: other,
	    additionalProps: _extends({}, shouldSpreadAdditionalProps$1(RootSlot) && {
	      as: component
	    }),
	    ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
	    className: [classes.root, className]
	  });
	  const railProps = useSlotProps({
	    elementType: RailSlot,
	    externalSlotProps: railSlotProps,
	    ownerState,
	    className: classes.rail
	  });
	  const trackProps = useSlotProps({
	    elementType: TrackSlot,
	    externalSlotProps: trackSlotProps,
	    additionalProps: {
	      style: _extends({}, axisProps[axis].offset(trackOffset), axisProps[axis].leap(trackLeap))
	    },
	    ownerState: _extends({}, ownerState, trackSlotProps == null ? void 0 : trackSlotProps.ownerState),
	    className: classes.track
	  });
	  const thumbProps = useSlotProps({
	    elementType: ThumbSlot,
	    getSlotProps: getThumbProps,
	    externalSlotProps: thumbSlotProps,
	    ownerState: _extends({}, ownerState, thumbSlotProps == null ? void 0 : thumbSlotProps.ownerState),
	    className: classes.thumb
	  });
	  const valueLabelProps = useSlotProps({
	    elementType: ValueLabelSlot,
	    externalSlotProps: valueLabelSlotProps,
	    ownerState: _extends({}, ownerState, valueLabelSlotProps == null ? void 0 : valueLabelSlotProps.ownerState),
	    className: classes.valueLabel
	  });
	  const markProps = useSlotProps({
	    elementType: MarkSlot,
	    externalSlotProps: markSlotProps,
	    ownerState,
	    className: classes.mark
	  });
	  const markLabelProps = useSlotProps({
	    elementType: MarkLabelSlot,
	    externalSlotProps: markLabelSlotProps,
	    ownerState,
	    className: classes.markLabel
	  });
	  const inputSliderProps = useSlotProps({
	    elementType: InputSlot,
	    getSlotProps: getHiddenInputProps,
	    externalSlotProps: inputSlotProps,
	    ownerState
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(RootSlot, _extends({}, rootProps, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(RailSlot, _extends({}, railProps)), /*#__PURE__*/jsxRuntimeExports.jsx(TrackSlot, _extends({}, trackProps)), marks.filter(mark => mark.value >= min && mark.value <= max).map((mark, index) => {
	      const percent = valueToPercent(mark.value, min, max);
	      const style = axisProps[axis].offset(percent);
	      let markActive;
	      if (track === false) {
	        markActive = values.indexOf(mark.value) !== -1;
	      } else {
	        markActive = track === 'normal' && (range ? mark.value >= values[0] && mark.value <= values[values.length - 1] : mark.value <= values[0]) || track === 'inverted' && (range ? mark.value <= values[0] || mark.value >= values[values.length - 1] : mark.value >= values[0]);
	      }
	      return /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	        children: [/*#__PURE__*/jsxRuntimeExports.jsx(MarkSlot, _extends({
	          "data-index": index
	        }, markProps, !isHostComponent(MarkSlot) && {
	          markActive
	        }, {
	          style: _extends({}, style, markProps.style),
	          className: clsx(markProps.className, markActive && classes.markActive)
	        })), mark.label != null ? /*#__PURE__*/jsxRuntimeExports.jsx(MarkLabelSlot, _extends({
	          "aria-hidden": true,
	          "data-index": index
	        }, markLabelProps, !isHostComponent(MarkLabelSlot) && {
	          markLabelActive: markActive
	        }, {
	          style: _extends({}, style, markLabelProps.style),
	          className: clsx(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
	          children: mark.label
	        })) : null]
	      }, index);
	    }), values.map((value, index) => {
	      const percent = valueToPercent(value, min, max);
	      const style = axisProps[axis].offset(percent);
	      const ValueLabelComponent = valueLabelDisplay === 'off' ? Forward : ValueLabelSlot;
	      return /*#__PURE__*/(
	        /* TODO v6: Change component structure. It will help in avoiding the complicated React.cloneElement API added in SliderValueLabel component. Should be: Thumb -> Input, ValueLabel. Follow Joy UI's Slider structure. */
	        jsxRuntimeExports.jsx(ValueLabelComponent, _extends({}, !isHostComponent(ValueLabelComponent) && {
	          valueLabelFormat,
	          valueLabelDisplay,
	          value: typeof valueLabelFormat === 'function' ? valueLabelFormat(scale(value), index) : valueLabelFormat,
	          index,
	          open: open === index || active === index || valueLabelDisplay === 'on',
	          disabled
	        }, valueLabelProps, {
	          children: /*#__PURE__*/jsxRuntimeExports.jsx(ThumbSlot, _extends({
	            "data-index": index
	          }, thumbProps, {
	            className: clsx(classes.thumb, thumbProps.className, active === index && classes.active, focusedThumbIndex === index && classes.focusVisible),
	            style: _extends({}, style, getThumbStyle(index), thumbProps.style),
	            children: /*#__PURE__*/jsxRuntimeExports.jsx(InputSlot, _extends({
	              "data-index": index,
	              "aria-label": getAriaLabel ? getAriaLabel(index) : ariaLabel,
	              "aria-valuenow": scale(value),
	              "aria-labelledby": ariaLabelledby,
	              "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index) : ariaValuetext,
	              value: values[index]
	            }, inputSliderProps))
	          }))
	        }), index)
	      );
	    })]
	  }));
	});
	var Slider$1 = Slider;

	function getTooltipUtilityClass(slot) {
	  return generateUtilityClass('MuiTooltip', slot);
	}
	const tooltipClasses = generateUtilityClasses('MuiTooltip', ['popper', 'popperInteractive', 'popperArrow', 'popperClose', 'tooltip', 'tooltipArrow', 'touch', 'tooltipPlacementLeft', 'tooltipPlacementRight', 'tooltipPlacementTop', 'tooltipPlacementBottom', 'arrow']);
	var tooltipClasses$1 = tooltipClasses;

	const _excluded$U = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "slotProps", "slots", "title", "TransitionComponent", "TransitionProps"];
	function round(value) {
	  return Math.round(value * 1e5) / 1e5;
	}
	const useUtilityClasses$J = ownerState => {
	  const {
	    classes,
	    disableInteractive,
	    arrow,
	    touch,
	    placement
	  } = ownerState;
	  const slots = {
	    popper: ['popper', !disableInteractive && 'popperInteractive', arrow && 'popperArrow'],
	    tooltip: ['tooltip', arrow && 'tooltipArrow', touch && 'touch', `tooltipPlacement${capitalize(placement.split('-')[0])}`],
	    arrow: ['arrow']
	  };
	  return composeClasses(slots, getTooltipUtilityClass, classes);
	};
	const TooltipPopper = styled$1(MuiPopper, {
	  name: 'MuiTooltip',
	  slot: 'Popper',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.popper, !ownerState.disableInteractive && styles.popperInteractive, ownerState.arrow && styles.popperArrow, !ownerState.open && styles.popperClose];
	  }
	})(({
	  theme,
	  ownerState,
	  open
	}) => _extends({
	  zIndex: (theme.vars || theme).zIndex.tooltip,
	  pointerEvents: 'none'
	}, !ownerState.disableInteractive && {
	  pointerEvents: 'auto'
	}, !open && {
	  pointerEvents: 'none'
	}, ownerState.arrow && {
	  [`&[data-popper-placement*="bottom"] .${tooltipClasses$1.arrow}`]: {
	    top: 0,
	    marginTop: '-0.71em',
	    '&::before': {
	      transformOrigin: '0 100%'
	    }
	  },
	  [`&[data-popper-placement*="top"] .${tooltipClasses$1.arrow}`]: {
	    bottom: 0,
	    marginBottom: '-0.71em',
	    '&::before': {
	      transformOrigin: '100% 0'
	    }
	  },
	  [`&[data-popper-placement*="right"] .${tooltipClasses$1.arrow}`]: _extends({}, !ownerState.isRtl ? {
	    left: 0,
	    marginLeft: '-0.71em'
	  } : {
	    right: 0,
	    marginRight: '-0.71em'
	  }, {
	    height: '1em',
	    width: '0.71em',
	    '&::before': {
	      transformOrigin: '100% 100%'
	    }
	  }),
	  [`&[data-popper-placement*="left"] .${tooltipClasses$1.arrow}`]: _extends({}, !ownerState.isRtl ? {
	    right: 0,
	    marginRight: '-0.71em'
	  } : {
	    left: 0,
	    marginLeft: '-0.71em'
	  }, {
	    height: '1em',
	    width: '0.71em',
	    '&::before': {
	      transformOrigin: '0 0'
	    }
	  })
	}));
	const TooltipTooltip = styled$1('div', {
	  name: 'MuiTooltip',
	  slot: 'Tooltip',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.tooltip, ownerState.touch && styles.touch, ownerState.arrow && styles.tooltipArrow, styles[`tooltipPlacement${capitalize(ownerState.placement.split('-')[0])}`]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  backgroundColor: theme.vars ? theme.vars.palette.Tooltip.bg : alpha(theme.palette.grey[700], 0.92),
	  borderRadius: (theme.vars || theme).shape.borderRadius,
	  color: (theme.vars || theme).palette.common.white,
	  fontFamily: theme.typography.fontFamily,
	  padding: '4px 8px',
	  fontSize: theme.typography.pxToRem(11),
	  maxWidth: 300,
	  margin: 2,
	  wordWrap: 'break-word',
	  fontWeight: theme.typography.fontWeightMedium
	}, ownerState.arrow && {
	  position: 'relative',
	  margin: 0
	}, ownerState.touch && {
	  padding: '8px 16px',
	  fontSize: theme.typography.pxToRem(14),
	  lineHeight: `${round(16 / 14)}em`,
	  fontWeight: theme.typography.fontWeightRegular
	}, {
	  [`.${tooltipClasses$1.popper}[data-popper-placement*="left"] &`]: _extends({
	    transformOrigin: 'right center'
	  }, !ownerState.isRtl ? _extends({
	    marginRight: '14px'
	  }, ownerState.touch && {
	    marginRight: '24px'
	  }) : _extends({
	    marginLeft: '14px'
	  }, ownerState.touch && {
	    marginLeft: '24px'
	  })),
	  [`.${tooltipClasses$1.popper}[data-popper-placement*="right"] &`]: _extends({
	    transformOrigin: 'left center'
	  }, !ownerState.isRtl ? _extends({
	    marginLeft: '14px'
	  }, ownerState.touch && {
	    marginLeft: '24px'
	  }) : _extends({
	    marginRight: '14px'
	  }, ownerState.touch && {
	    marginRight: '24px'
	  })),
	  [`.${tooltipClasses$1.popper}[data-popper-placement*="top"] &`]: _extends({
	    transformOrigin: 'center bottom',
	    marginBottom: '14px'
	  }, ownerState.touch && {
	    marginBottom: '24px'
	  }),
	  [`.${tooltipClasses$1.popper}[data-popper-placement*="bottom"] &`]: _extends({
	    transformOrigin: 'center top',
	    marginTop: '14px'
	  }, ownerState.touch && {
	    marginTop: '24px'
	  })
	}));
	const TooltipArrow = styled$1('span', {
	  name: 'MuiTooltip',
	  slot: 'Arrow',
	  overridesResolver: (props, styles) => styles.arrow
	})(({
	  theme
	}) => ({
	  overflow: 'hidden',
	  position: 'absolute',
	  width: '1em',
	  height: '0.71em' /* = width / sqrt(2) = (length of the hypotenuse) */,
	  boxSizing: 'border-box',
	  color: theme.vars ? theme.vars.palette.Tooltip.bg : alpha(theme.palette.grey[700], 0.9),
	  '&::before': {
	    content: '""',
	    margin: 'auto',
	    display: 'block',
	    width: '100%',
	    height: '100%',
	    backgroundColor: 'currentColor',
	    transform: 'rotate(45deg)'
	  }
	}));
	let hystersisOpen = false;
	let hystersisTimer = null;
	let cursorPosition = {
	  x: 0,
	  y: 0
	};
	function composeEventHandler(handler, eventHandler) {
	  return event => {
	    if (eventHandler) {
	      eventHandler(event);
	    }
	    handler(event);
	  };
	}

	// TODO v6: Remove PopperComponent, PopperProps, TransitionComponent and TransitionProps.
	const Tooltip = /*#__PURE__*/reactExports.forwardRef(function Tooltip(inProps, ref) {
	  var _ref, _slots$popper, _ref2, _ref3, _slots$transition, _ref4, _slots$tooltip, _ref5, _slots$arrow, _slotProps$popper, _ref6, _slotProps$popper2, _slotProps$transition, _slotProps$tooltip, _ref7, _slotProps$tooltip2, _slotProps$arrow, _ref8, _slotProps$arrow2;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTooltip'
	  });
	  const {
	      arrow = false,
	      children: childrenProp,
	      components = {},
	      componentsProps = {},
	      describeChild = false,
	      disableFocusListener = false,
	      disableHoverListener = false,
	      disableInteractive: disableInteractiveProp = false,
	      disableTouchListener = false,
	      enterDelay = 100,
	      enterNextDelay = 0,
	      enterTouchDelay = 700,
	      followCursor = false,
	      id: idProp,
	      leaveDelay = 0,
	      leaveTouchDelay = 1500,
	      onClose,
	      onOpen,
	      open: openProp,
	      placement = 'bottom',
	      PopperComponent: PopperComponentProp,
	      PopperProps = {},
	      slotProps = {},
	      slots = {},
	      title,
	      TransitionComponent: TransitionComponentProp = Grow$1,
	      TransitionProps
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$U);

	  // to prevent runtime errors, developers will need to provide a child as a React element anyway.
	  const children = /*#__PURE__*/ /*#__PURE__*/reactExports.isValidElement(childrenProp) ? childrenProp : /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	    children: childrenProp
	  });
	  const theme = useTheme();
	  const isRtl = theme.direction === 'rtl';
	  const [childNode, setChildNode] = reactExports.useState();
	  const [arrowRef, setArrowRef] = reactExports.useState(null);
	  const ignoreNonTouchEvents = reactExports.useRef(false);
	  const disableInteractive = disableInteractiveProp || followCursor;
	  const closeTimer = reactExports.useRef();
	  const enterTimer = reactExports.useRef();
	  const leaveTimer = reactExports.useRef();
	  const touchTimer = reactExports.useRef();
	  const [openState, setOpenState] = useControlled({
	    controlled: openProp,
	    default: false,
	    name: 'Tooltip',
	    state: 'open'
	  });
	  let open = openState;
	  const id = useId(idProp);
	  const prevUserSelect = reactExports.useRef();
	  const stopTouchInteraction = reactExports.useCallback(() => {
	    if (prevUserSelect.current !== undefined) {
	      document.body.style.WebkitUserSelect = prevUserSelect.current;
	      prevUserSelect.current = undefined;
	    }
	    clearTimeout(touchTimer.current);
	  }, []);
	  reactExports.useEffect(() => {
	    return () => {
	      clearTimeout(closeTimer.current);
	      clearTimeout(enterTimer.current);
	      clearTimeout(leaveTimer.current);
	      stopTouchInteraction();
	    };
	  }, [stopTouchInteraction]);
	  const handleOpen = event => {
	    clearTimeout(hystersisTimer);
	    hystersisOpen = true;

	    // The mouseover event will trigger for every nested element in the tooltip.
	    // We can skip rerendering when the tooltip is already open.
	    // We are using the mouseover event instead of the mouseenter event to fix a hide/show issue.
	    setOpenState(true);
	    if (onOpen && !open) {
	      onOpen(event);
	    }
	  };
	  const handleClose = useEventCallback(
	  /**
	   * @param {React.SyntheticEvent | Event} event
	   */
	  event => {
	    clearTimeout(hystersisTimer);
	    hystersisTimer = setTimeout(() => {
	      hystersisOpen = false;
	    }, 800 + leaveDelay);
	    setOpenState(false);
	    if (onClose && open) {
	      onClose(event);
	    }
	    clearTimeout(closeTimer.current);
	    closeTimer.current = setTimeout(() => {
	      ignoreNonTouchEvents.current = false;
	    }, theme.transitions.duration.shortest);
	  });
	  const handleEnter = event => {
	    if (ignoreNonTouchEvents.current && event.type !== 'touchstart') {
	      return;
	    }

	    // Remove the title ahead of time.
	    // We don't want to wait for the next render commit.
	    // We would risk displaying two tooltips at the same time (native + this one).
	    if (childNode) {
	      childNode.removeAttribute('title');
	    }
	    clearTimeout(enterTimer.current);
	    clearTimeout(leaveTimer.current);
	    if (enterDelay || hystersisOpen && enterNextDelay) {
	      enterTimer.current = setTimeout(() => {
	        handleOpen(event);
	      }, hystersisOpen ? enterNextDelay : enterDelay);
	    } else {
	      handleOpen(event);
	    }
	  };
	  const handleLeave = event => {
	    clearTimeout(enterTimer.current);
	    clearTimeout(leaveTimer.current);
	    leaveTimer.current = setTimeout(() => {
	      handleClose(event);
	    }, leaveDelay);
	  };
	  const {
	    isFocusVisibleRef,
	    onBlur: handleBlurVisible,
	    onFocus: handleFocusVisible,
	    ref: focusVisibleRef
	  } = useIsFocusVisible();
	  // We don't necessarily care about the focusVisible state (which is safe to access via ref anyway).
	  // We just need to re-render the Tooltip if the focus-visible state changes.
	  const [, setChildIsFocusVisible] = reactExports.useState(false);
	  const handleBlur = event => {
	    handleBlurVisible(event);
	    if (isFocusVisibleRef.current === false) {
	      setChildIsFocusVisible(false);
	      handleLeave(event);
	    }
	  };
	  const handleFocus = event => {
	    // Workaround for https://github.com/facebook/react/issues/7769
	    // The autoFocus of React might trigger the event before the componentDidMount.
	    // We need to account for this eventuality.
	    if (!childNode) {
	      setChildNode(event.currentTarget);
	    }
	    handleFocusVisible(event);
	    if (isFocusVisibleRef.current === true) {
	      setChildIsFocusVisible(true);
	      handleEnter(event);
	    }
	  };
	  const detectTouchStart = event => {
	    ignoreNonTouchEvents.current = true;
	    const childrenProps = children.props;
	    if (childrenProps.onTouchStart) {
	      childrenProps.onTouchStart(event);
	    }
	  };
	  const handleMouseOver = handleEnter;
	  const handleMouseLeave = handleLeave;
	  const handleTouchStart = event => {
	    detectTouchStart(event);
	    clearTimeout(leaveTimer.current);
	    clearTimeout(closeTimer.current);
	    stopTouchInteraction();
	    prevUserSelect.current = document.body.style.WebkitUserSelect;
	    // Prevent iOS text selection on long-tap.
	    document.body.style.WebkitUserSelect = 'none';
	    touchTimer.current = setTimeout(() => {
	      document.body.style.WebkitUserSelect = prevUserSelect.current;
	      handleEnter(event);
	    }, enterTouchDelay);
	  };
	  const handleTouchEnd = event => {
	    if (children.props.onTouchEnd) {
	      children.props.onTouchEnd(event);
	    }
	    stopTouchInteraction();
	    clearTimeout(leaveTimer.current);
	    leaveTimer.current = setTimeout(() => {
	      handleClose(event);
	    }, leaveTouchDelay);
	  };
	  reactExports.useEffect(() => {
	    if (!open) {
	      return undefined;
	    }

	    /**
	     * @param {KeyboardEvent} nativeEvent
	     */
	    function handleKeyDown(nativeEvent) {
	      // IE11, Edge (prior to using Bink?) use 'Esc'
	      if (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc') {
	        handleClose(nativeEvent);
	      }
	    }
	    document.addEventListener('keydown', handleKeyDown);
	    return () => {
	      document.removeEventListener('keydown', handleKeyDown);
	    };
	  }, [handleClose, open]);
	  const handleRef = useForkRef(children.ref, focusVisibleRef, setChildNode, ref);

	  // There is no point in displaying an empty tooltip.
	  if (!title && title !== 0) {
	    open = false;
	  }
	  const popperRef = reactExports.useRef();
	  const handleMouseMove = event => {
	    const childrenProps = children.props;
	    if (childrenProps.onMouseMove) {
	      childrenProps.onMouseMove(event);
	    }
	    cursorPosition = {
	      x: event.clientX,
	      y: event.clientY
	    };
	    if (popperRef.current) {
	      popperRef.current.update();
	    }
	  };
	  const nameOrDescProps = {};
	  const titleIsString = typeof title === 'string';
	  if (describeChild) {
	    nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
	    nameOrDescProps['aria-describedby'] = open ? id : null;
	  } else {
	    nameOrDescProps['aria-label'] = titleIsString ? title : null;
	    nameOrDescProps['aria-labelledby'] = open && !titleIsString ? id : null;
	  }
	  const childrenProps = _extends({}, nameOrDescProps, other, children.props, {
	    className: clsx(other.className, children.props.className),
	    onTouchStart: detectTouchStart,
	    ref: handleRef
	  }, followCursor ? {
	    onMouseMove: handleMouseMove
	  } : {});
	  const interactiveWrapperListeners = {};
	  if (!disableTouchListener) {
	    childrenProps.onTouchStart = handleTouchStart;
	    childrenProps.onTouchEnd = handleTouchEnd;
	  }
	  if (!disableHoverListener) {
	    childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
	    childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
	    if (!disableInteractive) {
	      interactiveWrapperListeners.onMouseOver = handleMouseOver;
	      interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
	    }
	  }
	  if (!disableFocusListener) {
	    childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
	    childrenProps.onBlur = composeEventHandler(handleBlur, childrenProps.onBlur);
	    if (!disableInteractive) {
	      interactiveWrapperListeners.onFocus = handleFocus;
	      interactiveWrapperListeners.onBlur = handleBlur;
	    }
	  }
	  const popperOptions = reactExports.useMemo(() => {
	    var _PopperProps$popperOp;
	    let tooltipModifiers = [{
	      name: 'arrow',
	      enabled: Boolean(arrowRef),
	      options: {
	        element: arrowRef,
	        padding: 4
	      }
	    }];
	    if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
	      tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
	    }
	    return _extends({}, PopperProps.popperOptions, {
	      modifiers: tooltipModifiers
	    });
	  }, [arrowRef, PopperProps]);
	  const ownerState = _extends({}, props, {
	    isRtl,
	    arrow,
	    disableInteractive,
	    placement,
	    PopperComponentProp,
	    touch: ignoreNonTouchEvents.current
	  });
	  const classes = useUtilityClasses$J(ownerState);
	  const PopperComponent = (_ref = (_slots$popper = slots.popper) != null ? _slots$popper : components.Popper) != null ? _ref : TooltipPopper;
	  const TransitionComponent = (_ref2 = (_ref3 = (_slots$transition = slots.transition) != null ? _slots$transition : components.Transition) != null ? _ref3 : TransitionComponentProp) != null ? _ref2 : Grow$1;
	  const TooltipComponent = (_ref4 = (_slots$tooltip = slots.tooltip) != null ? _slots$tooltip : components.Tooltip) != null ? _ref4 : TooltipTooltip;
	  const ArrowComponent = (_ref5 = (_slots$arrow = slots.arrow) != null ? _slots$arrow : components.Arrow) != null ? _ref5 : TooltipArrow;
	  const popperProps = appendOwnerState(PopperComponent, _extends({}, PopperProps, (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper, {
	    className: clsx(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_ref6 = (_slotProps$popper2 = slotProps.popper) != null ? _slotProps$popper2 : componentsProps.popper) == null ? void 0 : _ref6.className)
	  }), ownerState);
	  const transitionProps = appendOwnerState(TransitionComponent, _extends({}, TransitionProps, (_slotProps$transition = slotProps.transition) != null ? _slotProps$transition : componentsProps.transition), ownerState);
	  const tooltipProps = appendOwnerState(TooltipComponent, _extends({}, (_slotProps$tooltip = slotProps.tooltip) != null ? _slotProps$tooltip : componentsProps.tooltip, {
	    className: clsx(classes.tooltip, (_ref7 = (_slotProps$tooltip2 = slotProps.tooltip) != null ? _slotProps$tooltip2 : componentsProps.tooltip) == null ? void 0 : _ref7.className)
	  }), ownerState);
	  const tooltipArrowProps = appendOwnerState(ArrowComponent, _extends({}, (_slotProps$arrow = slotProps.arrow) != null ? _slotProps$arrow : componentsProps.arrow, {
	    className: clsx(classes.arrow, (_ref8 = (_slotProps$arrow2 = slotProps.arrow) != null ? _slotProps$arrow2 : componentsProps.arrow) == null ? void 0 : _ref8.className)
	  }), ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	    children: [/*#__PURE__*/reactExports.cloneElement(children, childrenProps), /*#__PURE__*/jsxRuntimeExports.jsx(PopperComponent, _extends({
	      as: PopperComponentProp != null ? PopperComponentProp : MuiPopper,
	      placement: placement,
	      anchorEl: followCursor ? {
	        getBoundingClientRect: () => ({
	          top: cursorPosition.y,
	          left: cursorPosition.x,
	          right: cursorPosition.x,
	          bottom: cursorPosition.y,
	          width: 0,
	          height: 0
	        })
	      } : childNode,
	      popperRef: popperRef,
	      open: childNode ? open : false,
	      id: id,
	      transition: true
	    }, interactiveWrapperListeners, popperProps, {
	      popperOptions: popperOptions,
	      children: ({
	        TransitionProps: TransitionPropsInner
	      }) => /*#__PURE__*/jsxRuntimeExports.jsx(TransitionComponent, _extends({
	        timeout: theme.transitions.duration.shorter
	      }, TransitionPropsInner, transitionProps, {
	        children: /*#__PURE__*/jsxRuntimeExports.jsxs(TooltipComponent, _extends({}, tooltipProps, {
	          children: [title, arrow ? /*#__PURE__*/jsxRuntimeExports.jsx(ArrowComponent, _extends({}, tooltipArrowProps, {
	            ref: setArrowRef
	          })) : null]
	        }))
	      }))
	    }))]
	  });
	});
	var Tooltip$1 = Tooltip;

	/**
	 * Provides information about the current step in Stepper.
	 */
	const StepperContext = /*#__PURE__*/reactExports.createContext({});
	var StepperContext$1 = StepperContext;

	/**
	 * Provides information about the current step in Stepper.
	 */
	const StepContext = /*#__PURE__*/reactExports.createContext({});
	var StepContext$1 = StepContext;

	function getStepUtilityClass(slot) {
	  return generateUtilityClass('MuiStep', slot);
	}
	generateUtilityClasses('MuiStep', ['root', 'horizontal', 'vertical', 'alternativeLabel', 'completed']);

	const _excluded$T = ["active", "children", "className", "component", "completed", "disabled", "expanded", "index", "last"];
	const useUtilityClasses$I = ownerState => {
	  const {
	    classes,
	    orientation,
	    alternativeLabel,
	    completed
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation, alternativeLabel && 'alternativeLabel', completed && 'completed']
	  };
	  return composeClasses(slots, getStepUtilityClass, classes);
	};
	const StepRoot = styled$1('div', {
	  name: 'MuiStep',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.orientation], ownerState.alternativeLabel && styles.alternativeLabel, ownerState.completed && styles.completed];
	  }
	})(({
	  ownerState
	}) => _extends({}, ownerState.orientation === 'horizontal' && {
	  paddingLeft: 8,
	  paddingRight: 8
	}, ownerState.alternativeLabel && {
	  flex: 1,
	  position: 'relative'
	}));
	const Step = /*#__PURE__*/reactExports.forwardRef(function Step(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiStep'
	  });
	  const {
	      active: activeProp,
	      children,
	      className,
	      component = 'div',
	      completed: completedProp,
	      disabled: disabledProp,
	      expanded = false,
	      index,
	      last
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$T);
	  const {
	    activeStep,
	    connector,
	    alternativeLabel,
	    orientation,
	    nonLinear
	  } = reactExports.useContext(StepperContext$1);
	  let [active = false, completed = false, disabled = false] = [activeProp, completedProp, disabledProp];
	  if (activeStep === index) {
	    active = activeProp !== undefined ? activeProp : true;
	  } else if (!nonLinear && activeStep > index) {
	    completed = completedProp !== undefined ? completedProp : true;
	  } else if (!nonLinear && activeStep < index) {
	    disabled = disabledProp !== undefined ? disabledProp : true;
	  }
	  const contextValue = reactExports.useMemo(() => ({
	    index,
	    last,
	    expanded,
	    icon: index + 1,
	    active,
	    completed,
	    disabled
	  }), [index, last, expanded, active, completed, disabled]);
	  const ownerState = _extends({}, props, {
	    active,
	    orientation,
	    alternativeLabel,
	    completed,
	    disabled,
	    expanded,
	    component
	  });
	  const classes = useUtilityClasses$I(ownerState);
	  const newChildren = /*#__PURE__*/jsxRuntimeExports.jsxs(StepRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: [connector && alternativeLabel && index !== 0 ? connector : null, children]
	  }));
	  return /*#__PURE__*/jsxRuntimeExports.jsx(StepContext$1.Provider, {
	    value: contextValue,
	    children: connector && !alternativeLabel && index !== 0 ? /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	      children: [connector, newChildren]
	    }) : newChildren
	  });
	});
	var Step$1 = Step;

	var CheckCircle = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
	}), 'CheckCircle');

	var Warning = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
	}), 'Warning');

	function getStepIconUtilityClass(slot) {
	  return generateUtilityClass('MuiStepIcon', slot);
	}
	const stepIconClasses = generateUtilityClasses('MuiStepIcon', ['root', 'active', 'completed', 'error', 'text']);
	var stepIconClasses$1 = stepIconClasses;

	var _circle;
	const _excluded$S = ["active", "className", "completed", "error", "icon"];
	const useUtilityClasses$H = ownerState => {
	  const {
	    classes,
	    active,
	    completed,
	    error
	  } = ownerState;
	  const slots = {
	    root: ['root', active && 'active', completed && 'completed', error && 'error'],
	    text: ['text']
	  };
	  return composeClasses(slots, getStepIconUtilityClass, classes);
	};
	const StepIconRoot = styled$1(SvgIcon$1, {
	  name: 'MuiStepIcon',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme
	}) => ({
	  display: 'block',
	  transition: theme.transitions.create('color', {
	    duration: theme.transitions.duration.shortest
	  }),
	  color: (theme.vars || theme).palette.text.disabled,
	  [`&.${stepIconClasses$1.completed}`]: {
	    color: (theme.vars || theme).palette.primary.main
	  },
	  [`&.${stepIconClasses$1.active}`]: {
	    color: (theme.vars || theme).palette.primary.main
	  },
	  [`&.${stepIconClasses$1.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}));
	const StepIconText = styled$1('text', {
	  name: 'MuiStepIcon',
	  slot: 'Text',
	  overridesResolver: (props, styles) => styles.text
	})(({
	  theme
	}) => ({
	  fill: (theme.vars || theme).palette.primary.contrastText,
	  fontSize: theme.typography.caption.fontSize,
	  fontFamily: theme.typography.fontFamily
	}));
	const StepIcon = /*#__PURE__*/reactExports.forwardRef(function StepIcon(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiStepIcon'
	  });
	  const {
	      active = false,
	      className: classNameProp,
	      completed = false,
	      error = false,
	      icon
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$S);
	  const ownerState = _extends({}, props, {
	    active,
	    completed,
	    error
	  });
	  const classes = useUtilityClasses$H(ownerState);
	  if (typeof icon === 'number' || typeof icon === 'string') {
	    const className = clsx(classNameProp, classes.root);
	    if (error) {
	      return /*#__PURE__*/jsxRuntimeExports.jsx(StepIconRoot, _extends({
	        as: Warning,
	        className: className,
	        ref: ref,
	        ownerState: ownerState
	      }, other));
	    }
	    if (completed) {
	      return /*#__PURE__*/jsxRuntimeExports.jsx(StepIconRoot, _extends({
	        as: CheckCircle,
	        className: className,
	        ref: ref,
	        ownerState: ownerState
	      }, other));
	    }
	    return /*#__PURE__*/jsxRuntimeExports.jsxs(StepIconRoot, _extends({
	      className: className,
	      ref: ref,
	      ownerState: ownerState
	    }, other, {
	      children: [_circle || (_circle = /*#__PURE__*/jsxRuntimeExports.jsx("circle", {
	        cx: "12",
	        cy: "12",
	        r: "12"
	      })), /*#__PURE__*/jsxRuntimeExports.jsx(StepIconText, {
	        className: classes.text,
	        x: "12",
	        y: "12",
	        textAnchor: "middle",
	        dominantBaseline: "central",
	        ownerState: ownerState,
	        children: icon
	      })]
	    }));
	  }
	  return icon;
	});
	var StepIcon$1 = StepIcon;

	function getStepLabelUtilityClass(slot) {
	  return generateUtilityClass('MuiStepLabel', slot);
	}
	const stepLabelClasses = generateUtilityClasses('MuiStepLabel', ['root', 'horizontal', 'vertical', 'label', 'active', 'completed', 'error', 'disabled', 'iconContainer', 'alternativeLabel', 'labelContainer']);
	var stepLabelClasses$1 = stepLabelClasses;

	const _excluded$R = ["children", "className", "componentsProps", "error", "icon", "optional", "slotProps", "StepIconComponent", "StepIconProps"];
	const useUtilityClasses$G = ownerState => {
	  const {
	    classes,
	    orientation,
	    active,
	    completed,
	    error,
	    disabled,
	    alternativeLabel
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation, error && 'error', disabled && 'disabled', alternativeLabel && 'alternativeLabel'],
	    label: ['label', active && 'active', completed && 'completed', error && 'error', disabled && 'disabled', alternativeLabel && 'alternativeLabel'],
	    iconContainer: ['iconContainer', active && 'active', completed && 'completed', error && 'error', disabled && 'disabled', alternativeLabel && 'alternativeLabel'],
	    labelContainer: ['labelContainer', alternativeLabel && 'alternativeLabel']
	  };
	  return composeClasses(slots, getStepLabelUtilityClass, classes);
	};
	const StepLabelRoot = styled$1('span', {
	  name: 'MuiStepLabel',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.orientation]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex',
	  alignItems: 'center',
	  [`&.${stepLabelClasses$1.alternativeLabel}`]: {
	    flexDirection: 'column'
	  },
	  [`&.${stepLabelClasses$1.disabled}`]: {
	    cursor: 'default'
	  }
	}, ownerState.orientation === 'vertical' && {
	  textAlign: 'left',
	  padding: '8px 0'
	}));
	const StepLabelLabel = styled$1('span', {
	  name: 'MuiStepLabel',
	  slot: 'Label',
	  overridesResolver: (props, styles) => styles.label
	})(({
	  theme
	}) => _extends({}, theme.typography.body2, {
	  display: 'block',
	  transition: theme.transitions.create('color', {
	    duration: theme.transitions.duration.shortest
	  }),
	  [`&.${stepLabelClasses$1.active}`]: {
	    color: (theme.vars || theme).palette.text.primary,
	    fontWeight: 500
	  },
	  [`&.${stepLabelClasses$1.completed}`]: {
	    color: (theme.vars || theme).palette.text.primary,
	    fontWeight: 500
	  },
	  [`&.${stepLabelClasses$1.alternativeLabel}`]: {
	    marginTop: 16
	  },
	  [`&.${stepLabelClasses$1.error}`]: {
	    color: (theme.vars || theme).palette.error.main
	  }
	}));
	const StepLabelIconContainer = styled$1('span', {
	  name: 'MuiStepLabel',
	  slot: 'IconContainer',
	  overridesResolver: (props, styles) => styles.iconContainer
	})(() => ({
	  flexShrink: 0,
	  // Fix IE11 issue
	  display: 'flex',
	  paddingRight: 8,
	  [`&.${stepLabelClasses$1.alternativeLabel}`]: {
	    paddingRight: 0
	  }
	}));
	const StepLabelLabelContainer = styled$1('span', {
	  name: 'MuiStepLabel',
	  slot: 'LabelContainer',
	  overridesResolver: (props, styles) => styles.labelContainer
	})(({
	  theme
	}) => ({
	  width: '100%',
	  color: (theme.vars || theme).palette.text.secondary,
	  [`&.${stepLabelClasses$1.alternativeLabel}`]: {
	    textAlign: 'center'
	  }
	}));
	const StepLabel = /*#__PURE__*/reactExports.forwardRef(function StepLabel(inProps, ref) {
	  var _slotProps$label;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiStepLabel'
	  });
	  const {
	      children,
	      className,
	      componentsProps = {},
	      error = false,
	      icon: iconProp,
	      optional,
	      slotProps = {},
	      StepIconComponent: StepIconComponentProp,
	      StepIconProps
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$R);
	  const {
	    alternativeLabel,
	    orientation
	  } = reactExports.useContext(StepperContext$1);
	  const {
	    active,
	    disabled,
	    completed,
	    icon: iconContext
	  } = reactExports.useContext(StepContext$1);
	  const icon = iconProp || iconContext;
	  let StepIconComponent = StepIconComponentProp;
	  if (icon && !StepIconComponent) {
	    StepIconComponent = StepIcon$1;
	  }
	  const ownerState = _extends({}, props, {
	    active,
	    alternativeLabel,
	    completed,
	    disabled,
	    error,
	    orientation
	  });
	  const classes = useUtilityClasses$G(ownerState);
	  const labelSlotProps = (_slotProps$label = slotProps.label) != null ? _slotProps$label : componentsProps.label;
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(StepLabelRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: [icon || StepIconComponent ? /*#__PURE__*/jsxRuntimeExports.jsx(StepLabelIconContainer, {
	      className: classes.iconContainer,
	      ownerState: ownerState,
	      children: /*#__PURE__*/jsxRuntimeExports.jsx(StepIconComponent, _extends({
	        completed: completed,
	        active: active,
	        error: error,
	        icon: icon
	      }, StepIconProps))
	    }) : null, /*#__PURE__*/jsxRuntimeExports.jsxs(StepLabelLabelContainer, {
	      className: classes.labelContainer,
	      ownerState: ownerState,
	      children: [children ? /*#__PURE__*/jsxRuntimeExports.jsx(StepLabelLabel, _extends({
	        ownerState: ownerState
	      }, labelSlotProps, {
	        className: clsx(classes.label, labelSlotProps == null ? void 0 : labelSlotProps.className),
	        children: children
	      })) : null, optional]
	    })]
	  }));
	});
	StepLabel.muiName = 'StepLabel';
	var StepLabel$1 = StepLabel;

	function getStepButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiStepButton', slot);
	}
	const stepButtonClasses = generateUtilityClasses('MuiStepButton', ['root', 'horizontal', 'vertical', 'touchRipple']);
	var stepButtonClasses$1 = stepButtonClasses;

	const _excluded$Q = ["children", "className", "icon", "optional"];
	const useUtilityClasses$F = ownerState => {
	  const {
	    classes,
	    orientation
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation],
	    touchRipple: ['touchRipple']
	  };
	  return composeClasses(slots, getStepButtonUtilityClass, classes);
	};
	const StepButtonRoot = styled$1(ButtonBase$1, {
	  name: 'MuiStepButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${stepButtonClasses$1.touchRipple}`]: styles.touchRipple
	    }, styles.root, styles[ownerState.orientation]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  width: '100%',
	  padding: '24px 16px',
	  margin: '-24px -16px',
	  boxSizing: 'content-box'
	}, ownerState.orientation === 'vertical' && {
	  justifyContent: 'flex-start',
	  padding: '8px',
	  margin: '-8px'
	}, {
	  [`& .${stepButtonClasses$1.touchRipple}`]: {
	    color: 'rgba(0, 0, 0, 0.3)'
	  }
	}));
	const StepButton = /*#__PURE__*/reactExports.forwardRef(function StepButton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiStepButton'
	  });
	  const {
	      children,
	      className,
	      icon,
	      optional
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$Q);
	  const {
	    disabled,
	    active
	  } = reactExports.useContext(StepContext$1);
	  const {
	    orientation
	  } = reactExports.useContext(StepperContext$1);
	  const ownerState = _extends({}, props, {
	    orientation
	  });
	  const classes = useUtilityClasses$F(ownerState);
	  const childProps = {
	    icon,
	    optional
	  };
	  const child = isMuiElement(children, ['StepLabel']) ? ( /*#__PURE__*/reactExports.cloneElement(children, childProps)) : /*#__PURE__*/jsxRuntimeExports.jsx(StepLabel$1, _extends({}, childProps, {
	    children: children
	  }));
	  return /*#__PURE__*/jsxRuntimeExports.jsx(StepButtonRoot, _extends({
	    focusRipple: true,
	    disabled: disabled,
	    TouchRippleProps: {
	      className: classes.touchRipple
	    },
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState,
	    "aria-current": active ? 'step' : undefined
	  }, other, {
	    children: child
	  }));
	});
	var StepButton$1 = StepButton;

	function getStepConnectorUtilityClass(slot) {
	  return generateUtilityClass('MuiStepConnector', slot);
	}
	generateUtilityClasses('MuiStepConnector', ['root', 'horizontal', 'vertical', 'alternativeLabel', 'active', 'completed', 'disabled', 'line', 'lineHorizontal', 'lineVertical']);

	const _excluded$P = ["className"];
	const useUtilityClasses$E = ownerState => {
	  const {
	    classes,
	    orientation,
	    alternativeLabel,
	    active,
	    completed,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation, alternativeLabel && 'alternativeLabel', active && 'active', completed && 'completed', disabled && 'disabled'],
	    line: ['line', `line${capitalize(orientation)}`]
	  };
	  return composeClasses(slots, getStepConnectorUtilityClass, classes);
	};
	const StepConnectorRoot = styled$1('div', {
	  name: 'MuiStepConnector',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.orientation], ownerState.alternativeLabel && styles.alternativeLabel, ownerState.completed && styles.completed];
	  }
	})(({
	  ownerState
	}) => _extends({
	  flex: '1 1 auto'
	}, ownerState.orientation === 'vertical' && {
	  marginLeft: 12 // half icon
	}, ownerState.alternativeLabel && {
	  position: 'absolute',
	  top: 8 + 4,
	  left: 'calc(-50% + 20px)',
	  right: 'calc(50% + 20px)'
	}));
	const StepConnectorLine = styled$1('span', {
	  name: 'MuiStepConnector',
	  slot: 'Line',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.line, styles[`line${capitalize(ownerState.orientation)}`]];
	  }
	})(({
	  ownerState,
	  theme
	}) => {
	  const borderColor = theme.palette.mode === 'light' ? theme.palette.grey[400] : theme.palette.grey[600];
	  return _extends({
	    display: 'block',
	    borderColor: theme.vars ? theme.vars.palette.StepConnector.border : borderColor
	  }, ownerState.orientation === 'horizontal' && {
	    borderTopStyle: 'solid',
	    borderTopWidth: 1
	  }, ownerState.orientation === 'vertical' && {
	    borderLeftStyle: 'solid',
	    borderLeftWidth: 1,
	    minHeight: 24
	  });
	});
	const StepConnector = /*#__PURE__*/reactExports.forwardRef(function StepConnector(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiStepConnector'
	  });
	  const {
	      className
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$P);
	  const {
	    alternativeLabel,
	    orientation = 'horizontal'
	  } = reactExports.useContext(StepperContext$1);
	  const {
	    active,
	    disabled,
	    completed
	  } = reactExports.useContext(StepContext$1);
	  const ownerState = _extends({}, props, {
	    alternativeLabel,
	    orientation,
	    active,
	    completed,
	    disabled
	  });
	  const classes = useUtilityClasses$E(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(StepConnectorRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(StepConnectorLine, {
	      className: classes.line,
	      ownerState: ownerState
	    })
	  }));
	});
	var StepConnector$1 = StepConnector;

	function getStepperUtilityClass(slot) {
	  return generateUtilityClass('MuiStepper', slot);
	}
	generateUtilityClasses('MuiStepper', ['root', 'horizontal', 'vertical', 'alternativeLabel']);

	const _excluded$O = ["activeStep", "alternativeLabel", "children", "className", "component", "connector", "nonLinear", "orientation"];
	const useUtilityClasses$D = ownerState => {
	  const {
	    orientation,
	    alternativeLabel,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation, alternativeLabel && 'alternativeLabel']
	  };
	  return composeClasses(slots, getStepperUtilityClass, classes);
	};
	const StepperRoot = styled$1('div', {
	  name: 'MuiStepper',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.orientation], ownerState.alternativeLabel && styles.alternativeLabel];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex'
	}, ownerState.orientation === 'horizontal' && {
	  flexDirection: 'row',
	  alignItems: 'center'
	}, ownerState.orientation === 'vertical' && {
	  flexDirection: 'column'
	}, ownerState.alternativeLabel && {
	  alignItems: 'flex-start'
	}));
	const defaultConnector = /*#__PURE__*/jsxRuntimeExports.jsx(StepConnector$1, {});
	const Stepper = /*#__PURE__*/reactExports.forwardRef(function Stepper(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiStepper'
	  });
	  const {
	      activeStep = 0,
	      alternativeLabel = false,
	      children,
	      className,
	      component = 'div',
	      connector = defaultConnector,
	      nonLinear = false,
	      orientation = 'horizontal'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$O);
	  const ownerState = _extends({}, props, {
	    alternativeLabel,
	    orientation,
	    component
	  });
	  const classes = useUtilityClasses$D(ownerState);
	  const childrenArray = reactExports.Children.toArray(children).filter(Boolean);
	  const steps = childrenArray.map((step, index) => {
	    return /*#__PURE__*/reactExports.cloneElement(step, _extends({
	      index,
	      last: index + 1 === childrenArray.length
	    }, step.props));
	  });
	  const contextValue = reactExports.useMemo(() => ({
	    activeStep,
	    alternativeLabel,
	    connector,
	    nonLinear,
	    orientation
	  }), [activeStep, alternativeLabel, connector, nonLinear, orientation]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(StepperContext$1.Provider, {
	    value: contextValue,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(StepperRoot, _extends({
	      as: component,
	      ownerState: ownerState,
	      className: clsx(classes.root, className),
	      ref: ref
	    }, other, {
	      children: steps
	    }))
	  });
	});
	var Stepper$1 = Stepper;

	function getSwitchUtilityClass(slot) {
	  return generateUtilityClass('MuiSwitch', slot);
	}
	const switchClasses = generateUtilityClasses('MuiSwitch', ['root', 'edgeStart', 'edgeEnd', 'switchBase', 'colorPrimary', 'colorSecondary', 'sizeSmall', 'sizeMedium', 'checked', 'disabled', 'input', 'thumb', 'track']);
	var switchClasses$1 = switchClasses;

	const _excluded$N = ["className", "color", "edge", "size", "sx"];
	const useUtilityClasses$C = ownerState => {
	  const {
	    classes,
	    edge,
	    size,
	    color,
	    checked,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', edge && `edge${capitalize(edge)}`, `size${capitalize(size)}`],
	    switchBase: ['switchBase', `color${capitalize(color)}`, checked && 'checked', disabled && 'disabled'],
	    thumb: ['thumb'],
	    track: ['track'],
	    input: ['input']
	  };
	  const composedClasses = composeClasses(slots, getSwitchUtilityClass, classes);
	  return _extends({}, classes, composedClasses);
	};
	const SwitchRoot = styled$1('span', {
	  name: 'MuiSwitch',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.edge && styles[`edge${capitalize(ownerState.edge)}`], styles[`size${capitalize(ownerState.size)}`]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'inline-flex',
	  width: 34 + 12 * 2,
	  height: 14 + 12 * 2,
	  overflow: 'hidden',
	  padding: 12,
	  boxSizing: 'border-box',
	  position: 'relative',
	  flexShrink: 0,
	  zIndex: 0,
	  // Reset the stacking context.
	  verticalAlign: 'middle',
	  // For correct alignment with the text.
	  '@media print': {
	    colorAdjust: 'exact'
	  }
	}, ownerState.edge === 'start' && {
	  marginLeft: -8
	}, ownerState.edge === 'end' && {
	  marginRight: -8
	}, ownerState.size === 'small' && {
	  width: 40,
	  height: 24,
	  padding: 7,
	  [`& .${switchClasses$1.thumb}`]: {
	    width: 16,
	    height: 16
	  },
	  [`& .${switchClasses$1.switchBase}`]: {
	    padding: 4,
	    [`&.${switchClasses$1.checked}`]: {
	      transform: 'translateX(16px)'
	    }
	  }
	}));
	const SwitchSwitchBase = styled$1(SwitchBase$1, {
	  name: 'MuiSwitch',
	  slot: 'SwitchBase',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.switchBase, {
	      [`& .${switchClasses$1.input}`]: styles.input
	    }, ownerState.color !== 'default' && styles[`color${capitalize(ownerState.color)}`]];
	  }
	})(({
	  theme
	}) => ({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  zIndex: 1,
	  // Render above the focus ripple.
	  color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === 'light' ? theme.palette.common.white : theme.palette.grey[300]}`,
	  transition: theme.transitions.create(['left', 'transform'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  [`&.${switchClasses$1.checked}`]: {
	    transform: 'translateX(20px)'
	  },
	  [`&.${switchClasses$1.disabled}`]: {
	    color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[600]}`
	  },
	  [`&.${switchClasses$1.checked} + .${switchClasses$1.track}`]: {
	    opacity: 0.5
	  },
	  [`&.${switchClasses$1.disabled} + .${switchClasses$1.track}`]: {
	    opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === 'light' ? 0.12 : 0.2}`
	  },
	  [`& .${switchClasses$1.input}`]: {
	    left: '-100%',
	    width: '300%'
	  }
	}), ({
	  theme,
	  ownerState
	}) => _extends({
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),
	    // Reset on touch devices, it doesn't add specificity
	    '@media (hover: none)': {
	      backgroundColor: 'transparent'
	    }
	  }
	}, ownerState.color !== 'default' && {
	  [`&.${switchClasses$1.checked}`]: {
	    color: (theme.vars || theme).palette[ownerState.color].main,
	    '&:hover': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
	      '@media (hover: none)': {
	        backgroundColor: 'transparent'
	      }
	    },
	    [`&.${switchClasses$1.disabled}`]: {
	      color: theme.vars ? theme.vars.palette.Switch[`${ownerState.color}DisabledColor`] : `${theme.palette.mode === 'light' ? lighten(theme.palette[ownerState.color].main, 0.62) : darken(theme.palette[ownerState.color].main, 0.55)}`
	    }
	  },
	  [`&.${switchClasses$1.checked} + .${switchClasses$1.track}`]: {
	    backgroundColor: (theme.vars || theme).palette[ownerState.color].main
	  }
	}));
	const SwitchTrack = styled$1('span', {
	  name: 'MuiSwitch',
	  slot: 'Track',
	  overridesResolver: (props, styles) => styles.track
	})(({
	  theme
	}) => ({
	  height: '100%',
	  width: '100%',
	  borderRadius: 14 / 2,
	  zIndex: -1,
	  transition: theme.transitions.create(['opacity', 'background-color'], {
	    duration: theme.transitions.duration.shortest
	  }),
	  backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === 'light' ? theme.palette.common.black : theme.palette.common.white}`,
	  opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === 'light' ? 0.38 : 0.3}`
	}));
	const SwitchThumb = styled$1('span', {
	  name: 'MuiSwitch',
	  slot: 'Thumb',
	  overridesResolver: (props, styles) => styles.thumb
	})(({
	  theme
	}) => ({
	  boxShadow: (theme.vars || theme).shadows[1],
	  backgroundColor: 'currentColor',
	  width: 20,
	  height: 20,
	  borderRadius: '50%'
	}));
	const Switch = /*#__PURE__*/reactExports.forwardRef(function Switch(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiSwitch'
	  });
	  const {
	      className,
	      color = 'primary',
	      edge = false,
	      size = 'medium',
	      sx
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$N);
	  const ownerState = _extends({}, props, {
	    color,
	    edge,
	    size
	  });
	  const classes = useUtilityClasses$C(ownerState);
	  const icon = /*#__PURE__*/jsxRuntimeExports.jsx(SwitchThumb, {
	    className: classes.thumb,
	    ownerState: ownerState
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(SwitchRoot, {
	    className: clsx(classes.root, className),
	    sx: sx,
	    ownerState: ownerState,
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(SwitchSwitchBase, _extends({
	      type: "checkbox",
	      icon: icon,
	      checkedIcon: icon,
	      ref: ref,
	      ownerState: ownerState
	    }, other, {
	      classes: _extends({}, classes, {
	        root: classes.switchBase
	      })
	    })), /*#__PURE__*/jsxRuntimeExports.jsx(SwitchTrack, {
	      className: classes.track,
	      ownerState: ownerState
	    })]
	  });
	});
	var Switch$1 = Switch;

	function getTabUtilityClass(slot) {
	  return generateUtilityClass('MuiTab', slot);
	}
	const tabClasses = generateUtilityClasses('MuiTab', ['root', 'labelIcon', 'textColorInherit', 'textColorPrimary', 'textColorSecondary', 'selected', 'disabled', 'fullWidth', 'wrapped', 'iconWrapper']);
	var tabClasses$1 = tabClasses;

	const _excluded$M = ["className", "disabled", "disableFocusRipple", "fullWidth", "icon", "iconPosition", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"];
	const useUtilityClasses$B = ownerState => {
	  const {
	    classes,
	    textColor,
	    fullWidth,
	    wrapped,
	    icon,
	    label,
	    selected,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', icon && label && 'labelIcon', `textColor${capitalize(textColor)}`, fullWidth && 'fullWidth', wrapped && 'wrapped', selected && 'selected', disabled && 'disabled'],
	    iconWrapper: ['iconWrapper']
	  };
	  return composeClasses(slots, getTabUtilityClass, classes);
	};
	const TabRoot = styled$1(ButtonBase$1, {
	  name: 'MuiTab',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.label && ownerState.icon && styles.labelIcon, styles[`textColor${capitalize(ownerState.textColor)}`], ownerState.fullWidth && styles.fullWidth, ownerState.wrapped && styles.wrapped];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.button, {
	  maxWidth: 360,
	  minWidth: 90,
	  position: 'relative',
	  minHeight: 48,
	  flexShrink: 0,
	  padding: '12px 16px',
	  overflow: 'hidden',
	  whiteSpace: 'normal',
	  textAlign: 'center'
	}, ownerState.label && {
	  flexDirection: ownerState.iconPosition === 'top' || ownerState.iconPosition === 'bottom' ? 'column' : 'row'
	}, {
	  lineHeight: 1.25
	}, ownerState.icon && ownerState.label && {
	  minHeight: 72,
	  paddingTop: 9,
	  paddingBottom: 9,
	  [`& > .${tabClasses$1.iconWrapper}`]: _extends({}, ownerState.iconPosition === 'top' && {
	    marginBottom: 6
	  }, ownerState.iconPosition === 'bottom' && {
	    marginTop: 6
	  }, ownerState.iconPosition === 'start' && {
	    marginRight: theme.spacing(1)
	  }, ownerState.iconPosition === 'end' && {
	    marginLeft: theme.spacing(1)
	  })
	}, ownerState.textColor === 'inherit' && {
	  color: 'inherit',
	  opacity: 0.6,
	  // same opacity as theme.palette.text.secondary
	  [`&.${tabClasses$1.selected}`]: {
	    opacity: 1
	  },
	  [`&.${tabClasses$1.disabled}`]: {
	    opacity: (theme.vars || theme).palette.action.disabledOpacity
	  }
	}, ownerState.textColor === 'primary' && {
	  color: (theme.vars || theme).palette.text.secondary,
	  [`&.${tabClasses$1.selected}`]: {
	    color: (theme.vars || theme).palette.primary.main
	  },
	  [`&.${tabClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.text.disabled
	  }
	}, ownerState.textColor === 'secondary' && {
	  color: (theme.vars || theme).palette.text.secondary,
	  [`&.${tabClasses$1.selected}`]: {
	    color: (theme.vars || theme).palette.secondary.main
	  },
	  [`&.${tabClasses$1.disabled}`]: {
	    color: (theme.vars || theme).palette.text.disabled
	  }
	}, ownerState.fullWidth && {
	  flexShrink: 1,
	  flexGrow: 1,
	  flexBasis: 0,
	  maxWidth: 'none'
	}, ownerState.wrapped && {
	  fontSize: theme.typography.pxToRem(12)
	}));
	const Tab = /*#__PURE__*/reactExports.forwardRef(function Tab(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTab'
	  });
	  const {
	      className,
	      disabled = false,
	      disableFocusRipple = false,
	      // eslint-disable-next-line react/prop-types
	      fullWidth,
	      icon: iconProp,
	      iconPosition = 'top',
	      // eslint-disable-next-line react/prop-types
	      indicator,
	      label,
	      onChange,
	      onClick,
	      onFocus,
	      // eslint-disable-next-line react/prop-types
	      selected,
	      // eslint-disable-next-line react/prop-types
	      selectionFollowsFocus,
	      // eslint-disable-next-line react/prop-types
	      textColor = 'inherit',
	      value,
	      wrapped = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$M);
	  const ownerState = _extends({}, props, {
	    disabled,
	    disableFocusRipple,
	    selected,
	    icon: !!iconProp,
	    iconPosition,
	    label: !!label,
	    fullWidth,
	    textColor,
	    wrapped
	  });
	  const classes = useUtilityClasses$B(ownerState);
	  const icon = iconProp && label && /*#__PURE__*/reactExports.isValidElement(iconProp) ? /*#__PURE__*/reactExports.cloneElement(iconProp, {
	    className: clsx(classes.iconWrapper, iconProp.props.className)
	  }) : iconProp;
	  const handleClick = event => {
	    if (!selected && onChange) {
	      onChange(event, value);
	    }
	    if (onClick) {
	      onClick(event);
	    }
	  };
	  const handleFocus = event => {
	    if (selectionFollowsFocus && !selected && onChange) {
	      onChange(event, value);
	    }
	    if (onFocus) {
	      onFocus(event);
	    }
	  };
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(TabRoot, _extends({
	    focusRipple: !disableFocusRipple,
	    className: clsx(classes.root, className),
	    ref: ref,
	    role: "tab",
	    "aria-selected": selected,
	    disabled: disabled,
	    onClick: handleClick,
	    onFocus: handleFocus,
	    ownerState: ownerState,
	    tabIndex: selected ? 0 : -1
	  }, other, {
	    children: [iconPosition === 'top' || iconPosition === 'start' ? /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	      children: [icon, label]
	    }) : /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	      children: [label, icon]
	    }), indicator]
	  }));
	});
	var Tab$1 = Tab;

	/**
	 * @ignore - internal component.
	 */
	const TableContext = /*#__PURE__*/reactExports.createContext();
	var TableContext$1 = TableContext;

	function getTableUtilityClass(slot) {
	  return generateUtilityClass('MuiTable', slot);
	}
	generateUtilityClasses('MuiTable', ['root', 'stickyHeader']);

	const _excluded$L = ["className", "component", "padding", "size", "stickyHeader"];
	const useUtilityClasses$A = ownerState => {
	  const {
	    classes,
	    stickyHeader
	  } = ownerState;
	  const slots = {
	    root: ['root', stickyHeader && 'stickyHeader']
	  };
	  return composeClasses(slots, getTableUtilityClass, classes);
	};
	const TableRoot = styled$1('table', {
	  name: 'MuiTable',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.stickyHeader && styles.stickyHeader];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'table',
	  width: '100%',
	  borderCollapse: 'collapse',
	  borderSpacing: 0,
	  '& caption': _extends({}, theme.typography.body2, {
	    padding: theme.spacing(2),
	    color: (theme.vars || theme).palette.text.secondary,
	    textAlign: 'left',
	    captionSide: 'bottom'
	  })
	}, ownerState.stickyHeader && {
	  borderCollapse: 'separate'
	}));
	const defaultComponent$3 = 'table';
	const Table = /*#__PURE__*/reactExports.forwardRef(function Table(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTable'
	  });
	  const {
	      className,
	      component = defaultComponent$3,
	      padding = 'normal',
	      size = 'medium',
	      stickyHeader = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$L);
	  const ownerState = _extends({}, props, {
	    component,
	    padding,
	    size,
	    stickyHeader
	  });
	  const classes = useUtilityClasses$A(ownerState);
	  const table = reactExports.useMemo(() => ({
	    padding,
	    size,
	    stickyHeader
	  }), [padding, size, stickyHeader]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TableContext$1.Provider, {
	    value: table,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(TableRoot, _extends({
	      as: component,
	      role: component === defaultComponent$3 ? null : 'table',
	      ref: ref,
	      className: clsx(classes.root, className),
	      ownerState: ownerState
	    }, other))
	  });
	});
	var Table$1 = Table;

	/**
	 * @ignore - internal component.
	 */
	const Tablelvl2Context = /*#__PURE__*/reactExports.createContext();
	var Tablelvl2Context$1 = Tablelvl2Context;

	function getTableBodyUtilityClass(slot) {
	  return generateUtilityClass('MuiTableBody', slot);
	}
	generateUtilityClasses('MuiTableBody', ['root']);

	const _excluded$K = ["className", "component"];
	const useUtilityClasses$z = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getTableBodyUtilityClass, classes);
	};
	const TableBodyRoot = styled$1('tbody', {
	  name: 'MuiTableBody',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'table-row-group'
	});
	const tablelvl2$1 = {
	  variant: 'body'
	};
	const defaultComponent$2 = 'tbody';
	const TableBody = /*#__PURE__*/reactExports.forwardRef(function TableBody(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTableBody'
	  });
	  const {
	      className,
	      component = defaultComponent$2
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$K);
	  const ownerState = _extends({}, props, {
	    component
	  });
	  const classes = useUtilityClasses$z(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Tablelvl2Context$1.Provider, {
	    value: tablelvl2$1,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(TableBodyRoot, _extends({
	      className: clsx(classes.root, className),
	      as: component,
	      ref: ref,
	      role: component === defaultComponent$2 ? null : 'rowgroup',
	      ownerState: ownerState
	    }, other))
	  });
	});
	var TableBody$1 = TableBody;

	function getTableCellUtilityClass(slot) {
	  return generateUtilityClass('MuiTableCell', slot);
	}
	const tableCellClasses = generateUtilityClasses('MuiTableCell', ['root', 'head', 'body', 'footer', 'sizeSmall', 'sizeMedium', 'paddingCheckbox', 'paddingNone', 'alignLeft', 'alignCenter', 'alignRight', 'alignJustify', 'stickyHeader']);
	var tableCellClasses$1 = tableCellClasses;

	const _excluded$J = ["align", "className", "component", "padding", "scope", "size", "sortDirection", "variant"];
	const useUtilityClasses$y = ownerState => {
	  const {
	    classes,
	    variant,
	    align,
	    padding,
	    size,
	    stickyHeader
	  } = ownerState;
	  const slots = {
	    root: ['root', variant, stickyHeader && 'stickyHeader', align !== 'inherit' && `align${capitalize(align)}`, padding !== 'normal' && `padding${capitalize(padding)}`, `size${capitalize(size)}`]
	  };
	  return composeClasses(slots, getTableCellUtilityClass, classes);
	};
	const TableCellRoot = styled$1('td', {
	  name: 'MuiTableCell',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, styles[ownerState.variant], styles[`size${capitalize(ownerState.size)}`], ownerState.padding !== 'normal' && styles[`padding${capitalize(ownerState.padding)}`], ownerState.align !== 'inherit' && styles[`align${capitalize(ownerState.align)}`], ownerState.stickyHeader && styles.stickyHeader];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.body2, {
	  display: 'table-cell',
	  verticalAlign: 'inherit',
	  // Workaround for a rendering bug with spanned columns in Chrome 62.0.
	  // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
	  borderBottom: theme.vars ? `1px solid ${theme.vars.palette.TableCell.border}` : `1px solid
    ${theme.palette.mode === 'light' ? lighten(alpha(theme.palette.divider, 1), 0.88) : darken(alpha(theme.palette.divider, 1), 0.68)}`,
	  textAlign: 'left',
	  padding: 16
	}, ownerState.variant === 'head' && {
	  color: (theme.vars || theme).palette.text.primary,
	  lineHeight: theme.typography.pxToRem(24),
	  fontWeight: theme.typography.fontWeightMedium
	}, ownerState.variant === 'body' && {
	  color: (theme.vars || theme).palette.text.primary
	}, ownerState.variant === 'footer' && {
	  color: (theme.vars || theme).palette.text.secondary,
	  lineHeight: theme.typography.pxToRem(21),
	  fontSize: theme.typography.pxToRem(12)
	}, ownerState.size === 'small' && {
	  padding: '6px 16px',
	  [`&.${tableCellClasses$1.paddingCheckbox}`]: {
	    width: 24,
	    // prevent the checkbox column from growing
	    padding: '0 12px 0 16px',
	    '& > *': {
	      padding: 0
	    }
	  }
	}, ownerState.padding === 'checkbox' && {
	  width: 48,
	  // prevent the checkbox column from growing
	  padding: '0 0 0 4px'
	}, ownerState.padding === 'none' && {
	  padding: 0
	}, ownerState.align === 'left' && {
	  textAlign: 'left'
	}, ownerState.align === 'center' && {
	  textAlign: 'center'
	}, ownerState.align === 'right' && {
	  textAlign: 'right',
	  flexDirection: 'row-reverse'
	}, ownerState.align === 'justify' && {
	  textAlign: 'justify'
	}, ownerState.stickyHeader && {
	  position: 'sticky',
	  top: 0,
	  zIndex: 2,
	  backgroundColor: (theme.vars || theme).palette.background.default
	}));

	/**
	 * The component renders a `<th>` element when the parent context is a header
	 * or otherwise a `<td>` element.
	 */
	const TableCell = /*#__PURE__*/reactExports.forwardRef(function TableCell(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTableCell'
	  });
	  const {
	      align = 'inherit',
	      className,
	      component: componentProp,
	      padding: paddingProp,
	      scope: scopeProp,
	      size: sizeProp,
	      sortDirection,
	      variant: variantProp
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$J);
	  const table = reactExports.useContext(TableContext$1);
	  const tablelvl2 = reactExports.useContext(Tablelvl2Context$1);
	  const isHeadCell = tablelvl2 && tablelvl2.variant === 'head';
	  let component;
	  if (componentProp) {
	    component = componentProp;
	  } else {
	    component = isHeadCell ? 'th' : 'td';
	  }
	  let scope = scopeProp;
	  // scope is not a valid attribute for <td/> elements.
	  // source: https://html.spec.whatwg.org/multipage/tables.html#the-td-element
	  if (component === 'td') {
	    scope = undefined;
	  } else if (!scope && isHeadCell) {
	    scope = 'col';
	  }
	  const variant = variantProp || tablelvl2 && tablelvl2.variant;
	  const ownerState = _extends({}, props, {
	    align,
	    component,
	    padding: paddingProp || (table && table.padding ? table.padding : 'normal'),
	    size: sizeProp || (table && table.size ? table.size : 'medium'),
	    sortDirection,
	    stickyHeader: variant === 'head' && table && table.stickyHeader,
	    variant
	  });
	  const classes = useUtilityClasses$y(ownerState);
	  let ariaSort = null;
	  if (sortDirection) {
	    ariaSort = sortDirection === 'asc' ? 'ascending' : 'descending';
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TableCellRoot, _extends({
	    as: component,
	    ref: ref,
	    className: clsx(classes.root, className),
	    "aria-sort": ariaSort,
	    scope: scope,
	    ownerState: ownerState
	  }, other));
	});
	var TableCell$1 = TableCell;

	function getTableHeadUtilityClass(slot) {
	  return generateUtilityClass('MuiTableHead', slot);
	}
	generateUtilityClasses('MuiTableHead', ['root']);

	const _excluded$I = ["className", "component"];
	const useUtilityClasses$x = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getTableHeadUtilityClass, classes);
	};
	const TableHeadRoot = styled$1('thead', {
	  name: 'MuiTableHead',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'table-header-group'
	});
	const tablelvl2 = {
	  variant: 'head'
	};
	const defaultComponent$1 = 'thead';
	const TableHead = /*#__PURE__*/reactExports.forwardRef(function TableHead(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTableHead'
	  });
	  const {
	      className,
	      component = defaultComponent$1
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$I);
	  const ownerState = _extends({}, props, {
	    component
	  });
	  const classes = useUtilityClasses$x(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Tablelvl2Context$1.Provider, {
	    value: tablelvl2,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(TableHeadRoot, _extends({
	      as: component,
	      className: clsx(classes.root, className),
	      ref: ref,
	      role: component === defaultComponent$1 ? null : 'rowgroup',
	      ownerState: ownerState
	    }, other))
	  });
	});
	var TableHead$1 = TableHead;

	function getToolbarUtilityClass(slot) {
	  return generateUtilityClass('MuiToolbar', slot);
	}
	generateUtilityClasses('MuiToolbar', ['root', 'gutters', 'regular', 'dense']);

	const _excluded$H = ["className", "component", "disableGutters", "variant"];
	const useUtilityClasses$w = ownerState => {
	  const {
	    classes,
	    disableGutters,
	    variant
	  } = ownerState;
	  const slots = {
	    root: ['root', !disableGutters && 'gutters', variant]
	  };
	  return composeClasses(slots, getToolbarUtilityClass, classes);
	};
	const ToolbarRoot = styled$1('div', {
	  name: 'MuiToolbar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, !ownerState.disableGutters && styles.gutters, styles[ownerState.variant]];
	  }
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  position: 'relative',
	  display: 'flex',
	  alignItems: 'center'
	}, !ownerState.disableGutters && {
	  paddingLeft: theme.spacing(2),
	  paddingRight: theme.spacing(2),
	  [theme.breakpoints.up('sm')]: {
	    paddingLeft: theme.spacing(3),
	    paddingRight: theme.spacing(3)
	  }
	}, ownerState.variant === 'dense' && {
	  minHeight: 48
	}), ({
	  theme,
	  ownerState
	}) => ownerState.variant === 'regular' && theme.mixins.toolbar);
	const Toolbar = /*#__PURE__*/reactExports.forwardRef(function Toolbar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiToolbar'
	  });
	  const {
	      className,
	      component = 'div',
	      disableGutters = false,
	      variant = 'regular'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$H);
	  const ownerState = _extends({}, props, {
	    component,
	    disableGutters,
	    variant
	  });
	  const classes = useUtilityClasses$w(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ToolbarRoot, _extends({
	    as: component,
	    className: clsx(classes.root, className),
	    ref: ref,
	    ownerState: ownerState
	  }, other));
	});
	var Toolbar$1 = Toolbar;

	var KeyboardArrowLeft = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
	}), 'KeyboardArrowLeft');

	var KeyboardArrowRight = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
	}), 'KeyboardArrowRight');

	function getTableRowUtilityClass(slot) {
	  return generateUtilityClass('MuiTableRow', slot);
	}
	const tableRowClasses = generateUtilityClasses('MuiTableRow', ['root', 'selected', 'hover', 'head', 'footer']);
	var tableRowClasses$1 = tableRowClasses;

	const _excluded$G = ["className", "component", "hover", "selected"];
	const useUtilityClasses$v = ownerState => {
	  const {
	    classes,
	    selected,
	    hover,
	    head,
	    footer
	  } = ownerState;
	  const slots = {
	    root: ['root', selected && 'selected', hover && 'hover', head && 'head', footer && 'footer']
	  };
	  return composeClasses(slots, getTableRowUtilityClass, classes);
	};
	const TableRowRoot = styled$1('tr', {
	  name: 'MuiTableRow',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.head && styles.head, ownerState.footer && styles.footer];
	  }
	})(({
	  theme
	}) => ({
	  color: 'inherit',
	  display: 'table-row',
	  verticalAlign: 'middle',
	  // We disable the focus ring for mouse, touch and keyboard users.
	  outline: 0,
	  [`&.${tableRowClasses$1.hover}:hover`]: {
	    backgroundColor: (theme.vars || theme).palette.action.hover
	  },
	  [`&.${tableRowClasses$1.selected}`]: {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
	    '&:hover': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
	    }
	  }
	}));
	const defaultComponent = 'tr';
	/**
	 * Will automatically set dynamic row height
	 * based on the material table element parent (head, body, etc).
	 */
	const TableRow = /*#__PURE__*/reactExports.forwardRef(function TableRow(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTableRow'
	  });
	  const {
	      className,
	      component = defaultComponent,
	      hover = false,
	      selected = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$G);
	  const tablelvl2 = reactExports.useContext(Tablelvl2Context$1);
	  const ownerState = _extends({}, props, {
	    component,
	    hover,
	    selected,
	    head: tablelvl2 && tablelvl2.variant === 'head',
	    footer: tablelvl2 && tablelvl2.variant === 'footer'
	  });
	  const classes = useUtilityClasses$v(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TableRowRoot, _extends({
	    as: component,
	    ref: ref,
	    className: clsx(classes.root, className),
	    role: component === defaultComponent ? null : 'row',
	    ownerState: ownerState
	  }, other));
	});
	var TableRow$1 = TableRow;

	function easeInOutSin(time) {
	  return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
	}
	function animate(property, element, to, options = {}, cb = () => {}) {
	  const {
	    ease = easeInOutSin,
	    duration = 300 // standard
	  } = options;
	  let start = null;
	  const from = element[property];
	  let cancelled = false;
	  const cancel = () => {
	    cancelled = true;
	  };
	  const step = timestamp => {
	    if (cancelled) {
	      cb(new Error('Animation cancelled'));
	      return;
	    }
	    if (start === null) {
	      start = timestamp;
	    }
	    const time = Math.min(1, (timestamp - start) / duration);
	    element[property] = ease(time) * (to - from) + from;
	    if (time >= 1) {
	      requestAnimationFrame(() => {
	        cb(null);
	      });
	      return;
	    }
	    requestAnimationFrame(step);
	  };
	  if (from === to) {
	    cb(new Error('Element already at target position'));
	    return cancel;
	  }
	  requestAnimationFrame(step);
	  return cancel;
	}

	const _excluded$F = ["onChange"];
	const styles$1 = {
	  width: 99,
	  height: 99,
	  position: 'absolute',
	  top: -9999,
	  overflow: 'scroll'
	};

	/**
	 * @ignore - internal component.
	 * The component originates from https://github.com/STORIS/react-scrollbar-size.
	 * It has been moved into the core in order to minimize the bundle size.
	 */
	function ScrollbarSize(props) {
	  const {
	      onChange
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$F);
	  const scrollbarHeight = reactExports.useRef();
	  const nodeRef = reactExports.useRef(null);
	  const setMeasurements = () => {
	    scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
	  };
	  useEnhancedEffect$1(() => {
	    const handleResize = debounce$1(() => {
	      const prevHeight = scrollbarHeight.current;
	      setMeasurements();
	      if (prevHeight !== scrollbarHeight.current) {
	        onChange(scrollbarHeight.current);
	      }
	    });
	    const containerWindow = ownerWindow(nodeRef.current);
	    containerWindow.addEventListener('resize', handleResize);
	    return () => {
	      handleResize.clear();
	      containerWindow.removeEventListener('resize', handleResize);
	    };
	  }, [onChange]);
	  reactExports.useEffect(() => {
	    setMeasurements();
	    onChange(scrollbarHeight.current);
	  }, [onChange]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx("div", _extends({
	    style: styles$1,
	    ref: nodeRef
	  }, other));
	}

	function getTabScrollButtonUtilityClass(slot) {
	  return generateUtilityClass('MuiTabScrollButton', slot);
	}
	const tabScrollButtonClasses = generateUtilityClasses('MuiTabScrollButton', ['root', 'vertical', 'horizontal', 'disabled']);
	var tabScrollButtonClasses$1 = tabScrollButtonClasses;

	const _excluded$E = ["className", "slots", "slotProps", "direction", "orientation", "disabled"];
	const useUtilityClasses$u = ownerState => {
	  const {
	    classes,
	    orientation,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', orientation, disabled && 'disabled']
	  };
	  return composeClasses(slots, getTabScrollButtonUtilityClass, classes);
	};
	const TabScrollButtonRoot = styled$1(ButtonBase$1, {
	  name: 'MuiTabScrollButton',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.root, ownerState.orientation && styles[ownerState.orientation]];
	  }
	})(({
	  ownerState
	}) => _extends({
	  width: 40,
	  flexShrink: 0,
	  opacity: 0.8,
	  [`&.${tabScrollButtonClasses$1.disabled}`]: {
	    opacity: 0
	  }
	}, ownerState.orientation === 'vertical' && {
	  width: '100%',
	  height: 40,
	  '& svg': {
	    transform: `rotate(${ownerState.isRtl ? -90 : 90}deg)`
	  }
	}));
	const TabScrollButton = /*#__PURE__*/reactExports.forwardRef(function TabScrollButton(inProps, ref) {
	  var _slots$StartScrollBut, _slots$EndScrollButto;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTabScrollButton'
	  });
	  const {
	      className,
	      slots = {},
	      slotProps = {},
	      direction
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$E);
	  const theme = useTheme();
	  const isRtl = theme.direction === 'rtl';
	  const ownerState = _extends({
	    isRtl
	  }, props);
	  const classes = useUtilityClasses$u(ownerState);
	  const StartButtonIcon = (_slots$StartScrollBut = slots.StartScrollButtonIcon) != null ? _slots$StartScrollBut : KeyboardArrowLeft;
	  const EndButtonIcon = (_slots$EndScrollButto = slots.EndScrollButtonIcon) != null ? _slots$EndScrollButto : KeyboardArrowRight;
	  const startButtonIconProps = useSlotProps({
	    elementType: StartButtonIcon,
	    externalSlotProps: slotProps.startScrollButtonIcon,
	    additionalProps: {
	      fontSize: 'small'
	    },
	    ownerState
	  });
	  const endButtonIconProps = useSlotProps({
	    elementType: EndButtonIcon,
	    externalSlotProps: slotProps.endScrollButtonIcon,
	    additionalProps: {
	      fontSize: 'small'
	    },
	    ownerState
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TabScrollButtonRoot, _extends({
	    component: "div",
	    className: clsx(classes.root, className),
	    ref: ref,
	    role: null,
	    ownerState: ownerState,
	    tabIndex: null
	  }, other, {
	    children: direction === 'left' ? /*#__PURE__*/jsxRuntimeExports.jsx(StartButtonIcon, _extends({}, startButtonIconProps)) : /*#__PURE__*/jsxRuntimeExports.jsx(EndButtonIcon, _extends({}, endButtonIconProps))
	  }));
	});
	var TabScrollButton$1 = TabScrollButton;

	function getTabsUtilityClass(slot) {
	  return generateUtilityClass('MuiTabs', slot);
	}
	const tabsClasses = generateUtilityClasses('MuiTabs', ['root', 'vertical', 'flexContainer', 'flexContainerVertical', 'centered', 'scroller', 'fixed', 'scrollableX', 'scrollableY', 'hideScrollbar', 'scrollButtons', 'scrollButtonsHideMobile', 'indicator']);
	var tabsClasses$1 = tabsClasses;

	const _excluded$D = ["aria-label", "aria-labelledby", "action", "centered", "children", "className", "component", "allowScrollButtonsMobile", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "slots", "slotProps", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant", "visibleScrollbar"];
	const nextItem = (list, item) => {
	  if (list === item) {
	    return list.firstChild;
	  }
	  if (item && item.nextElementSibling) {
	    return item.nextElementSibling;
	  }
	  return list.firstChild;
	};
	const previousItem = (list, item) => {
	  if (list === item) {
	    return list.lastChild;
	  }
	  if (item && item.previousElementSibling) {
	    return item.previousElementSibling;
	  }
	  return list.lastChild;
	};
	const moveFocus = (list, currentFocus, traversalFunction) => {
	  let wrappedOnce = false;
	  let nextFocus = traversalFunction(list, currentFocus);
	  while (nextFocus) {
	    // Prevent infinite loop.
	    if (nextFocus === list.firstChild) {
	      if (wrappedOnce) {
	        return;
	      }
	      wrappedOnce = true;
	    }

	    // Same logic as useAutocomplete.js
	    const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';
	    if (!nextFocus.hasAttribute('tabindex') || nextFocusDisabled) {
	      // Move to the next element.
	      nextFocus = traversalFunction(list, nextFocus);
	    } else {
	      nextFocus.focus();
	      return;
	    }
	  }
	};
	const useUtilityClasses$t = ownerState => {
	  const {
	    vertical,
	    fixed,
	    hideScrollbar,
	    scrollableX,
	    scrollableY,
	    centered,
	    scrollButtonsHideMobile,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', vertical && 'vertical'],
	    scroller: ['scroller', fixed && 'fixed', hideScrollbar && 'hideScrollbar', scrollableX && 'scrollableX', scrollableY && 'scrollableY'],
	    flexContainer: ['flexContainer', vertical && 'flexContainerVertical', centered && 'centered'],
	    indicator: ['indicator'],
	    scrollButtons: ['scrollButtons', scrollButtonsHideMobile && 'scrollButtonsHideMobile'],
	    scrollableX: [scrollableX && 'scrollableX'],
	    hideScrollbar: [hideScrollbar && 'hideScrollbar']
	  };
	  return composeClasses(slots, getTabsUtilityClass, classes);
	};
	const TabsRoot = styled$1('div', {
	  name: 'MuiTabs',
	  slot: 'Root',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [{
	      [`& .${tabsClasses$1.scrollButtons}`]: styles.scrollButtons
	    }, {
	      [`& .${tabsClasses$1.scrollButtons}`]: ownerState.scrollButtonsHideMobile && styles.scrollButtonsHideMobile
	    }, styles.root, ownerState.vertical && styles.vertical];
	  }
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  overflow: 'hidden',
	  minHeight: 48,
	  // Add iOS momentum scrolling for iOS < 13.0
	  WebkitOverflowScrolling: 'touch',
	  display: 'flex'
	}, ownerState.vertical && {
	  flexDirection: 'column'
	}, ownerState.scrollButtonsHideMobile && {
	  [`& .${tabsClasses$1.scrollButtons}`]: {
	    [theme.breakpoints.down('sm')]: {
	      display: 'none'
	    }
	  }
	}));
	const TabsScroller = styled$1('div', {
	  name: 'MuiTabs',
	  slot: 'Scroller',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.scroller, ownerState.fixed && styles.fixed, ownerState.hideScrollbar && styles.hideScrollbar, ownerState.scrollableX && styles.scrollableX, ownerState.scrollableY && styles.scrollableY];
	  }
	})(({
	  ownerState
	}) => _extends({
	  position: 'relative',
	  display: 'inline-block',
	  flex: '1 1 auto',
	  whiteSpace: 'nowrap'
	}, ownerState.fixed && {
	  overflowX: 'hidden',
	  width: '100%'
	}, ownerState.hideScrollbar && {
	  // Hide dimensionless scrollbar on macOS
	  scrollbarWidth: 'none',
	  // Firefox
	  '&::-webkit-scrollbar': {
	    display: 'none' // Safari + Chrome
	  }
	}, ownerState.scrollableX && {
	  overflowX: 'auto',
	  overflowY: 'hidden'
	}, ownerState.scrollableY && {
	  overflowY: 'auto',
	  overflowX: 'hidden'
	}));
	const FlexContainer = styled$1('div', {
	  name: 'MuiTabs',
	  slot: 'FlexContainer',
	  overridesResolver: (props, styles) => {
	    const {
	      ownerState
	    } = props;
	    return [styles.flexContainer, ownerState.vertical && styles.flexContainerVertical, ownerState.centered && styles.centered];
	  }
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex'
	}, ownerState.vertical && {
	  flexDirection: 'column'
	}, ownerState.centered && {
	  justifyContent: 'center'
	}));
	const TabsIndicator = styled$1('span', {
	  name: 'MuiTabs',
	  slot: 'Indicator',
	  overridesResolver: (props, styles) => styles.indicator
	})(({
	  ownerState,
	  theme
	}) => _extends({
	  position: 'absolute',
	  height: 2,
	  bottom: 0,
	  width: '100%',
	  transition: theme.transitions.create()
	}, ownerState.indicatorColor === 'primary' && {
	  backgroundColor: (theme.vars || theme).palette.primary.main
	}, ownerState.indicatorColor === 'secondary' && {
	  backgroundColor: (theme.vars || theme).palette.secondary.main
	}, ownerState.vertical && {
	  height: '100%',
	  width: 2,
	  right: 0
	}));
	const TabsScrollbarSize = styled$1(ScrollbarSize)({
	  overflowX: 'auto',
	  overflowY: 'hidden',
	  // Hide dimensionless scrollbar on macOS
	  scrollbarWidth: 'none',
	  // Firefox
	  '&::-webkit-scrollbar': {
	    display: 'none' // Safari + Chrome
	  }
	});
	const defaultIndicatorStyle = {};
	const Tabs = /*#__PURE__*/reactExports.forwardRef(function Tabs(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTabs'
	  });
	  const theme = useTheme();
	  const isRtl = theme.direction === 'rtl';
	  const {
	      'aria-label': ariaLabel,
	      'aria-labelledby': ariaLabelledBy,
	      action,
	      centered = false,
	      children: childrenProp,
	      className,
	      component = 'div',
	      allowScrollButtonsMobile = false,
	      indicatorColor = 'primary',
	      onChange,
	      orientation = 'horizontal',
	      ScrollButtonComponent = TabScrollButton$1,
	      scrollButtons = 'auto',
	      selectionFollowsFocus,
	      slots = {},
	      slotProps = {},
	      TabIndicatorProps = {},
	      TabScrollButtonProps = {},
	      textColor = 'primary',
	      value,
	      variant = 'standard',
	      visibleScrollbar = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$D);
	  const scrollable = variant === 'scrollable';
	  const vertical = orientation === 'vertical';
	  const scrollStart = vertical ? 'scrollTop' : 'scrollLeft';
	  const start = vertical ? 'top' : 'left';
	  const end = vertical ? 'bottom' : 'right';
	  const clientSize = vertical ? 'clientHeight' : 'clientWidth';
	  const size = vertical ? 'height' : 'width';
	  const ownerState = _extends({}, props, {
	    component,
	    allowScrollButtonsMobile,
	    indicatorColor,
	    orientation,
	    vertical,
	    scrollButtons,
	    textColor,
	    variant,
	    visibleScrollbar,
	    fixed: !scrollable,
	    hideScrollbar: scrollable && !visibleScrollbar,
	    scrollableX: scrollable && !vertical,
	    scrollableY: scrollable && vertical,
	    centered: centered && !scrollable,
	    scrollButtonsHideMobile: !allowScrollButtonsMobile
	  });
	  const classes = useUtilityClasses$t(ownerState);
	  const startScrollButtonIconProps = useSlotProps({
	    elementType: slots.StartScrollButtonIcon,
	    externalSlotProps: slotProps.startScrollButtonIcon,
	    ownerState
	  });
	  const endScrollButtonIconProps = useSlotProps({
	    elementType: slots.EndScrollButtonIcon,
	    externalSlotProps: slotProps.endScrollButtonIcon,
	    ownerState
	  });
	  const [mounted, setMounted] = reactExports.useState(false);
	  const [indicatorStyle, setIndicatorStyle] = reactExports.useState(defaultIndicatorStyle);
	  const [displayStartScroll, setDisplayStartScroll] = reactExports.useState(false);
	  const [displayEndScroll, setDisplayEndScroll] = reactExports.useState(false);
	  const [updateScrollObserver, setUpdateScrollObserver] = reactExports.useState(false);
	  const [scrollerStyle, setScrollerStyle] = reactExports.useState({
	    overflow: 'hidden',
	    scrollbarWidth: 0
	  });
	  const valueToIndex = new Map();
	  const tabsRef = reactExports.useRef(null);
	  const tabListRef = reactExports.useRef(null);
	  const getTabsMeta = () => {
	    const tabsNode = tabsRef.current;
	    let tabsMeta;
	    if (tabsNode) {
	      const rect = tabsNode.getBoundingClientRect();
	      // create a new object with ClientRect class props + scrollLeft
	      tabsMeta = {
	        clientWidth: tabsNode.clientWidth,
	        scrollLeft: tabsNode.scrollLeft,
	        scrollTop: tabsNode.scrollTop,
	        scrollLeftNormalized: getNormalizedScrollLeft(tabsNode, theme.direction),
	        scrollWidth: tabsNode.scrollWidth,
	        top: rect.top,
	        bottom: rect.bottom,
	        left: rect.left,
	        right: rect.right
	      };
	    }
	    let tabMeta;
	    if (tabsNode && value !== false) {
	      const children = tabListRef.current.children;
	      if (children.length > 0) {
	        const tab = children[valueToIndex.get(value)];
	        tabMeta = tab ? tab.getBoundingClientRect() : null;
	      }
	    }
	    return {
	      tabsMeta,
	      tabMeta
	    };
	  };
	  const updateIndicatorState = useEventCallback(() => {
	    const {
	      tabsMeta,
	      tabMeta
	    } = getTabsMeta();
	    let startValue = 0;
	    let startIndicator;
	    if (vertical) {
	      startIndicator = 'top';
	      if (tabMeta && tabsMeta) {
	        startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
	      }
	    } else {
	      startIndicator = isRtl ? 'right' : 'left';
	      if (tabMeta && tabsMeta) {
	        const correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
	        startValue = (isRtl ? -1 : 1) * (tabMeta[startIndicator] - tabsMeta[startIndicator] + correction);
	      }
	    }
	    const newIndicatorStyle = {
	      [startIndicator]: startValue,
	      // May be wrong until the font is loaded.
	      [size]: tabMeta ? tabMeta[size] : 0
	    };

	    // IE11 support, replace with Number.isNaN
	    // eslint-disable-next-line no-restricted-globals
	    if (isNaN(indicatorStyle[startIndicator]) || isNaN(indicatorStyle[size])) {
	      setIndicatorStyle(newIndicatorStyle);
	    } else {
	      const dStart = Math.abs(indicatorStyle[startIndicator] - newIndicatorStyle[startIndicator]);
	      const dSize = Math.abs(indicatorStyle[size] - newIndicatorStyle[size]);
	      if (dStart >= 1 || dSize >= 1) {
	        setIndicatorStyle(newIndicatorStyle);
	      }
	    }
	  });
	  const scroll = (scrollValue, {
	    animation = true
	  } = {}) => {
	    if (animation) {
	      animate(scrollStart, tabsRef.current, scrollValue, {
	        duration: theme.transitions.duration.standard
	      });
	    } else {
	      tabsRef.current[scrollStart] = scrollValue;
	    }
	  };
	  const moveTabsScroll = delta => {
	    let scrollValue = tabsRef.current[scrollStart];
	    if (vertical) {
	      scrollValue += delta;
	    } else {
	      scrollValue += delta * (isRtl ? -1 : 1);
	      // Fix for Edge
	      scrollValue *= isRtl && detectScrollType() === 'reverse' ? -1 : 1;
	    }
	    scroll(scrollValue);
	  };
	  const getScrollSize = () => {
	    const containerSize = tabsRef.current[clientSize];
	    let totalSize = 0;
	    const children = Array.from(tabListRef.current.children);
	    for (let i = 0; i < children.length; i += 1) {
	      const tab = children[i];
	      if (totalSize + tab[clientSize] > containerSize) {
	        // If the first item is longer than the container size, then only scroll
	        // by the container size.
	        if (i === 0) {
	          totalSize = containerSize;
	        }
	        break;
	      }
	      totalSize += tab[clientSize];
	    }
	    return totalSize;
	  };
	  const handleStartScrollClick = () => {
	    moveTabsScroll(-1 * getScrollSize());
	  };
	  const handleEndScrollClick = () => {
	    moveTabsScroll(getScrollSize());
	  };

	  // TODO Remove <ScrollbarSize /> as browser support for hiding the scrollbar
	  // with CSS improves.
	  const handleScrollbarSizeChange = reactExports.useCallback(scrollbarWidth => {
	    setScrollerStyle({
	      overflow: null,
	      scrollbarWidth
	    });
	  }, []);
	  const getConditionalElements = () => {
	    const conditionalElements = {};
	    conditionalElements.scrollbarSizeListener = scrollable ? /*#__PURE__*/jsxRuntimeExports.jsx(TabsScrollbarSize, {
	      onChange: handleScrollbarSizeChange,
	      className: clsx(classes.scrollableX, classes.hideScrollbar)
	    }) : null;
	    const scrollButtonsActive = displayStartScroll || displayEndScroll;
	    const showScrollButtons = scrollable && (scrollButtons === 'auto' && scrollButtonsActive || scrollButtons === true);
	    conditionalElements.scrollButtonStart = showScrollButtons ? /*#__PURE__*/jsxRuntimeExports.jsx(ScrollButtonComponent, _extends({
	      slots: {
	        StartScrollButtonIcon: slots.StartScrollButtonIcon
	      },
	      slotProps: {
	        startScrollButtonIcon: startScrollButtonIconProps
	      },
	      orientation: orientation,
	      direction: isRtl ? 'right' : 'left',
	      onClick: handleStartScrollClick,
	      disabled: !displayStartScroll
	    }, TabScrollButtonProps, {
	      className: clsx(classes.scrollButtons, TabScrollButtonProps.className)
	    })) : null;
	    conditionalElements.scrollButtonEnd = showScrollButtons ? /*#__PURE__*/jsxRuntimeExports.jsx(ScrollButtonComponent, _extends({
	      slots: {
	        EndScrollButtonIcon: slots.EndScrollButtonIcon
	      },
	      slotProps: {
	        endScrollButtonIcon: endScrollButtonIconProps
	      },
	      orientation: orientation,
	      direction: isRtl ? 'left' : 'right',
	      onClick: handleEndScrollClick,
	      disabled: !displayEndScroll
	    }, TabScrollButtonProps, {
	      className: clsx(classes.scrollButtons, TabScrollButtonProps.className)
	    })) : null;
	    return conditionalElements;
	  };
	  const scrollSelectedIntoView = useEventCallback(animation => {
	    const {
	      tabsMeta,
	      tabMeta
	    } = getTabsMeta();
	    if (!tabMeta || !tabsMeta) {
	      return;
	    }
	    if (tabMeta[start] < tabsMeta[start]) {
	      // left side of button is out of view
	      const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start] - tabsMeta[start]);
	      scroll(nextScrollStart, {
	        animation
	      });
	    } else if (tabMeta[end] > tabsMeta[end]) {
	      // right side of button is out of view
	      const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end] - tabsMeta[end]);
	      scroll(nextScrollStart, {
	        animation
	      });
	    }
	  });
	  const updateScrollButtonState = useEventCallback(() => {
	    if (scrollable && scrollButtons !== false) {
	      setUpdateScrollObserver(!updateScrollObserver);
	    }
	  });
	  reactExports.useEffect(() => {
	    const handleResize = debounce$1(() => {
	      // If the Tabs component is replaced by Suspense with a fallback, the last
	      // ResizeObserver's handler that runs because of the change in the layout is trying to
	      // access a dom node that is no longer there (as the fallback component is being shown instead).
	      // See https://github.com/mui/material-ui/issues/33276
	      // TODO: Add tests that will ensure the component is not failing when
	      // replaced by Suspense with a fallback, once React is updated to version 18
	      if (tabsRef.current) {
	        updateIndicatorState();
	      }
	    });
	    let resizeObserver;

	    /**
	     * @type {MutationCallback}
	     */
	    const handleMutation = records => {
	      records.forEach(record => {
	        record.removedNodes.forEach(item => {
	          var _resizeObserver;
	          (_resizeObserver = resizeObserver) == null || _resizeObserver.unobserve(item);
	        });
	        record.addedNodes.forEach(item => {
	          var _resizeObserver2;
	          (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.observe(item);
	        });
	      });
	      handleResize();
	      updateScrollButtonState();
	    };
	    const win = ownerWindow(tabsRef.current);
	    win.addEventListener('resize', handleResize);
	    let mutationObserver;
	    if (typeof ResizeObserver !== 'undefined') {
	      resizeObserver = new ResizeObserver(handleResize);
	      Array.from(tabListRef.current.children).forEach(child => {
	        resizeObserver.observe(child);
	      });
	    }
	    if (typeof MutationObserver !== 'undefined') {
	      mutationObserver = new MutationObserver(handleMutation);
	      mutationObserver.observe(tabListRef.current, {
	        childList: true
	      });
	    }
	    return () => {
	      var _mutationObserver, _resizeObserver3;
	      handleResize.clear();
	      win.removeEventListener('resize', handleResize);
	      (_mutationObserver = mutationObserver) == null || _mutationObserver.disconnect();
	      (_resizeObserver3 = resizeObserver) == null || _resizeObserver3.disconnect();
	    };
	  }, [updateIndicatorState, updateScrollButtonState]);

	  /**
	   * Toggle visibility of start and end scroll buttons
	   * Using IntersectionObserver on first and last Tabs.
	   */
	  reactExports.useEffect(() => {
	    const tabListChildren = Array.from(tabListRef.current.children);
	    const length = tabListChildren.length;
	    if (typeof IntersectionObserver !== 'undefined' && length > 0 && scrollable && scrollButtons !== false) {
	      const firstTab = tabListChildren[0];
	      const lastTab = tabListChildren[length - 1];
	      const observerOptions = {
	        root: tabsRef.current,
	        threshold: 0.99
	      };
	      const handleScrollButtonStart = entries => {
	        setDisplayStartScroll(!entries[0].isIntersecting);
	      };
	      const firstObserver = new IntersectionObserver(handleScrollButtonStart, observerOptions);
	      firstObserver.observe(firstTab);
	      const handleScrollButtonEnd = entries => {
	        setDisplayEndScroll(!entries[0].isIntersecting);
	      };
	      const lastObserver = new IntersectionObserver(handleScrollButtonEnd, observerOptions);
	      lastObserver.observe(lastTab);
	      return () => {
	        firstObserver.disconnect();
	        lastObserver.disconnect();
	      };
	    }
	    return undefined;
	  }, [scrollable, scrollButtons, updateScrollObserver, childrenProp == null ? void 0 : childrenProp.length]);
	  reactExports.useEffect(() => {
	    setMounted(true);
	  }, []);
	  reactExports.useEffect(() => {
	    updateIndicatorState();
	  });
	  reactExports.useEffect(() => {
	    // Don't animate on the first render.
	    scrollSelectedIntoView(defaultIndicatorStyle !== indicatorStyle);
	  }, [scrollSelectedIntoView, indicatorStyle]);
	  reactExports.useImperativeHandle(action, () => ({
	    updateIndicator: updateIndicatorState,
	    updateScrollButtons: updateScrollButtonState
	  }), [updateIndicatorState, updateScrollButtonState]);
	  const indicator = /*#__PURE__*/jsxRuntimeExports.jsx(TabsIndicator, _extends({}, TabIndicatorProps, {
	    className: clsx(classes.indicator, TabIndicatorProps.className),
	    ownerState: ownerState,
	    style: _extends({}, indicatorStyle, TabIndicatorProps.style)
	  }));
	  let childIndex = 0;
	  const children = reactExports.Children.map(childrenProp, child => {
	    if (! /*#__PURE__*/reactExports.isValidElement(child)) {
	      return null;
	    }
	    const childValue = child.props.value === undefined ? childIndex : child.props.value;
	    valueToIndex.set(childValue, childIndex);
	    const selected = childValue === value;
	    childIndex += 1;
	    return /*#__PURE__*/reactExports.cloneElement(child, _extends({
	      fullWidth: variant === 'fullWidth',
	      indicator: selected && !mounted && indicator,
	      selected,
	      selectionFollowsFocus,
	      onChange,
	      textColor,
	      value: childValue
	    }, childIndex === 1 && value === false && !child.props.tabIndex ? {
	      tabIndex: 0
	    } : {}));
	  });
	  const handleKeyDown = event => {
	    const list = tabListRef.current;
	    const currentFocus = ownerDocument(list).activeElement;
	    // Keyboard navigation assumes that [role="tab"] are siblings
	    // though we might warn in the future about nested, interactive elements
	    // as a a11y violation
	    const role = currentFocus.getAttribute('role');
	    if (role !== 'tab') {
	      return;
	    }
	    let previousItemKey = orientation === 'horizontal' ? 'ArrowLeft' : 'ArrowUp';
	    let nextItemKey = orientation === 'horizontal' ? 'ArrowRight' : 'ArrowDown';
	    if (orientation === 'horizontal' && isRtl) {
	      // swap previousItemKey with nextItemKey
	      previousItemKey = 'ArrowRight';
	      nextItemKey = 'ArrowLeft';
	    }
	    switch (event.key) {
	      case previousItemKey:
	        event.preventDefault();
	        moveFocus(list, currentFocus, previousItem);
	        break;
	      case nextItemKey:
	        event.preventDefault();
	        moveFocus(list, currentFocus, nextItem);
	        break;
	      case 'Home':
	        event.preventDefault();
	        moveFocus(list, null, nextItem);
	        break;
	      case 'End':
	        event.preventDefault();
	        moveFocus(list, null, previousItem);
	        break;
	    }
	  };
	  const conditionalElements = getConditionalElements();
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(TabsRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    ref: ref,
	    as: component
	  }, other, {
	    children: [conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, /*#__PURE__*/jsxRuntimeExports.jsxs(TabsScroller, {
	      className: classes.scroller,
	      ownerState: ownerState,
	      style: {
	        overflow: scrollerStyle.overflow,
	        [vertical ? `margin${isRtl ? 'Left' : 'Right'}` : 'marginBottom']: visibleScrollbar ? undefined : -scrollerStyle.scrollbarWidth
	      },
	      ref: tabsRef,
	      children: [/*#__PURE__*/jsxRuntimeExports.jsx(FlexContainer, {
	        "aria-label": ariaLabel,
	        "aria-labelledby": ariaLabelledBy,
	        "aria-orientation": orientation === 'vertical' ? 'vertical' : null,
	        className: classes.flexContainer,
	        ownerState: ownerState,
	        onKeyDown: handleKeyDown,
	        ref: tabListRef,
	        role: "tablist",
	        children: children
	      }), mounted && indicator]
	    }), conditionalElements.scrollButtonEnd]
	  }));
	});
	var Tabs$1 = Tabs;

	function getTextFieldUtilityClass(slot) {
	  return generateUtilityClass('MuiTextField', slot);
	}
	generateUtilityClasses('MuiTextField', ['root']);

	const _excluded$C = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
	const variantComponent = {
	  standard: Input$1,
	  filled: FilledInput$1,
	  outlined: OutlinedInput$1
	};
	const useUtilityClasses$s = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getTextFieldUtilityClass, classes);
	};
	const TextFieldRoot = styled$1(FormControl$1, {
	  name: 'MuiTextField',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});

	/**
	 * The `TextField` is a convenience wrapper for the most common cases (80%).
	 * It cannot be all things to all people, otherwise the API would grow out of control.
	 *
	 * ## Advanced Configuration
	 *
	 * It's important to understand that the text field is a simple abstraction
	 * on top of the following components:
	 *
	 * - [FormControl](/material-ui/api/form-control/)
	 * - [InputLabel](/material-ui/api/input-label/)
	 * - [FilledInput](/material-ui/api/filled-input/)
	 * - [OutlinedInput](/material-ui/api/outlined-input/)
	 * - [Input](/material-ui/api/input/)
	 * - [FormHelperText](/material-ui/api/form-helper-text/)
	 *
	 * If you wish to alter the props applied to the `input` element, you can do so as follows:
	 *
	 * ```jsx
	 * const inputProps = {
	 *   step: 300,
	 * };
	 *
	 * return <TextField id="time" type="time" inputProps={inputProps} />;
	 * ```
	 *
	 * For advanced cases, please look at the source of TextField by clicking on the
	 * "Edit this page" button above. Consider either:
	 *
	 * - using the upper case props for passing values directly to the components
	 * - using the underlying components directly as shown in the demos
	 */
	const TextField = /*#__PURE__*/reactExports.forwardRef(function TextField(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTextField'
	  });
	  const {
	      autoComplete,
	      autoFocus = false,
	      children,
	      className,
	      color = 'primary',
	      defaultValue,
	      disabled = false,
	      error = false,
	      FormHelperTextProps,
	      fullWidth = false,
	      helperText,
	      id: idOverride,
	      InputLabelProps,
	      inputProps,
	      InputProps,
	      inputRef,
	      label,
	      maxRows,
	      minRows,
	      multiline = false,
	      name,
	      onBlur,
	      onChange,
	      onFocus,
	      placeholder,
	      required = false,
	      rows,
	      select = false,
	      SelectProps,
	      type,
	      value,
	      variant = 'outlined'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$C);
	  const ownerState = _extends({}, props, {
	    autoFocus,
	    color,
	    disabled,
	    error,
	    fullWidth,
	    multiline,
	    required,
	    select,
	    variant
	  });
	  const classes = useUtilityClasses$s(ownerState);
	  const InputMore = {};
	  if (variant === 'outlined') {
	    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
	      InputMore.notched = InputLabelProps.shrink;
	    }
	    InputMore.label = label;
	  }
	  if (select) {
	    // unset defaults from textbox inputs
	    if (!SelectProps || !SelectProps.native) {
	      InputMore.id = undefined;
	    }
	    InputMore['aria-describedby'] = undefined;
	  }
	  const id = useId(idOverride);
	  const helperTextId = helperText && id ? `${id}-helper-text` : undefined;
	  const inputLabelId = label && id ? `${id}-label` : undefined;
	  const InputComponent = variantComponent[variant];
	  const InputElement = /*#__PURE__*/jsxRuntimeExports.jsx(InputComponent, _extends({
	    "aria-describedby": helperTextId,
	    autoComplete: autoComplete,
	    autoFocus: autoFocus,
	    defaultValue: defaultValue,
	    fullWidth: fullWidth,
	    multiline: multiline,
	    name: name,
	    rows: rows,
	    maxRows: maxRows,
	    minRows: minRows,
	    type: type,
	    value: value,
	    id: id,
	    inputRef: inputRef,
	    onBlur: onBlur,
	    onChange: onChange,
	    onFocus: onFocus,
	    placeholder: placeholder,
	    inputProps: inputProps
	  }, InputMore, InputProps));
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(TextFieldRoot, _extends({
	    className: clsx(classes.root, className),
	    disabled: disabled,
	    error: error,
	    fullWidth: fullWidth,
	    ref: ref,
	    required: required,
	    color: color,
	    variant: variant,
	    ownerState: ownerState
	  }, other, {
	    children: [label != null && label !== '' && /*#__PURE__*/jsxRuntimeExports.jsx(InputLabel$1, _extends({
	      htmlFor: id,
	      id: inputLabelId
	    }, InputLabelProps, {
	      children: label
	    })), select ? /*#__PURE__*/jsxRuntimeExports.jsx(Select$1, _extends({
	      "aria-describedby": helperTextId,
	      id: id,
	      labelId: inputLabelId,
	      value: value,
	      input: InputElement
	    }, SelectProps, {
	      children: children
	    })) : InputElement, helperText && /*#__PURE__*/jsxRuntimeExports.jsx(FormHelperText$1, _extends({
	      id: helperTextId
	    }, FormHelperTextProps, {
	      children: helperText
	    }))]
	  }));
	});
	var TextField$1 = TextField;

	var isPlainObject = isPlainObject_1;

	/**
	 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
	 * objects.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {string} key The key of the property to inspect.
	 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
	 */
	function customOmitClone$1(value) {
	  return isPlainObject(value) ? undefined : value;
	}
	var _customOmitClone = customOmitClone$1;

	var arrayMap$1 = _arrayMap,
	  baseClone = _baseClone,
	  baseUnset = _baseUnset,
	  castPath = _castPath,
	  copyObject = _copyObject,
	  customOmitClone = _customOmitClone,
	  flatRest = _flatRest,
	  getAllKeysIn = _getAllKeysIn;

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
	  CLONE_FLAT_FLAG = 2,
	  CLONE_SYMBOLS_FLAG = 4;

	/**
	 * The opposite of `_.pick`; this method creates an object composed of the
	 * own and inherited enumerable property paths of `object` that are not omitted.
	 *
	 * **Note:** This method is considerably slower than `_.pick`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {...(string|string[])} [paths] The property paths to omit.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.omit(object, ['a', 'c']);
	 * // => { 'b': '2' }
	 */
	var omit = flatRest(function (object, paths) {
	  var result = {};
	  if (object == null) {
	    return result;
	  }
	  var isDeep = false;
	  paths = arrayMap$1(paths, function (path) {
	    path = castPath(path, object);
	    isDeep || (isDeep = path.length > 1);
	    return path;
	  });
	  copyObject(object, getAllKeysIn(object), result);
	  if (isDeep) {
	    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
	  }
	  var length = paths.length;
	  while (length--) {
	    baseUnset(result, paths[length]);
	  }
	  return result;
	});
	var omit_1 = omit;

	var omit$1 = /*@__PURE__*/getDefaultExportFromCjs(omit_1);

	/**
	 * This function is like `arrayIncludes` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */

	function arrayIncludesWith$1(array, value, comparator) {
	  var index = -1,
	    length = array == null ? 0 : array.length;
	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}
	var _arrayIncludesWith = arrayIncludesWith$1;

	var Set$1 = _Set,
	  noop$1 = noop_1,
	  setToArray$1 = _setToArray;

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Creates a set object of `values`.
	 *
	 * @private
	 * @param {Array} values The values to add to the set.
	 * @returns {Object} Returns the new set.
	 */
	var createSet$1 = !(Set$1 && 1 / setToArray$1(new Set$1([, -0]))[1] == INFINITY) ? noop$1 : function (values) {
	  return new Set$1(values);
	};
	var _createSet = createSet$1;

	var SetCache = _SetCache,
	  arrayIncludes$1 = _arrayIncludes,
	  arrayIncludesWith = _arrayIncludesWith,
	  cacheHas = _cacheHas,
	  createSet = _createSet,
	  setToArray = _setToArray;

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq$1(array, iteratee, comparator) {
	  var index = -1,
	    includes = arrayIncludes$1,
	    length = array.length,
	    isCommon = true,
	    result = [],
	    seen = result;
	  if (comparator) {
	    isCommon = false;
	    includes = arrayIncludesWith;
	  } else if (length >= LARGE_ARRAY_SIZE) {
	    var set = iteratee ? null : createSet(array);
	    if (set) {
	      return setToArray(set);
	    }
	    isCommon = false;
	    includes = cacheHas;
	    seen = new SetCache();
	  } else {
	    seen = iteratee ? [] : result;
	  }
	  outer: while (++index < length) {
	    var value = array[index],
	      computed = iteratee ? iteratee(value) : value;
	    value = comparator || value !== 0 ? value : 0;
	    if (isCommon && computed === computed) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    } else if (!includes(seen, computed, comparator)) {
	      if (seen !== result) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}
	var _baseUniq = baseUniq$1;

	var baseFlatten = _baseFlatten,
	  baseRest = _baseRest,
	  baseUniq = _baseUniq,
	  isArrayLikeObject = isArrayLikeObject_1;

	/**
	 * Creates an array of unique values, in order, from all given arrays using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of combined values.
	 * @example
	 *
	 * _.union([2], [1, 2]);
	 * // => [2, 1]
	 */
	var union = baseRest(function (arrays) {
	  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	});
	var union_1 = union;

	var union$1 = /*@__PURE__*/getDefaultExportFromCjs(union_1);

	var Delete = {};

	var interopRequireDefault = {exports: {}};

	(function (module) {
		function _interopRequireDefault(obj) {
		  return obj && obj.__esModule ? obj : {
		    "default": obj
		  };
		}
		module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports; 
	} (interopRequireDefault));

	var interopRequireDefaultExports = interopRequireDefault.exports;

	var createSvgIcon = {};

	var require$$0 = /*@__PURE__*/getAugmentedNamespace(utils);

	var hasRequiredCreateSvgIcon;

	function requireCreateSvgIcon () {
		if (hasRequiredCreateSvgIcon) return createSvgIcon;
		hasRequiredCreateSvgIcon = 1;
		(function (exports) {
			'use client';

			Object.defineProperty(exports, "__esModule", {
			  value: true
			});
			Object.defineProperty(exports, "default", {
			  enumerable: true,
			  get: function () {
			    return _utils.createSvgIcon;
			  }
			});
			var _utils = require$$0; 
		} (createSvgIcon));
		return createSvgIcon;
	}

	var _interopRequireDefault$6 = interopRequireDefaultExports;
	Object.defineProperty(Delete, "__esModule", {
	  value: true
	});
	var default_1$6 = Delete.default = void 0;
	var _createSvgIcon$6 = _interopRequireDefault$6(requireCreateSvgIcon());
	var _jsxRuntime$6 = requireJsxRuntime();
	var _default$6 = (0, _createSvgIcon$6.default)( /*#__PURE__*/(0, _jsxRuntime$6.jsx)("path", {
	  d: "M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
	}), 'Delete');
	default_1$6 = Delete.default = _default$6;

	var ArrowDownward = {};

	var _interopRequireDefault$5 = interopRequireDefaultExports;
	Object.defineProperty(ArrowDownward, "__esModule", {
	  value: true
	});
	var default_1$5 = ArrowDownward.default = void 0;
	var _createSvgIcon$5 = _interopRequireDefault$5(requireCreateSvgIcon());
	var _jsxRuntime$5 = requireJsxRuntime();
	var _default$5 = (0, _createSvgIcon$5.default)( /*#__PURE__*/(0, _jsxRuntime$5.jsx)("path", {
	  d: "m20 12-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
	}), 'ArrowDownward');
	default_1$5 = ArrowDownward.default = _default$5;

	var ArrowUpward = {};

	var _interopRequireDefault$4 = interopRequireDefaultExports;
	Object.defineProperty(ArrowUpward, "__esModule", {
	  value: true
	});
	var default_1$4 = ArrowUpward.default = void 0;
	var _createSvgIcon$4 = _interopRequireDefault$4(requireCreateSvgIcon());
	var _jsxRuntime$4 = requireJsxRuntime();
	var _default$4 = (0, _createSvgIcon$4.default)( /*#__PURE__*/(0, _jsxRuntime$4.jsx)("path", {
	  d: "m4 12 1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"
	}), 'ArrowUpward');
	default_1$4 = ArrowUpward.default = _default$4;

	var Add = {};

	var _interopRequireDefault$3 = interopRequireDefaultExports;
	Object.defineProperty(Add, "__esModule", {
	  value: true
	});
	var default_1$3 = Add.default = void 0;
	var _createSvgIcon$3 = _interopRequireDefault$3(requireCreateSvgIcon());
	var _jsxRuntime$3 = requireJsxRuntime();
	var _default$3 = (0, _createSvgIcon$3.default)( /*#__PURE__*/(0, _jsxRuntime$3.jsx)("path", {
	  d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
	}), 'Add');
	default_1$3 = Add.default = _default$3;

	var ErrorOutline = {};

	var _interopRequireDefault$2 = interopRequireDefaultExports;
	Object.defineProperty(ErrorOutline, "__esModule", {
	  value: true
	});
	var default_1$2 = ErrorOutline.default = void 0;
	var _createSvgIcon$2 = _interopRequireDefault$2(requireCreateSvgIcon());
	var _jsxRuntime$2 = requireJsxRuntime();
	var _default$2 = (0, _createSvgIcon$2.default)( /*#__PURE__*/(0, _jsxRuntime$2.jsx)("path", {
	  d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
	}), 'ErrorOutline');
	default_1$2 = ErrorOutline.default = _default$2;

	var dayjs_min = {exports: {}};

	(function (module, exports) {
		!function (t, e) {
		  module.exports = e() ;
		}(commonjsGlobal, function () {

		  var t = 1e3,
		    e = 6e4,
		    n = 36e5,
		    r = "millisecond",
		    i = "second",
		    s = "minute",
		    u = "hour",
		    a = "day",
		    o = "week",
		    f = "month",
		    h = "quarter",
		    c = "year",
		    d = "date",
		    $ = "Invalid Date",
		    l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/,
		    y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,
		    M = {
		      name: "en",
		      weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
		      months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
		    },
		    m = function (t, e, n) {
		      var r = String(t);
		      return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
		    },
		    g = {
		      s: m,
		      z: function (t) {
		        var e = -t.utcOffset(),
		          n = Math.abs(e),
		          r = Math.floor(n / 60),
		          i = n % 60;
		        return (e <= 0 ? "+" : "-") + m(r, 2, "0") + ":" + m(i, 2, "0");
		      },
		      m: function t(e, n) {
		        if (e.date() < n.date()) return -t(n, e);
		        var r = 12 * (n.year() - e.year()) + (n.month() - e.month()),
		          i = e.clone().add(r, f),
		          s = n - i < 0,
		          u = e.clone().add(r + (s ? -1 : 1), f);
		        return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
		      },
		      a: function (t) {
		        return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
		      },
		      p: function (t) {
		        return {
		          M: f,
		          y: c,
		          w: o,
		          d: a,
		          D: d,
		          h: u,
		          m: s,
		          s: i,
		          ms: r,
		          Q: h
		        }[t] || String(t || "").toLowerCase().replace(/s$/, "");
		      },
		      u: function (t) {
		        return void 0 === t;
		      }
		    },
		    D = "en",
		    v = {};
		  v[D] = M;
		  var p = function (t) {
		      return t instanceof _;
		    },
		    S = function (t, e, n) {
		      var r;
		      if (!t) return D;
		      if ("string" == typeof t) v[t] && (r = t), e && (v[t] = e, r = t);else {
		        var i = t.name;
		        v[i] = t, r = i;
		      }
		      return !n && r && (D = r), r || !n && D;
		    },
		    w = function (t, e) {
		      if (p(t)) return t.clone();
		      var n = "object" == typeof e ? e : {};
		      return n.date = t, n.args = arguments, new _(n);
		    },
		    O = g;
		  O.l = S, O.i = p, O.w = function (t, e) {
		    return w(t, {
		      locale: e.$L,
		      utc: e.$u,
		      x: e.$x,
		      $offset: e.$offset
		    });
		  };
		  var _ = function () {
		      function M(t) {
		        this.$L = S(t.locale, null, !0), this.parse(t);
		      }
		      var m = M.prototype;
		      return m.parse = function (t) {
		        this.$d = function (t) {
		          var e = t.date,
		            n = t.utc;
		          if (null === e) return new Date(NaN);
		          if (O.u(e)) return new Date();
		          if (e instanceof Date) return new Date(e);
		          if ("string" == typeof e && !/Z$/i.test(e)) {
		            var r = e.match(l);
		            if (r) {
		              var i = r[2] - 1 || 0,
		                s = (r[7] || "0").substring(0, 3);
		              return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
		            }
		          }
		          return new Date(e);
		        }(t), this.$x = t.x || {}, this.init();
		      }, m.init = function () {
		        var t = this.$d;
		        this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
		      }, m.$utils = function () {
		        return O;
		      }, m.isValid = function () {
		        return !(this.$d.toString() === $);
		      }, m.isSame = function (t, e) {
		        var n = w(t);
		        return this.startOf(e) <= n && n <= this.endOf(e);
		      }, m.isAfter = function (t, e) {
		        return w(t) < this.startOf(e);
		      }, m.isBefore = function (t, e) {
		        return this.endOf(e) < w(t);
		      }, m.$g = function (t, e, n) {
		        return O.u(t) ? this[e] : this.set(n, t);
		      }, m.unix = function () {
		        return Math.floor(this.valueOf() / 1e3);
		      }, m.valueOf = function () {
		        return this.$d.getTime();
		      }, m.startOf = function (t, e) {
		        var n = this,
		          r = !!O.u(e) || e,
		          h = O.p(t),
		          $ = function (t, e) {
		            var i = O.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
		            return r ? i : i.endOf(a);
		          },
		          l = function (t, e) {
		            return O.w(n.toDate()[t].apply(n.toDate("s"), (r ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e)), n);
		          },
		          y = this.$W,
		          M = this.$M,
		          m = this.$D,
		          g = "set" + (this.$u ? "UTC" : "");
		        switch (h) {
		          case c:
		            return r ? $(1, 0) : $(31, 11);
		          case f:
		            return r ? $(1, M) : $(0, M + 1);
		          case o:
		            var D = this.$locale().weekStart || 0,
		              v = (y < D ? y + 7 : y) - D;
		            return $(r ? m - v : m + (6 - v), M);
		          case a:
		          case d:
		            return l(g + "Hours", 0);
		          case u:
		            return l(g + "Minutes", 1);
		          case s:
		            return l(g + "Seconds", 2);
		          case i:
		            return l(g + "Milliseconds", 3);
		          default:
		            return this.clone();
		        }
		      }, m.endOf = function (t) {
		        return this.startOf(t, !1);
		      }, m.$set = function (t, e) {
		        var n,
		          o = O.p(t),
		          h = "set" + (this.$u ? "UTC" : ""),
		          $ = (n = {}, n[a] = h + "Date", n[d] = h + "Date", n[f] = h + "Month", n[c] = h + "FullYear", n[u] = h + "Hours", n[s] = h + "Minutes", n[i] = h + "Seconds", n[r] = h + "Milliseconds", n)[o],
		          l = o === a ? this.$D + (e - this.$W) : e;
		        if (o === f || o === c) {
		          var y = this.clone().set(d, 1);
		          y.$d[$](l), y.init(), this.$d = y.set(d, Math.min(this.$D, y.daysInMonth())).$d;
		        } else $ && this.$d[$](l);
		        return this.init(), this;
		      }, m.set = function (t, e) {
		        return this.clone().$set(t, e);
		      }, m.get = function (t) {
		        return this[O.p(t)]();
		      }, m.add = function (r, h) {
		        var d,
		          $ = this;
		        r = Number(r);
		        var l = O.p(h),
		          y = function (t) {
		            var e = w($);
		            return O.w(e.date(e.date() + Math.round(t * r)), $);
		          };
		        if (l === f) return this.set(f, this.$M + r);
		        if (l === c) return this.set(c, this.$y + r);
		        if (l === a) return y(1);
		        if (l === o) return y(7);
		        var M = (d = {}, d[s] = e, d[u] = n, d[i] = t, d)[l] || 1,
		          m = this.$d.getTime() + r * M;
		        return O.w(m, this);
		      }, m.subtract = function (t, e) {
		        return this.add(-1 * t, e);
		      }, m.format = function (t) {
		        var e = this,
		          n = this.$locale();
		        if (!this.isValid()) return n.invalidDate || $;
		        var r = t || "YYYY-MM-DDTHH:mm:ssZ",
		          i = O.z(this),
		          s = this.$H,
		          u = this.$m,
		          a = this.$M,
		          o = n.weekdays,
		          f = n.months,
		          h = function (t, n, i, s) {
		            return t && (t[n] || t(e, r)) || i[n].substr(0, s);
		          },
		          c = function (t) {
		            return O.s(s % 12 || 12, t, "0");
		          },
		          d = n.meridiem || function (t, e, n) {
		            var r = t < 12 ? "AM" : "PM";
		            return n ? r.toLowerCase() : r;
		          },
		          l = {
		            YY: String(this.$y).slice(-2),
		            YYYY: this.$y,
		            M: a + 1,
		            MM: O.s(a + 1, 2, "0"),
		            MMM: h(n.monthsShort, a, f, 3),
		            MMMM: h(f, a),
		            D: this.$D,
		            DD: O.s(this.$D, 2, "0"),
		            d: String(this.$W),
		            dd: h(n.weekdaysMin, this.$W, o, 2),
		            ddd: h(n.weekdaysShort, this.$W, o, 3),
		            dddd: o[this.$W],
		            H: String(s),
		            HH: O.s(s, 2, "0"),
		            h: c(1),
		            hh: c(2),
		            a: d(s, u, !0),
		            A: d(s, u, !1),
		            m: String(u),
		            mm: O.s(u, 2, "0"),
		            s: String(this.$s),
		            ss: O.s(this.$s, 2, "0"),
		            SSS: O.s(this.$ms, 3, "0"),
		            Z: i
		          };
		        return r.replace(y, function (t, e) {
		          return e || l[t] || i.replace(":", "");
		        });
		      }, m.utcOffset = function () {
		        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
		      }, m.diff = function (r, d, $) {
		        var l,
		          y = O.p(d),
		          M = w(r),
		          m = (M.utcOffset() - this.utcOffset()) * e,
		          g = this - M,
		          D = O.m(this, M);
		        return D = (l = {}, l[c] = D / 12, l[f] = D, l[h] = D / 3, l[o] = (g - m) / 6048e5, l[a] = (g - m) / 864e5, l[u] = g / n, l[s] = g / e, l[i] = g / t, l)[y] || g, $ ? D : O.a(D);
		      }, m.daysInMonth = function () {
		        return this.endOf(f).$D;
		      }, m.$locale = function () {
		        return v[this.$L];
		      }, m.locale = function (t, e) {
		        if (!t) return this.$L;
		        var n = this.clone(),
		          r = S(t, e, !0);
		        return r && (n.$L = r), n;
		      }, m.clone = function () {
		        return O.w(this.$d, this);
		      }, m.toDate = function () {
		        return new Date(this.valueOf());
		      }, m.toJSON = function () {
		        return this.isValid() ? this.toISOString() : null;
		      }, m.toISOString = function () {
		        return this.$d.toISOString();
		      }, m.toString = function () {
		        return this.$d.toUTCString();
		      }, M;
		    }(),
		    b = _.prototype;
		  return w.prototype = b, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function (t) {
		    b[t[1]] = function (e) {
		      return this.$g(e, t[0], t[1]);
		    };
		  }), w.extend = function (t, e) {
		    return t.$i || (t(e, _, w), t.$i = !0), w;
		  }, w.locale = S, w.isDayjs = p, w.unix = function (t) {
		    return w(1e3 * t);
		  }, w.en = v[D], w.Ls = v, w.p = {}, w;
		}); 
	} (dayjs_min));

	var dayjs_minExports = dayjs_min.exports;
	var dayjs = /*@__PURE__*/getDefaultExportFromCjs(dayjs_minExports);

	var customParseFormat = {exports: {}};

	(function (module, exports) {
		!function (t, e) {
		  module.exports = e() ;
		}(commonjsGlobal, function () {

		  var t = {
		      LTS: "h:mm:ss A",
		      LT: "h:mm A",
		      L: "MM/DD/YYYY",
		      LL: "MMMM D, YYYY",
		      LLL: "MMMM D, YYYY h:mm A",
		      LLLL: "dddd, MMMM D, YYYY h:mm A"
		    },
		    e = /(\[[^[]*\])|([-:/.()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g,
		    n = /\d\d/,
		    r = /\d\d?/,
		    i = /\d*[^\s\d-_:/()]+/,
		    o = {},
		    s = function (t) {
		      return (t = +t) + (t > 68 ? 1900 : 2e3);
		    };
		  var a = function (t) {
		      return function (e) {
		        this[t] = +e;
		      };
		    },
		    f = [/[+-]\d\d:?(\d\d)?|Z/, function (t) {
		      (this.zone || (this.zone = {})).offset = function (t) {
		        if (!t) return 0;
		        if ("Z" === t) return 0;
		        var e = t.match(/([+-]|\d\d)/g),
		          n = 60 * e[1] + (+e[2] || 0);
		        return 0 === n ? 0 : "+" === e[0] ? -n : n;
		      }(t);
		    }],
		    u = function (t) {
		      var e = o[t];
		      return e && (e.indexOf ? e : e.s.concat(e.f));
		    },
		    h = function (t, e) {
		      var n,
		        r = o.meridiem;
		      if (r) {
		        for (var i = 1; i <= 24; i += 1) if (t.indexOf(r(i, 0, e)) > -1) {
		          n = i > 12;
		          break;
		        }
		      } else n = t === (e ? "pm" : "PM");
		      return n;
		    },
		    d = {
		      A: [i, function (t) {
		        this.afternoon = h(t, !1);
		      }],
		      a: [i, function (t) {
		        this.afternoon = h(t, !0);
		      }],
		      S: [/\d/, function (t) {
		        this.milliseconds = 100 * +t;
		      }],
		      SS: [n, function (t) {
		        this.milliseconds = 10 * +t;
		      }],
		      SSS: [/\d{3}/, function (t) {
		        this.milliseconds = +t;
		      }],
		      s: [r, a("seconds")],
		      ss: [r, a("seconds")],
		      m: [r, a("minutes")],
		      mm: [r, a("minutes")],
		      H: [r, a("hours")],
		      h: [r, a("hours")],
		      HH: [r, a("hours")],
		      hh: [r, a("hours")],
		      D: [r, a("day")],
		      DD: [n, a("day")],
		      Do: [i, function (t) {
		        var e = o.ordinal,
		          n = t.match(/\d+/);
		        if (this.day = n[0], e) for (var r = 1; r <= 31; r += 1) e(r).replace(/\[|\]/g, "") === t && (this.day = r);
		      }],
		      M: [r, a("month")],
		      MM: [n, a("month")],
		      MMM: [i, function (t) {
		        var e = u("months"),
		          n = (u("monthsShort") || e.map(function (t) {
		            return t.substr(0, 3);
		          })).indexOf(t) + 1;
		        if (n < 1) throw new Error();
		        this.month = n % 12 || n;
		      }],
		      MMMM: [i, function (t) {
		        var e = u("months").indexOf(t) + 1;
		        if (e < 1) throw new Error();
		        this.month = e % 12 || e;
		      }],
		      Y: [/[+-]?\d+/, a("year")],
		      YY: [n, function (t) {
		        this.year = s(t);
		      }],
		      YYYY: [/\d{4}/, a("year")],
		      Z: f,
		      ZZ: f
		    };
		  function c(n) {
		    var r, i;
		    r = n, i = o && o.formats;
		    for (var s = (n = r.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (e, n, r) {
		        var o = r && r.toUpperCase();
		        return n || i[r] || t[r] || i[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (t, e, n) {
		          return e || n.slice(1);
		        });
		      })).match(e), a = s.length, f = 0; f < a; f += 1) {
		      var u = s[f],
		        h = d[u],
		        c = h && h[0],
		        l = h && h[1];
		      s[f] = l ? {
		        regex: c,
		        parser: l
		      } : u.replace(/^\[|\]$/g, "");
		    }
		    return function (t) {
		      for (var e = {}, n = 0, r = 0; n < a; n += 1) {
		        var i = s[n];
		        if ("string" == typeof i) r += i.length;else {
		          var o = i.regex,
		            f = i.parser,
		            u = t.substr(r),
		            h = o.exec(u)[0];
		          f.call(e, h), t = t.replace(h, "");
		        }
		      }
		      return function (t) {
		        var e = t.afternoon;
		        if (void 0 !== e) {
		          var n = t.hours;
		          e ? n < 12 && (t.hours += 12) : 12 === n && (t.hours = 0), delete t.afternoon;
		        }
		      }(e), e;
		    };
		  }
		  return function (t, e, n) {
		    n.p.customParseFormat = !0, t && t.parseTwoDigitYear && (s = t.parseTwoDigitYear);
		    var r = e.prototype,
		      i = r.parse;
		    r.parse = function (t) {
		      var e = t.date,
		        r = t.utc,
		        s = t.args;
		      this.$u = r;
		      var a = s[1];
		      if ("string" == typeof a) {
		        var f = !0 === s[2],
		          u = !0 === s[3],
		          h = f || u,
		          d = s[2];
		        u && (d = s[2]), o = this.$locale(), !f && d && (o = n.Ls[d]), this.$d = function (t, e, n) {
		          try {
		            if (["x", "X"].indexOf(e) > -1) return new Date(("X" === e ? 1e3 : 1) * t);
		            var r = c(e)(t),
		              i = r.year,
		              o = r.month,
		              s = r.day,
		              a = r.hours,
		              f = r.minutes,
		              u = r.seconds,
		              h = r.milliseconds,
		              d = r.zone,
		              l = new Date(),
		              m = s || (i || o ? 1 : l.getDate()),
		              M = i || l.getFullYear(),
		              Y = 0;
		            i && !o || (Y = o > 0 ? o - 1 : l.getMonth());
		            var p = a || 0,
		              v = f || 0,
		              D = u || 0,
		              g = h || 0;
		            return d ? new Date(Date.UTC(M, Y, m, p, v, D, g + 60 * d.offset * 1e3)) : n ? new Date(Date.UTC(M, Y, m, p, v, D, g)) : new Date(M, Y, m, p, v, D, g);
		          } catch (t) {
		            return new Date("");
		          }
		        }(e, a, r), this.init(), d && !0 !== d && (this.$L = this.locale(d).$L), h && e !== this.format(a) && (this.$d = new Date("")), o = {};
		      } else if (a instanceof Array) for (var l = a.length, m = 1; m <= l; m += 1) {
		        s[1] = a[m - 1];
		        var M = n.apply(this, s);
		        if (M.isValid()) {
		          this.$d = M.$d, this.$L = M.$L, this.init();
		          break;
		        }
		        m === l && (this.$d = new Date(""));
		      } else i.call(this, t);
		    };
		  };
		}); 
	} (customParseFormat));

	var customParseFormatExports = customParseFormat.exports;
	var customParsing = /*@__PURE__*/getDefaultExportFromCjs(customParseFormatExports);

	var Close = {};

	var _interopRequireDefault$1 = interopRequireDefaultExports;
	Object.defineProperty(Close, "__esModule", {
	  value: true
	});
	var default_1$1 = Close.default = void 0;
	var _createSvgIcon$1 = _interopRequireDefault$1(requireCreateSvgIcon());
	var _jsxRuntime$1 = requireJsxRuntime();
	var _default$1 = (0, _createSvgIcon$1.default)( /*#__PURE__*/(0, _jsxRuntime$1.jsx)("path", {
	  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
	}), 'Close');
	default_1$1 = Close.default = _default$1;

	var baseEach = _baseEach,
	  isArrayLike = isArrayLike_1;

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap$1(collection, iteratee) {
	  var index = -1,
	    result = isArrayLike(collection) ? Array(collection.length) : [];
	  baseEach(collection, function (value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}
	var _baseMap = baseMap$1;

	var arrayMap = _arrayMap,
	  baseIteratee = _baseIteratee,
	  baseMap = _baseMap,
	  isArray = isArray_1;

	/**
	 * Creates an array of values by running each element in `collection` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * _.map([4, 8], square);
	 * // => [16, 64]
	 *
	 * _.map({ 'a': 4, 'b': 8 }, square);
	 * // => [16, 64] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map(collection, iteratee) {
	  var func = isArray(collection) ? arrayMap : baseMap;
	  return func(collection, baseIteratee(iteratee));
	}
	var map_1 = map;

	var map$1 = /*@__PURE__*/getDefaultExportFromCjs(map_1);

	const _excluded$B = ["localeText"];
	const MuiPickersAdapterContext = /*#__PURE__*/reactExports.createContext(null);
	/**
	 * Demos:
	 *
	 * - [Date format and localization](https://mui.com/x/react-date-pickers/adapters-locale/)
	 * - [Calendar systems](https://mui.com/x/react-date-pickers/calendar-systems/)
	 * - [Translated components](https://mui.com/x/react-date-pickers/localization/)
	 * - [UTC and timezones](https://mui.com/x/react-date-pickers/timezone/)
	 *
	 * API:
	 *
	 * - [LocalizationProvider API](https://mui.com/x/api/date-pickers/localization-provider/)
	 */
	const LocalizationProvider = function LocalizationProvider(inProps) {
	  var _React$useContext;
	  const {
	      localeText: inLocaleText
	    } = inProps,
	    otherInProps = _objectWithoutPropertiesLoose(inProps, _excluded$B);
	  const {
	    utils: parentUtils,
	    localeText: parentLocaleText
	  } = (_React$useContext = reactExports.useContext(MuiPickersAdapterContext)) != null ? _React$useContext : {
	    utils: undefined,
	    localeText: undefined
	  };
	  const props = useThemeProps({
	    // We don't want to pass the `localeText` prop to the theme, that way it will always return the theme value,
	    // We will then merge this theme value with our value manually
	    props: otherInProps,
	    name: 'MuiLocalizationProvider'
	  });
	  const {
	    children,
	    dateAdapter: DateAdapter,
	    dateFormats,
	    dateLibInstance,
	    adapterLocale,
	    localeText: themeLocaleText
	  } = props;
	  const localeText = reactExports.useMemo(() => _extends({}, themeLocaleText, parentLocaleText, inLocaleText), [themeLocaleText, parentLocaleText, inLocaleText]);
	  const utils = reactExports.useMemo(() => {
	    if (!DateAdapter) {
	      if (parentUtils) {
	        return parentUtils;
	      }
	      return null;
	    }
	    const adapter = new DateAdapter({
	      locale: adapterLocale,
	      formats: dateFormats,
	      instance: dateLibInstance
	    });
	    if (!adapter.isMUIAdapter) {
	      throw new Error(['MUI: The date adapter should be imported from `@mui/x-date-pickers` or `@mui/x-date-pickers-pro`, not from `@date-io`', "For example, `import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs'` instead of `import AdapterDayjs from '@date-io/dayjs'`", 'More information on the installation documentation: https://mui.com/x/react-date-pickers/getting-started/#installation'].join(`\n`));
	    }
	    return adapter;
	  }, [DateAdapter, adapterLocale, dateFormats, dateLibInstance, parentUtils]);
	  const defaultDates = reactExports.useMemo(() => {
	    if (!utils) {
	      return null;
	    }
	    return {
	      minDate: utils.date('1900-01-01T00:00:00.000'),
	      maxDate: utils.date('2099-12-31T00:00:00.000')
	    };
	  }, [utils]);
	  const contextValue = reactExports.useMemo(() => {
	    return {
	      utils,
	      defaultDates,
	      localeText
	    };
	  }, [defaultDates, utils, localeText]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(MuiPickersAdapterContext.Provider, {
	    value: contextValue,
	    children: children
	  });
	};

	const getPickersLocalization = pickersTranslations => {
	  return {
	    components: {
	      MuiLocalizationProvider: {
	        defaultProps: {
	          localeText: _extends({}, pickersTranslations)
	        }
	      }
	    }
	  };
	};

	// This object is not Partial<PickersLocaleText> because it is the default values

	const enUSPickers = {
	  // Calendar navigation
	  previousMonth: 'Previous month',
	  nextMonth: 'Next month',
	  // View navigation
	  openPreviousView: 'open previous view',
	  openNextView: 'open next view',
	  calendarViewSwitchingButtonAriaLabel: view => view === 'year' ? 'year view is open, switch to calendar view' : 'calendar view is open, switch to year view',
	  // DateRange placeholders
	  start: 'Start',
	  end: 'End',
	  // Action bar
	  cancelButtonLabel: 'Cancel',
	  clearButtonLabel: 'Clear',
	  okButtonLabel: 'OK',
	  todayButtonLabel: 'Today',
	  // Toolbar titles
	  datePickerToolbarTitle: 'Select date',
	  dateTimePickerToolbarTitle: 'Select date & time',
	  timePickerToolbarTitle: 'Select time',
	  dateRangePickerToolbarTitle: 'Select date range',
	  // Clock labels
	  clockLabelText: (view, time, adapter) => `Select ${view}. ${time === null ? 'No time selected' : `Selected time is ${adapter.format(time, 'fullTime')}`}`,
	  hoursClockNumberText: hours => `${hours} hours`,
	  minutesClockNumberText: minutes => `${minutes} minutes`,
	  secondsClockNumberText: seconds => `${seconds} seconds`,
	  // Digital clock labels
	  selectViewText: view => `Select ${view}`,
	  // Calendar labels
	  calendarWeekNumberHeaderLabel: 'Week number',
	  calendarWeekNumberHeaderText: '#',
	  calendarWeekNumberAriaLabelText: weekNumber => `Week ${weekNumber}`,
	  calendarWeekNumberText: weekNumber => `${weekNumber}`,
	  // Open picker labels
	  openDatePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Choose date, selected date is ${utils.format(value, 'fullDate')}` : 'Choose date',
	  openTimePickerDialogue: (value, utils) => value !== null && utils.isValid(value) ? `Choose time, selected time is ${utils.format(value, 'fullTime')}` : 'Choose time',
	  fieldClearLabel: 'Clear value',
	  // Table labels
	  timeTableLabel: 'pick time',
	  dateTableLabel: 'pick date',
	  // Field section placeholders
	  fieldYearPlaceholder: params => 'Y'.repeat(params.digitAmount),
	  fieldMonthPlaceholder: params => params.contentType === 'letter' ? 'MMMM' : 'MM',
	  fieldDayPlaceholder: () => 'DD',
	  fieldWeekDayPlaceholder: params => params.contentType === 'letter' ? 'EEEE' : 'EE',
	  fieldHoursPlaceholder: () => 'hh',
	  fieldMinutesPlaceholder: () => 'mm',
	  fieldSecondsPlaceholder: () => 'ss',
	  fieldMeridiemPlaceholder: () => 'aa'
	};
	const DEFAULT_LOCALE = enUSPickers;
	getPickersLocalization(enUSPickers);

	const useLocalizationContext = () => {
	  const localization = reactExports.useContext(MuiPickersAdapterContext);
	  if (localization === null) {
	    throw new Error(['MUI: Can not find the date and time pickers localization context.', 'It looks like you forgot to wrap your component in LocalizationProvider.', 'This can also happen if you are bundling multiple versions of the `@mui/x-date-pickers` package'].join('\n'));
	  }
	  if (localization.utils === null) {
	    throw new Error(['MUI: Can not find the date and time pickers adapter from its localization context.', 'It looks like you forgot to pass a `dateAdapter` to your LocalizationProvider.'].join('\n'));
	  }
	  const localeText = reactExports.useMemo(() => _extends({}, DEFAULT_LOCALE, localization.localeText), [localization.localeText]);
	  return reactExports.useMemo(() => _extends({}, localization, {
	    localeText
	  }), [localization, localeText]);
	};
	const useUtils = () => useLocalizationContext().utils;
	const useDefaultDates = () => useLocalizationContext().defaultDates;
	const useLocaleText = () => useLocalizationContext().localeText;
	const useNow = timezone => {
	  const utils = useUtils();
	  const now = reactExports.useRef();
	  if (now.current === undefined) {
	    now.current = utils.dateWithTimezone(undefined, timezone);
	  }
	  return now.current;
	};

	const ArrowDropDownIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M7 10l5 5 5-5z"
	}), 'ArrowDropDown');

	/**
	 * @ignore - internal component.
	 */
	const ArrowLeftIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
	}), 'ArrowLeft');

	/**
	 * @ignore - internal component.
	 */
	const ArrowRightIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
	}), 'ArrowRight');

	/**
	 * @ignore - internal component.
	 */
	const CalendarIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
	}), 'Calendar');

	/**
	 * @ignore - internal component.
	 */
	const ClockIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	  children: [/*#__PURE__*/jsxRuntimeExports.jsx("path", {
	    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
	  }), /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	    d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
	  })]
	}), 'Clock');

	/**
	 * @ignore - internal component.
	 */
	const DateRangeIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"
	}), 'DateRange');

	/**
	 * @ignore - internal component.
	 */
	const TimeIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	  children: [/*#__PURE__*/jsxRuntimeExports.jsx("path", {
	    d: "M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
	  }), /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	    d: "M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"
	  })]
	}), 'Time');

	/**
	 * @ignore - internal component.
	 */
	const ClearIcon = createSvgIcon$1( /*#__PURE__*/jsxRuntimeExports.jsx("path", {
	  d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
	}), 'Clear');

	function getPickersArrowSwitcherUtilityClass(slot) {
	  return generateUtilityClass('MuiPickersArrowSwitcher', slot);
	}
	generateUtilityClasses('MuiPickersArrowSwitcher', ['root', 'spacer', 'button']);

	const _excluded$A = ["children", "className", "slots", "slotProps", "isNextDisabled", "isNextHidden", "onGoToNext", "nextLabel", "isPreviousDisabled", "isPreviousHidden", "onGoToPrevious", "previousLabel"],
	  _excluded2$7 = ["ownerState"],
	  _excluded3$4 = ["ownerState"];
	const PickersArrowSwitcherRoot = styled$1('div', {
	  name: 'MuiPickersArrowSwitcher',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'flex'
	});
	const PickersArrowSwitcherSpacer = styled$1('div', {
	  name: 'MuiPickersArrowSwitcher',
	  slot: 'Spacer',
	  overridesResolver: (props, styles) => styles.spacer
	})(({
	  theme
	}) => ({
	  width: theme.spacing(3)
	}));
	const PickersArrowSwitcherButton = styled$1(IconButton$1, {
	  name: 'MuiPickersArrowSwitcher',
	  slot: 'Button',
	  overridesResolver: (props, styles) => styles.button
	})(({
	  ownerState
	}) => _extends({}, ownerState.hidden && {
	  visibility: 'hidden'
	}));
	const useUtilityClasses$r = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    spacer: ['spacer'],
	    button: ['button']
	  };
	  return composeClasses(slots, getPickersArrowSwitcherUtilityClass, classes);
	};
	const PickersArrowSwitcher = /*#__PURE__*/reactExports.forwardRef(function PickersArrowSwitcher(inProps, ref) {
	  var _slots$previousIconBu, _slots$nextIconButton, _slots$leftArrowIcon, _slots$rightArrowIcon;
	  const theme = useTheme();
	  const isRTL = theme.direction === 'rtl';
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPickersArrowSwitcher'
	  });
	  const {
	      children,
	      className,
	      slots,
	      slotProps,
	      isNextDisabled,
	      isNextHidden,
	      onGoToNext,
	      nextLabel,
	      isPreviousDisabled,
	      isPreviousHidden,
	      onGoToPrevious,
	      previousLabel
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$A);
	  const ownerState = props;
	  const classes = useUtilityClasses$r(ownerState);
	  const nextProps = {
	    isDisabled: isNextDisabled,
	    isHidden: isNextHidden,
	    goTo: onGoToNext,
	    label: nextLabel
	  };
	  const previousProps = {
	    isDisabled: isPreviousDisabled,
	    isHidden: isPreviousHidden,
	    goTo: onGoToPrevious,
	    label: previousLabel
	  };
	  const PreviousIconButton = (_slots$previousIconBu = slots == null ? void 0 : slots.previousIconButton) != null ? _slots$previousIconBu : PickersArrowSwitcherButton;
	  const previousIconButtonProps = useSlotProps({
	    elementType: PreviousIconButton,
	    externalSlotProps: slotProps == null ? void 0 : slotProps.previousIconButton,
	    additionalProps: {
	      size: 'medium',
	      title: previousProps.label,
	      'aria-label': previousProps.label,
	      disabled: previousProps.isDisabled,
	      edge: 'end',
	      onClick: previousProps.goTo
	    },
	    ownerState: _extends({}, ownerState, {
	      hidden: previousProps.isHidden
	    }),
	    className: classes.button
	  });
	  const NextIconButton = (_slots$nextIconButton = slots == null ? void 0 : slots.nextIconButton) != null ? _slots$nextIconButton : PickersArrowSwitcherButton;
	  const nextIconButtonProps = useSlotProps({
	    elementType: NextIconButton,
	    externalSlotProps: slotProps == null ? void 0 : slotProps.nextIconButton,
	    additionalProps: {
	      size: 'medium',
	      title: nextProps.label,
	      'aria-label': nextProps.label,
	      disabled: nextProps.isDisabled,
	      edge: 'start',
	      onClick: nextProps.goTo
	    },
	    ownerState: _extends({}, ownerState, {
	      hidden: nextProps.isHidden
	    }),
	    className: classes.button
	  });
	  const LeftArrowIcon = (_slots$leftArrowIcon = slots == null ? void 0 : slots.leftArrowIcon) != null ? _slots$leftArrowIcon : ArrowLeftIcon;
	  // The spread is here to avoid this bug mui/material-ui#34056
	  const _useSlotProps = useSlotProps({
	      elementType: LeftArrowIcon,
	      externalSlotProps: slotProps == null ? void 0 : slotProps.leftArrowIcon,
	      additionalProps: {
	        fontSize: 'inherit'
	      },
	      ownerState: undefined
	    }),
	    leftArrowIconProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2$7);
	  const RightArrowIcon = (_slots$rightArrowIcon = slots == null ? void 0 : slots.rightArrowIcon) != null ? _slots$rightArrowIcon : ArrowRightIcon;
	  // The spread is here to avoid this bug mui/material-ui#34056
	  const _useSlotProps2 = useSlotProps({
	      elementType: RightArrowIcon,
	      externalSlotProps: slotProps == null ? void 0 : slotProps.rightArrowIcon,
	      additionalProps: {
	        fontSize: 'inherit'
	      },
	      ownerState: undefined
	    }),
	    rightArrowIconProps = _objectWithoutPropertiesLoose(_useSlotProps2, _excluded3$4);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(PickersArrowSwitcherRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className),
	    ownerState: ownerState
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(PreviousIconButton, _extends({}, previousIconButtonProps, {
	      children: isRTL ? /*#__PURE__*/jsxRuntimeExports.jsx(RightArrowIcon, _extends({}, rightArrowIconProps)) : /*#__PURE__*/jsxRuntimeExports.jsx(LeftArrowIcon, _extends({}, leftArrowIconProps))
	    })), children ? /*#__PURE__*/jsxRuntimeExports.jsx(Typography$1, {
	      variant: "subtitle1",
	      component: "span",
	      children: children
	    }) : /*#__PURE__*/jsxRuntimeExports.jsx(PickersArrowSwitcherSpacer, {
	      className: classes.spacer,
	      ownerState: ownerState
	    }), /*#__PURE__*/jsxRuntimeExports.jsx(NextIconButton, _extends({}, nextIconButtonProps, {
	      children: isRTL ? /*#__PURE__*/jsxRuntimeExports.jsx(LeftArrowIcon, _extends({}, leftArrowIconProps)) : /*#__PURE__*/jsxRuntimeExports.jsx(RightArrowIcon, _extends({}, rightArrowIconProps))
	    }))]
	  }));
	});

	const areViewsEqual = (views, expectedViews) => {
	  if (views.length !== expectedViews.length) {
	    return false;
	  }
	  return expectedViews.every(expectedView => views.includes(expectedView));
	};
	const applyDefaultViewProps = ({
	  openTo,
	  defaultOpenTo,
	  views,
	  defaultViews
	}) => {
	  const viewsWithDefault = views != null ? views : defaultViews;
	  let openToWithDefault;
	  if (openTo != null) {
	    openToWithDefault = openTo;
	  } else if (viewsWithDefault.includes(defaultOpenTo)) {
	    openToWithDefault = defaultOpenTo;
	  } else if (viewsWithDefault.length > 0) {
	    openToWithDefault = viewsWithDefault[0];
	  } else {
	    throw new Error('MUI: The `views` prop must contain at least one view');
	  }
	  return {
	    views: viewsWithDefault,
	    openTo: openToWithDefault
	  };
	};

	const timeViews = ['hours', 'minutes', 'seconds'];
	const isTimeView = view => timeViews.includes(view);
	const isInternalTimeView = view => timeViews.includes(view) || view === 'meridiem';
	const getMeridiem = (date, utils) => {
	  if (!date) {
	    return null;
	  }
	  return utils.getHours(date) >= 12 ? 'pm' : 'am';
	};
	const convertValueToMeridiem = (value, meridiem, ampm) => {
	  if (ampm) {
	    const currentMeridiem = value >= 12 ? 'pm' : 'am';
	    if (currentMeridiem !== meridiem) {
	      return meridiem === 'am' ? value - 12 : value + 12;
	    }
	  }
	  return value;
	};
	const convertToMeridiem = (time, meridiem, ampm, utils) => {
	  const newHoursAmount = convertValueToMeridiem(utils.getHours(time), meridiem, ampm);
	  return utils.setHours(time, newHoursAmount);
	};
	const getSecondsInDay = (date, utils) => {
	  return utils.getHours(date) * 3600 + utils.getMinutes(date) * 60 + utils.getSeconds(date);
	};
	const createIsAfterIgnoreDatePart = (disableIgnoringDatePartForTimeValidation, utils) => (dateLeft, dateRight) => {
	  if (disableIgnoringDatePartForTimeValidation) {
	    return utils.isAfter(dateLeft, dateRight);
	  }
	  return getSecondsInDay(dateLeft, utils) > getSecondsInDay(dateRight, utils);
	};
	const resolveTimeFormat = (utils, {
	  format,
	  views,
	  ampm
	}) => {
	  if (format != null) {
	    return format;
	  }
	  const formats = utils.formats;
	  if (areViewsEqual(views, ['hours'])) {
	    return ampm ? `${formats.hours12h} ${formats.meridiem}` : formats.hours24h;
	  }
	  if (areViewsEqual(views, ['minutes'])) {
	    return formats.minutes;
	  }
	  if (areViewsEqual(views, ['seconds'])) {
	    return formats.seconds;
	  }
	  if (areViewsEqual(views, ['minutes', 'seconds'])) {
	    return `${formats.minutes}:${formats.seconds}`;
	  }
	  if (areViewsEqual(views, ['hours', 'minutes', 'seconds'])) {
	    return ampm ? `${formats.hours12h}:${formats.minutes}:${formats.seconds} ${formats.meridiem}` : `${formats.hours24h}:${formats.minutes}:${formats.seconds}`;
	  }
	  return ampm ? `${formats.hours12h}:${formats.minutes} ${formats.meridiem}` : `${formats.hours24h}:${formats.minutes}`;
	};

	function useViews({
	  onChange,
	  onViewChange,
	  openTo,
	  view: inView,
	  views,
	  autoFocus,
	  focusedView: inFocusedView,
	  onFocusedViewChange
	}) {
	  var _views, _views2;
	  const previousOpenTo = reactExports.useRef(openTo);
	  const previousViews = reactExports.useRef(views);
	  const defaultView = reactExports.useRef(views.includes(openTo) ? openTo : views[0]);
	  const [view, setView] = useControlled({
	    name: 'useViews',
	    state: 'view',
	    controlled: inView,
	    default: defaultView.current
	  });
	  const defaultFocusedView = reactExports.useRef(autoFocus ? view : null);
	  const [focusedView, setFocusedView] = useControlled({
	    name: 'useViews',
	    state: 'focusedView',
	    controlled: inFocusedView,
	    default: defaultFocusedView.current
	  });
	  reactExports.useEffect(() => {
	    // Update the current view when `openTo` or `views` props change
	    if (previousOpenTo.current && previousOpenTo.current !== openTo || previousViews.current && previousViews.current.some(previousView => !views.includes(previousView))) {
	      setView(views.includes(openTo) ? openTo : views[0]);
	      previousViews.current = views;
	      previousOpenTo.current = openTo;
	    }
	  }, [openTo, setView, view, views]);
	  const viewIndex = views.indexOf(view);
	  const previousView = (_views = views[viewIndex - 1]) != null ? _views : null;
	  const nextView = (_views2 = views[viewIndex + 1]) != null ? _views2 : null;
	  const handleFocusedViewChange = useEventCallback((viewToFocus, hasFocus) => {
	    if (hasFocus) {
	      // Focus event
	      setFocusedView(viewToFocus);
	    } else {
	      // Blur event
	      setFocusedView(prevFocusedView => viewToFocus === prevFocusedView ? null : prevFocusedView // If false the blur is due to view switching
	      );
	    }
	    onFocusedViewChange == null || onFocusedViewChange(viewToFocus, hasFocus);
	  });
	  const handleChangeView = useEventCallback(newView => {
	    // always keep the focused view in sync
	    handleFocusedViewChange(newView, true);
	    if (newView === view) {
	      return;
	    }
	    setView(newView);
	    if (onViewChange) {
	      onViewChange(newView);
	    }
	  });
	  const goToNextView = useEventCallback(() => {
	    if (nextView) {
	      handleChangeView(nextView);
	    }
	  });
	  const setValueAndGoToNextView = useEventCallback((value, currentViewSelectionState, selectedView) => {
	    const isSelectionFinishedOnCurrentView = currentViewSelectionState === 'finish';
	    const hasMoreViews = selectedView ?
	    // handles case like `DateTimePicker`, where a view might return a `finish` selection state
	    // but we it's not the final view given all `views` -> overall selection state should be `partial`.
	    views.indexOf(selectedView) < views.length - 1 : Boolean(nextView);
	    const globalSelectionState = isSelectionFinishedOnCurrentView && hasMoreViews ? 'partial' : currentViewSelectionState;
	    onChange(value, globalSelectionState, selectedView);
	    // Detects if the selected view is not the active one.
	    // Can happen if multiple views are displayed, like in `DesktopDateTimePicker` or `MultiSectionDigitalClock`.
	    if (selectedView && selectedView !== view) {
	      const nextViewAfterSelected = views[views.indexOf(selectedView) + 1];
	      if (nextViewAfterSelected) {
	        // move to next view after the selected one
	        handleChangeView(nextViewAfterSelected);
	      }
	    } else if (isSelectionFinishedOnCurrentView) {
	      goToNextView();
	    }
	  });
	  return {
	    view,
	    setView: handleChangeView,
	    focusedView,
	    setFocusedView: handleFocusedViewChange,
	    nextView,
	    previousView,
	    // Always return up to date default view instead of the initial one (i.e. defaultView.current)
	    defaultView: views.includes(openTo) ? openTo : views[0],
	    goToNextView,
	    setValueAndGoToNextView
	  };
	}

	function useNextMonthDisabled(month, {
	  disableFuture,
	  maxDate,
	  timezone
	}) {
	  const utils = useUtils();
	  return reactExports.useMemo(() => {
	    const now = utils.dateWithTimezone(undefined, timezone);
	    const lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, maxDate) ? now : maxDate);
	    return !utils.isAfter(lastEnabledMonth, month);
	  }, [disableFuture, maxDate, month, utils, timezone]);
	}
	function usePreviousMonthDisabled(month, {
	  disablePast,
	  minDate,
	  timezone
	}) {
	  const utils = useUtils();
	  return reactExports.useMemo(() => {
	    const now = utils.dateWithTimezone(undefined, timezone);
	    const firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, minDate) ? now : minDate);
	    return !utils.isBefore(firstEnabledMonth, month);
	  }, [disablePast, minDate, month, utils, timezone]);
	}
	function useMeridiemMode(date, ampm, onChange, selectionState) {
	  const utils = useUtils();
	  const meridiemMode = getMeridiem(date, utils);
	  const handleMeridiemChange = reactExports.useCallback(mode => {
	    const timeWithMeridiem = date == null ? null : convertToMeridiem(date, mode, Boolean(ampm), utils);
	    onChange(timeWithMeridiem, selectionState != null ? selectionState : 'partial');
	  }, [ampm, date, onChange, selectionState, utils]);
	  return {
	    meridiemMode,
	    handleMeridiemChange
	  };
	}

	const DAY_SIZE = 36;
	const DAY_MARGIN = 2;
	const DIALOG_WIDTH = 320;
	const MAX_CALENDAR_HEIGHT = 280;
	const VIEW_HEIGHT = 334;
	const DIGITAL_CLOCK_VIEW_HEIGHT = 232;
	const MULTI_SECTION_CLOCK_SECTION_WIDTH = 48;

	const PickerViewRoot = styled$1('div')({
	  overflow: 'hidden',
	  width: DIALOG_WIDTH,
	  maxHeight: VIEW_HEIGHT,
	  display: 'flex',
	  flexDirection: 'column',
	  margin: '0 auto'
	});

	function getTimeClockUtilityClass(slot) {
	  return generateUtilityClass('MuiTimeClock', slot);
	}
	generateUtilityClasses('MuiTimeClock', ['root', 'arrowSwitcher']);

	const CLOCK_WIDTH = 220;
	const CLOCK_HOUR_WIDTH = 36;
	const clockCenter = {
	  x: CLOCK_WIDTH / 2,
	  y: CLOCK_WIDTH / 2
	};
	const baseClockPoint = {
	  x: clockCenter.x,
	  y: 0
	};
	const cx = baseClockPoint.x - clockCenter.x;
	const cy = baseClockPoint.y - clockCenter.y;
	const rad2deg = rad => rad * (180 / Math.PI);
	const getAngleValue = (step, offsetX, offsetY) => {
	  const x = offsetX - clockCenter.x;
	  const y = offsetY - clockCenter.y;
	  const atan = Math.atan2(cx, cy) - Math.atan2(x, y);
	  let deg = rad2deg(atan);
	  deg = Math.round(deg / step) * step;
	  deg %= 360;
	  const value = Math.floor(deg / step) || 0;
	  const delta = x ** 2 + y ** 2;
	  const distance = Math.sqrt(delta);
	  return {
	    value,
	    distance
	  };
	};
	const getMinutes = (offsetX, offsetY, step = 1) => {
	  const angleStep = step * 6;
	  let {
	    value
	  } = getAngleValue(angleStep, offsetX, offsetY);
	  value = value * step % 60;
	  return value;
	};
	const getHours = (offsetX, offsetY, ampm) => {
	  const {
	    value,
	    distance
	  } = getAngleValue(30, offsetX, offsetY);
	  let hour = value || 12;
	  if (!ampm) {
	    if (distance < CLOCK_WIDTH / 2 - CLOCK_HOUR_WIDTH) {
	      hour += 12;
	      hour %= 24;
	    }
	  } else {
	    hour %= 12;
	  }
	  return hour;
	};

	function getClockPointerUtilityClass(slot) {
	  return generateUtilityClass('MuiClockPointer', slot);
	}
	generateUtilityClasses('MuiClockPointer', ['root', 'thumb']);

	const _excluded$z = ["className", "hasSelected", "isInner", "type", "viewValue"];
	const useUtilityClasses$q = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    thumb: ['thumb']
	  };
	  return composeClasses(slots, getClockPointerUtilityClass, classes);
	};
	const ClockPointerRoot = styled$1('div', {
	  name: 'MuiClockPointer',
	  slot: 'Root',
	  overridesResolver: (_, styles) => styles.root
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  width: 2,
	  backgroundColor: (theme.vars || theme).palette.primary.main,
	  position: 'absolute',
	  left: 'calc(50% - 1px)',
	  bottom: '50%',
	  transformOrigin: 'center bottom 0px'
	}, ownerState.shouldAnimate && {
	  transition: theme.transitions.create(['transform', 'height'])
	}));
	const ClockPointerThumb = styled$1('div', {
	  name: 'MuiClockPointer',
	  slot: 'Thumb',
	  overridesResolver: (_, styles) => styles.thumb
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  width: 4,
	  height: 4,
	  backgroundColor: (theme.vars || theme).palette.primary.contrastText,
	  borderRadius: '50%',
	  position: 'absolute',
	  top: -21,
	  left: `calc(50% - ${CLOCK_HOUR_WIDTH / 2}px)`,
	  border: `${(CLOCK_HOUR_WIDTH - 4) / 2}px solid ${(theme.vars || theme).palette.primary.main}`,
	  boxSizing: 'content-box'
	}, ownerState.hasSelected && {
	  backgroundColor: (theme.vars || theme).palette.primary.main
	}));

	/**
	 * @ignore - internal component.
	 */
	function ClockPointer(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiClockPointer'
	  });
	  const {
	      className,
	      isInner,
	      type,
	      viewValue
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$z);
	  const previousType = reactExports.useRef(type);
	  reactExports.useEffect(() => {
	    previousType.current = type;
	  }, [type]);
	  const ownerState = _extends({}, props, {
	    shouldAnimate: previousType.current !== type
	  });
	  const classes = useUtilityClasses$q(ownerState);
	  const getAngleStyle = () => {
	    const max = type === 'hours' ? 12 : 60;
	    let angle = 360 / max * viewValue;
	    if (type === 'hours' && viewValue > 12) {
	      angle -= 360; // round up angle to max 360 degrees
	    }
	    return {
	      height: Math.round((isInner ? 0.26 : 0.4) * CLOCK_WIDTH),
	      transform: `rotateZ(${angle}deg)`
	    };
	  };
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ClockPointerRoot, _extends({
	    style: getAngleStyle(),
	    className: clsx(className, classes.root),
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(ClockPointerThumb, {
	      ownerState: ownerState,
	      className: classes.thumb
	    })
	  }));
	}

	function getClockUtilityClass(slot) {
	  return generateUtilityClass('MuiClock', slot);
	}
	generateUtilityClasses('MuiClock', ['root', 'clock', 'wrapper', 'squareMask', 'pin', 'amButton', 'pmButton', 'meridiemText']);

	const findClosestEnabledDate = ({
	  date,
	  disableFuture,
	  disablePast,
	  maxDate,
	  minDate,
	  isDateDisabled,
	  utils,
	  timezone
	}) => {
	  const today = utils.startOfDay(utils.dateWithTimezone(undefined, timezone));
	  if (disablePast && utils.isBefore(minDate, today)) {
	    minDate = today;
	  }
	  if (disableFuture && utils.isAfter(maxDate, today)) {
	    maxDate = today;
	  }
	  let forward = date;
	  let backward = date;
	  if (utils.isBefore(date, minDate)) {
	    forward = minDate;
	    backward = null;
	  }
	  if (utils.isAfter(date, maxDate)) {
	    if (backward) {
	      backward = maxDate;
	    }
	    forward = null;
	  }
	  while (forward || backward) {
	    if (forward && utils.isAfter(forward, maxDate)) {
	      forward = null;
	    }
	    if (backward && utils.isBefore(backward, minDate)) {
	      backward = null;
	    }
	    if (forward) {
	      if (!isDateDisabled(forward)) {
	        return forward;
	      }
	      forward = utils.addDays(forward, 1);
	    }
	    if (backward) {
	      if (!isDateDisabled(backward)) {
	        return backward;
	      }
	      backward = utils.addDays(backward, -1);
	    }
	  }
	  return null;
	};
	const replaceInvalidDateByNull = (utils, value) => value == null || !utils.isValid(value) ? null : value;
	const applyDefaultDate = (utils, value, defaultValue) => {
	  if (value == null || !utils.isValid(value)) {
	    return defaultValue;
	  }
	  return value;
	};
	const areDatesEqual = (utils, a, b) => {
	  if (!utils.isValid(a) && a != null && !utils.isValid(b) && b != null) {
	    return true;
	  }
	  return utils.isEqual(a, b);
	};
	const getMonthsInYear = (utils, year) => {
	  const firstMonth = utils.startOfYear(year);
	  const months = [firstMonth];
	  while (months.length < 12) {
	    const prevMonth = months[months.length - 1];
	    months.push(utils.addMonths(prevMonth, 1));
	  }
	  return months;
	};
	const mergeDateAndTime = (utils, dateParam, timeParam) => {
	  let mergedDate = dateParam;
	  mergedDate = utils.setHours(mergedDate, utils.getHours(timeParam));
	  mergedDate = utils.setMinutes(mergedDate, utils.getMinutes(timeParam));
	  mergedDate = utils.setSeconds(mergedDate, utils.getSeconds(timeParam));
	  return mergedDate;
	};
	const getTodayDate = (utils, timezone, valueType) => valueType === 'date' ? utils.startOfDay(utils.dateWithTimezone(undefined, timezone)) : utils.dateWithTimezone(undefined, timezone);
	const formatMeridiem = (utils, meridiem) => {
	  const date = utils.setHours(utils.date(), meridiem === 'am' ? 2 : 14);
	  return utils.format(date, 'meridiem');
	};
	const dateViews = ['year', 'month', 'day'];
	const isDatePickerView = view => dateViews.includes(view);
	const resolveDateFormat = (utils, {
	  format,
	  views
	}, isInToolbar) => {
	  if (format != null) {
	    return format;
	  }
	  const formats = utils.formats;
	  if (areViewsEqual(views, ['year'])) {
	    return formats.year;
	  }
	  if (areViewsEqual(views, ['month'])) {
	    return formats.month;
	  }
	  if (areViewsEqual(views, ['day'])) {
	    return formats.dayOfMonth;
	  }
	  if (areViewsEqual(views, ['month', 'year'])) {
	    return `${formats.month} ${formats.year}`;
	  }
	  if (areViewsEqual(views, ['day', 'month'])) {
	    return `${formats.month} ${formats.dayOfMonth}`;
	  }
	  if (isInToolbar) {
	    // Little localization hack (Google is doing the same for android native pickers):
	    // For english localization it is convenient to include weekday into the date "Mon, Jun 1".
	    // For other locales using strings like "June 1", without weekday.
	    return /en/.test(utils.getCurrentLocaleCode()) ? formats.normalDateWithWeekday : formats.normalDate;
	  }
	  return formats.keyboardDate;
	};
	const getWeekdays = (utils, date) => {
	  const start = utils.startOfWeek(date);
	  return [0, 1, 2, 3, 4, 5, 6].map(diff => utils.addDays(start, diff));
	};

	const useUtilityClasses$p = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    clock: ['clock'],
	    wrapper: ['wrapper'],
	    squareMask: ['squareMask'],
	    pin: ['pin'],
	    amButton: ['amButton'],
	    pmButton: ['pmButton'],
	    meridiemText: ['meridiemText']
	  };
	  return composeClasses(slots, getClockUtilityClass, classes);
	};
	const ClockRoot = styled$1('div', {
	  name: 'MuiClock',
	  slot: 'Root',
	  overridesResolver: (_, styles) => styles.root
	})(({
	  theme
	}) => ({
	  display: 'flex',
	  justifyContent: 'center',
	  alignItems: 'center',
	  margin: theme.spacing(2)
	}));
	const ClockClock = styled$1('div', {
	  name: 'MuiClock',
	  slot: 'Clock',
	  overridesResolver: (_, styles) => styles.clock
	})({
	  backgroundColor: 'rgba(0,0,0,.07)',
	  borderRadius: '50%',
	  height: 220,
	  width: 220,
	  flexShrink: 0,
	  position: 'relative',
	  pointerEvents: 'none'
	});
	const ClockWrapper = styled$1('div', {
	  name: 'MuiClock',
	  slot: 'Wrapper',
	  overridesResolver: (_, styles) => styles.wrapper
	})({
	  '&:focus': {
	    outline: 'none'
	  }
	});
	const ClockSquareMask = styled$1('div', {
	  name: 'MuiClock',
	  slot: 'SquareMask',
	  overridesResolver: (_, styles) => styles.squareMask
	})(({
	  ownerState
	}) => _extends({
	  width: '100%',
	  height: '100%',
	  position: 'absolute',
	  pointerEvents: 'auto',
	  outline: 0,
	  // Disable scroll capabilities.
	  touchAction: 'none',
	  userSelect: 'none'
	}, ownerState.disabled ? {} : {
	  '@media (pointer: fine)': {
	    cursor: 'pointer',
	    borderRadius: '50%'
	  },
	  '&:active': {
	    cursor: 'move'
	  }
	}));
	const ClockPin = styled$1('div', {
	  name: 'MuiClock',
	  slot: 'Pin',
	  overridesResolver: (_, styles) => styles.pin
	})(({
	  theme
	}) => ({
	  width: 6,
	  height: 6,
	  borderRadius: '50%',
	  backgroundColor: (theme.vars || theme).palette.primary.main,
	  position: 'absolute',
	  top: '50%',
	  left: '50%',
	  transform: 'translate(-50%, -50%)'
	}));
	const ClockAmButton = styled$1(IconButton$1, {
	  name: 'MuiClock',
	  slot: 'AmButton',
	  overridesResolver: (_, styles) => styles.amButton
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  zIndex: 1,
	  position: 'absolute',
	  bottom: 8,
	  left: 8,
	  paddingLeft: 4,
	  paddingRight: 4,
	  width: CLOCK_HOUR_WIDTH
	}, ownerState.meridiemMode === 'am' && {
	  backgroundColor: (theme.vars || theme).palette.primary.main,
	  color: (theme.vars || theme).palette.primary.contrastText,
	  '&:hover': {
	    backgroundColor: (theme.vars || theme).palette.primary.light
	  }
	}));
	const ClockPmButton = styled$1(IconButton$1, {
	  name: 'MuiClock',
	  slot: 'PmButton',
	  overridesResolver: (_, styles) => styles.pmButton
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  zIndex: 1,
	  position: 'absolute',
	  bottom: 8,
	  right: 8,
	  paddingLeft: 4,
	  paddingRight: 4,
	  width: CLOCK_HOUR_WIDTH
	}, ownerState.meridiemMode === 'pm' && {
	  backgroundColor: (theme.vars || theme).palette.primary.main,
	  color: (theme.vars || theme).palette.primary.contrastText,
	  '&:hover': {
	    backgroundColor: (theme.vars || theme).palette.primary.light
	  }
	}));
	const ClockMeridiemText = styled$1(Typography$1, {
	  name: 'MuiClock',
	  slot: 'meridiemText',
	  overridesResolver: (_, styles) => styles.meridiemText
	})({
	  overflow: 'hidden',
	  whiteSpace: 'nowrap',
	  textOverflow: 'ellipsis'
	});

	/**
	 * @ignore - internal component.
	 */
	function Clock(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiClock'
	  });
	  const {
	    ampm,
	    ampmInClock,
	    autoFocus,
	    children,
	    value,
	    handleMeridiemChange,
	    isTimeDisabled,
	    meridiemMode,
	    minutesStep = 1,
	    onChange,
	    selectedId,
	    type,
	    viewValue,
	    disabled,
	    readOnly,
	    className
	  } = props;
	  const ownerState = props;
	  const utils = useUtils();
	  const localeText = useLocaleText();
	  const isMoving = reactExports.useRef(false);
	  const classes = useUtilityClasses$p(ownerState);
	  const isSelectedTimeDisabled = isTimeDisabled(viewValue, type);
	  const isPointerInner = !ampm && type === 'hours' && (viewValue < 1 || viewValue > 12);
	  const handleValueChange = (newValue, isFinish) => {
	    if (disabled || readOnly) {
	      return;
	    }
	    if (isTimeDisabled(newValue, type)) {
	      return;
	    }
	    onChange(newValue, isFinish);
	  };
	  const setTime = (event, isFinish) => {
	    let {
	      offsetX,
	      offsetY
	    } = event;
	    if (offsetX === undefined) {
	      const rect = event.target.getBoundingClientRect();
	      offsetX = event.changedTouches[0].clientX - rect.left;
	      offsetY = event.changedTouches[0].clientY - rect.top;
	    }
	    const newSelectedValue = type === 'seconds' || type === 'minutes' ? getMinutes(offsetX, offsetY, minutesStep) : getHours(offsetX, offsetY, Boolean(ampm));
	    handleValueChange(newSelectedValue, isFinish);
	  };
	  const handleTouchMove = event => {
	    isMoving.current = true;
	    setTime(event, 'shallow');
	  };
	  const handleTouchEnd = event => {
	    if (isMoving.current) {
	      setTime(event, 'finish');
	      isMoving.current = false;
	    }
	  };
	  const handleMouseMove = event => {
	    // event.buttons & PRIMARY_MOUSE_BUTTON
	    if (event.buttons > 0) {
	      setTime(event.nativeEvent, 'shallow');
	    }
	  };
	  const handleMouseUp = event => {
	    if (isMoving.current) {
	      isMoving.current = false;
	    }
	    setTime(event.nativeEvent, 'finish');
	  };
	  const hasSelected = reactExports.useMemo(() => {
	    if (type === 'hours') {
	      return true;
	    }
	    return viewValue % 5 === 0;
	  }, [type, viewValue]);
	  const keyboardControlStep = type === 'minutes' ? minutesStep : 1;
	  const listboxRef = reactExports.useRef(null);
	  // Since this is rendered when a Popper is opened we can't use passive effects.
	  // Focusing in passive effects in Popper causes scroll jump.
	  useEnhancedEffect$1(() => {
	    if (autoFocus) {
	      // The ref not being resolved would be a bug in MUI.
	      listboxRef.current.focus();
	    }
	  }, [autoFocus]);
	  const handleKeyDown = event => {
	    // TODO: Why this early exit?
	    if (isMoving.current) {
	      return;
	    }
	    switch (event.key) {
	      case 'Home':
	        // annulate both hours and minutes
	        handleValueChange(0, 'partial');
	        event.preventDefault();
	        break;
	      case 'End':
	        handleValueChange(type === 'minutes' ? 59 : 23, 'partial');
	        event.preventDefault();
	        break;
	      case 'ArrowUp':
	        handleValueChange(viewValue + keyboardControlStep, 'partial');
	        event.preventDefault();
	        break;
	      case 'ArrowDown':
	        handleValueChange(viewValue - keyboardControlStep, 'partial');
	        event.preventDefault();
	        break;
	      // do nothing
	    }
	  };
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(ClockRoot, {
	    className: clsx(className, classes.root),
	    children: [/*#__PURE__*/jsxRuntimeExports.jsxs(ClockClock, {
	      className: classes.clock,
	      children: [/*#__PURE__*/jsxRuntimeExports.jsx(ClockSquareMask, {
	        onTouchMove: handleTouchMove,
	        onTouchEnd: handleTouchEnd,
	        onMouseUp: handleMouseUp,
	        onMouseMove: handleMouseMove,
	        ownerState: {
	          disabled
	        },
	        className: classes.squareMask
	      }), !isSelectedTimeDisabled && /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	        children: [/*#__PURE__*/jsxRuntimeExports.jsx(ClockPin, {
	          className: classes.pin
	        }), value != null && /*#__PURE__*/jsxRuntimeExports.jsx(ClockPointer, {
	          type: type,
	          viewValue: viewValue,
	          isInner: isPointerInner,
	          hasSelected: hasSelected
	        })]
	      }), /*#__PURE__*/jsxRuntimeExports.jsx(ClockWrapper, {
	        "aria-activedescendant": selectedId,
	        "aria-label": localeText.clockLabelText(type, value, utils),
	        ref: listboxRef,
	        role: "listbox",
	        onKeyDown: handleKeyDown,
	        tabIndex: 0,
	        className: classes.wrapper,
	        children: children
	      })]
	    }), ampm && ampmInClock && /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	      children: [/*#__PURE__*/jsxRuntimeExports.jsx(ClockAmButton, {
	        onClick: readOnly ? undefined : () => handleMeridiemChange('am'),
	        disabled: disabled || meridiemMode === null,
	        ownerState: ownerState,
	        className: classes.amButton,
	        title: formatMeridiem(utils, 'am'),
	        children: /*#__PURE__*/jsxRuntimeExports.jsx(ClockMeridiemText, {
	          variant: "caption",
	          className: classes.meridiemText,
	          children: formatMeridiem(utils, 'am')
	        })
	      }), /*#__PURE__*/jsxRuntimeExports.jsx(ClockPmButton, {
	        disabled: disabled || meridiemMode === null,
	        onClick: readOnly ? undefined : () => handleMeridiemChange('pm'),
	        ownerState: ownerState,
	        className: classes.pmButton,
	        title: formatMeridiem(utils, 'pm'),
	        children: /*#__PURE__*/jsxRuntimeExports.jsx(ClockMeridiemText, {
	          variant: "caption",
	          className: classes.meridiemText,
	          children: formatMeridiem(utils, 'pm')
	        })
	      })]
	    })]
	  });
	}

	function getClockNumberUtilityClass(slot) {
	  return generateUtilityClass('MuiClockNumber', slot);
	}
	const clockNumberClasses = generateUtilityClasses('MuiClockNumber', ['root', 'selected', 'disabled']);

	const _excluded$y = ["className", "disabled", "index", "inner", "label", "selected"];
	const useUtilityClasses$o = ownerState => {
	  const {
	    classes,
	    selected,
	    disabled
	  } = ownerState;
	  const slots = {
	    root: ['root', selected && 'selected', disabled && 'disabled']
	  };
	  return composeClasses(slots, getClockNumberUtilityClass, classes);
	};
	const ClockNumberRoot = styled$1('span', {
	  name: 'MuiClockNumber',
	  slot: 'Root',
	  overridesResolver: (_, styles) => [styles.root, {
	    [`&.${clockNumberClasses.disabled}`]: styles.disabled
	  }, {
	    [`&.${clockNumberClasses.selected}`]: styles.selected
	  }]
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  height: CLOCK_HOUR_WIDTH,
	  width: CLOCK_HOUR_WIDTH,
	  position: 'absolute',
	  left: `calc((100% - ${CLOCK_HOUR_WIDTH}px) / 2)`,
	  display: 'inline-flex',
	  justifyContent: 'center',
	  alignItems: 'center',
	  borderRadius: '50%',
	  color: (theme.vars || theme).palette.text.primary,
	  fontFamily: theme.typography.fontFamily,
	  '&:focused': {
	    backgroundColor: (theme.vars || theme).palette.background.paper
	  },
	  [`&.${clockNumberClasses.selected}`]: {
	    color: (theme.vars || theme).palette.primary.contrastText
	  },
	  [`&.${clockNumberClasses.disabled}`]: {
	    pointerEvents: 'none',
	    color: (theme.vars || theme).palette.text.disabled
	  }
	}, ownerState.inner && _extends({}, theme.typography.body2, {
	  color: (theme.vars || theme).palette.text.secondary
	})));

	/**
	 * @ignore - internal component.
	 */
	function ClockNumber(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiClockNumber'
	  });
	  const {
	      className,
	      disabled,
	      index,
	      inner,
	      label,
	      selected
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$y);
	  const ownerState = props;
	  const classes = useUtilityClasses$o(ownerState);
	  const angle = index % 12 / 12 * Math.PI * 2 - Math.PI / 2;
	  const length = (CLOCK_WIDTH - CLOCK_HOUR_WIDTH - 2) / 2 * (inner ? 0.65 : 1);
	  const x = Math.round(Math.cos(angle) * length);
	  const y = Math.round(Math.sin(angle) * length);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(ClockNumberRoot, _extends({
	    className: clsx(className, classes.root),
	    "aria-disabled": disabled ? true : undefined,
	    "aria-selected": selected ? true : undefined,
	    role: "option",
	    style: {
	      transform: `translate(${x}px, ${y + (CLOCK_WIDTH - CLOCK_HOUR_WIDTH) / 2}px`
	    },
	    ownerState: ownerState
	  }, other, {
	    children: label
	  }));
	}

	/**
	 * @ignore - internal component.
	 */
	const getHourNumbers = ({
	  ampm,
	  value,
	  getClockNumberText,
	  isDisabled,
	  selectedId,
	  utils
	}) => {
	  const currentHours = value ? utils.getHours(value) : null;
	  const hourNumbers = [];
	  const startHour = ampm ? 1 : 0;
	  const endHour = ampm ? 12 : 23;
	  const isSelected = hour => {
	    if (currentHours === null) {
	      return false;
	    }
	    if (ampm) {
	      if (hour === 12) {
	        return currentHours === 12 || currentHours === 0;
	      }
	      return currentHours === hour || currentHours - 12 === hour;
	    }
	    return currentHours === hour;
	  };
	  for (let hour = startHour; hour <= endHour; hour += 1) {
	    let label = hour.toString();
	    if (hour === 0) {
	      label = '00';
	    }
	    const inner = !ampm && (hour === 0 || hour > 12);
	    label = utils.formatNumber(label);
	    const selected = isSelected(hour);
	    hourNumbers.push( /*#__PURE__*/jsxRuntimeExports.jsx(ClockNumber, {
	      id: selected ? selectedId : undefined,
	      index: hour,
	      inner: inner,
	      selected: selected,
	      disabled: isDisabled(hour),
	      label: label,
	      "aria-label": getClockNumberText(label)
	    }, hour));
	  }
	  return hourNumbers;
	};
	const getMinutesNumbers = ({
	  utils,
	  value,
	  isDisabled,
	  getClockNumberText,
	  selectedId
	}) => {
	  const f = utils.formatNumber;
	  return [[5, f('05')], [10, f('10')], [15, f('15')], [20, f('20')], [25, f('25')], [30, f('30')], [35, f('35')], [40, f('40')], [45, f('45')], [50, f('50')], [55, f('55')], [0, f('00')]].map(([numberValue, label], index) => {
	    const selected = numberValue === value;
	    return /*#__PURE__*/jsxRuntimeExports.jsx(ClockNumber, {
	      label: label,
	      id: selected ? selectedId : undefined,
	      index: index + 1,
	      inner: false,
	      disabled: isDisabled(numberValue),
	      selected: selected,
	      "aria-label": getClockNumberText(label)
	    }, numberValue);
	  });
	};

	/**
	 * Hooks making sure that:
	 * - The value returned by `onChange` always have the timezone of `props.value` or `props.defaultValue` if defined
	 * - The value rendered is always the one from `props.timezone` if defined
	 */
	const useValueWithTimezone = ({
	  timezone: timezoneProp,
	  value: valueProp,
	  defaultValue,
	  onChange,
	  valueManager
	}) => {
	  var _ref, _ref2;
	  const utils = useUtils();
	  const firstDefaultValue = reactExports.useRef(defaultValue);
	  const inputValue = (_ref = valueProp != null ? valueProp : firstDefaultValue.current) != null ? _ref : valueManager.emptyValue;
	  const inputTimezone = reactExports.useMemo(() => valueManager.getTimezone(utils, inputValue), [utils, valueManager, inputValue]);
	  const setInputTimezone = useEventCallback(newValue => {
	    if (inputTimezone == null) {
	      return newValue;
	    }
	    return valueManager.setTimezone(utils, inputTimezone, newValue);
	  });
	  const timezoneToRender = (_ref2 = timezoneProp != null ? timezoneProp : inputTimezone) != null ? _ref2 : 'default';
	  const valueWithTimezoneToRender = reactExports.useMemo(() => valueManager.setTimezone(utils, timezoneToRender, inputValue), [valueManager, utils, timezoneToRender, inputValue]);
	  const handleValueChange = useEventCallback((newValue, ...otherParams) => {
	    const newValueWithInputTimezone = setInputTimezone(newValue);
	    onChange == null || onChange(newValueWithInputTimezone, ...otherParams);
	  });
	  return {
	    value: valueWithTimezoneToRender,
	    handleValueChange,
	    timezone: timezoneToRender
	  };
	};

	/**
	 * Wrapper around `useControlled` and `useValueWithTimezone`
	 */
	const useControlledValueWithTimezone = ({
	  name,
	  timezone: timezoneProp,
	  value: valueProp,
	  defaultValue,
	  onChange: onChangeProp,
	  valueManager
	}) => {
	  const [valueWithInputTimezone, setValue] = useControlled({
	    name,
	    state: 'value',
	    controlled: valueProp,
	    default: defaultValue != null ? defaultValue : valueManager.emptyValue
	  });
	  const onChange = useEventCallback((newValue, ...otherParams) => {
	    setValue(newValue);
	    onChangeProp == null || onChangeProp(newValue, ...otherParams);
	  });
	  return useValueWithTimezone({
	    timezone: timezoneProp,
	    value: valueWithInputTimezone,
	    defaultValue: undefined,
	    onChange,
	    valueManager
	  });
	};

	const SECTION_TYPE_GRANULARITY = {
	  year: 1,
	  month: 2,
	  day: 3,
	  hours: 4,
	  minutes: 5,
	  seconds: 6,
	  milliseconds: 7
	};
	const getSectionTypeGranularity = sections => Math.max(...sections.map(section => {
	  var _SECTION_TYPE_GRANULA;
	  return (_SECTION_TYPE_GRANULA = SECTION_TYPE_GRANULARITY[section.type]) != null ? _SECTION_TYPE_GRANULA : 1;
	}));
	const roundDate = (utils, granularity, date) => {
	  if (granularity === SECTION_TYPE_GRANULARITY.year) {
	    return utils.startOfYear(date);
	  }
	  if (granularity === SECTION_TYPE_GRANULARITY.month) {
	    return utils.startOfMonth(date);
	  }
	  if (granularity === SECTION_TYPE_GRANULARITY.day) {
	    return utils.startOfDay(date);
	  }

	  // We don't have startOfHour / startOfMinute / startOfSecond
	  let roundedDate = date;
	  if (granularity < SECTION_TYPE_GRANULARITY.minutes) {
	    roundedDate = utils.setMinutes(roundedDate, 0);
	  }
	  if (granularity < SECTION_TYPE_GRANULARITY.seconds) {
	    roundedDate = utils.setSeconds(roundedDate, 0);
	  }
	  if (granularity < SECTION_TYPE_GRANULARITY.milliseconds) {
	    roundedDate = utils.setMilliseconds(roundedDate, 0);
	  }
	  return roundedDate;
	};
	const getDefaultReferenceDate = ({
	  props,
	  utils,
	  granularity,
	  timezone,
	  getTodayDate: inGetTodayDate
	}) => {
	  var _props$disableIgnorin;
	  let referenceDate = inGetTodayDate ? inGetTodayDate() : roundDate(utils, granularity, getTodayDate(utils, timezone));
	  if (props.minDate != null && utils.isAfterDay(props.minDate, referenceDate)) {
	    referenceDate = roundDate(utils, granularity, props.minDate);
	  }
	  if (props.maxDate != null && utils.isBeforeDay(props.maxDate, referenceDate)) {
	    referenceDate = roundDate(utils, granularity, props.maxDate);
	  }
	  const isAfter = createIsAfterIgnoreDatePart((_props$disableIgnorin = props.disableIgnoringDatePartForTimeValidation) != null ? _props$disableIgnorin : false, utils);
	  if (props.minTime != null && isAfter(props.minTime, referenceDate)) {
	    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.minTime : mergeDateAndTime(utils, referenceDate, props.minTime));
	  }
	  if (props.maxTime != null && isAfter(referenceDate, props.maxTime)) {
	    referenceDate = roundDate(utils, granularity, props.disableIgnoringDatePartForTimeValidation ? props.maxTime : mergeDateAndTime(utils, referenceDate, props.maxTime));
	  }
	  return referenceDate;
	};

	const getDateSectionConfigFromFormatToken = (utils, formatToken) => {
	  const config = utils.formatTokenMap[formatToken];
	  if (config == null) {
	    throw new Error([`MUI: The token "${formatToken}" is not supported by the Date and Time Pickers.`, 'Please try using another token or open an issue on https://github.com/mui/mui-x/issues/new/choose if you think it should be supported.'].join('\n'));
	  }
	  if (typeof config === 'string') {
	    return {
	      type: config,
	      contentType: config === 'meridiem' ? 'letter' : 'digit',
	      maxLength: undefined
	    };
	  }
	  return {
	    type: config.sectionType,
	    contentType: config.contentType,
	    maxLength: config.maxLength
	  };
	};
	const getDeltaFromKeyCode = keyCode => {
	  switch (keyCode) {
	    case 'ArrowUp':
	      return 1;
	    case 'ArrowDown':
	      return -1;
	    case 'PageUp':
	      return 5;
	    case 'PageDown':
	      return -5;
	    default:
	      return 0;
	  }
	};
	const getDaysInWeekStr = (utils, timezone, format) => {
	  const elements = [];
	  const now = utils.dateWithTimezone(undefined, timezone);
	  const startDate = utils.startOfWeek(now);
	  const endDate = utils.endOfWeek(now);
	  let current = startDate;
	  while (utils.isBefore(current, endDate)) {
	    elements.push(current);
	    current = utils.addDays(current, 1);
	  }
	  return elements.map(weekDay => utils.formatByString(weekDay, format));
	};
	const getLetterEditingOptions = (utils, timezone, sectionType, format) => {
	  switch (sectionType) {
	    case 'month':
	      {
	        return getMonthsInYear(utils, utils.dateWithTimezone(undefined, timezone)).map(month => utils.formatByString(month, format));
	      }
	    case 'weekDay':
	      {
	        return getDaysInWeekStr(utils, timezone, format);
	      }
	    case 'meridiem':
	      {
	        const now = utils.dateWithTimezone(undefined, timezone);
	        return [utils.startOfDay(now), utils.endOfDay(now)].map(date => utils.formatByString(date, format));
	      }
	    default:
	      {
	        return [];
	      }
	  }
	};
	const cleanLeadingZeros = (utils, valueStr, size) => {
	  let cleanValueStr = valueStr;

	  // Remove the leading zeros
	  cleanValueStr = Number(cleanValueStr).toString();

	  // Add enough leading zeros to fill the section
	  while (cleanValueStr.length < size) {
	    cleanValueStr = `0${cleanValueStr}`;
	  }
	  return cleanValueStr;
	};
	const cleanDigitSectionValue = (utils, timezone, value, sectionBoundaries, section) => {
	  if (section.type === 'day' && section.contentType === 'digit-with-letter') {
	    const date = utils.setDate(sectionBoundaries.longestMonth, value);
	    return utils.formatByString(date, section.format);
	  }

	  // queryValue without leading `0` (`01` => `1`)
	  const valueStr = value.toString();
	  if (section.hasLeadingZerosInInput) {
	    return cleanLeadingZeros(utils, valueStr, section.maxLength);
	  }
	  return valueStr;
	};
	const adjustSectionValue = (utils, timezone, section, keyCode, sectionsValueBoundaries, activeDate, stepsAttributes) => {
	  const delta = getDeltaFromKeyCode(keyCode);
	  const isStart = keyCode === 'Home';
	  const isEnd = keyCode === 'End';
	  const shouldSetAbsolute = section.value === '' || isStart || isEnd;
	  const adjustDigitSection = () => {
	    const sectionBoundaries = sectionsValueBoundaries[section.type]({
	      currentDate: activeDate,
	      format: section.format,
	      contentType: section.contentType
	    });
	    const getCleanValue = value => cleanDigitSectionValue(utils, timezone, value, sectionBoundaries, section);
	    const step = section.type === 'minutes' && stepsAttributes != null && stepsAttributes.minutesStep ? stepsAttributes.minutesStep : 1;
	    const currentSectionValue = parseInt(section.value, 10);
	    let newSectionValueNumber = currentSectionValue + delta * step;
	    if (shouldSetAbsolute) {
	      if (section.type === 'year' && !isEnd && !isStart) {
	        return utils.formatByString(utils.dateWithTimezone(undefined, timezone), section.format);
	      }
	      if (delta > 0 || isStart) {
	        newSectionValueNumber = sectionBoundaries.minimum;
	      } else {
	        newSectionValueNumber = sectionBoundaries.maximum;
	      }
	    }
	    if (newSectionValueNumber % step !== 0) {
	      if (delta < 0 || isStart) {
	        newSectionValueNumber += step - (step + newSectionValueNumber) % step; // for JS -3 % 5 = -3 (should be 2)
	      }
	      if (delta > 0 || isEnd) {
	        newSectionValueNumber -= newSectionValueNumber % step;
	      }
	    }
	    if (newSectionValueNumber > sectionBoundaries.maximum) {
	      return getCleanValue(sectionBoundaries.minimum + (newSectionValueNumber - sectionBoundaries.maximum - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));
	    }
	    if (newSectionValueNumber < sectionBoundaries.minimum) {
	      return getCleanValue(sectionBoundaries.maximum - (sectionBoundaries.minimum - newSectionValueNumber - 1) % (sectionBoundaries.maximum - sectionBoundaries.minimum + 1));
	    }
	    return getCleanValue(newSectionValueNumber);
	  };
	  const adjustLetterSection = () => {
	    const options = getLetterEditingOptions(utils, timezone, section.type, section.format);
	    if (options.length === 0) {
	      return section.value;
	    }
	    if (shouldSetAbsolute) {
	      if (delta > 0 || isStart) {
	        return options[0];
	      }
	      return options[options.length - 1];
	    }
	    const currentOptionIndex = options.indexOf(section.value);
	    const newOptionIndex = (currentOptionIndex + options.length + delta) % options.length;
	    return options[newOptionIndex];
	  };
	  if (section.contentType === 'digit' || section.contentType === 'digit-with-letter') {
	    return adjustDigitSection();
	  }
	  return adjustLetterSection();
	};
	const getSectionVisibleValue = (section, target) => {
	  let value = section.value || section.placeholder;
	  const hasLeadingZeros = target === 'non-input' ? section.hasLeadingZerosInFormat : section.hasLeadingZerosInInput;
	  if (target === 'non-input' && section.hasLeadingZerosInInput && !section.hasLeadingZerosInFormat) {
	    value = Number(value).toString();
	  }

	  // In the input, we add an empty character at the end of each section without leading zeros.
	  // This makes sure that `onChange` will always be fired.
	  // Otherwise, when your input value equals `1/dd/yyyy` (format `M/DD/YYYY` on DayJs),
	  // If you press `1`, on the first section, the new value is also `1/dd/yyyy`,
	  // So the browser will not fire the input `onChange`.
	  const shouldAddInvisibleSpace = ['input-rtl', 'input-ltr'].includes(target) && section.contentType === 'digit' && !hasLeadingZeros && value.length === 1;
	  if (shouldAddInvisibleSpace) {
	    value = `${value}\u200e`;
	  }
	  if (target === 'input-rtl') {
	    value = `\u2068${value}\u2069`;
	  }
	  return value;
	};
	const cleanString = dirtyString => dirtyString.replace(/[\u2066\u2067\u2068\u2069]/g, '');
	const addPositionPropertiesToSections = (sections, isRTL) => {
	  let position = 0;
	  let positionInInput = isRTL ? 1 : 0;
	  const newSections = [];
	  for (let i = 0; i < sections.length; i += 1) {
	    const section = sections[i];
	    const renderedValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');
	    const sectionStr = `${section.startSeparator}${renderedValue}${section.endSeparator}`;
	    const sectionLength = cleanString(sectionStr).length;
	    const sectionLengthInInput = sectionStr.length;

	    // The ...InInput values consider the unicode characters but do include them in their indexes
	    const cleanedValue = cleanString(renderedValue);
	    const startInInput = positionInInput + renderedValue.indexOf(cleanedValue[0]) + section.startSeparator.length;
	    const endInInput = startInInput + cleanedValue.length;
	    newSections.push(_extends({}, section, {
	      start: position,
	      end: position + sectionLength,
	      startInInput,
	      endInInput
	    }));
	    position += sectionLength;
	    // Move position to the end of string associated to the current section
	    positionInInput += sectionLengthInInput;
	  }
	  return newSections;
	};
	const getSectionPlaceholder = (utils, timezone, localeText, sectionConfig, sectionFormat) => {
	  switch (sectionConfig.type) {
	    case 'year':
	      {
	        return localeText.fieldYearPlaceholder({
	          digitAmount: utils.formatByString(utils.dateWithTimezone(undefined, timezone), sectionFormat).length,
	          format: sectionFormat
	        });
	      }
	    case 'month':
	      {
	        return localeText.fieldMonthPlaceholder({
	          contentType: sectionConfig.contentType,
	          format: sectionFormat
	        });
	      }
	    case 'day':
	      {
	        return localeText.fieldDayPlaceholder({
	          format: sectionFormat
	        });
	      }
	    case 'weekDay':
	      {
	        return localeText.fieldWeekDayPlaceholder({
	          contentType: sectionConfig.contentType,
	          format: sectionFormat
	        });
	      }
	    case 'hours':
	      {
	        return localeText.fieldHoursPlaceholder({
	          format: sectionFormat
	        });
	      }
	    case 'minutes':
	      {
	        return localeText.fieldMinutesPlaceholder({
	          format: sectionFormat
	        });
	      }
	    case 'seconds':
	      {
	        return localeText.fieldSecondsPlaceholder({
	          format: sectionFormat
	        });
	      }
	    case 'meridiem':
	      {
	        return localeText.fieldMeridiemPlaceholder({
	          format: sectionFormat
	        });
	      }
	    default:
	      {
	        return sectionFormat;
	      }
	  }
	};
	const changeSectionValueFormat = (utils, valueStr, currentFormat, newFormat) => {
	  return utils.formatByString(utils.parse(valueStr, currentFormat), newFormat);
	};
	const isFourDigitYearFormat = (utils, timezone, format) => utils.formatByString(utils.dateWithTimezone(undefined, timezone), format).length === 4;
	const doesSectionFormatHaveLeadingZeros = (utils, timezone, contentType, sectionType, format) => {
	  if (contentType !== 'digit') {
	    return false;
	  }
	  const now = utils.dateWithTimezone(undefined, timezone);
	  switch (sectionType) {
	    // We can't use `changeSectionValueFormat`, because  `utils.parse('1', 'YYYY')` returns `1971` instead of `1`.
	    case 'year':
	      {
	        if (isFourDigitYearFormat(utils, timezone, format)) {
	          const formatted0001 = utils.formatByString(utils.setYear(now, 1), format);
	          return formatted0001 === '0001';
	        }
	        const formatted2001 = utils.formatByString(utils.setYear(now, 2001), format);
	        return formatted2001 === '01';
	      }
	    case 'month':
	      {
	        return utils.formatByString(utils.startOfYear(now), format).length > 1;
	      }
	    case 'day':
	      {
	        return utils.formatByString(utils.startOfMonth(now), format).length > 1;
	      }
	    case 'weekDay':
	      {
	        return utils.formatByString(utils.startOfWeek(now), format).length > 1;
	      }
	    case 'hours':
	      {
	        return utils.formatByString(utils.setHours(now, 1), format).length > 1;
	      }
	    case 'minutes':
	      {
	        return utils.formatByString(utils.setMinutes(now, 1), format).length > 1;
	      }
	    case 'seconds':
	      {
	        return utils.formatByString(utils.setSeconds(now, 1), format).length > 1;
	      }
	    default:
	      {
	        throw new Error('Invalid section type');
	      }
	  }
	};
	const getEscapedPartsFromFormat = (utils, format) => {
	  const escapedParts = [];
	  const {
	    start: startChar,
	    end: endChar
	  } = utils.escapedCharacters;
	  const regExp = new RegExp(`(\\${startChar}[^\\${endChar}]*\\${endChar})+`, 'g');
	  let match = null;
	  // eslint-disable-next-line no-cond-assign
	  while (match = regExp.exec(format)) {
	    escapedParts.push({
	      start: match.index,
	      end: regExp.lastIndex - 1
	    });
	  }
	  return escapedParts;
	};
	const splitFormatIntoSections = (utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL) => {
	  let startSeparator = '';
	  const sections = [];
	  const now = utils.date();
	  const commitToken = token => {
	    if (token === '') {
	      return null;
	    }
	    const sectionConfig = getDateSectionConfigFromFormatToken(utils, token);
	    const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, sectionConfig.contentType, sectionConfig.type, token);
	    const hasLeadingZerosInInput = shouldRespectLeadingZeros ? hasLeadingZerosInFormat : sectionConfig.contentType === 'digit';
	    const isValidDate = date != null && utils.isValid(date);
	    let sectionValue = isValidDate ? utils.formatByString(date, token) : '';
	    let maxLength = null;
	    if (hasLeadingZerosInInput) {
	      if (hasLeadingZerosInFormat) {
	        maxLength = sectionValue === '' ? utils.formatByString(now, token).length : sectionValue.length;
	      } else {
	        if (sectionConfig.maxLength == null) {
	          throw new Error(`MUI: The token ${token} should have a 'maxDigitNumber' property on it's adapter`);
	        }
	        maxLength = sectionConfig.maxLength;
	        if (isValidDate) {
	          sectionValue = cleanLeadingZeros(utils, sectionValue, maxLength);
	        }
	      }
	    }
	    sections.push(_extends({}, sectionConfig, {
	      format: token,
	      maxLength,
	      value: sectionValue,
	      placeholder: getSectionPlaceholder(utils, timezone, localeText, sectionConfig, token),
	      hasLeadingZeros: hasLeadingZerosInFormat,
	      hasLeadingZerosInFormat,
	      hasLeadingZerosInInput,
	      startSeparator: sections.length === 0 ? startSeparator : '',
	      endSeparator: '',
	      modified: false
	    }));
	    return null;
	  };

	  // Expand the provided format
	  let formatExpansionOverflow = 10;
	  let prevFormat = format;
	  let nextFormat = utils.expandFormat(format);
	  while (nextFormat !== prevFormat) {
	    prevFormat = nextFormat;
	    nextFormat = utils.expandFormat(prevFormat);
	    formatExpansionOverflow -= 1;
	    if (formatExpansionOverflow < 0) {
	      throw new Error('MUI: The format expansion seems to be  enter in an infinite loop. Please open an issue with the format passed to the picker component');
	    }
	  }
	  const expandedFormat = nextFormat;

	  // Get start/end indexes of escaped sections
	  const escapedParts = getEscapedPartsFromFormat(utils, expandedFormat);

	  // This RegExp test if the beginning of a string correspond to a supported token
	  const isTokenStartRegExp = new RegExp(`^(${Object.keys(utils.formatTokenMap).sort((a, b) => b.length - a.length) // Sort to put longest word first
  .join('|')})`, 'g') // used to get access to lastIndex state
	  ;
	  let currentTokenValue = '';
	  for (let i = 0; i < expandedFormat.length; i += 1) {
	    const escapedPartOfCurrentChar = escapedParts.find(escapeIndex => escapeIndex.start <= i && escapeIndex.end >= i);
	    const char = expandedFormat[i];
	    const isEscapedChar = escapedPartOfCurrentChar != null;
	    const potentialToken = `${currentTokenValue}${expandedFormat.slice(i)}`;
	    const regExpMatch = isTokenStartRegExp.test(potentialToken);
	    if (!isEscapedChar && char.match(/([A-Za-z]+)/) && regExpMatch) {
	      currentTokenValue = potentialToken.slice(0, isTokenStartRegExp.lastIndex);
	      i += isTokenStartRegExp.lastIndex - 1;
	    } else {
	      // If we are on the opening or closing character of an escaped part of the format,
	      // Then we ignore this character.
	      const isEscapeBoundary = isEscapedChar && (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.start) === i || (escapedPartOfCurrentChar == null ? void 0 : escapedPartOfCurrentChar.end) === i;
	      if (!isEscapeBoundary) {
	        commitToken(currentTokenValue);
	        currentTokenValue = '';
	        if (sections.length === 0) {
	          startSeparator += char;
	        } else {
	          sections[sections.length - 1].endSeparator += char;
	        }
	      }
	    }
	  }
	  commitToken(currentTokenValue);
	  return sections.map(section => {
	    const cleanSeparator = separator => {
	      let cleanedSeparator = separator;
	      if (isRTL && cleanedSeparator !== null && cleanedSeparator.includes(' ')) {
	        cleanedSeparator = `\u2069${cleanedSeparator}\u2066`;
	      }
	      if (formatDensity === 'spacious' && ['/', '.', '-'].includes(cleanedSeparator)) {
	        cleanedSeparator = ` ${cleanedSeparator} `;
	      }
	      return cleanedSeparator;
	    };
	    section.startSeparator = cleanSeparator(section.startSeparator);
	    section.endSeparator = cleanSeparator(section.endSeparator);
	    return section;
	  });
	};

	/**
	 * Some date libraries like `dayjs` don't support parsing from date with escaped characters.
	 * To make sure that the parsing works, we are building a format and a date without any separator.
	 */
	const getDateFromDateSections = (utils, sections) => {
	  // If we have both a day and a weekDay section,
	  // Then we skip the weekDay in the parsing because libraries like dayjs can't parse complicated formats containing a weekDay.
	  // dayjs(dayjs().format('dddd MMMM D YYYY'), 'dddd MMMM D YYYY')) // returns `Invalid Date` even if the format is valid.
	  const shouldSkipWeekDays = sections.some(section => section.type === 'day');
	  const sectionFormats = [];
	  const sectionValues = [];
	  for (let i = 0; i < sections.length; i += 1) {
	    const section = sections[i];
	    const shouldSkip = shouldSkipWeekDays && section.type === 'weekDay';
	    if (!shouldSkip) {
	      sectionFormats.push(section.format);
	      sectionValues.push(getSectionVisibleValue(section, 'non-input'));
	    }
	  }
	  const formatWithoutSeparator = sectionFormats.join(' ');
	  const dateWithoutSeparatorStr = sectionValues.join(' ');
	  return utils.parse(dateWithoutSeparatorStr, formatWithoutSeparator);
	};
	const createDateStrForInputFromSections = (sections, isRTL) => {
	  const formattedSections = sections.map(section => {
	    const dateValue = getSectionVisibleValue(section, isRTL ? 'input-rtl' : 'input-ltr');
	    return `${section.startSeparator}${dateValue}${section.endSeparator}`;
	  });
	  const dateStr = formattedSections.join('');
	  if (!isRTL) {
	    return dateStr;
	  }

	  // \u2066: start left-to-right isolation
	  // \u2067: start right-to-left isolation
	  // \u2068: start first strong character isolation
	  // \u2069: pop isolation
	  // wrap into an isolated group such that separators can split the string in smaller ones by adding \u2069\u2068
	  return `\u2066${dateStr}\u2069`;
	};
	const getSectionsBoundaries = (utils, timezone) => {
	  const today = utils.dateWithTimezone(undefined, timezone);
	  const endOfYear = utils.endOfYear(today);
	  const endOfDay = utils.endOfDay(today);
	  const {
	    maxDaysInMonth,
	    longestMonth
	  } = getMonthsInYear(utils, today).reduce((acc, month) => {
	    const daysInMonth = utils.getDaysInMonth(month);
	    if (daysInMonth > acc.maxDaysInMonth) {
	      return {
	        maxDaysInMonth: daysInMonth,
	        longestMonth: month
	      };
	    }
	    return acc;
	  }, {
	    maxDaysInMonth: 0,
	    longestMonth: null
	  });
	  return {
	    year: ({
	      format
	    }) => ({
	      minimum: 0,
	      maximum: isFourDigitYearFormat(utils, timezone, format) ? 9999 : 99
	    }),
	    month: () => ({
	      minimum: 1,
	      // Assumption: All years have the same amount of months
	      maximum: utils.getMonth(endOfYear) + 1
	    }),
	    day: ({
	      currentDate
	    }) => ({
	      minimum: 1,
	      maximum: currentDate != null && utils.isValid(currentDate) ? utils.getDaysInMonth(currentDate) : maxDaysInMonth,
	      longestMonth: longestMonth
	    }),
	    weekDay: ({
	      format,
	      contentType
	    }) => {
	      if (contentType === 'digit') {
	        const daysInWeek = getDaysInWeekStr(utils, timezone, format).map(Number);
	        return {
	          minimum: Math.min(...daysInWeek),
	          maximum: Math.max(...daysInWeek)
	        };
	      }
	      return {
	        minimum: 1,
	        maximum: 7
	      };
	    },
	    hours: ({
	      format
	    }) => {
	      const lastHourInDay = utils.getHours(endOfDay);
	      const hasMeridiem = utils.formatByString(utils.endOfDay(today), format) !== lastHourInDay.toString();
	      if (hasMeridiem) {
	        return {
	          minimum: 1,
	          maximum: Number(utils.formatByString(utils.startOfDay(today), format))
	        };
	      }
	      return {
	        minimum: 0,
	        maximum: lastHourInDay
	      };
	    },
	    minutes: () => ({
	      minimum: 0,
	      // Assumption: All years have the same amount of minutes
	      maximum: utils.getMinutes(endOfDay)
	    }),
	    seconds: () => ({
	      minimum: 0,
	      // Assumption: All years have the same amount of seconds
	      maximum: utils.getSeconds(endOfDay)
	    }),
	    meridiem: () => ({
	      minimum: 0,
	      maximum: 0
	    })
	  };
	};
	const transferDateSectionValue = (utils, timezone, section, dateToTransferFrom, dateToTransferTo) => {
	  switch (section.type) {
	    case 'year':
	      {
	        return utils.setYear(dateToTransferTo, utils.getYear(dateToTransferFrom));
	      }
	    case 'month':
	      {
	        return utils.setMonth(dateToTransferTo, utils.getMonth(dateToTransferFrom));
	      }
	    case 'weekDay':
	      {
	        const formattedDaysInWeek = getDaysInWeekStr(utils, timezone, section.format);
	        const dayInWeekStrOfActiveDate = utils.formatByString(dateToTransferFrom, section.format);
	        const dayInWeekOfActiveDate = formattedDaysInWeek.indexOf(dayInWeekStrOfActiveDate);
	        const dayInWeekOfNewSectionValue = formattedDaysInWeek.indexOf(section.value);
	        const diff = dayInWeekOfNewSectionValue - dayInWeekOfActiveDate;
	        return utils.addDays(dateToTransferFrom, diff);
	      }
	    case 'day':
	      {
	        return utils.setDate(dateToTransferTo, utils.getDate(dateToTransferFrom));
	      }
	    case 'meridiem':
	      {
	        const isAM = utils.getHours(dateToTransferFrom) < 12;
	        const mergedDateHours = utils.getHours(dateToTransferTo);
	        if (isAM && mergedDateHours >= 12) {
	          return utils.addHours(dateToTransferTo, -12);
	        }
	        if (!isAM && mergedDateHours < 12) {
	          return utils.addHours(dateToTransferTo, 12);
	        }
	        return dateToTransferTo;
	      }
	    case 'hours':
	      {
	        return utils.setHours(dateToTransferTo, utils.getHours(dateToTransferFrom));
	      }
	    case 'minutes':
	      {
	        return utils.setMinutes(dateToTransferTo, utils.getMinutes(dateToTransferFrom));
	      }
	    case 'seconds':
	      {
	        return utils.setSeconds(dateToTransferTo, utils.getSeconds(dateToTransferFrom));
	      }
	    default:
	      {
	        return dateToTransferTo;
	      }
	  }
	};
	const reliableSectionModificationOrder = {
	  year: 1,
	  month: 2,
	  day: 3,
	  weekDay: 4,
	  hours: 5,
	  minutes: 6,
	  seconds: 7,
	  meridiem: 8
	};
	const mergeDateIntoReferenceDate = (utils, timezone, dateToTransferFrom, sections, referenceDate, shouldLimitToEditedSections) =>
	// cloning sections before sort to avoid mutating it
	[...sections].sort((a, b) => reliableSectionModificationOrder[a.type] - reliableSectionModificationOrder[b.type]).reduce((mergedDate, section) => {
	  if (!shouldLimitToEditedSections || section.modified) {
	    return transferDateSectionValue(utils, timezone, section, dateToTransferFrom, mergedDate);
	  }
	  return mergedDate;
	}, referenceDate);
	const isAndroid = () => navigator.userAgent.toLowerCase().indexOf('android') > -1;
	const getSectionOrder = (sections, isRTL) => {
	  const neighbors = {};
	  if (!isRTL) {
	    sections.forEach((_, index) => {
	      const leftIndex = index === 0 ? null : index - 1;
	      const rightIndex = index === sections.length - 1 ? null : index + 1;
	      neighbors[index] = {
	        leftIndex,
	        rightIndex
	      };
	    });
	    return {
	      neighbors,
	      startIndex: 0,
	      endIndex: sections.length - 1
	    };
	  }
	  const rtl2ltr = {};
	  const ltr2rtl = {};
	  let groupedSectionsStart = 0;
	  let groupedSectionsEnd = 0;
	  let RTLIndex = sections.length - 1;
	  while (RTLIndex >= 0) {
	    groupedSectionsEnd = sections.findIndex(
	    // eslint-disable-next-line @typescript-eslint/no-loop-func
	    (section, index) => {
	      var _section$endSeparator;
	      return index >= groupedSectionsStart && ((_section$endSeparator = section.endSeparator) == null ? void 0 : _section$endSeparator.includes(' ')) &&
	      // Special case where the spaces were not there in the initial input
	      section.endSeparator !== ' / ';
	    });
	    if (groupedSectionsEnd === -1) {
	      groupedSectionsEnd = sections.length - 1;
	    }
	    for (let i = groupedSectionsEnd; i >= groupedSectionsStart; i -= 1) {
	      ltr2rtl[i] = RTLIndex;
	      rtl2ltr[RTLIndex] = i;
	      RTLIndex -= 1;
	    }
	    groupedSectionsStart = groupedSectionsEnd + 1;
	  }
	  sections.forEach((_, index) => {
	    const rtlIndex = ltr2rtl[index];
	    const leftIndex = rtlIndex === 0 ? null : rtl2ltr[rtlIndex - 1];
	    const rightIndex = rtlIndex === sections.length - 1 ? null : rtl2ltr[rtlIndex + 1];
	    neighbors[index] = {
	      leftIndex,
	      rightIndex
	    };
	  });
	  return {
	    neighbors,
	    startIndex: rtl2ltr[0],
	    endIndex: rtl2ltr[sections.length - 1]
	  };
	};

	const _excluded$x = ["value", "referenceDate"];
	const singleItemValueManager = {
	  emptyValue: null,
	  getTodayValue: getTodayDate,
	  getInitialReferenceValue: _ref => {
	    let {
	        value,
	        referenceDate
	      } = _ref,
	      params = _objectWithoutPropertiesLoose(_ref, _excluded$x);
	    if (value != null && params.utils.isValid(value)) {
	      return value;
	    }
	    if (referenceDate != null) {
	      return referenceDate;
	    }
	    return getDefaultReferenceDate(params);
	  },
	  cleanValue: replaceInvalidDateByNull,
	  areValuesEqual: areDatesEqual,
	  isSameError: (a, b) => a === b,
	  hasError: error => error != null,
	  defaultErrorState: null,
	  getTimezone: (utils, value) => value == null || !utils.isValid(value) ? null : utils.getTimezone(value),
	  setTimezone: (utils, timezone, value) => value == null ? null : utils.setTimezone(value, timezone)
	};
	const singleItemFieldValueManager = {
	  updateReferenceValue: (utils, value, prevReferenceValue) => value == null || !utils.isValid(value) ? prevReferenceValue : value,
	  getSectionsFromValue: (utils, date, prevSections, isRTL, getSectionsFromDate) => {
	    const shouldReUsePrevDateSections = !utils.isValid(date) && !!prevSections;
	    if (shouldReUsePrevDateSections) {
	      return prevSections;
	    }
	    return addPositionPropertiesToSections(getSectionsFromDate(date), isRTL);
	  },
	  getValueStrFromSections: createDateStrForInputFromSections,
	  getActiveDateManager: (utils, state) => ({
	    date: state.value,
	    referenceDate: state.referenceValue,
	    getSections: sections => sections,
	    getNewValuesFromNewActiveDate: newActiveDate => ({
	      value: newActiveDate,
	      referenceValue: newActiveDate == null || !utils.isValid(newActiveDate) ? state.referenceValue : newActiveDate
	    })
	  }),
	  parseValueStr: (valueStr, referenceValue, parseDate) => parseDate(valueStr.trim(), referenceValue)
	};

	// TODO v7: This file exist only to simplify typing between
	// components/componentsProps and slots/slotProps
	// Should be deleted when components/componentsProps are removed

	const uncapitalizeObjectKeys = capitalizedObject => {
	  if (capitalizedObject === undefined) {
	    return undefined;
	  }
	  return Object.keys(capitalizedObject).reduce((acc, key) => _extends({}, acc, {
	    [`${key.slice(0, 1).toLowerCase()}${key.slice(1)}`]: capitalizedObject[key]
	  }), {});
	};

	const useClockReferenceDate = ({
	  value,
	  referenceDate: referenceDateProp,
	  utils,
	  props,
	  timezone
	}) => {
	  const referenceDate = reactExports.useMemo(() => singleItemValueManager.getInitialReferenceValue({
	    value,
	    utils,
	    props,
	    referenceDate: referenceDateProp,
	    granularity: SECTION_TYPE_GRANULARITY.day,
	    timezone,
	    getTodayDate: () => getTodayDate(utils, timezone, 'date')
	  }),
	  // We only want to compute the reference date on mount.
	  [] // eslint-disable-line react-hooks/exhaustive-deps
	  );
	  return value != null ? value : referenceDate;
	};

	const _excluded$w = ["ampm", "ampmInClock", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "showViewSwitcher", "onChange", "view", "views", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "timezone"];
	const useUtilityClasses$n = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    arrowSwitcher: ['arrowSwitcher']
	  };
	  return composeClasses(slots, getTimeClockUtilityClass, classes);
	};
	const TimeClockRoot = styled$1(PickerViewRoot, {
	  name: 'MuiTimeClock',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'flex',
	  flexDirection: 'column',
	  position: 'relative'
	});
	const TimeClockArrowSwitcher = styled$1(PickersArrowSwitcher, {
	  name: 'MuiTimeClock',
	  slot: 'ArrowSwitcher',
	  overridesResolver: (props, styles) => styles.arrowSwitcher
	})({
	  position: 'absolute',
	  right: 12,
	  top: 15
	});
	const TIME_CLOCK_DEFAULT_VIEWS = ['hours', 'minutes'];

	/**
	 * Demos:
	 *
	 * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)
	 * - [TimeClock](https://mui.com/x/react-date-pickers/time-clock/)
	 *
	 * API:
	 *
	 * - [TimeClock API](https://mui.com/x/api/date-pickers/time-clock/)
	 */
	const TimeClock = /*#__PURE__*/reactExports.forwardRef(function TimeClock(inProps, ref) {
	  const utils = useUtils();
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTimeClock'
	  });
	  const {
	      ampm = utils.is12HourCycleInCurrentLocale(),
	      ampmInClock = false,
	      autoFocus,
	      components,
	      componentsProps,
	      slots: innerSlots,
	      slotProps: innerSlotProps,
	      value: valueProp,
	      defaultValue,
	      referenceDate: referenceDateProp,
	      disableIgnoringDatePartForTimeValidation = false,
	      maxTime,
	      minTime,
	      disableFuture,
	      disablePast,
	      minutesStep = 1,
	      shouldDisableClock,
	      shouldDisableTime,
	      showViewSwitcher,
	      onChange,
	      view: inView,
	      views = TIME_CLOCK_DEFAULT_VIEWS,
	      openTo,
	      onViewChange,
	      focusedView,
	      onFocusedViewChange,
	      className,
	      disabled,
	      readOnly,
	      timezone: timezoneProp
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$w);
	  const slots = innerSlots != null ? innerSlots : uncapitalizeObjectKeys(components);
	  const slotProps = innerSlotProps != null ? innerSlotProps : componentsProps;
	  const {
	    value,
	    handleValueChange,
	    timezone
	  } = useControlledValueWithTimezone({
	    name: 'TimeClock',
	    timezone: timezoneProp,
	    value: valueProp,
	    defaultValue,
	    onChange,
	    valueManager: singleItemValueManager
	  });
	  const valueOrReferenceDate = useClockReferenceDate({
	    value,
	    referenceDate: referenceDateProp,
	    utils,
	    props,
	    timezone
	  });
	  const localeText = useLocaleText();
	  const now = useNow(timezone);
	  const {
	    view,
	    setView,
	    previousView,
	    nextView,
	    setValueAndGoToNextView
	  } = useViews({
	    view: inView,
	    views,
	    openTo,
	    onViewChange,
	    onChange: handleValueChange,
	    focusedView,
	    onFocusedViewChange
	  });
	  const {
	    meridiemMode,
	    handleMeridiemChange
	  } = useMeridiemMode(valueOrReferenceDate, ampm, setValueAndGoToNextView);
	  const isTimeDisabled = reactExports.useCallback((rawValue, viewType) => {
	    const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
	    const shouldCheckPastEnd = viewType === 'hours' || viewType === 'minutes' && views.includes('seconds');
	    const containsValidTime = ({
	      start,
	      end
	    }) => {
	      if (minTime && isAfter(minTime, end)) {
	        return false;
	      }
	      if (maxTime && isAfter(start, maxTime)) {
	        return false;
	      }
	      if (disableFuture && isAfter(start, now)) {
	        return false;
	      }
	      if (disablePast && isAfter(now, shouldCheckPastEnd ? end : start)) {
	        return false;
	      }
	      return true;
	    };
	    const isValidValue = (timeValue, step = 1) => {
	      if (timeValue % step !== 0) {
	        return false;
	      }
	      if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {
	        return false;
	      }
	      if (shouldDisableTime) {
	        switch (viewType) {
	          case 'hours':
	            return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), 'hours');
	          case 'minutes':
	            return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), 'minutes');
	          case 'seconds':
	            return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), 'seconds');
	          default:
	            return false;
	        }
	      }
	      return true;
	    };
	    switch (viewType) {
	      case 'hours':
	        {
	          const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);
	          const dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);
	          const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);
	          const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);
	          return !containsValidTime({
	            start,
	            end
	          }) || !isValidValue(valueWithMeridiem);
	        }
	      case 'minutes':
	        {
	          const dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);
	          const start = utils.setSeconds(dateWithNewMinutes, 0);
	          const end = utils.setSeconds(dateWithNewMinutes, 59);
	          return !containsValidTime({
	            start,
	            end
	          }) || !isValidValue(rawValue, minutesStep);
	        }
	      case 'seconds':
	        {
	          const dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);
	          const start = dateWithNewSeconds;
	          const end = dateWithNewSeconds;
	          return !containsValidTime({
	            start,
	            end
	          }) || !isValidValue(rawValue);
	        }
	      default:
	        throw new Error('not supported');
	    }
	  }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now, views]);
	  const selectedId = useId();
	  const viewProps = reactExports.useMemo(() => {
	    switch (view) {
	      case 'hours':
	        {
	          const handleHoursChange = (hourValue, isFinish) => {
	            const valueWithMeridiem = convertValueToMeridiem(hourValue, meridiemMode, ampm);
	            setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, valueWithMeridiem), isFinish);
	          };
	          return {
	            onChange: handleHoursChange,
	            viewValue: utils.getHours(valueOrReferenceDate),
	            children: getHourNumbers({
	              value,
	              utils,
	              ampm,
	              onChange: handleHoursChange,
	              getClockNumberText: localeText.hoursClockNumberText,
	              isDisabled: hourValue => disabled || isTimeDisabled(hourValue, 'hours'),
	              selectedId
	            })
	          };
	        }
	      case 'minutes':
	        {
	          const minutesValue = utils.getMinutes(valueOrReferenceDate);
	          const handleMinutesChange = (minuteValue, isFinish) => {
	            setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minuteValue), isFinish);
	          };
	          return {
	            viewValue: minutesValue,
	            onChange: handleMinutesChange,
	            children: getMinutesNumbers({
	              utils,
	              value: minutesValue,
	              onChange: handleMinutesChange,
	              getClockNumberText: localeText.minutesClockNumberText,
	              isDisabled: minuteValue => disabled || isTimeDisabled(minuteValue, 'minutes'),
	              selectedId
	            })
	          };
	        }
	      case 'seconds':
	        {
	          const secondsValue = utils.getSeconds(valueOrReferenceDate);
	          const handleSecondsChange = (secondValue, isFinish) => {
	            setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, secondValue), isFinish);
	          };
	          return {
	            viewValue: secondsValue,
	            onChange: handleSecondsChange,
	            children: getMinutesNumbers({
	              utils,
	              value: secondsValue,
	              onChange: handleSecondsChange,
	              getClockNumberText: localeText.secondsClockNumberText,
	              isDisabled: secondValue => disabled || isTimeDisabled(secondValue, 'seconds'),
	              selectedId
	            })
	          };
	        }
	      default:
	        throw new Error('You must provide the type for ClockView');
	    }
	  }, [view, utils, value, ampm, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, isTimeDisabled, selectedId, disabled]);
	  const ownerState = props;
	  const classes = useUtilityClasses$n(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(TimeClockRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className),
	    ownerState: ownerState
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(Clock, _extends({
	      autoFocus: autoFocus != null ? autoFocus : !!focusedView,
	      ampmInClock: ampmInClock && views.includes('hours'),
	      value: value,
	      type: view,
	      ampm: ampm,
	      minutesStep: minutesStep,
	      isTimeDisabled: isTimeDisabled,
	      meridiemMode: meridiemMode,
	      handleMeridiemChange: handleMeridiemChange,
	      selectedId: selectedId,
	      disabled: disabled,
	      readOnly: readOnly
	    }, viewProps)), showViewSwitcher && /*#__PURE__*/jsxRuntimeExports.jsx(TimeClockArrowSwitcher, {
	      className: classes.arrowSwitcher,
	      slots: slots,
	      slotProps: slotProps,
	      onGoToPrevious: () => setView(previousView),
	      isPreviousDisabled: !previousView,
	      previousLabel: localeText.openPreviousView,
	      onGoToNext: () => setView(nextView),
	      isNextDisabled: !nextView,
	      nextLabel: localeText.openNextView,
	      ownerState: ownerState
	    })]
	  }));
	});

	function getDigitalClockUtilityClass(slot) {
	  return generateUtilityClass('MuiDigitalClock', slot);
	}
	const digitalClockClasses = generateUtilityClasses('MuiDigitalClock', ['root', 'list', 'item']);

	const _excluded$v = ["ampm", "timeStep", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "onChange", "view", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "views", "skipDisabled", "timezone"];
	const useUtilityClasses$m = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    list: ['list'],
	    item: ['item']
	  };
	  return composeClasses(slots, getDigitalClockUtilityClass, classes);
	};
	const DigitalClockRoot = styled$1(PickerViewRoot, {
	  name: 'MuiDigitalClock',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  ownerState
	}) => ({
	  overflowY: 'auto',
	  width: '100%',
	  '@media (prefers-reduced-motion: no-preference)': {
	    scrollBehavior: ownerState.alreadyRendered ? 'smooth' : 'auto'
	  },
	  maxHeight: DIGITAL_CLOCK_VIEW_HEIGHT
	}));
	const DigitalClockList = styled$1(MenuList$1, {
	  name: 'MuiDigitalClock',
	  slot: 'List',
	  overridesResolver: (props, styles) => styles.list
	})({
	  padding: 0
	});
	const DigitalClockItem = styled$1(MenuItem$1, {
	  name: 'MuiDigitalClock',
	  slot: 'Item',
	  overridesResolver: (props, styles) => styles.item
	})(({
	  theme
	}) => ({
	  padding: '8px 16px',
	  margin: '2px 4px',
	  '&:first-of-type': {
	    marginTop: 4
	  },
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
	  },
	  '&.Mui-selected': {
	    backgroundColor: (theme.vars || theme).palette.primary.main,
	    color: (theme.vars || theme).palette.primary.contrastText,
	    '&:focus-visible, &:hover': {
	      backgroundColor: (theme.vars || theme).palette.primary.dark
	    }
	  },
	  '&.Mui-focusVisible': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity)
	  }
	}));
	/**
	 * Demos:
	 *
	 * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)
	 * - [DigitalClock](https://mui.com/x/react-date-pickers/digital-clock/)
	 *
	 * API:
	 *
	 * - [DigitalClock API](https://mui.com/x/api/date-pickers/digital-clock/)
	 */
	const DigitalClock = /*#__PURE__*/reactExports.forwardRef(function DigitalClock(inProps, ref) {
	  var _ref, _slots$digitalClockIt, _slotProps$digitalClo;
	  const utils = useUtils();
	  const containerRef = reactExports.useRef(null);
	  const handleRef = useForkRef(ref, containerRef);
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDigitalClock'
	  });
	  const {
	      ampm = utils.is12HourCycleInCurrentLocale(),
	      timeStep = 30,
	      autoFocus,
	      components,
	      componentsProps,
	      slots,
	      slotProps,
	      value: valueProp,
	      defaultValue,
	      referenceDate: referenceDateProp,
	      disableIgnoringDatePartForTimeValidation = false,
	      maxTime,
	      minTime,
	      disableFuture,
	      disablePast,
	      minutesStep = 1,
	      shouldDisableClock,
	      shouldDisableTime,
	      onChange,
	      view: inView,
	      openTo,
	      onViewChange,
	      focusedView,
	      onFocusedViewChange,
	      className,
	      disabled,
	      readOnly,
	      views = ['hours'],
	      skipDisabled = false,
	      timezone: timezoneProp
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$v);
	  const {
	    value,
	    handleValueChange: handleRawValueChange,
	    timezone
	  } = useControlledValueWithTimezone({
	    name: 'DigitalClock',
	    timezone: timezoneProp,
	    value: valueProp,
	    defaultValue,
	    onChange,
	    valueManager: singleItemValueManager
	  });
	  const localeText = useLocaleText();
	  const now = useNow(timezone);
	  const ownerState = reactExports.useMemo(() => _extends({}, props, {
	    alreadyRendered: !!containerRef.current
	  }), [props]);
	  const classes = useUtilityClasses$m(ownerState);
	  const ClockItem = (_ref = (_slots$digitalClockIt = slots == null ? void 0 : slots.digitalClockItem) != null ? _slots$digitalClockIt : components == null ? void 0 : components.DigitalClockItem) != null ? _ref : DigitalClockItem;
	  const clockItemProps = useSlotProps({
	    elementType: ClockItem,
	    externalSlotProps: (_slotProps$digitalClo = slotProps == null ? void 0 : slotProps.digitalClockItem) != null ? _slotProps$digitalClo : componentsProps == null ? void 0 : componentsProps.digitalClockItem,
	    ownerState: {},
	    className: classes.item
	  });
	  const valueOrReferenceDate = useClockReferenceDate({
	    value,
	    referenceDate: referenceDateProp,
	    utils,
	    props,
	    timezone
	  });
	  const handleValueChange = useEventCallback(newValue => handleRawValueChange(newValue, 'finish', 'hours'));
	  const {
	    setValueAndGoToNextView
	  } = useViews({
	    view: inView,
	    views,
	    openTo,
	    onViewChange,
	    onChange: handleValueChange,
	    focusedView,
	    onFocusedViewChange
	  });
	  const handleItemSelect = useEventCallback(newValue => {
	    setValueAndGoToNextView(newValue, 'finish');
	  });
	  reactExports.useEffect(() => {
	    if (containerRef.current === null) {
	      return;
	    }
	    const selectedItem = containerRef.current.querySelector('[role="listbox"] [role="option"][aria-selected="true"]');
	    if (!selectedItem) {
	      return;
	    }
	    const offsetTop = selectedItem.offsetTop;

	    // Subtracting the 4px of extra margin intended for the first visible section item
	    containerRef.current.scrollTop = offsetTop - 4;
	  });
	  const isTimeDisabled = reactExports.useCallback(valueToCheck => {
	    const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
	    const containsValidTime = () => {
	      if (minTime && isAfter(minTime, valueToCheck)) {
	        return false;
	      }
	      if (maxTime && isAfter(valueToCheck, maxTime)) {
	        return false;
	      }
	      if (disableFuture && isAfter(valueToCheck, now)) {
	        return false;
	      }
	      if (disablePast && isAfter(now, valueToCheck)) {
	        return false;
	      }
	      return true;
	    };
	    const isValidValue = () => {
	      if (utils.getMinutes(valueToCheck) % minutesStep !== 0) {
	        return false;
	      }
	      if (shouldDisableClock != null && shouldDisableClock(utils.toJsDate(valueToCheck).getTime(), 'hours')) {
	        return false;
	      }
	      if (shouldDisableTime) {
	        return !shouldDisableTime(valueToCheck, 'hours');
	      }
	      return true;
	    };
	    return !containsValidTime() || !isValidValue();
	  }, [disableIgnoringDatePartForTimeValidation, utils, minTime, maxTime, disableFuture, now, disablePast, minutesStep, shouldDisableClock, shouldDisableTime]);
	  const timeOptions = reactExports.useMemo(() => {
	    const startOfDay = utils.startOfDay(valueOrReferenceDate);
	    return [startOfDay, ...Array.from({
	      length: Math.ceil(24 * 60 / timeStep) - 1
	    }, (_, index) => utils.addMinutes(startOfDay, timeStep * (index + 1)))];
	  }, [valueOrReferenceDate, timeStep, utils]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(DigitalClockRoot, _extends({
	    ref: handleRef,
	    className: clsx(classes.root, className),
	    ownerState: ownerState
	  }, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(DigitalClockList, {
	      autoFocusItem: autoFocus || !!focusedView,
	      role: "listbox",
	      "aria-label": localeText.timePickerToolbarTitle,
	      className: classes.list,
	      children: timeOptions.map(option => {
	        if (skipDisabled && isTimeDisabled(option)) {
	          return null;
	        }
	        const isSelected = utils.isEqual(option, value);
	        return /*#__PURE__*/jsxRuntimeExports.jsx(ClockItem, _extends({
	          onClick: () => !readOnly && handleItemSelect(option),
	          selected: isSelected,
	          disabled: disabled || isTimeDisabled(option),
	          disableRipple: readOnly,
	          role: "option"
	          // aria-readonly is not supported here and does not have any effect
	          ,

	          "aria-disabled": readOnly,
	          "aria-selected": isSelected
	        }, clockItemProps, {
	          children: utils.format(option, ampm ? 'fullTime12h' : 'fullTime24h')
	        }), utils.toISO(option));
	      })
	    })
	  }));
	});

	function getMultiSectionDigitalClockUtilityClass(slot) {
	  return generateUtilityClass('MuiMultiSectionDigitalClock', slot);
	}
	generateUtilityClasses('MuiMultiSectionDigitalClock', ['root']);

	function getMultiSectionDigitalClockSectionUtilityClass(slot) {
	  return generateUtilityClass('MuiMultiSectionDigitalClockSection', slot);
	}
	const multiSectionDigitalClockSectionClasses = generateUtilityClasses('MuiMultiSectionDigitalClockSection', ['root', 'item']);

	const _excluded$u = ["autoFocus", "onChange", "className", "disabled", "readOnly", "items", "active", "slots", "slotProps", "skipDisabled"];
	const useUtilityClasses$l = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    item: ['item']
	  };
	  return composeClasses(slots, getMultiSectionDigitalClockSectionUtilityClass, classes);
	};
	const MultiSectionDigitalClockSectionRoot = styled$1(MenuList$1, {
	  name: 'MuiMultiSectionDigitalClockSection',
	  slot: 'Root',
	  overridesResolver: (_, styles) => styles.root
	})(({
	  theme,
	  ownerState
	}) => ({
	  maxHeight: DIGITAL_CLOCK_VIEW_HEIGHT,
	  width: 56,
	  padding: 0,
	  overflow: 'hidden',
	  '@media (prefers-reduced-motion: no-preference)': {
	    scrollBehavior: ownerState.alreadyRendered ? 'smooth' : 'auto'
	  },
	  '@media (pointer: fine)': {
	    '&:hover': {
	      overflowY: 'auto'
	    }
	  },
	  '@media (pointer: none), (pointer: coarse)': {
	    overflowY: 'auto'
	  },
	  '&:not(:first-of-type)': {
	    borderLeft: `1px solid ${(theme.vars || theme).palette.divider}`
	  },
	  '&:after': {
	    display: 'block',
	    content: '""',
	    // subtracting the height of one item, extra margin and borders to make sure the max height is correct
	    height: 'calc(100% - 40px - 6px)'
	  }
	}));
	const MultiSectionDigitalClockSectionItem = styled$1(MenuItem$1, {
	  name: 'MuiMultiSectionDigitalClockSection',
	  slot: 'Item',
	  overridesResolver: (_, styles) => styles.item
	})(({
	  theme
	}) => ({
	  padding: 8,
	  margin: '2px 4px',
	  width: MULTI_SECTION_CLOCK_SECTION_WIDTH,
	  justifyContent: 'center',
	  '&:first-of-type': {
	    marginTop: 4
	  },
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
	  },
	  '&.Mui-selected': {
	    backgroundColor: (theme.vars || theme).palette.primary.main,
	    color: (theme.vars || theme).palette.primary.contrastText,
	    '&:focus-visible, &:hover': {
	      backgroundColor: (theme.vars || theme).palette.primary.dark
	    }
	  },
	  '&.Mui-focusVisible': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity)
	  }
	}));
	/**
	 * @ignore - internal component.
	 */
	const MultiSectionDigitalClockSection = /*#__PURE__*/reactExports.forwardRef(function MultiSectionDigitalClockSection(inProps, ref) {
	  var _slots$digitalClockSe;
	  const containerRef = reactExports.useRef(null);
	  const handleRef = useForkRef(ref, containerRef);
	  const previousActive = reactExports.useRef(null);
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiMultiSectionDigitalClockSection'
	  });
	  const {
	      autoFocus,
	      onChange,
	      className,
	      disabled,
	      readOnly,
	      items,
	      active,
	      slots,
	      slotProps,
	      skipDisabled
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$u);
	  const ownerState = reactExports.useMemo(() => _extends({}, props, {
	    alreadyRendered: !!containerRef.current
	  }), [props]);
	  const classes = useUtilityClasses$l(ownerState);
	  const DigitalClockSectionItem = (_slots$digitalClockSe = slots == null ? void 0 : slots.digitalClockSectionItem) != null ? _slots$digitalClockSe : MultiSectionDigitalClockSectionItem;
	  reactExports.useEffect(() => {
	    if (containerRef.current === null) {
	      return;
	    }
	    const activeItem = containerRef.current.querySelector('[role="option"][aria-selected="true"]');
	    if (active && autoFocus && activeItem) {
	      activeItem.focus();
	    }
	    if (!activeItem || previousActive.current === activeItem) {
	      return;
	    }
	    previousActive.current = activeItem;
	    const offsetTop = activeItem.offsetTop;

	    // Subtracting the 4px of extra margin intended for the first visible section item
	    containerRef.current.scrollTop = offsetTop - 4;
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(MultiSectionDigitalClockSectionRoot, _extends({
	    ref: handleRef,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    autoFocusItem: autoFocus && active,
	    role: "listbox"
	  }, other, {
	    children: items.map(option => {
	      var _option$isDisabled, _option$isDisabled2;
	      if (skipDisabled && (_option$isDisabled = option.isDisabled) != null && _option$isDisabled.call(option, option.value)) {
	        return null;
	      }
	      const isSelected = option.isSelected(option.value);
	      return /*#__PURE__*/jsxRuntimeExports.jsx(DigitalClockSectionItem, _extends({
	        onClick: () => !readOnly && onChange(option.value),
	        selected: isSelected,
	        disabled: disabled || ((_option$isDisabled2 = option.isDisabled) == null ? void 0 : _option$isDisabled2.call(option, option.value)),
	        disableRipple: readOnly,
	        role: "option"
	        // aria-readonly is not supported here and does not have any effect
	        ,

	        "aria-disabled": readOnly,
	        "aria-label": option.ariaLabel,
	        "aria-selected": isSelected,
	        className: classes.item
	      }, slotProps == null ? void 0 : slotProps.digitalClockSectionItem, {
	        children: option.label
	      }), option.label);
	    })
	  }));
	});

	const getHourSectionOptions = ({
	  now,
	  value,
	  utils,
	  ampm,
	  isDisabled,
	  resolveAriaLabel,
	  timeStep
	}) => {
	  const currentHours = value ? utils.getHours(value) : null;
	  const result = [];
	  const isSelected = hour => {
	    if (currentHours === null) {
	      return false;
	    }
	    if (ampm) {
	      if (hour === 12) {
	        return currentHours === 12 || currentHours === 0;
	      }
	      return currentHours === hour || currentHours - 12 === hour;
	    }
	    return currentHours === hour;
	  };
	  const endHour = ampm ? 11 : 23;
	  for (let hour = 0; hour <= endHour; hour += timeStep) {
	    let label = utils.format(utils.setHours(now, hour), ampm ? 'hours12h' : 'hours24h');
	    const ariaLabel = resolveAriaLabel(parseInt(label, 10).toString());
	    label = utils.formatNumber(label);
	    result.push({
	      value: hour,
	      label,
	      isSelected,
	      isDisabled,
	      ariaLabel
	    });
	  }
	  return result;
	};
	const getTimeSectionOptions = ({
	  value,
	  utils,
	  isDisabled,
	  timeStep,
	  resolveLabel,
	  resolveAriaLabel,
	  hasValue = true
	}) => {
	  const isSelected = timeValue => {
	    if (value === null) {
	      return false;
	    }
	    return hasValue && value === timeValue;
	  };
	  return [...Array.from({
	    length: Math.ceil(60 / timeStep)
	  }, (_, index) => {
	    const timeValue = timeStep * index;
	    return {
	      value: timeValue,
	      label: utils.formatNumber(resolveLabel(timeValue)),
	      isDisabled,
	      isSelected,
	      ariaLabel: resolveAriaLabel(timeValue.toString())
	    };
	  })];
	};

	const _excluded$t = ["ampm", "timeSteps", "autoFocus", "components", "componentsProps", "slots", "slotProps", "value", "defaultValue", "referenceDate", "disableIgnoringDatePartForTimeValidation", "maxTime", "minTime", "disableFuture", "disablePast", "minutesStep", "shouldDisableClock", "shouldDisableTime", "onChange", "view", "views", "openTo", "onViewChange", "focusedView", "onFocusedViewChange", "className", "disabled", "readOnly", "skipDisabled", "timezone"];
	const useUtilityClasses$k = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getMultiSectionDigitalClockUtilityClass, classes);
	};
	const MultiSectionDigitalClockRoot = styled$1(PickerViewRoot, {
	  name: 'MuiMultiSectionDigitalClock',
	  slot: 'Root',
	  overridesResolver: (_, styles) => styles.root
	})(({
	  theme
	}) => ({
	  display: 'flex',
	  flexDirection: 'row',
	  width: '100%',
	  borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
	}));
	/**
	 * Demos:
	 *
	 * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)
	 * - [DigitalClock](https://mui.com/x/react-date-pickers/digital-clock/)
	 *
	 * API:
	 *
	 * - [MultiSectionDigitalClock API](https://mui.com/x/api/date-pickers/multi-section-digital-clock/)
	 */
	const MultiSectionDigitalClock = /*#__PURE__*/reactExports.forwardRef(function MultiSectionDigitalClock(inProps, ref) {
	  const utils = useUtils();
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiMultiSectionDigitalClock'
	  });
	  const {
	      ampm = utils.is12HourCycleInCurrentLocale(),
	      timeSteps: inTimeSteps,
	      autoFocus,
	      components,
	      componentsProps,
	      slots,
	      slotProps,
	      value: valueProp,
	      defaultValue,
	      referenceDate: referenceDateProp,
	      disableIgnoringDatePartForTimeValidation = false,
	      maxTime,
	      minTime,
	      disableFuture,
	      disablePast,
	      minutesStep = 1,
	      shouldDisableClock,
	      shouldDisableTime,
	      onChange,
	      view: inView,
	      views: inViews = ['hours', 'minutes'],
	      openTo,
	      onViewChange,
	      focusedView: inFocusedView,
	      onFocusedViewChange,
	      className,
	      disabled,
	      readOnly,
	      skipDisabled = false,
	      timezone: timezoneProp
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$t);
	  const {
	    value,
	    handleValueChange: handleRawValueChange,
	    timezone
	  } = useControlledValueWithTimezone({
	    name: 'MultiSectionDigitalClock',
	    timezone: timezoneProp,
	    value: valueProp,
	    defaultValue,
	    onChange,
	    valueManager: singleItemValueManager
	  });
	  const localeText = useLocaleText();
	  const now = useNow(timezone);
	  const timeSteps = reactExports.useMemo(() => _extends({
	    hours: 1,
	    minutes: 5,
	    seconds: 5
	  }, inTimeSteps), [inTimeSteps]);
	  const valueOrReferenceDate = useClockReferenceDate({
	    value,
	    referenceDate: referenceDateProp,
	    utils,
	    props,
	    timezone
	  });
	  const handleValueChange = useEventCallback((newValue, selectionState, selectedView) => handleRawValueChange(newValue, selectionState, selectedView));
	  const views = reactExports.useMemo(() => {
	    if (!ampm || !inViews.includes('hours')) {
	      return inViews;
	    }
	    return inViews.includes('meridiem') ? inViews : [...inViews, 'meridiem'];
	  }, [ampm, inViews]);
	  const {
	    view,
	    setValueAndGoToNextView,
	    focusedView
	  } = useViews({
	    view: inView,
	    views,
	    openTo,
	    onViewChange,
	    onChange: handleValueChange,
	    focusedView: inFocusedView,
	    onFocusedViewChange
	  });
	  const handleMeridiemValueChange = useEventCallback(newValue => {
	    setValueAndGoToNextView(newValue, 'finish', 'meridiem');
	  });
	  const {
	    meridiemMode,
	    handleMeridiemChange
	  } = useMeridiemMode(valueOrReferenceDate, ampm, handleMeridiemValueChange, 'finish');
	  const isTimeDisabled = reactExports.useCallback((rawValue, viewType) => {
	    const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, utils);
	    const shouldCheckPastEnd = viewType === 'hours' || viewType === 'minutes' && views.includes('seconds');
	    const containsValidTime = ({
	      start,
	      end
	    }) => {
	      if (minTime && isAfter(minTime, end)) {
	        return false;
	      }
	      if (maxTime && isAfter(start, maxTime)) {
	        return false;
	      }
	      if (disableFuture && isAfter(start, now)) {
	        return false;
	      }
	      if (disablePast && isAfter(now, shouldCheckPastEnd ? end : start)) {
	        return false;
	      }
	      return true;
	    };
	    const isValidValue = (timeValue, step = 1) => {
	      if (timeValue % step !== 0) {
	        return false;
	      }
	      if (shouldDisableClock != null && shouldDisableClock(timeValue, viewType)) {
	        return false;
	      }
	      if (shouldDisableTime) {
	        switch (viewType) {
	          case 'hours':
	            return !shouldDisableTime(utils.setHours(valueOrReferenceDate, timeValue), 'hours');
	          case 'minutes':
	            return !shouldDisableTime(utils.setMinutes(valueOrReferenceDate, timeValue), 'minutes');
	          case 'seconds':
	            return !shouldDisableTime(utils.setSeconds(valueOrReferenceDate, timeValue), 'seconds');
	          default:
	            return false;
	        }
	      }
	      return true;
	    };
	    switch (viewType) {
	      case 'hours':
	        {
	          const valueWithMeridiem = convertValueToMeridiem(rawValue, meridiemMode, ampm);
	          const dateWithNewHours = utils.setHours(valueOrReferenceDate, valueWithMeridiem);
	          const start = utils.setSeconds(utils.setMinutes(dateWithNewHours, 0), 0);
	          const end = utils.setSeconds(utils.setMinutes(dateWithNewHours, 59), 59);
	          return !containsValidTime({
	            start,
	            end
	          }) || !isValidValue(valueWithMeridiem);
	        }
	      case 'minutes':
	        {
	          const dateWithNewMinutes = utils.setMinutes(valueOrReferenceDate, rawValue);
	          const start = utils.setSeconds(dateWithNewMinutes, 0);
	          const end = utils.setSeconds(dateWithNewMinutes, 59);
	          return !containsValidTime({
	            start,
	            end
	          }) || !isValidValue(rawValue, minutesStep);
	        }
	      case 'seconds':
	        {
	          const dateWithNewSeconds = utils.setSeconds(valueOrReferenceDate, rawValue);
	          const start = dateWithNewSeconds;
	          const end = dateWithNewSeconds;
	          return !containsValidTime({
	            start,
	            end
	          }) || !isValidValue(rawValue);
	        }
	      default:
	        throw new Error('not supported');
	    }
	  }, [ampm, valueOrReferenceDate, disableIgnoringDatePartForTimeValidation, maxTime, meridiemMode, minTime, minutesStep, shouldDisableClock, shouldDisableTime, utils, disableFuture, disablePast, now, views]);
	  const buildViewProps = reactExports.useCallback(viewToBuild => {
	    switch (viewToBuild) {
	      case 'hours':
	        {
	          return {
	            onChange: hours => {
	              const valueWithMeridiem = convertValueToMeridiem(hours, meridiemMode, ampm);
	              setValueAndGoToNextView(utils.setHours(valueOrReferenceDate, valueWithMeridiem), 'finish', 'hours');
	            },
	            items: getHourSectionOptions({
	              now,
	              value,
	              ampm,
	              utils,
	              isDisabled: hours => disabled || isTimeDisabled(hours, 'hours'),
	              timeStep: timeSteps.hours,
	              resolveAriaLabel: localeText.hoursClockNumberText
	            })
	          };
	        }
	      case 'minutes':
	        {
	          return {
	            onChange: minutes => {
	              setValueAndGoToNextView(utils.setMinutes(valueOrReferenceDate, minutes), 'finish', 'minutes');
	            },
	            items: getTimeSectionOptions({
	              value: utils.getMinutes(valueOrReferenceDate),
	              utils,
	              isDisabled: minutes => disabled || isTimeDisabled(minutes, 'minutes'),
	              resolveLabel: minutes => utils.format(utils.setMinutes(now, minutes), 'minutes'),
	              timeStep: timeSteps.minutes,
	              hasValue: !!value,
	              resolveAriaLabel: localeText.minutesClockNumberText
	            })
	          };
	        }
	      case 'seconds':
	        {
	          return {
	            onChange: seconds => {
	              setValueAndGoToNextView(utils.setSeconds(valueOrReferenceDate, seconds), 'finish', 'seconds');
	            },
	            items: getTimeSectionOptions({
	              value: utils.getSeconds(valueOrReferenceDate),
	              utils,
	              isDisabled: seconds => disabled || isTimeDisabled(seconds, 'seconds'),
	              resolveLabel: seconds => utils.format(utils.setSeconds(now, seconds), 'seconds'),
	              timeStep: timeSteps.seconds,
	              hasValue: !!value,
	              resolveAriaLabel: localeText.secondsClockNumberText
	            })
	          };
	        }
	      case 'meridiem':
	        {
	          const amLabel = formatMeridiem(utils, 'am');
	          const pmLabel = formatMeridiem(utils, 'pm');
	          return {
	            onChange: handleMeridiemChange,
	            items: [{
	              value: 'am',
	              label: amLabel,
	              isSelected: () => !!value && meridiemMode === 'am',
	              ariaLabel: amLabel
	            }, {
	              value: 'pm',
	              label: pmLabel,
	              isSelected: () => !!value && meridiemMode === 'pm',
	              ariaLabel: pmLabel
	            }]
	          };
	        }
	      default:
	        throw new Error(`Unknown view: ${viewToBuild} found.`);
	    }
	  }, [now, value, ampm, utils, timeSteps.hours, timeSteps.minutes, timeSteps.seconds, localeText.hoursClockNumberText, localeText.minutesClockNumberText, localeText.secondsClockNumberText, meridiemMode, setValueAndGoToNextView, valueOrReferenceDate, disabled, isTimeDisabled, handleMeridiemChange]);
	  const viewTimeOptions = reactExports.useMemo(() => {
	    return views.reduce((result, currentView) => {
	      return _extends({}, result, {
	        [currentView]: buildViewProps(currentView)
	      });
	    }, {});
	  }, [views, buildViewProps]);
	  const ownerState = props;
	  const classes = useUtilityClasses$k(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(MultiSectionDigitalClockRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    role: "group"
	  }, other, {
	    children: Object.entries(viewTimeOptions).map(([timeView, viewOptions]) => /*#__PURE__*/jsxRuntimeExports.jsx(MultiSectionDigitalClockSection, {
	      items: viewOptions.items,
	      onChange: viewOptions.onChange,
	      active: view === timeView,
	      autoFocus: autoFocus != null ? autoFocus : focusedView === timeView,
	      disabled: disabled,
	      readOnly: readOnly,
	      slots: slots != null ? slots : components,
	      slotProps: slotProps != null ? slotProps : componentsProps,
	      skipDisabled: skipDisabled,
	      "aria-label": localeText.selectViewText(timeView)
	    }, timeView))
	  }));
	});

	function getPickersDayUtilityClass(slot) {
	  return generateUtilityClass('MuiPickersDay', slot);
	}
	const pickersDayClasses = generateUtilityClasses('MuiPickersDay', ['root', 'dayWithMargin', 'dayOutsideMonth', 'hiddenDaySpacingFiller', 'today', 'selected', 'disabled']);

	const _excluded$s = ["autoFocus", "className", "day", "disabled", "disableHighlightToday", "disableMargin", "hidden", "isAnimating", "onClick", "onDaySelect", "onFocus", "onBlur", "onKeyDown", "onMouseDown", "onMouseEnter", "outsideCurrentMonth", "selected", "showDaysOutsideCurrentMonth", "children", "today", "isFirstVisibleCell", "isLastVisibleCell"];
	const useUtilityClasses$j = ownerState => {
	  const {
	    selected,
	    disableMargin,
	    disableHighlightToday,
	    today,
	    disabled,
	    outsideCurrentMonth,
	    showDaysOutsideCurrentMonth,
	    classes
	  } = ownerState;
	  const isHiddenDaySpacingFiller = outsideCurrentMonth && !showDaysOutsideCurrentMonth;
	  const slots = {
	    root: ['root', selected && !isHiddenDaySpacingFiller && 'selected', disabled && 'disabled', !disableMargin && 'dayWithMargin', !disableHighlightToday && today && 'today', outsideCurrentMonth && showDaysOutsideCurrentMonth && 'dayOutsideMonth', isHiddenDaySpacingFiller && 'hiddenDaySpacingFiller'],
	    hiddenDaySpacingFiller: ['hiddenDaySpacingFiller']
	  };
	  return composeClasses(slots, getPickersDayUtilityClass, classes);
	};
	const styleArg = ({
	  theme,
	  ownerState
	}) => _extends({}, theme.typography.caption, {
	  width: DAY_SIZE,
	  height: DAY_SIZE,
	  borderRadius: '50%',
	  padding: 0,
	  // explicitly setting to `transparent` to avoid potentially getting impacted by change from the overridden component
	  backgroundColor: 'transparent',
	  transition: theme.transitions.create('background-color', {
	    duration: theme.transitions.duration.short
	  }),
	  color: (theme.vars || theme).palette.text.primary,
	  '@media (pointer: fine)': {
	    '&:hover': {
	      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)
	    }
	  },
	  '&:focus': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.focusOpacity),
	    [`&.${pickersDayClasses.selected}`]: {
	      willChange: 'background-color',
	      backgroundColor: (theme.vars || theme).palette.primary.dark
	    }
	  },
	  [`&.${pickersDayClasses.selected}`]: {
	    color: (theme.vars || theme).palette.primary.contrastText,
	    backgroundColor: (theme.vars || theme).palette.primary.main,
	    fontWeight: theme.typography.fontWeightMedium,
	    '&:hover': {
	      willChange: 'background-color',
	      backgroundColor: (theme.vars || theme).palette.primary.dark
	    }
	  },
	  [`&.${pickersDayClasses.disabled}:not(.${pickersDayClasses.selected})`]: {
	    color: (theme.vars || theme).palette.text.disabled
	  },
	  [`&.${pickersDayClasses.disabled}&.${pickersDayClasses.selected}`]: {
	    opacity: 0.6
	  }
	}, !ownerState.disableMargin && {
	  margin: `0 ${DAY_MARGIN}px`
	}, ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && {
	  color: (theme.vars || theme).palette.text.secondary
	}, !ownerState.disableHighlightToday && ownerState.today && {
	  [`&:not(.${pickersDayClasses.selected})`]: {
	    border: `1px solid ${(theme.vars || theme).palette.text.secondary}`
	  }
	});
	const overridesResolver = (props, styles) => {
	  const {
	    ownerState
	  } = props;
	  return [styles.root, !ownerState.disableMargin && styles.dayWithMargin, !ownerState.disableHighlightToday && ownerState.today && styles.today, !ownerState.outsideCurrentMonth && ownerState.showDaysOutsideCurrentMonth && styles.dayOutsideMonth, ownerState.outsideCurrentMonth && !ownerState.showDaysOutsideCurrentMonth && styles.hiddenDaySpacingFiller];
	};
	const PickersDayRoot = styled$1(ButtonBase$1, {
	  name: 'MuiPickersDay',
	  slot: 'Root',
	  overridesResolver
	})(styleArg);
	const PickersDayFiller = styled$1('div', {
	  name: 'MuiPickersDay',
	  slot: 'Root',
	  overridesResolver
	})(({
	  theme,
	  ownerState
	}) => _extends({}, styleArg({
	  theme,
	  ownerState
	}), {
	  // visibility: 'hidden' does not work here as it hides the element from screen readers as well
	  opacity: 0,
	  pointerEvents: 'none'
	}));
	const noop = () => {};
	const PickersDayRaw = /*#__PURE__*/reactExports.forwardRef(function PickersDay(inProps, forwardedRef) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPickersDay'
	  });
	  const {
	      autoFocus = false,
	      className,
	      day,
	      disabled = false,
	      disableHighlightToday = false,
	      disableMargin = false,
	      isAnimating,
	      onClick,
	      onDaySelect,
	      onFocus = noop,
	      onBlur = noop,
	      onKeyDown = noop,
	      onMouseDown = noop,
	      onMouseEnter = noop,
	      outsideCurrentMonth,
	      selected = false,
	      showDaysOutsideCurrentMonth = false,
	      children,
	      today: isToday = false
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$s);
	  const ownerState = _extends({}, props, {
	    autoFocus,
	    disabled,
	    disableHighlightToday,
	    disableMargin,
	    selected,
	    showDaysOutsideCurrentMonth,
	    today: isToday
	  });
	  const classes = useUtilityClasses$j(ownerState);
	  const utils = useUtils();
	  const ref = reactExports.useRef(null);
	  const handleRef = useForkRef(ref, forwardedRef);

	  // Since this is rendered when a Popper is opened we can't use passive effects.
	  // Focusing in passive effects in Popper causes scroll jump.
	  useEnhancedEffect$1(() => {
	    if (autoFocus && !disabled && !isAnimating && !outsideCurrentMonth) {
	      // ref.current being null would be a bug in MUI
	      ref.current.focus();
	    }
	  }, [autoFocus, disabled, isAnimating, outsideCurrentMonth]);

	  // For day outside of current month, move focus from mouseDown to mouseUp
	  // Goal: have the onClick ends before sliding to the new month
	  const handleMouseDown = event => {
	    onMouseDown(event);
	    if (outsideCurrentMonth) {
	      event.preventDefault();
	    }
	  };
	  const handleClick = event => {
	    if (!disabled) {
	      onDaySelect(day);
	    }
	    if (outsideCurrentMonth) {
	      event.currentTarget.focus();
	    }
	    if (onClick) {
	      onClick(event);
	    }
	  };
	  if (outsideCurrentMonth && !showDaysOutsideCurrentMonth) {
	    return /*#__PURE__*/jsxRuntimeExports.jsx(PickersDayFiller, {
	      className: clsx(classes.root, classes.hiddenDaySpacingFiller, className),
	      ownerState: ownerState,
	      role: other.role
	    });
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(PickersDayRoot, _extends({
	    className: clsx(classes.root, className),
	    ref: handleRef,
	    centerRipple: true,
	    disabled: disabled,
	    tabIndex: selected ? 0 : -1,
	    onKeyDown: event => onKeyDown(event, day),
	    onFocus: event => onFocus(event, day),
	    onBlur: event => onBlur(event, day),
	    onMouseEnter: event => onMouseEnter(event, day),
	    onClick: handleClick,
	    onMouseDown: handleMouseDown
	  }, other, {
	    ownerState: ownerState,
	    children: !children ? utils.format(day, 'dayOfMonth') : children
	  }));
	});

	/**
	 * Demos:
	 *
	 * - [DateCalendar](https://mui.com/x/react-date-pickers/date-calendar/)
	 * API:
	 *
	 * - [PickersDay API](https://mui.com/x/api/date-pickers/pickers-day/)
	 */
	const PickersDay = /*#__PURE__*/reactExports.memo(PickersDayRaw);

	function useValidation(props, validate, isSameError, defaultErrorState) {
	  const {
	    value,
	    onError
	  } = props;
	  const adapter = useLocalizationContext();
	  const previousValidationErrorRef = reactExports.useRef(defaultErrorState);
	  const validationError = validate({
	    adapter,
	    value,
	    props
	  });
	  reactExports.useEffect(() => {
	    if (onError && !isSameError(validationError, previousValidationErrorRef.current)) {
	      onError(validationError, value);
	    }
	    previousValidationErrorRef.current = validationError;
	  }, [isSameError, onError, previousValidationErrorRef, validationError, value]);
	  return validationError;
	}

	const useFieldState = params => {
	  const utils = useUtils();
	  const localeText = useLocaleText();
	  const adapter = useLocalizationContext();
	  const theme = useTheme();
	  const isRTL = theme.direction === 'rtl';
	  const {
	    valueManager,
	    fieldValueManager,
	    valueType,
	    validator,
	    internalProps,
	    internalProps: {
	      value: valueProp,
	      defaultValue,
	      referenceDate: referenceDateProp,
	      onChange,
	      format,
	      formatDensity = 'dense',
	      selectedSections: selectedSectionsProp,
	      onSelectedSectionsChange,
	      shouldRespectLeadingZeros = false,
	      timezone: timezoneProp
	    }
	  } = params;
	  const {
	    timezone,
	    value: valueFromTheOutside,
	    handleValueChange
	  } = useValueWithTimezone({
	    timezone: timezoneProp,
	    value: valueProp,
	    defaultValue,
	    onChange,
	    valueManager
	  });
	  const sectionsValueBoundaries = reactExports.useMemo(() => getSectionsBoundaries(utils, timezone), [utils, timezone]);
	  const getSectionsFromValue = reactExports.useCallback((value, fallbackSections = null) => fieldValueManager.getSectionsFromValue(utils, value, fallbackSections, isRTL, date => splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL)), [fieldValueManager, format, localeText, isRTL, shouldRespectLeadingZeros, utils, formatDensity, timezone]);
	  const placeholder = reactExports.useMemo(() => fieldValueManager.getValueStrFromSections(getSectionsFromValue(valueManager.emptyValue), isRTL), [fieldValueManager, getSectionsFromValue, valueManager.emptyValue, isRTL]);
	  const [state, setState] = reactExports.useState(() => {
	    const sections = getSectionsFromValue(valueFromTheOutside);
	    const stateWithoutReferenceDate = {
	      sections,
	      value: valueFromTheOutside,
	      referenceValue: valueManager.emptyValue,
	      tempValueStrAndroid: null
	    };
	    const granularity = getSectionTypeGranularity(sections);
	    const referenceValue = valueManager.getInitialReferenceValue({
	      referenceDate: referenceDateProp,
	      value: valueFromTheOutside,
	      utils,
	      props: internalProps,
	      granularity,
	      timezone
	    });
	    return _extends({}, stateWithoutReferenceDate, {
	      referenceValue
	    });
	  });
	  const [selectedSections, innerSetSelectedSections] = useControlled({
	    controlled: selectedSectionsProp,
	    default: null,
	    name: 'useField',
	    state: 'selectedSectionIndexes'
	  });
	  const setSelectedSections = newSelectedSections => {
	    innerSetSelectedSections(newSelectedSections);
	    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);
	    setState(prevState => _extends({}, prevState, {
	      selectedSectionQuery: null
	    }));
	  };
	  const selectedSectionIndexes = reactExports.useMemo(() => {
	    if (selectedSections == null) {
	      return null;
	    }
	    if (selectedSections === 'all') {
	      return {
	        startIndex: 0,
	        endIndex: state.sections.length - 1,
	        shouldSelectBoundarySelectors: true
	      };
	    }
	    if (typeof selectedSections === 'number') {
	      return {
	        startIndex: selectedSections,
	        endIndex: selectedSections
	      };
	    }
	    if (typeof selectedSections === 'string') {
	      const selectedSectionIndex = state.sections.findIndex(section => section.type === selectedSections);
	      return {
	        startIndex: selectedSectionIndex,
	        endIndex: selectedSectionIndex
	      };
	    }
	    return selectedSections;
	  }, [selectedSections, state.sections]);
	  const publishValue = ({
	    value,
	    referenceValue,
	    sections
	  }) => {
	    setState(prevState => _extends({}, prevState, {
	      sections,
	      value,
	      referenceValue,
	      tempValueStrAndroid: null
	    }));
	    if (valueManager.areValuesEqual(utils, state.value, value)) {
	      return;
	    }
	    const context = {
	      validationError: validator({
	        adapter,
	        value,
	        props: _extends({}, internalProps, {
	          value,
	          timezone
	        })
	      })
	    };
	    handleValueChange(value, context);
	  };
	  const setSectionValue = (sectionIndex, newSectionValue) => {
	    const newSections = [...state.sections];
	    newSections[sectionIndex] = _extends({}, newSections[sectionIndex], {
	      value: newSectionValue,
	      modified: true
	    });
	    return addPositionPropertiesToSections(newSections, isRTL);
	  };
	  const clearValue = () => {
	    publishValue({
	      value: valueManager.emptyValue,
	      referenceValue: state.referenceValue,
	      sections: getSectionsFromValue(valueManager.emptyValue)
	    });
	  };
	  const clearActiveSection = () => {
	    if (selectedSectionIndexes == null) {
	      return;
	    }
	    const activeSection = state.sections[selectedSectionIndexes.startIndex];
	    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
	    const nonEmptySectionCountBefore = activeDateManager.getSections(state.sections).filter(section => section.value !== '').length;
	    const hasNoOtherNonEmptySections = nonEmptySectionCountBefore === (activeSection.value === '' ? 0 : 1);
	    const newSections = setSectionValue(selectedSectionIndexes.startIndex, '');
	    const newActiveDate = hasNoOtherNonEmptySections ? null : utils.date(new Date(''));
	    const newValues = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);
	    if ((newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date))) {
	      publishValue(_extends({}, newValues, {
	        sections: newSections
	      }));
	    } else {
	      setState(prevState => _extends({}, prevState, newValues, {
	        sections: newSections,
	        tempValueStrAndroid: null
	      }));
	    }
	  };
	  const updateValueFromValueStr = valueStr => {
	    const parseDateStr = (dateStr, referenceDate) => {
	      const date = utils.parse(dateStr, format);
	      if (date == null || !utils.isValid(date)) {
	        return null;
	      }
	      const sections = splitFormatIntoSections(utils, timezone, localeText, format, date, formatDensity, shouldRespectLeadingZeros, isRTL);
	      return mergeDateIntoReferenceDate(utils, timezone, date, sections, referenceDate, false);
	    };
	    const newValue = fieldValueManager.parseValueStr(valueStr, state.referenceValue, parseDateStr);
	    const newReferenceValue = fieldValueManager.updateReferenceValue(utils, newValue, state.referenceValue);
	    publishValue({
	      value: newValue,
	      referenceValue: newReferenceValue,
	      sections: getSectionsFromValue(newValue, state.sections)
	    });
	  };
	  const updateSectionValue = ({
	    activeSection,
	    newSectionValue,
	    shouldGoToNextSection
	  }) => {
	    /**
	     * 1. Decide which section should be focused
	     */
	    if (shouldGoToNextSection && selectedSectionIndexes && selectedSectionIndexes.startIndex < state.sections.length - 1) {
	      setSelectedSections(selectedSectionIndexes.startIndex + 1);
	    } else if (selectedSectionIndexes && selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
	      setSelectedSections(selectedSectionIndexes.startIndex);
	    }

	    /**
	     * 2. Try to build a valid date from the new section value
	     */
	    const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
	    const newSections = setSectionValue(selectedSectionIndexes.startIndex, newSectionValue);
	    const newActiveDateSections = activeDateManager.getSections(newSections);
	    const newActiveDate = getDateFromDateSections(utils, newActiveDateSections);
	    let values;
	    let shouldPublish;

	    /**
	     * If the new date is valid,
	     * Then we merge the value of the modified sections into the reference date.
	     * This makes sure that we don't lose some information of the initial date (like the time on a date field).
	     */
	    if (newActiveDate != null && utils.isValid(newActiveDate)) {
	      const mergedDate = mergeDateIntoReferenceDate(utils, timezone, newActiveDate, newActiveDateSections, activeDateManager.referenceDate, true);
	      values = activeDateManager.getNewValuesFromNewActiveDate(mergedDate);
	      shouldPublish = true;
	    } else {
	      values = activeDateManager.getNewValuesFromNewActiveDate(newActiveDate);
	      shouldPublish = (newActiveDate != null && !utils.isValid(newActiveDate)) !== (activeDateManager.date != null && !utils.isValid(activeDateManager.date));
	    }

	    /**
	     * Publish or update the internal state with the new value and sections.
	     */
	    if (shouldPublish) {
	      return publishValue(_extends({}, values, {
	        sections: newSections
	      }));
	    }
	    return setState(prevState => _extends({}, prevState, values, {
	      sections: newSections,
	      tempValueStrAndroid: null
	    }));
	  };
	  const setTempAndroidValueStr = tempValueStrAndroid => setState(prev => _extends({}, prev, {
	    tempValueStrAndroid
	  }));
	  reactExports.useEffect(() => {
	    const sections = getSectionsFromValue(state.value);
	    setState(prevState => _extends({}, prevState, {
	      sections
	    }));
	  }, [format, utils.locale]); // eslint-disable-line react-hooks/exhaustive-deps

	  reactExports.useEffect(() => {
	    let shouldUpdate = false;
	    if (!valueManager.areValuesEqual(utils, state.value, valueFromTheOutside)) {
	      shouldUpdate = true;
	    } else {
	      shouldUpdate = valueManager.getTimezone(utils, state.value) !== valueManager.getTimezone(utils, valueFromTheOutside);
	    }
	    if (shouldUpdate) {
	      setState(prevState => _extends({}, prevState, {
	        value: valueFromTheOutside,
	        referenceValue: fieldValueManager.updateReferenceValue(utils, valueFromTheOutside, prevState.referenceValue),
	        sections: getSectionsFromValue(valueFromTheOutside)
	      }));
	    }
	  }, [valueFromTheOutside]); // eslint-disable-line react-hooks/exhaustive-deps

	  return {
	    state,
	    selectedSectionIndexes,
	    setSelectedSections,
	    clearValue,
	    clearActiveSection,
	    updateSectionValue,
	    updateValueFromValueStr,
	    setTempAndroidValueStr,
	    sectionsValueBoundaries,
	    placeholder,
	    timezone
	  };
	};

	/**
	 * The letter editing and the numeric editing each define a `CharacterEditingApplier`.
	 * This function decides what the new section value should be and if the focus should switch to the next section.
	 *
	 * If it returns `null`, then the section value is not updated and the focus does not move.
	 */

	/**
	 * Function called by `applyQuery` which decides:
	 * - what is the new section value ?
	 * - should the query used to get this value be stored for the next key press ?
	 *
	 * If it returns `{ sectionValue: string; shouldGoToNextSection: boolean }`,
	 * Then we store the query and update the section with the new value.
	 *
	 * If it returns `{ saveQuery: true` },
	 * Then we store the query and don't update the section.
	 *
	 * If it returns `{ saveQuery: false },
	 * Then we do nothing.
	 */

	const QUERY_LIFE_DURATION_MS = 5000;
	const isQueryResponseWithoutValue = response => response.saveQuery != null;

	/**
	 * Update the active section value when the user pressed a key that is not a navigation key (arrow key for example).
	 * This hook has two main editing behaviors
	 *
	 * 1. The numeric editing when the user presses a digit
	 * 2. The letter editing when the user presses another key
	 */
	const useFieldCharacterEditing = ({
	  sections,
	  updateSectionValue,
	  sectionsValueBoundaries,
	  setTempAndroidValueStr,
	  timezone
	}) => {
	  const utils = useUtils();
	  const [query, setQuery] = reactExports.useState(null);
	  const resetQuery = useEventCallback(() => setQuery(null));
	  reactExports.useEffect(() => {
	    var _sections$query$secti;
	    if (query != null && ((_sections$query$secti = sections[query.sectionIndex]) == null ? void 0 : _sections$query$secti.type) !== query.sectionType) {
	      resetQuery();
	    }
	  }, [sections, query, resetQuery]);
	  reactExports.useEffect(() => {
	    if (query != null) {
	      const timeout = setTimeout(() => resetQuery(), QUERY_LIFE_DURATION_MS);
	      return () => {
	        window.clearTimeout(timeout);
	      };
	    }
	    return () => {};
	  }, [query, resetQuery]);
	  const applyQuery = ({
	    keyPressed,
	    sectionIndex
	  }, getFirstSectionValueMatchingWithQuery, isValidQueryValue) => {
	    const cleanKeyPressed = keyPressed.toLowerCase();
	    const activeSection = sections[sectionIndex];

	    // The current query targets the section being editing
	    // We can try to concatenated value
	    if (query != null && (!isValidQueryValue || isValidQueryValue(query.value)) && query.sectionIndex === sectionIndex) {
	      const concatenatedQueryValue = `${query.value}${cleanKeyPressed}`;
	      const queryResponse = getFirstSectionValueMatchingWithQuery(concatenatedQueryValue, activeSection);
	      if (!isQueryResponseWithoutValue(queryResponse)) {
	        setQuery({
	          sectionIndex,
	          value: concatenatedQueryValue,
	          sectionType: activeSection.type
	        });
	        return queryResponse;
	      }
	    }
	    const queryResponse = getFirstSectionValueMatchingWithQuery(cleanKeyPressed, activeSection);
	    if (isQueryResponseWithoutValue(queryResponse) && !queryResponse.saveQuery) {
	      resetQuery();
	      return null;
	    }
	    setQuery({
	      sectionIndex,
	      value: cleanKeyPressed,
	      sectionType: activeSection.type
	    });
	    if (isQueryResponseWithoutValue(queryResponse)) {
	      return null;
	    }
	    return queryResponse;
	  };
	  const applyLetterEditing = params => {
	    const findMatchingOptions = (format, options, queryValue) => {
	      const matchingValues = options.filter(option => option.toLowerCase().startsWith(queryValue));
	      if (matchingValues.length === 0) {
	        return {
	          saveQuery: false
	        };
	      }
	      return {
	        sectionValue: matchingValues[0],
	        shouldGoToNextSection: matchingValues.length === 1
	      };
	    };
	    const testQueryOnFormatAndFallbackFormat = (queryValue, activeSection, fallbackFormat, formatFallbackValue) => {
	      const getOptions = format => getLetterEditingOptions(utils, timezone, activeSection.type, format);
	      if (activeSection.contentType === 'letter') {
	        return findMatchingOptions(activeSection.format, getOptions(activeSection.format), queryValue);
	      }

	      // When editing a digit-format month / weekDay and the user presses a letter,
	      // We can support the letter editing by using the letter-format month / weekDay and re-formatting the result.
	      // We just have to make sure that the default month / weekDay format is a letter format,
	      if (fallbackFormat && formatFallbackValue != null && getDateSectionConfigFromFormatToken(utils, fallbackFormat).contentType === 'letter') {
	        const fallbackOptions = getOptions(fallbackFormat);
	        const response = findMatchingOptions(fallbackFormat, fallbackOptions, queryValue);
	        if (isQueryResponseWithoutValue(response)) {
	          return {
	            saveQuery: false
	          };
	        }
	        return _extends({}, response, {
	          sectionValue: formatFallbackValue(response.sectionValue, fallbackOptions)
	        });
	      }
	      return {
	        saveQuery: false
	      };
	    };
	    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {
	      switch (activeSection.type) {
	        case 'month':
	          {
	            const formatFallbackValue = fallbackValue => changeSectionValueFormat(utils, fallbackValue, utils.formats.month, activeSection.format);
	            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.month, formatFallbackValue);
	          }
	        case 'weekDay':
	          {
	            const formatFallbackValue = (fallbackValue, fallbackOptions) => fallbackOptions.indexOf(fallbackValue).toString();
	            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection, utils.formats.weekday, formatFallbackValue);
	          }
	        case 'meridiem':
	          {
	            return testQueryOnFormatAndFallbackFormat(queryValue, activeSection);
	          }
	        default:
	          {
	            return {
	              saveQuery: false
	            };
	          }
	      }
	    };
	    return applyQuery(params, getFirstSectionValueMatchingWithQuery);
	  };
	  const applyNumericEditing = params => {
	    const getNewSectionValue = (queryValue, section) => {
	      const queryValueNumber = Number(`${queryValue}`);
	      const sectionBoundaries = sectionsValueBoundaries[section.type]({
	        currentDate: null,
	        format: section.format,
	        contentType: section.contentType
	      });
	      if (queryValueNumber > sectionBoundaries.maximum) {
	        return {
	          saveQuery: false
	        };
	      }

	      // If the user types `0` on a month section,
	      // It is below the minimum, but we want to store the `0` in the query,
	      // So that when he pressed `1`, it will store `01` and move to the next section.
	      if (queryValueNumber < sectionBoundaries.minimum) {
	        return {
	          saveQuery: true
	        };
	      }
	      const shouldGoToNextSection = Number(`${queryValue}0`) > sectionBoundaries.maximum || queryValue.length === sectionBoundaries.maximum.toString().length;
	      const newSectionValue = cleanDigitSectionValue(utils, timezone, queryValueNumber, sectionBoundaries, section);
	      return {
	        sectionValue: newSectionValue,
	        shouldGoToNextSection
	      };
	    };
	    const getFirstSectionValueMatchingWithQuery = (queryValue, activeSection) => {
	      if (activeSection.contentType === 'digit' || activeSection.contentType === 'digit-with-letter') {
	        return getNewSectionValue(queryValue, activeSection);
	      }

	      // When editing a letter-format month and the user presses a digit,
	      // We can support the numeric editing by using the digit-format month and re-formatting the result.
	      if (activeSection.type === 'month') {
	        const hasLeadingZerosInFormat = doesSectionFormatHaveLeadingZeros(utils, timezone, 'digit', 'month', 'MM');
	        const response = getNewSectionValue(queryValue, {
	          type: activeSection.type,
	          format: 'MM',
	          hasLeadingZerosInFormat,
	          hasLeadingZerosInInput: true,
	          contentType: 'digit',
	          maxLength: 2
	        });
	        if (isQueryResponseWithoutValue(response)) {
	          return response;
	        }
	        const formattedValue = changeSectionValueFormat(utils, response.sectionValue, 'MM', activeSection.format);
	        return _extends({}, response, {
	          sectionValue: formattedValue
	        });
	      }

	      // When editing a letter-format weekDay and the user presses a digit,
	      // We can support the numeric editing by returning the nth day in the week day array.
	      if (activeSection.type === 'weekDay') {
	        const response = getNewSectionValue(queryValue, activeSection);
	        if (isQueryResponseWithoutValue(response)) {
	          return response;
	        }
	        const formattedValue = getDaysInWeekStr(utils, timezone, activeSection.format)[Number(response.sectionValue) - 1];
	        return _extends({}, response, {
	          sectionValue: formattedValue
	        });
	      }
	      return {
	        saveQuery: false
	      };
	    };
	    return applyQuery(params, getFirstSectionValueMatchingWithQuery, queryValue => !Number.isNaN(Number(queryValue)));
	  };
	  const applyCharacterEditing = useEventCallback(params => {
	    const activeSection = sections[params.sectionIndex];
	    const isNumericEditing = !Number.isNaN(Number(params.keyPressed));
	    const response = isNumericEditing ? applyNumericEditing(params) : applyLetterEditing(params);
	    if (response == null) {
	      setTempAndroidValueStr(null);
	    } else {
	      updateSectionValue({
	        activeSection,
	        newSectionValue: response.sectionValue,
	        shouldGoToNextSection: response.shouldGoToNextSection
	      });
	    }
	  });
	  return {
	    applyCharacterEditing,
	    resetCharacterQuery: resetQuery
	  };
	};

	/* Use it instead of .includes method for IE support */
	function arrayIncludes(array, itemOrItems) {
	  if (Array.isArray(itemOrItems)) {
	    return itemOrItems.every(item => array.indexOf(item) !== -1);
	  }
	  return array.indexOf(itemOrItems) !== -1;
	}
	const onSpaceOrEnter = (innerFn, externalEvent) => event => {
	  if (event.key === 'Enter' || event.key === ' ') {
	    innerFn(event);

	    // prevent any side effects
	    event.preventDefault();
	    event.stopPropagation();
	  }
	  if (externalEvent) {
	    externalEvent(event);
	  }
	};

	// https://www.abeautifulsite.net/posts/finding-the-active-element-in-a-shadow-root/
	const getActiveElement = (root = document) => {
	  const activeEl = root.activeElement;
	  if (!activeEl) {
	    return null;
	  }
	  if (activeEl.shadowRoot) {
	    return getActiveElement(activeEl.shadowRoot);
	  }
	  return activeEl;
	};
	const DEFAULT_DESKTOP_MODE_MEDIA_QUERY = '@media (pointer: fine)';

	const _excluded$r = ["onClick", "onKeyDown", "onFocus", "onBlur", "onMouseUp", "onPaste", "error", "clearable", "onClear", "disabled"];
	const useField = params => {
	  const utils = useUtils();
	  const {
	    state,
	    selectedSectionIndexes,
	    setSelectedSections,
	    clearValue,
	    clearActiveSection,
	    updateSectionValue,
	    updateValueFromValueStr,
	    setTempAndroidValueStr,
	    sectionsValueBoundaries,
	    placeholder,
	    timezone
	  } = useFieldState(params);
	  const {
	      inputRef: inputRefProp,
	      internalProps,
	      internalProps: {
	        readOnly = false,
	        unstableFieldRef,
	        minutesStep
	      },
	      forwardedProps: {
	        onClick,
	        onKeyDown,
	        onFocus,
	        onBlur,
	        onMouseUp,
	        onPaste,
	        error,
	        clearable,
	        onClear,
	        disabled
	      },
	      fieldValueManager,
	      valueManager,
	      validator
	    } = params,
	    otherForwardedProps = _objectWithoutPropertiesLoose(params.forwardedProps, _excluded$r);
	  const {
	    applyCharacterEditing,
	    resetCharacterQuery
	  } = useFieldCharacterEditing({
	    sections: state.sections,
	    updateSectionValue,
	    sectionsValueBoundaries,
	    setTempAndroidValueStr,
	    timezone
	  });
	  const inputRef = reactExports.useRef(null);
	  const handleRef = useForkRef(inputRefProp, inputRef);
	  const focusTimeoutRef = reactExports.useRef(undefined);
	  const theme = useTheme();
	  const isRTL = theme.direction === 'rtl';
	  const sectionOrder = reactExports.useMemo(() => getSectionOrder(state.sections, isRTL), [state.sections, isRTL]);
	  const syncSelectionFromDOM = () => {
	    var _selectionStart;
	    if (readOnly) {
	      setSelectedSections(null);
	      return;
	    }
	    const browserStartIndex = (_selectionStart = inputRef.current.selectionStart) != null ? _selectionStart : 0;
	    let nextSectionIndex;
	    if (browserStartIndex <= state.sections[0].startInInput) {
	      // Special case if browser index is in invisible characters at the beginning
	      nextSectionIndex = 1;
	    } else if (browserStartIndex >= state.sections[state.sections.length - 1].endInInput) {
	      // If the click is after the last character of the input, then we want to select the 1st section.
	      nextSectionIndex = 1;
	    } else {
	      nextSectionIndex = state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);
	    }
	    const sectionIndex = nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;
	    setSelectedSections(sectionIndex);
	  };
	  const handleInputClick = useEventCallback((event, ...args) => {
	    // The click event on the clear button would propagate to the input, trigger this handler and result in a wrong section selection.
	    // We avoid this by checking if the call of `handleInputClick` is actually intended, or a side effect.
	    if (event.isDefaultPrevented()) {
	      return;
	    }
	    onClick == null || onClick(event, ...args);
	    syncSelectionFromDOM();
	  });
	  const handleInputMouseUp = useEventCallback(event => {
	    onMouseUp == null || onMouseUp(event);

	    // Without this, the browser will remove the selected when clicking inside an already-selected section.
	    event.preventDefault();
	  });
	  const handleInputFocus = useEventCallback((...args) => {
	    onFocus == null || onFocus(...args);
	    // The ref is guaranteed to be resolved at this point.
	    const input = inputRef.current;
	    window.clearTimeout(focusTimeoutRef.current);
	    focusTimeoutRef.current = setTimeout(() => {
	      // The ref changed, the component got remounted, the focus event is no longer relevant.
	      if (!input || input !== inputRef.current) {
	        return;
	      }
	      if (selectedSectionIndexes != null || readOnly) {
	        return;
	      }
	      if (
	      // avoid selecting all sections when focusing empty field without value
	      input.value.length && Number(input.selectionEnd) - Number(input.selectionStart) === input.value.length) {
	        setSelectedSections('all');
	      } else {
	        syncSelectionFromDOM();
	      }
	    });
	  });
	  const handleInputBlur = useEventCallback((...args) => {
	    onBlur == null || onBlur(...args);
	    setSelectedSections(null);
	  });
	  const handleInputPaste = useEventCallback(event => {
	    onPaste == null || onPaste(event);
	    if (readOnly) {
	      event.preventDefault();
	      return;
	    }
	    const pastedValue = event.clipboardData.getData('text');
	    if (selectedSectionIndexes && selectedSectionIndexes.startIndex === selectedSectionIndexes.endIndex) {
	      const activeSection = state.sections[selectedSectionIndexes.startIndex];
	      const lettersOnly = /^[a-zA-Z]+$/.test(pastedValue);
	      const digitsOnly = /^[0-9]+$/.test(pastedValue);
	      const digitsAndLetterOnly = /^(([a-zA-Z]+)|)([0-9]+)(([a-zA-Z]+)|)$/.test(pastedValue);
	      const isValidPastedValue = activeSection.contentType === 'letter' && lettersOnly || activeSection.contentType === 'digit' && digitsOnly || activeSection.contentType === 'digit-with-letter' && digitsAndLetterOnly;
	      if (isValidPastedValue) {
	        resetCharacterQuery();
	        updateSectionValue({
	          activeSection,
	          newSectionValue: pastedValue,
	          shouldGoToNextSection: true
	        });
	        // prevent default to avoid the input change handler being called
	        event.preventDefault();
	        return;
	      }
	      if (lettersOnly || digitsOnly) {
	        // The pasted value correspond to a single section but not the expected type
	        // skip the modification
	        event.preventDefault();
	        return;
	      }
	    }
	    event.preventDefault();
	    resetCharacterQuery();
	    updateValueFromValueStr(pastedValue);
	  });
	  const handleInputChange = useEventCallback(event => {
	    if (readOnly) {
	      return;
	    }
	    const targetValue = event.target.value;
	    if (targetValue === '') {
	      resetCharacterQuery();
	      clearValue();
	      return;
	    }
	    const eventData = event.nativeEvent.data;
	    // Calling `.fill(04/11/2022)` in playwright will trigger a change event with the requested content to insert in `event.nativeEvent.data`
	    // usual changes have only the currently typed character in the `event.nativeEvent.data`
	    const shouldUseEventData = eventData && eventData.length > 1;
	    const valueStr = shouldUseEventData ? eventData : targetValue;
	    const cleanValueStr = cleanString(valueStr);

	    // If no section is selected or eventData should be used, we just try to parse the new value
	    // This line is mostly triggered by imperative code / application tests.
	    if (selectedSectionIndexes == null || shouldUseEventData) {
	      updateValueFromValueStr(shouldUseEventData ? eventData : cleanValueStr);
	      return;
	    }
	    let keyPressed;
	    if (selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1 && cleanValueStr.length === 1) {
	      keyPressed = cleanValueStr;
	    } else {
	      const prevValueStr = cleanString(fieldValueManager.getValueStrFromSections(state.sections, isRTL));
	      let startOfDiffIndex = -1;
	      let endOfDiffIndex = -1;
	      for (let i = 0; i < prevValueStr.length; i += 1) {
	        if (startOfDiffIndex === -1 && prevValueStr[i] !== cleanValueStr[i]) {
	          startOfDiffIndex = i;
	        }
	        if (endOfDiffIndex === -1 && prevValueStr[prevValueStr.length - i - 1] !== cleanValueStr[cleanValueStr.length - i - 1]) {
	          endOfDiffIndex = i;
	        }
	      }
	      const activeSection = state.sections[selectedSectionIndexes.startIndex];
	      const hasDiffOutsideOfActiveSection = startOfDiffIndex < activeSection.start || prevValueStr.length - endOfDiffIndex - 1 > activeSection.end;
	      if (hasDiffOutsideOfActiveSection) {
	        // TODO: Support if the new date is valid
	        return;
	      }

	      // The active section being selected, the browser has replaced its value with the key pressed by the user.
	      const activeSectionEndRelativeToNewValue = cleanValueStr.length - prevValueStr.length + activeSection.end - cleanString(activeSection.endSeparator || '').length;
	      keyPressed = cleanValueStr.slice(activeSection.start + cleanString(activeSection.startSeparator || '').length, activeSectionEndRelativeToNewValue);
	    }
	    if (keyPressed.length === 0) {
	      if (isAndroid()) {
	        setTempAndroidValueStr(valueStr);
	      } else {
	        resetCharacterQuery();
	        clearActiveSection();
	      }
	      return;
	    }
	    applyCharacterEditing({
	      keyPressed,
	      sectionIndex: selectedSectionIndexes.startIndex
	    });
	  });
	  const handleInputKeyDown = useEventCallback(event => {
	    onKeyDown == null || onKeyDown(event);

	    // eslint-disable-next-line default-case
	    switch (true) {
	      // Select all
	      case event.key === 'a' && (event.ctrlKey || event.metaKey):
	        {
	          // prevent default to make sure that the next line "select all" while updating
	          // the internal state at the same time.
	          event.preventDefault();
	          setSelectedSections('all');
	          break;
	        }

	      // Move selection to next section
	      case event.key === 'ArrowRight':
	        {
	          event.preventDefault();
	          if (selectedSectionIndexes == null) {
	            setSelectedSections(sectionOrder.startIndex);
	          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
	            setSelectedSections(selectedSectionIndexes.endIndex);
	          } else {
	            const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].rightIndex;
	            if (nextSectionIndex !== null) {
	              setSelectedSections(nextSectionIndex);
	            }
	          }
	          break;
	        }

	      // Move selection to previous section
	      case event.key === 'ArrowLeft':
	        {
	          event.preventDefault();
	          if (selectedSectionIndexes == null) {
	            setSelectedSections(sectionOrder.endIndex);
	          } else if (selectedSectionIndexes.startIndex !== selectedSectionIndexes.endIndex) {
	            setSelectedSections(selectedSectionIndexes.startIndex);
	          } else {
	            const nextSectionIndex = sectionOrder.neighbors[selectedSectionIndexes.startIndex].leftIndex;
	            if (nextSectionIndex !== null) {
	              setSelectedSections(nextSectionIndex);
	            }
	          }
	          break;
	        }

	      // Reset the value of the selected section
	      case event.key === 'Delete':
	        {
	          event.preventDefault();
	          if (readOnly) {
	            break;
	          }
	          if (selectedSectionIndexes == null || selectedSectionIndexes.startIndex === 0 && selectedSectionIndexes.endIndex === state.sections.length - 1) {
	            clearValue();
	          } else {
	            clearActiveSection();
	          }
	          resetCharacterQuery();
	          break;
	        }

	      // Increment / decrement the selected section value
	      case ['ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'].includes(event.key):
	        {
	          event.preventDefault();
	          if (readOnly || selectedSectionIndexes == null) {
	            break;
	          }
	          const activeSection = state.sections[selectedSectionIndexes.startIndex];
	          const activeDateManager = fieldValueManager.getActiveDateManager(utils, state, activeSection);
	          const newSectionValue = adjustSectionValue(utils, timezone, activeSection, event.key, sectionsValueBoundaries, activeDateManager.date, {
	            minutesStep
	          });
	          updateSectionValue({
	            activeSection,
	            newSectionValue,
	            shouldGoToNextSection: false
	          });
	          break;
	        }
	    }
	  });
	  useEnhancedEffect$1(() => {
	    if (!inputRef.current) {
	      return;
	    }
	    if (selectedSectionIndexes == null) {
	      if (inputRef.current.scrollLeft) {
	        // Ensure that input content is not marked as selected.
	        // setting selection range to 0 causes issues in Safari.
	        // https://bugs.webkit.org/show_bug.cgi?id=224425
	        inputRef.current.scrollLeft = 0;
	      }
	      return;
	    }
	    const firstSelectedSection = state.sections[selectedSectionIndexes.startIndex];
	    const lastSelectedSection = state.sections[selectedSectionIndexes.endIndex];
	    let selectionStart = firstSelectedSection.startInInput;
	    let selectionEnd = lastSelectedSection.endInInput;
	    if (selectedSectionIndexes.shouldSelectBoundarySelectors) {
	      selectionStart -= firstSelectedSection.startSeparator.length;
	      selectionEnd += lastSelectedSection.endSeparator.length;
	    }
	    if (selectionStart !== inputRef.current.selectionStart || selectionEnd !== inputRef.current.selectionEnd) {
	      // Fix scroll jumping on iOS browser: https://github.com/mui/mui-x/issues/8321
	      const currentScrollTop = inputRef.current.scrollTop;
	      // On multi input range pickers we want to update selection range only for the active input
	      // This helps to avoid the focus jumping on Safari https://github.com/mui/mui-x/issues/9003
	      // because WebKit implements the `setSelectionRange` based on the spec: https://bugs.webkit.org/show_bug.cgi?id=224425
	      if (inputRef.current === getActiveElement(document)) {
	        inputRef.current.setSelectionRange(selectionStart, selectionEnd);
	      }
	      // Even reading this variable seems to do the trick, but also setting it just to make use of it
	      inputRef.current.scrollTop = currentScrollTop;
	    }
	  });
	  const validationError = useValidation(_extends({}, internalProps, {
	    value: state.value,
	    timezone
	  }), validator, valueManager.isSameError, valueManager.defaultErrorState);
	  const inputError = reactExports.useMemo(() => {
	    // only override when `error` is undefined.
	    // in case of multi input fields, the `error` value is provided externally and will always be defined.
	    if (error !== undefined) {
	      return error;
	    }
	    return valueManager.hasError(validationError);
	  }, [valueManager, validationError, error]);
	  reactExports.useEffect(() => {
	    if (!inputError && !selectedSectionIndexes) {
	      resetCharacterQuery();
	    }
	  }, [state.referenceValue, selectedSectionIndexes, inputError]); // eslint-disable-line react-hooks/exhaustive-deps

	  reactExports.useEffect(() => {
	    // Select the right section when focused on mount (`autoFocus = true` on the input)
	    if (inputRef.current && inputRef.current === document.activeElement) {
	      setSelectedSections('all');
	    }
	    return () => window.clearTimeout(focusTimeoutRef.current);
	  }, []); // eslint-disable-line react-hooks/exhaustive-deps

	  // If `state.tempValueStrAndroid` is still defined when running `useEffect`,
	  // Then `onChange` has only been called once, which means the user pressed `Backspace` to reset the section.
	  // This causes a small flickering on Android,
	  // But we can't use `useEnhancedEffect` which is always called before the second `onChange` call and then would cause false positives.
	  reactExports.useEffect(() => {
	    if (state.tempValueStrAndroid != null && selectedSectionIndexes != null) {
	      resetCharacterQuery();
	      clearActiveSection();
	    }
	  }, [state.tempValueStrAndroid]); // eslint-disable-line react-hooks/exhaustive-deps

	  const valueStr = reactExports.useMemo(() => {
	    var _state$tempValueStrAn;
	    return (_state$tempValueStrAn = state.tempValueStrAndroid) != null ? _state$tempValueStrAn : fieldValueManager.getValueStrFromSections(state.sections, isRTL);
	  }, [state.sections, fieldValueManager, state.tempValueStrAndroid, isRTL]);
	  const inputMode = reactExports.useMemo(() => {
	    if (selectedSectionIndexes == null) {
	      return 'text';
	    }
	    if (state.sections[selectedSectionIndexes.startIndex].contentType === 'letter') {
	      return 'text';
	    }
	    return 'numeric';
	  }, [selectedSectionIndexes, state.sections]);
	  const inputHasFocus = inputRef.current && inputRef.current === getActiveElement(document);
	  const areAllSectionsEmpty = valueManager.areValuesEqual(utils, state.value, valueManager.emptyValue);
	  const shouldShowPlaceholder = !inputHasFocus && areAllSectionsEmpty;
	  reactExports.useImperativeHandle(unstableFieldRef, () => ({
	    getSections: () => state.sections,
	    getActiveSectionIndex: () => {
	      var _selectionStart2, _selectionEnd;
	      const browserStartIndex = (_selectionStart2 = inputRef.current.selectionStart) != null ? _selectionStart2 : 0;
	      const browserEndIndex = (_selectionEnd = inputRef.current.selectionEnd) != null ? _selectionEnd : 0;
	      if (browserStartIndex === 0 && browserEndIndex === 0) {
	        return null;
	      }
	      const nextSectionIndex = browserStartIndex <= state.sections[0].startInInput ? 1 // Special case if browser index is in invisible characters at the beginning.
	      : state.sections.findIndex(section => section.startInInput - section.startSeparator.length > browserStartIndex);
	      return nextSectionIndex === -1 ? state.sections.length - 1 : nextSectionIndex - 1;
	    },
	    setSelectedSections: activeSectionIndex => setSelectedSections(activeSectionIndex)
	  }));
	  const handleClearValue = useEventCallback((event, ...args) => {
	    var _inputRef$current;
	    event.preventDefault();
	    onClear == null || onClear(event, ...args);
	    clearValue();
	    inputRef == null || (_inputRef$current = inputRef.current) == null || _inputRef$current.focus();
	    setSelectedSections(0);
	  });
	  return _extends({
	    placeholder,
	    autoComplete: 'off',
	    disabled: Boolean(disabled)
	  }, otherForwardedProps, {
	    value: shouldShowPlaceholder ? '' : valueStr,
	    inputMode,
	    readOnly,
	    onClick: handleInputClick,
	    onFocus: handleInputFocus,
	    onBlur: handleInputBlur,
	    onPaste: handleInputPaste,
	    onChange: handleInputChange,
	    onKeyDown: handleInputKeyDown,
	    onMouseUp: handleInputMouseUp,
	    onClear: handleClearValue,
	    error: inputError,
	    ref: handleRef,
	    clearable: Boolean(clearable && !areAllSectionsEmpty && !readOnly && !disabled)
	  });
	};

	const validateDate = ({
	  props,
	  value,
	  adapter
	}) => {
	  if (value === null) {
	    return null;
	  }
	  const {
	    shouldDisableDate,
	    shouldDisableMonth,
	    shouldDisableYear,
	    disablePast,
	    disableFuture,
	    timezone
	  } = props;
	  const now = adapter.utils.dateWithTimezone(undefined, timezone);
	  const minDate = applyDefaultDate(adapter.utils, props.minDate, adapter.defaultDates.minDate);
	  const maxDate = applyDefaultDate(adapter.utils, props.maxDate, adapter.defaultDates.maxDate);
	  switch (true) {
	    case !adapter.utils.isValid(value):
	      return 'invalidDate';
	    case Boolean(shouldDisableDate && shouldDisableDate(value)):
	      return 'shouldDisableDate';
	    case Boolean(shouldDisableMonth && shouldDisableMonth(value)):
	      return 'shouldDisableMonth';
	    case Boolean(shouldDisableYear && shouldDisableYear(value)):
	      return 'shouldDisableYear';
	    case Boolean(disableFuture && adapter.utils.isAfterDay(value, now)):
	      return 'disableFuture';
	    case Boolean(disablePast && adapter.utils.isBeforeDay(value, now)):
	      return 'disablePast';
	    case Boolean(minDate && adapter.utils.isBeforeDay(value, minDate)):
	      return 'minDate';
	    case Boolean(maxDate && adapter.utils.isAfterDay(value, maxDate)):
	      return 'maxDate';
	    default:
	      return null;
	  }
	};

	const DATE_VALIDATION_PROP_NAMES = ['disablePast', 'disableFuture', 'minDate', 'maxDate', 'shouldDisableDate', 'shouldDisableMonth', 'shouldDisableYear'];
	const TIME_VALIDATION_PROP_NAMES = ['disablePast', 'disableFuture', 'minTime', 'maxTime', 'shouldDisableClock', 'shouldDisableTime', 'minutesStep', 'ampm', 'disableIgnoringDatePartForTimeValidation'];
	const DATE_TIME_VALIDATION_PROP_NAMES = ['minDateTime', 'maxDateTime'];
	const VALIDATION_PROP_NAMES = [...DATE_VALIDATION_PROP_NAMES, ...TIME_VALIDATION_PROP_NAMES, ...DATE_TIME_VALIDATION_PROP_NAMES];
	/**
	 * Extract the validation props for the props received by a component.
	 * Limit the risk of forgetting some of them and reduce the bundle size.
	 */
	const extractValidationProps = props => VALIDATION_PROP_NAMES.reduce((extractedProps, propName) => {
	  if (props.hasOwnProperty(propName)) {
	    extractedProps[propName] = props[propName];
	  }
	  return extractedProps;
	}, {});

	const SHARED_FIELD_INTERNAL_PROP_NAMES = ['value', 'defaultValue', 'referenceDate', 'format', 'formatDensity', 'onChange', 'timezone', 'readOnly', 'onError', 'shouldRespectLeadingZeros', 'selectedSections', 'onSelectedSectionsChange', 'unstableFieldRef'];
	const splitFieldInternalAndForwardedProps = (props, valueType) => {
	  const forwardedProps = _extends({}, props);
	  const internalProps = {};
	  const extractProp = propName => {
	    if (forwardedProps.hasOwnProperty(propName)) {
	      // @ts-ignore
	      internalProps[propName] = forwardedProps[propName];
	      delete forwardedProps[propName];
	    }
	  };
	  SHARED_FIELD_INTERNAL_PROP_NAMES.forEach(extractProp);
	  if (valueType === 'date') {
	    DATE_VALIDATION_PROP_NAMES.forEach(extractProp);
	  } else if (valueType === 'time') {
	    TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
	  } else if (valueType === 'date-time') {
	    DATE_VALIDATION_PROP_NAMES.forEach(extractProp);
	    TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
	    DATE_TIME_VALIDATION_PROP_NAMES.forEach(extractProp);
	  }
	  return {
	    forwardedProps,
	    internalProps
	  };
	};

	const useDefaultizedDateField = props => {
	  var _props$disablePast, _props$disableFuture, _props$format;
	  const utils = useUtils();
	  const defaultDates = useDefaultDates();
	  return _extends({}, props, {
	    disablePast: (_props$disablePast = props.disablePast) != null ? _props$disablePast : false,
	    disableFuture: (_props$disableFuture = props.disableFuture) != null ? _props$disableFuture : false,
	    format: (_props$format = props.format) != null ? _props$format : utils.formats.keyboardDate,
	    minDate: applyDefaultDate(utils, props.minDate, defaultDates.minDate),
	    maxDate: applyDefaultDate(utils, props.maxDate, defaultDates.maxDate)
	  });
	};
	const useDateField = ({
	  props: inProps,
	  inputRef
	}) => {
	  const props = useDefaultizedDateField(inProps);
	  const {
	    forwardedProps,
	    internalProps
	  } = splitFieldInternalAndForwardedProps(props, 'date');
	  return useField({
	    inputRef,
	    forwardedProps,
	    internalProps,
	    valueManager: singleItemValueManager,
	    fieldValueManager: singleItemFieldValueManager,
	    validator: validateDate,
	    valueType: 'date'
	  });
	};

	const PickersModalDialogRoot = styled$1(Dialog$1)({
	  [`& .${dialogClasses$1.container}`]: {
	    outline: 0
	  },
	  [`& .${dialogClasses$1.paper}`]: {
	    outline: 0,
	    minWidth: DIALOG_WIDTH
	  }
	});
	const PickersModalDialogContent = styled$1(DialogContent$1)({
	  '&:first-of-type': {
	    padding: 0
	  }
	});
	function PickersModalDialog(props) {
	  var _slots$dialog, _slots$mobileTransiti;
	  const {
	    children,
	    onDismiss,
	    open,
	    slots,
	    slotProps
	  } = props;
	  const Dialog = (_slots$dialog = slots == null ? void 0 : slots.dialog) != null ? _slots$dialog : PickersModalDialogRoot;
	  const Transition = (_slots$mobileTransiti = slots == null ? void 0 : slots.mobileTransition) != null ? _slots$mobileTransiti : Fade$1;
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Dialog, _extends({
	    open: open,
	    onClose: onDismiss
	  }, slotProps == null ? void 0 : slotProps.dialog, {
	    TransitionComponent: Transition,
	    TransitionProps: slotProps == null ? void 0 : slotProps.mobileTransition,
	    PaperComponent: slots == null ? void 0 : slots.mobilePaper,
	    PaperProps: slotProps == null ? void 0 : slotProps.mobilePaper,
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(PickersModalDialogContent, {
	      children: children
	    })
	  }));
	}

	function getPickersPopperUtilityClass(slot) {
	  return generateUtilityClass('MuiPickersPopper', slot);
	}
	generateUtilityClasses('MuiPickersPopper', ['root', 'paper']);

	const PREFERS_REDUCED_MOTION = '@media (prefers-reduced-motion: reduce)';

	// detect if user agent has Android version < 10 or iOS version < 13
	const mobileVersionMatches = typeof navigator !== 'undefined' && navigator.userAgent.match(/android\s(\d+)|OS\s(\d+)/i);
	const androidVersion = mobileVersionMatches && mobileVersionMatches[1] ? parseInt(mobileVersionMatches[1], 10) : null;
	const iOSVersion = mobileVersionMatches && mobileVersionMatches[2] ? parseInt(mobileVersionMatches[2], 10) : null;
	const slowAnimationDevices = androidVersion && androidVersion < 10 || iOSVersion && iOSVersion < 13 || false;
	const useDefaultReduceAnimations = () => {
	  const prefersReduced = useMediaQuery(PREFERS_REDUCED_MOTION, {
	    defaultMatches: false
	  });
	  return prefersReduced || slowAnimationDevices;
	};

	const _excluded$q = ["PaperComponent", "popperPlacement", "ownerState", "children", "paperSlotProps", "paperClasses", "onPaperClick", "onPaperTouchStart"];
	const useUtilityClasses$i = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    paper: ['paper']
	  };
	  return composeClasses(slots, getPickersPopperUtilityClass, classes);
	};
	const PickersPopperRoot = styled$1(MuiPopper, {
	  name: 'MuiPickersPopper',
	  slot: 'Root',
	  overridesResolver: (_, styles) => styles.root
	})(({
	  theme
	}) => ({
	  zIndex: theme.zIndex.modal
	}));
	const PickersPopperPaper = styled$1(MuiPaper, {
	  name: 'MuiPickersPopper',
	  slot: 'Paper',
	  overridesResolver: (_, styles) => styles.paper
	})(({
	  ownerState
	}) => _extends({
	  outline: 0,
	  transformOrigin: 'top center'
	}, ownerState.placement.includes('top') && {
	  transformOrigin: 'bottom center'
	}));
	function clickedRootScrollbar(event, doc) {
	  return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
	}
	/**
	 * Based on @mui/material/ClickAwayListener without the customization.
	 * We can probably strip away even more since children won't be portaled.
	 * @param {boolean} active Only listen to clicks when the popper is opened.
	 * @param {(event: MouseEvent | TouchEvent) => void} onClickAway The callback to call when clicking outside the popper.
	 * @returns {Array} The ref and event handler to listen to the outside clicks.
	 */
	function useClickAwayListener(active, onClickAway) {
	  const movedRef = reactExports.useRef(false);
	  const syntheticEventRef = reactExports.useRef(false);
	  const nodeRef = reactExports.useRef(null);
	  const activatedRef = reactExports.useRef(false);
	  reactExports.useEffect(() => {
	    if (!active) {
	      return undefined;
	    }

	    // Ensure that this hook is not "activated" synchronously.
	    // https://github.com/facebook/react/issues/20074
	    function armClickAwayListener() {
	      activatedRef.current = true;
	    }
	    document.addEventListener('mousedown', armClickAwayListener, true);
	    document.addEventListener('touchstart', armClickAwayListener, true);
	    return () => {
	      document.removeEventListener('mousedown', armClickAwayListener, true);
	      document.removeEventListener('touchstart', armClickAwayListener, true);
	      activatedRef.current = false;
	    };
	  }, [active]);

	  // The handler doesn't take event.defaultPrevented into account:
	  //
	  // event.preventDefault() is meant to stop default behaviors like
	  // clicking a checkbox to check it, hitting a button to submit a form,
	  // and hitting left arrow to move the cursor in a text input etc.
	  // Only special HTML elements have these default behaviors.
	  const handleClickAway = useEventCallback(event => {
	    if (!activatedRef.current) {
	      return;
	    }

	    // Given developers can stop the propagation of the synthetic event,
	    // we can only be confident with a positive value.
	    const insideReactTree = syntheticEventRef.current;
	    syntheticEventRef.current = false;
	    const doc = ownerDocument(nodeRef.current);

	    // 1. IE11 support, which trigger the handleClickAway even after the unbind
	    // 2. The child might render null.
	    // 3. Behave like a blur listener.
	    if (!nodeRef.current ||
	    // is a TouchEvent?
	    'clientX' in event && clickedRootScrollbar(event, doc)) {
	      return;
	    }

	    // Do not act if user performed touchmove
	    if (movedRef.current) {
	      movedRef.current = false;
	      return;
	    }
	    let insideDOM;

	    // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js
	    if (event.composedPath) {
	      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
	    } else {
	      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);
	    }
	    if (!insideDOM && !insideReactTree) {
	      onClickAway(event);
	    }
	  });

	  // Keep track of mouse/touch events that bubbled up through the portal.
	  const handleSynthetic = () => {
	    syntheticEventRef.current = true;
	  };
	  reactExports.useEffect(() => {
	    if (active) {
	      const doc = ownerDocument(nodeRef.current);
	      const handleTouchMove = () => {
	        movedRef.current = true;
	      };
	      doc.addEventListener('touchstart', handleClickAway);
	      doc.addEventListener('touchmove', handleTouchMove);
	      return () => {
	        doc.removeEventListener('touchstart', handleClickAway);
	        doc.removeEventListener('touchmove', handleTouchMove);
	      };
	    }
	    return undefined;
	  }, [active, handleClickAway]);
	  reactExports.useEffect(() => {
	    // TODO This behavior is not tested automatically
	    // It's unclear whether this is due to different update semantics in test (batched in act() vs discrete on click).
	    // Or if this is a timing related issues due to different Transition components
	    // Once we get rid of all the manual scheduling (e.g. setTimeout(update, 0)) we can revisit this code+test.
	    if (active) {
	      const doc = ownerDocument(nodeRef.current);
	      doc.addEventListener('click', handleClickAway);
	      return () => {
	        doc.removeEventListener('click', handleClickAway);
	        // cleanup `handleClickAway`
	        syntheticEventRef.current = false;
	      };
	    }
	    return undefined;
	  }, [active, handleClickAway]);
	  return [nodeRef, handleSynthetic, handleSynthetic];
	}
	const PickersPopperPaperWrapper = /*#__PURE__*/reactExports.forwardRef((props, ref) => {
	  const {
	      PaperComponent,
	      popperPlacement,
	      ownerState: inOwnerState,
	      children,
	      paperSlotProps,
	      paperClasses,
	      onPaperClick,
	      onPaperTouchStart
	      // picks up the style props provided by `Transition`
	      // https://mui.com/material-ui/transitions/#child-requirement
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$q);
	  const ownerState = _extends({}, inOwnerState, {
	    placement: popperPlacement
	  });
	  const paperProps = useSlotProps({
	    elementType: PaperComponent,
	    externalSlotProps: paperSlotProps,
	    additionalProps: {
	      tabIndex: -1,
	      elevation: 8,
	      ref
	    },
	    className: paperClasses,
	    ownerState
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(PaperComponent, _extends({}, other, paperProps, {
	    onClick: event => {
	      var _paperProps$onClick;
	      onPaperClick(event);
	      (_paperProps$onClick = paperProps.onClick) == null || _paperProps$onClick.call(paperProps, event);
	    },
	    onTouchStart: event => {
	      var _paperProps$onTouchSt;
	      onPaperTouchStart(event);
	      (_paperProps$onTouchSt = paperProps.onTouchStart) == null || _paperProps$onTouchSt.call(paperProps, event);
	    },
	    ownerState: ownerState,
	    children: children
	  }));
	});
	function PickersPopper(inProps) {
	  var _slots$desktopTransit, _slots$desktopTrapFoc, _slots$desktopPaper, _slots$popper;
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPickersPopper'
	  });
	  const {
	    anchorEl,
	    children,
	    containerRef = null,
	    shouldRestoreFocus,
	    onBlur,
	    onDismiss,
	    open,
	    role,
	    placement,
	    slots,
	    slotProps,
	    reduceAnimations: inReduceAnimations
	  } = props;
	  reactExports.useEffect(() => {
	    function handleKeyDown(nativeEvent) {
	      // IE11, Edge (prior to using Blink?) use 'Esc'
	      if (open && (nativeEvent.key === 'Escape' || nativeEvent.key === 'Esc')) {
	        onDismiss();
	      }
	    }
	    document.addEventListener('keydown', handleKeyDown);
	    return () => {
	      document.removeEventListener('keydown', handleKeyDown);
	    };
	  }, [onDismiss, open]);
	  const lastFocusedElementRef = reactExports.useRef(null);
	  reactExports.useEffect(() => {
	    if (role === 'tooltip' || shouldRestoreFocus && !shouldRestoreFocus()) {
	      return;
	    }
	    if (open) {
	      lastFocusedElementRef.current = getActiveElement(document);
	    } else if (lastFocusedElementRef.current && lastFocusedElementRef.current instanceof HTMLElement) {
	      // make sure the button is flushed with updated label, before returning focus to it
	      // avoids issue, where screen reader could fail to announce selected date after selection
	      setTimeout(() => {
	        if (lastFocusedElementRef.current instanceof HTMLElement) {
	          lastFocusedElementRef.current.focus();
	        }
	      });
	    }
	  }, [open, role, shouldRestoreFocus]);
	  const [clickAwayRef, onPaperClick, onPaperTouchStart] = useClickAwayListener(open, onBlur != null ? onBlur : onDismiss);
	  const paperRef = reactExports.useRef(null);
	  const handleRef = useForkRef(paperRef, containerRef);
	  const handlePaperRef = useForkRef(handleRef, clickAwayRef);
	  const ownerState = props;
	  const classes = useUtilityClasses$i(ownerState);
	  const defaultReduceAnimations = useDefaultReduceAnimations();
	  const reduceAnimations = inReduceAnimations != null ? inReduceAnimations : defaultReduceAnimations;
	  const handleKeyDown = event => {
	    if (event.key === 'Escape') {
	      // stop the propagation to avoid closing parent modal
	      event.stopPropagation();
	      onDismiss();
	    }
	  };
	  const Transition = ((_slots$desktopTransit = slots == null ? void 0 : slots.desktopTransition) != null ? _slots$desktopTransit : reduceAnimations) ? Fade$1 : Grow$1;
	  const FocusTrap$1 = (_slots$desktopTrapFoc = slots == null ? void 0 : slots.desktopTrapFocus) != null ? _slots$desktopTrapFoc : FocusTrap;
	  const Paper = (_slots$desktopPaper = slots == null ? void 0 : slots.desktopPaper) != null ? _slots$desktopPaper : PickersPopperPaper;
	  const Popper = (_slots$popper = slots == null ? void 0 : slots.popper) != null ? _slots$popper : PickersPopperRoot;
	  const popperProps = useSlotProps({
	    elementType: Popper,
	    externalSlotProps: slotProps == null ? void 0 : slotProps.popper,
	    additionalProps: {
	      transition: true,
	      role,
	      open,
	      anchorEl,
	      placement,
	      onKeyDown: handleKeyDown
	    },
	    className: classes.root,
	    ownerState: props
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Popper, _extends({}, popperProps, {
	    children: ({
	      TransitionProps,
	      placement: popperPlacement
	    }) => /*#__PURE__*/jsxRuntimeExports.jsx(FocusTrap$1, _extends({
	      open: open,
	      disableAutoFocus: true
	      // pickers are managing focus position manually
	      // without this prop the focus is returned to the button before `aria-label` is updated
	      // which would force screen readers to read too old label
	      ,

	      disableRestoreFocus: true,
	      disableEnforceFocus: role === 'tooltip',
	      isEnabled: () => true
	    }, slotProps == null ? void 0 : slotProps.desktopTrapFocus, {
	      children: /*#__PURE__*/jsxRuntimeExports.jsx(Transition, _extends({}, TransitionProps, slotProps == null ? void 0 : slotProps.desktopTransition, {
	        children: /*#__PURE__*/jsxRuntimeExports.jsx(PickersPopperPaperWrapper, {
	          PaperComponent: Paper,
	          ownerState: ownerState,
	          popperPlacement: popperPlacement,
	          ref: handlePaperRef,
	          onPaperClick: onPaperClick,
	          onPaperTouchStart: onPaperTouchStart,
	          paperClasses: classes.paper,
	          paperSlotProps: slotProps == null ? void 0 : slotProps.desktopPaper,
	          children: children
	        })
	      }))
	    }))
	  }));
	}

	function getPickersToolbarUtilityClass(slot) {
	  return generateUtilityClass('MuiPickersToolbar', slot);
	}
	generateUtilityClasses('MuiPickersToolbar', ['root', 'content']);

	const useUtilityClasses$h = ownerState => {
	  const {
	    classes,
	    isLandscape
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    content: ['content'],
	    penIconButton: ['penIconButton', isLandscape && 'penIconButtonLandscape']
	  };
	  return composeClasses(slots, getPickersToolbarUtilityClass, classes);
	};
	const PickersToolbarRoot = styled$1('div', {
	  name: 'MuiPickersToolbar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'flex',
	  flexDirection: 'column',
	  alignItems: 'flex-start',
	  justifyContent: 'space-between',
	  padding: theme.spacing(2, 3)
	}, ownerState.isLandscape && {
	  height: 'auto',
	  maxWidth: 160,
	  padding: 16,
	  justifyContent: 'flex-start',
	  flexWrap: 'wrap'
	}));
	const PickersToolbarContent = styled$1('div', {
	  name: 'MuiPickersToolbar',
	  slot: 'Content',
	  overridesResolver: (props, styles) => styles.content
	})(({
	  ownerState
	}) => {
	  var _ownerState$landscape;
	  return {
	    display: 'flex',
	    flexWrap: 'wrap',
	    width: '100%',
	    justifyContent: ownerState.isLandscape ? 'flex-start' : 'space-between',
	    flexDirection: ownerState.isLandscape ? (_ownerState$landscape = ownerState.landscapeDirection) != null ? _ownerState$landscape : 'column' : 'row',
	    flex: 1,
	    alignItems: ownerState.isLandscape ? 'flex-start' : 'center'
	  };
	});
	const PickersToolbar = /*#__PURE__*/reactExports.forwardRef(function PickersToolbar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPickersToolbar'
	  });
	  const {
	    children,
	    className,
	    toolbarTitle,
	    hidden,
	    titleId
	  } = props;
	  const ownerState = props;
	  const classes = useUtilityClasses$h(ownerState);
	  if (hidden) {
	    return null;
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(PickersToolbarRoot, {
	    ref: ref,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(Typography$1, {
	      color: "text.secondary",
	      variant: "overline",
	      id: titleId,
	      children: toolbarTitle
	    }), /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarContent, {
	      className: classes.content,
	      ownerState: ownerState,
	      children: children
	    })]
	  });
	});

	function getPickersToolbarTextUtilityClass(slot) {
	  return generateUtilityClass('MuiPickersToolbarText', slot);
	}
	const pickersToolbarTextClasses = generateUtilityClasses('MuiPickersToolbarText', ['root', 'selected']);

	const _excluded$p = ["className", "selected", "value"];
	const useUtilityClasses$g = ownerState => {
	  const {
	    classes,
	    selected
	  } = ownerState;
	  const slots = {
	    root: ['root', selected && 'selected']
	  };
	  return composeClasses(slots, getPickersToolbarTextUtilityClass, classes);
	};
	const PickersToolbarTextRoot = styled$1(Typography$1, {
	  name: 'MuiPickersToolbarText',
	  slot: 'Root',
	  overridesResolver: (_, styles) => [styles.root, {
	    [`&.${pickersToolbarTextClasses.selected}`]: styles.selected
	  }]
	})(({
	  theme
	}) => ({
	  transition: theme.transitions.create('color'),
	  color: (theme.vars || theme).palette.text.secondary,
	  [`&.${pickersToolbarTextClasses.selected}`]: {
	    color: (theme.vars || theme).palette.text.primary
	  }
	}));
	const PickersToolbarText = /*#__PURE__*/reactExports.forwardRef(function PickersToolbarText(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPickersToolbarText'
	  });
	  const {
	      className,
	      value
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$p);
	  const classes = useUtilityClasses$g(props);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarTextRoot, _extends({
	    ref: ref,
	    className: clsx(className, classes.root),
	    component: "span"
	  }, other, {
	    children: value
	  }));
	});

	const _excluded$o = ["align", "className", "selected", "typographyClassName", "value", "variant", "width"];
	const useUtilityClasses$f = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getPickersToolbarUtilityClass, classes);
	};
	const PickersToolbarButtonRoot = styled$1(Button$1, {
	  name: 'MuiPickersToolbarButton',
	  slot: 'Root',
	  overridesResolver: (_, styles) => styles.root
	})({
	  padding: 0,
	  minWidth: 16,
	  textTransform: 'none'
	});
	const PickersToolbarButton = /*#__PURE__*/reactExports.forwardRef(function PickersToolbarButton(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPickersToolbarButton'
	  });
	  const {
	      align,
	      className,
	      selected,
	      typographyClassName,
	      value,
	      variant,
	      width
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$o);
	  const classes = useUtilityClasses$f(props);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButtonRoot, _extends({
	    variant: "text",
	    ref: ref,
	    className: clsx(className, classes.root)
	  }, width ? {
	    sx: {
	      width
	    }
	  } : {}, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarText, {
	      align: align,
	      className: typographyClassName,
	      variant: variant,
	      value: value,
	      selected: selected
	    })
	  }));
	});

	const useOpenState = ({
	  open,
	  onOpen,
	  onClose
	}) => {
	  const isControllingOpenProp = reactExports.useRef(typeof open === 'boolean').current;
	  const [openState, setIsOpenState] = reactExports.useState(false);

	  // It is required to update inner state in useEffect in order to avoid situation when
	  // Our component is not mounted yet, but `open` state is set to `true` (e.g. initially opened)
	  reactExports.useEffect(() => {
	    if (isControllingOpenProp) {
	      if (typeof open !== 'boolean') {
	        throw new Error('You must not mix controlling and uncontrolled mode for `open` prop');
	      }
	      setIsOpenState(open);
	    }
	  }, [isControllingOpenProp, open]);
	  const setIsOpen = reactExports.useCallback(newIsOpen => {
	    if (!isControllingOpenProp) {
	      setIsOpenState(newIsOpen);
	    }
	    if (newIsOpen && onOpen) {
	      onOpen();
	    }
	    if (!newIsOpen && onClose) {
	      onClose();
	    }
	  }, [isControllingOpenProp, onOpen, onClose]);
	  return {
	    isOpen: openState,
	    setIsOpen
	  };
	};

	/**
	 * Decide if the new value should be published
	 * The published value will be passed to `onChange` if defined.
	 */
	const shouldPublishValue = params => {
	  const {
	    action,
	    hasChanged,
	    dateState,
	    isControlled
	  } = params;
	  const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;

	  // The field is responsible for only calling `onChange` when needed.
	  if (action.name === 'setValueFromField') {
	    return true;
	  }
	  if (action.name === 'setValueFromAction') {
	    // If the component is not controlled, and the value has not been modified since the mount,
	    // Then we want to publish the default value whenever the user pressed the "Accept", "Today" or "Clear" button.
	    if (isCurrentValueTheDefaultValue && ['accept', 'today', 'clear'].includes(action.pickerAction)) {
	      return true;
	    }
	    return hasChanged(dateState.lastPublishedValue);
	  }
	  if (action.name === 'setValueFromView' && action.selectionState !== 'shallow') {
	    // On the first view,
	    // If the value is not controlled, then clicking on any value (including the one equal to `defaultValue`) should call `onChange`
	    if (isCurrentValueTheDefaultValue) {
	      return true;
	    }
	    return hasChanged(dateState.lastPublishedValue);
	  }
	  if (action.name === 'setValueFromShortcut') {
	    // On the first view,
	    // If the value is not controlled, then clicking on any value (including the one equal to `defaultValue`) should call `onChange`
	    if (isCurrentValueTheDefaultValue) {
	      return true;
	    }
	    return hasChanged(dateState.lastPublishedValue);
	  }
	  return false;
	};

	/**
	 * Decide if the new value should be committed.
	 * The committed value will be passed to `onAccept` if defined.
	 * It will also be used as a reset target when calling the `cancel` picker action (when clicking on the "Cancel" button).
	 */
	const shouldCommitValue = params => {
	  const {
	    action,
	    hasChanged,
	    dateState,
	    isControlled,
	    closeOnSelect
	  } = params;
	  const isCurrentValueTheDefaultValue = !isControlled && !dateState.hasBeenModifiedSinceMount;
	  if (action.name === 'setValueFromAction') {
	    // If the component is not controlled, and the value has not been modified since the mount,
	    // Then we want to commit the default value whenever the user pressed the "Accept", "Today" or "Clear" button.
	    if (isCurrentValueTheDefaultValue && ['accept', 'today', 'clear'].includes(action.pickerAction)) {
	      return true;
	    }
	    return hasChanged(dateState.lastCommittedValue);
	  }
	  if (action.name === 'setValueFromView' && action.selectionState === 'finish' && closeOnSelect) {
	    // On picker where the 1st view is also the last view,
	    // If the value is not controlled, then clicking on any value (including the one equal to `defaultValue`) should call `onAccept`
	    if (isCurrentValueTheDefaultValue) {
	      return true;
	    }
	    return hasChanged(dateState.lastCommittedValue);
	  }
	  if (action.name === 'setValueFromShortcut') {
	    return action.changeImportance === 'accept' && hasChanged(dateState.lastCommittedValue);
	  }
	  return false;
	};

	/**
	 * Decide if the picker should be closed after the value is updated.
	 */
	const shouldClosePicker = params => {
	  const {
	    action,
	    closeOnSelect
	  } = params;
	  if (action.name === 'setValueFromAction') {
	    return true;
	  }
	  if (action.name === 'setValueFromView') {
	    return action.selectionState === 'finish' && closeOnSelect;
	  }
	  if (action.name === 'setValueFromShortcut') {
	    return action.changeImportance === 'accept';
	  }
	  return false;
	};

	/**
	 * Manage the value lifecycle of all the pickers.
	 */
	const usePickerValue = ({
	  props,
	  valueManager,
	  valueType,
	  wrapperVariant,
	  validator
	}) => {
	  const {
	    onAccept,
	    onChange,
	    value: inValue,
	    defaultValue: inDefaultValue,
	    closeOnSelect = wrapperVariant === 'desktop',
	    selectedSections: selectedSectionsProp,
	    onSelectedSectionsChange,
	    timezone: timezoneProp
	  } = props;
	  const {
	    current: defaultValue
	  } = reactExports.useRef(inDefaultValue);
	  const {
	    current: isControlled
	  } = reactExports.useRef(inValue !== undefined);
	  /* eslint-enable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */

	  const utils = useUtils();
	  const adapter = useLocalizationContext();
	  const [selectedSections, setSelectedSections] = useControlled({
	    controlled: selectedSectionsProp,
	    default: null,
	    name: 'usePickerValue',
	    state: 'selectedSections'
	  });
	  const {
	    isOpen,
	    setIsOpen
	  } = useOpenState(props);
	  const [dateState, setDateState] = reactExports.useState(() => {
	    let initialValue;
	    if (inValue !== undefined) {
	      initialValue = inValue;
	    } else if (defaultValue !== undefined) {
	      initialValue = defaultValue;
	    } else {
	      initialValue = valueManager.emptyValue;
	    }
	    return {
	      draft: initialValue,
	      lastPublishedValue: initialValue,
	      lastCommittedValue: initialValue,
	      lastControlledValue: inValue,
	      hasBeenModifiedSinceMount: false
	    };
	  });
	  const {
	    timezone,
	    handleValueChange
	  } = useValueWithTimezone({
	    timezone: timezoneProp,
	    value: inValue,
	    defaultValue,
	    onChange,
	    valueManager
	  });
	  useValidation(_extends({}, props, {
	    value: dateState.draft,
	    timezone
	  }), validator, valueManager.isSameError, valueManager.defaultErrorState);
	  const updateDate = useEventCallback(action => {
	    const updaterParams = {
	      action,
	      dateState,
	      hasChanged: comparison => !valueManager.areValuesEqual(utils, action.value, comparison),
	      isControlled,
	      closeOnSelect
	    };
	    const shouldPublish = shouldPublishValue(updaterParams);
	    const shouldCommit = shouldCommitValue(updaterParams);
	    const shouldClose = shouldClosePicker(updaterParams);
	    setDateState(prev => _extends({}, prev, {
	      draft: action.value,
	      lastPublishedValue: shouldPublish ? action.value : prev.lastPublishedValue,
	      lastCommittedValue: shouldCommit ? action.value : prev.lastCommittedValue,
	      hasBeenModifiedSinceMount: true
	    }));
	    if (shouldPublish) {
	      const validationError = action.name === 'setValueFromField' ? action.context.validationError : validator({
	        adapter,
	        value: action.value,
	        props: _extends({}, props, {
	          value: action.value,
	          timezone
	        })
	      });
	      const context = {
	        validationError
	      };

	      // TODO v7: Remove 2nd condition
	      if (action.name === 'setValueFromShortcut' && action.shortcut != null) {
	        context.shortcut = action.shortcut;
	      }
	      handleValueChange(action.value, context);
	    }
	    if (shouldCommit && onAccept) {
	      onAccept(action.value);
	    }
	    if (shouldClose) {
	      setIsOpen(false);
	    }
	  });
	  if (inValue !== undefined && (dateState.lastControlledValue === undefined || !valueManager.areValuesEqual(utils, dateState.lastControlledValue, inValue))) {
	    const isUpdateComingFromPicker = valueManager.areValuesEqual(utils, dateState.draft, inValue);
	    setDateState(prev => _extends({}, prev, {
	      lastControlledValue: inValue
	    }, isUpdateComingFromPicker ? {} : {
	      lastCommittedValue: inValue,
	      lastPublishedValue: inValue,
	      draft: inValue,
	      hasBeenModifiedSinceMount: true
	    }));
	  }
	  const handleClear = useEventCallback(() => {
	    updateDate({
	      value: valueManager.emptyValue,
	      name: 'setValueFromAction',
	      pickerAction: 'clear'
	    });
	  });
	  const handleAccept = useEventCallback(() => {
	    updateDate({
	      value: dateState.lastPublishedValue,
	      name: 'setValueFromAction',
	      pickerAction: 'accept'
	    });
	  });
	  const handleDismiss = useEventCallback(() => {
	    updateDate({
	      value: dateState.lastPublishedValue,
	      name: 'setValueFromAction',
	      pickerAction: 'dismiss'
	    });
	  });
	  const handleCancel = useEventCallback(() => {
	    updateDate({
	      value: dateState.lastCommittedValue,
	      name: 'setValueFromAction',
	      pickerAction: 'cancel'
	    });
	  });
	  const handleSetToday = useEventCallback(() => {
	    updateDate({
	      value: valueManager.getTodayValue(utils, timezone, valueType),
	      name: 'setValueFromAction',
	      pickerAction: 'today'
	    });
	  });
	  const handleOpen = useEventCallback(() => setIsOpen(true));
	  const handleClose = useEventCallback(() => setIsOpen(false));
	  const handleChange = useEventCallback((newValue, selectionState = 'partial') => updateDate({
	    name: 'setValueFromView',
	    value: newValue,
	    selectionState
	  }));

	  // TODO v7: Make changeImportance and label mandatory.
	  const handleSelectShortcut = useEventCallback((newValue, changeImportance, shortcut) => updateDate({
	    name: 'setValueFromShortcut',
	    value: newValue,
	    changeImportance: changeImportance != null ? changeImportance : 'accept',
	    shortcut
	  }));
	  const handleChangeFromField = useEventCallback((newValue, context) => updateDate({
	    name: 'setValueFromField',
	    value: newValue,
	    context
	  }));
	  const handleFieldSelectedSectionsChange = useEventCallback(newSelectedSections => {
	    setSelectedSections(newSelectedSections);
	    onSelectedSectionsChange == null || onSelectedSectionsChange(newSelectedSections);
	  });
	  const actions = {
	    onClear: handleClear,
	    onAccept: handleAccept,
	    onDismiss: handleDismiss,
	    onCancel: handleCancel,
	    onSetToday: handleSetToday,
	    onOpen: handleOpen,
	    onClose: handleClose
	  };
	  const fieldResponse = {
	    value: dateState.draft,
	    onChange: handleChangeFromField,
	    selectedSections,
	    onSelectedSectionsChange: handleFieldSelectedSectionsChange
	  };
	  const viewValue = reactExports.useMemo(() => valueManager.cleanValue(utils, dateState.draft), [utils, valueManager, dateState.draft]);
	  const viewResponse = {
	    value: viewValue,
	    onChange: handleChange,
	    onClose: handleClose,
	    open: isOpen,
	    onSelectedSectionsChange: handleFieldSelectedSectionsChange
	  };
	  const isValid = testedValue => {
	    const error = validator({
	      adapter,
	      value: testedValue,
	      props: _extends({}, props, {
	        value: testedValue,
	        timezone
	      })
	    });
	    return !valueManager.hasError(error);
	  };
	  const layoutResponse = _extends({}, actions, {
	    value: viewValue,
	    onChange: handleChange,
	    onSelectShortcut: handleSelectShortcut,
	    isValid
	  });
	  return {
	    open: isOpen,
	    fieldProps: fieldResponse,
	    viewProps: viewResponse,
	    layoutProps: layoutResponse,
	    actions
	  };
	};

	const _excluded$n = ["className", "sx"];

	/**
	 * Props used to handle the views that are common to all pickers.
	 */

	/**
	 * Props used to handle the views of the pickers.
	 */

	/**
	 * Props used to handle the value of the pickers.
	 */

	/**
	 * Manage the views of all the pickers:
	 * - Handles the view switch
	 * - Handles the switch between UI views and field views
	 * - Handles the focus management when switching views
	 */
	const usePickerViews = ({
	  props,
	  propsFromPickerValue,
	  additionalViewProps,
	  inputRef,
	  autoFocusView
	}) => {
	  const {
	    onChange,
	    open,
	    onSelectedSectionsChange,
	    onClose
	  } = propsFromPickerValue;
	  const {
	    views,
	    openTo,
	    onViewChange,
	    disableOpenPicker,
	    viewRenderers,
	    timezone
	  } = props;
	  const propsToForwardToView = _objectWithoutPropertiesLoose(props, _excluded$n);
	  const {
	    view,
	    setView,
	    defaultView,
	    focusedView,
	    setFocusedView,
	    setValueAndGoToNextView
	  } = useViews({
	    view: undefined,
	    views,
	    openTo,
	    onChange,
	    onViewChange,
	    autoFocus: autoFocusView
	  });
	  const {
	    hasUIView,
	    viewModeLookup
	  } = reactExports.useMemo(() => views.reduce((acc, viewForReduce) => {
	    let viewMode;
	    if (disableOpenPicker) {
	      viewMode = 'field';
	    } else if (viewRenderers[viewForReduce] != null) {
	      viewMode = 'UI';
	    } else {
	      viewMode = 'field';
	    }
	    acc.viewModeLookup[viewForReduce] = viewMode;
	    if (viewMode === 'UI') {
	      acc.hasUIView = true;
	    }
	    return acc;
	  }, {
	    hasUIView: false,
	    viewModeLookup: {}
	  }), [disableOpenPicker, viewRenderers, views]);
	  const timeViewsCount = reactExports.useMemo(() => views.reduce((acc, viewForReduce) => {
	    if (viewRenderers[viewForReduce] != null && isTimeView(viewForReduce)) {
	      return acc + 1;
	    }
	    return acc;
	  }, 0), [viewRenderers, views]);
	  const currentViewMode = viewModeLookup[view];
	  const shouldRestoreFocus = useEventCallback(() => currentViewMode === 'UI');
	  const [popperView, setPopperView] = reactExports.useState(currentViewMode === 'UI' ? view : null);
	  if (popperView !== view && viewModeLookup[view] === 'UI') {
	    setPopperView(view);
	  }
	  useEnhancedEffect$1(() => {
	    // Handle case of `DateTimePicker` without time renderers
	    if (currentViewMode === 'field' && open) {
	      onClose();
	      setTimeout(() => {
	        // focusing the input before the range selection is done
	        // calling `onSelectedSectionsChange` outside of timeout results in an inconsistent behavior between Safari And Chrome
	        inputRef == null || inputRef.current.focus();
	        onSelectedSectionsChange(view);
	      });
	    }
	  }, [view]); // eslint-disable-line react-hooks/exhaustive-deps

	  useEnhancedEffect$1(() => {
	    if (!open) {
	      return;
	    }
	    let newView = view;

	    // If the current view is a field view, go to the last popper view
	    if (currentViewMode === 'field' && popperView != null) {
	      newView = popperView;
	    }

	    // If the current view is not the default view and both are UI views
	    if (newView !== defaultView && viewModeLookup[newView] === 'UI' && viewModeLookup[defaultView] === 'UI') {
	      newView = defaultView;
	    }
	    if (newView !== view) {
	      setView(newView);
	    }
	    setFocusedView(newView, true);
	  }, [open]); // eslint-disable-line react-hooks/exhaustive-deps

	  const layoutProps = {
	    views,
	    view: popperView,
	    onViewChange: setView
	  };
	  return {
	    hasUIView,
	    shouldRestoreFocus,
	    layoutProps,
	    renderCurrentView: () => {
	      if (popperView == null) {
	        return null;
	      }
	      const renderer = viewRenderers[popperView];
	      if (renderer == null) {
	        return null;
	      }
	      return renderer(_extends({}, propsToForwardToView, additionalViewProps, propsFromPickerValue, {
	        views,
	        timezone,
	        onChange: setValueAndGoToNextView,
	        view: popperView,
	        onViewChange: setView,
	        focusedView,
	        onFocusedViewChange: setFocusedView,
	        showViewSwitcher: timeViewsCount > 1,
	        timeViewsCount
	      }));
	    }
	  };
	};

	function getOrientation() {
	  if (typeof window === 'undefined') {
	    return 'portrait';
	  }
	  if (window.screen && window.screen.orientation && window.screen.orientation.angle) {
	    return Math.abs(window.screen.orientation.angle) === 90 ? 'landscape' : 'portrait';
	  }

	  // Support IOS safari
	  if (window.orientation) {
	    return Math.abs(Number(window.orientation)) === 90 ? 'landscape' : 'portrait';
	  }
	  return 'portrait';
	}
	const useIsLandscape = (views, customOrientation) => {
	  const [orientation, setOrientation] = reactExports.useState(getOrientation);
	  useEnhancedEffect$1(() => {
	    const eventHandler = () => {
	      setOrientation(getOrientation());
	    };
	    window.addEventListener('orientationchange', eventHandler);
	    return () => {
	      window.removeEventListener('orientationchange', eventHandler);
	    };
	  }, []);
	  if (arrayIncludes(views, ['hours', 'minutes', 'seconds'])) {
	    // could not display 13:34:44 in landscape mode
	    return false;
	  }
	  const orientationToUse = customOrientation || orientation;
	  return orientationToUse === 'landscape';
	};

	/**
	 * Props used to create the layout of the views.
	 * Those props are exposed on all the pickers.
	 */

	/**
	 * Prepare the props for the view layout (managed by `PickersLayout`)
	 */
	const usePickerLayoutProps = ({
	  props,
	  propsFromPickerValue,
	  propsFromPickerViews,
	  wrapperVariant
	}) => {
	  const {
	    orientation
	  } = props;
	  const isLandscape = useIsLandscape(propsFromPickerViews.views, orientation);
	  const layoutProps = _extends({}, propsFromPickerViews, propsFromPickerValue, {
	    isLandscape,
	    wrapperVariant,
	    disabled: props.disabled,
	    readOnly: props.readOnly
	  });
	  return {
	    layoutProps
	  };
	};

	const buildWarning = (message, gravity = 'warning') => {
	  let alreadyWarned = false;
	  const cleanMessage = Array.isArray(message) ? message.join('\n') : message;
	  return () => {
	    if (!alreadyWarned) {
	      alreadyWarned = true;
	      if (gravity === 'error') {
	        console.error(cleanMessage);
	      } else {
	        console.warn(cleanMessage);
	      }
	    }
	  };
	};

	buildWarning(['The `renderInput` prop has been removed in version 6.0 of the Date and Time Pickers.', 'You can replace it with the `textField` component slot in most cases.', 'For more information, please have a look at the migration guide (https://mui.com/x/migration/migration-pickers-v5/#input-renderer-required-in-v5).']);
	const usePicker = ({
	  props,
	  valueManager,
	  valueType,
	  wrapperVariant,
	  inputRef,
	  additionalViewProps,
	  validator,
	  autoFocusView
	}) => {
	  const pickerValueResponse = usePickerValue({
	    props,
	    valueManager,
	    valueType,
	    wrapperVariant,
	    validator
	  });
	  const pickerViewsResponse = usePickerViews({
	    props,
	    inputRef,
	    additionalViewProps,
	    autoFocusView,
	    propsFromPickerValue: pickerValueResponse.viewProps
	  });
	  const pickerLayoutResponse = usePickerLayoutProps({
	    props,
	    wrapperVariant,
	    propsFromPickerValue: pickerValueResponse.layoutProps,
	    propsFromPickerViews: pickerViewsResponse.layoutProps
	  });
	  return {
	    // Picker value
	    open: pickerValueResponse.open,
	    actions: pickerValueResponse.actions,
	    fieldProps: pickerValueResponse.fieldProps,
	    // Picker views
	    renderCurrentView: pickerViewsResponse.renderCurrentView,
	    hasUIView: pickerViewsResponse.hasUIView,
	    shouldRestoreFocus: pickerViewsResponse.shouldRestoreFocus,
	    // Picker layout
	    layoutProps: pickerLayoutResponse.layoutProps
	  };
	};

	function getPickersLayoutUtilityClass(slot) {
	  return generateUtilityClass('MuiPickersLayout', slot);
	}
	const pickersLayoutClasses = generateUtilityClasses('MuiPickersLayout', ['root', 'landscape', 'contentWrapper', 'toolbar', 'actionBar', 'shortcuts']);

	const _excluded$m = ["onAccept", "onClear", "onCancel", "onSetToday", "actions"];
	/**
	 * Demos:
	 *
	 * - [Custom slots and subcomponents](https://mui.com/x/react-date-pickers/custom-components/)
	 * - [Custom layout](https://mui.com/x/react-date-pickers/custom-layout/)
	 *
	 * API:
	 *
	 * - [PickersActionBar API](https://mui.com/x/api/date-pickers/pickers-action-bar/)
	 */
	function PickersActionBar(props) {
	  const {
	      onAccept,
	      onClear,
	      onCancel,
	      onSetToday,
	      actions
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$m);
	  const localeText = useLocaleText();
	  if (actions == null || actions.length === 0) {
	    return null;
	  }
	  const buttons = actions == null ? void 0 : actions.map(actionType => {
	    switch (actionType) {
	      case 'clear':
	        return /*#__PURE__*/jsxRuntimeExports.jsx(Button$1, {
	          onClick: onClear,
	          children: localeText.clearButtonLabel
	        }, actionType);
	      case 'cancel':
	        return /*#__PURE__*/jsxRuntimeExports.jsx(Button$1, {
	          onClick: onCancel,
	          children: localeText.cancelButtonLabel
	        }, actionType);
	      case 'accept':
	        return /*#__PURE__*/jsxRuntimeExports.jsx(Button$1, {
	          onClick: onAccept,
	          children: localeText.okButtonLabel
	        }, actionType);
	      case 'today':
	        return /*#__PURE__*/jsxRuntimeExports.jsx(Button$1, {
	          onClick: onSetToday,
	          children: localeText.todayButtonLabel
	        }, actionType);
	      default:
	        return null;
	    }
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(DialogActions$1, _extends({}, other, {
	    children: buttons
	  }));
	}

	const _excluded$l = ["items", "changeImportance", "isLandscape", "onChange", "isValid"],
	  _excluded2$6 = ["getValue"];
	/**
	 * Demos:
	 *
	 * - [Shortcuts](https://mui.com/x/react-date-pickers/shortcuts/)
	 *
	 * API:
	 *
	 * - [PickersShortcuts API](https://mui.com/x/api/date-pickers/pickers-shortcuts/)
	 */
	function PickersShortcuts(props) {
	  const {
	      items,
	      changeImportance,
	      onChange,
	      isValid
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$l);
	  if (items == null || items.length === 0) {
	    return null;
	  }
	  const resolvedItems = items.map(_ref => {
	    let {
	        getValue
	      } = _ref,
	      item = _objectWithoutPropertiesLoose(_ref, _excluded2$6);
	    const newValue = getValue({
	      isValid
	    });
	    return {
	      label: item.label,
	      onClick: () => {
	        onChange(newValue, changeImportance, item);
	      },
	      disabled: !isValid(newValue)
	    };
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(List$1, _extends({
	    dense: true,
	    sx: [{
	      maxHeight: VIEW_HEIGHT,
	      maxWidth: 200,
	      overflow: 'auto'
	    }, ...(Array.isArray(other.sx) ? other.sx : [other.sx])]
	  }, other, {
	    children: resolvedItems.map(item => {
	      return /*#__PURE__*/jsxRuntimeExports.jsx(ListItem$1, {
	        children: /*#__PURE__*/jsxRuntimeExports.jsx(Chip$1, _extends({}, item))
	      }, item.label);
	    })
	  }));
	}

	function toolbarHasView(toolbarProps) {
	  return toolbarProps.view !== null;
	}
	const useUtilityClasses$e = ownerState => {
	  const {
	    classes,
	    isLandscape
	  } = ownerState;
	  const slots = {
	    root: ['root', isLandscape && 'landscape'],
	    contentWrapper: ['contentWrapper'],
	    toolbar: ['toolbar'],
	    actionBar: ['actionBar'],
	    tabs: ['tabs'],
	    landscape: ['landscape'],
	    shortcuts: ['shortcuts']
	  };
	  return composeClasses(slots, getPickersLayoutUtilityClass, classes);
	};
	const usePickerLayout = props => {
	  var _slots$actionBar, _slots$shortcuts;
	  const {
	    wrapperVariant,
	    onAccept,
	    onClear,
	    onCancel,
	    onSetToday,
	    view,
	    views,
	    onViewChange,
	    value,
	    onChange,
	    onSelectShortcut,
	    isValid,
	    isLandscape,
	    disabled,
	    readOnly,
	    children,
	    components,
	    componentsProps,
	    slots: innerSlots,
	    slotProps: innerSlotProps
	    // TODO: Remove this "as" hack. It get introduced to mark `value` prop in PickersLayoutProps as not required.
	    // The true type should be
	    // - For pickers value: TDate | null
	    // - For range pickers value: [TDate | null, TDate | null]
	  } = props;
	  const slots = innerSlots != null ? innerSlots : uncapitalizeObjectKeys(components);
	  const slotProps = innerSlotProps != null ? innerSlotProps : componentsProps;
	  const classes = useUtilityClasses$e(props);

	  // Action bar

	  const ActionBar = (_slots$actionBar = slots == null ? void 0 : slots.actionBar) != null ? _slots$actionBar : PickersActionBar;
	  const actionBarProps = useSlotProps({
	    elementType: ActionBar,
	    externalSlotProps: slotProps == null ? void 0 : slotProps.actionBar,
	    additionalProps: {
	      onAccept,
	      onClear,
	      onCancel,
	      onSetToday,
	      actions: wrapperVariant === 'desktop' ? [] : ['cancel', 'accept'],
	      className: classes.actionBar
	    },
	    ownerState: _extends({}, props, {
	      wrapperVariant
	    })
	  });
	  const actionBar = /*#__PURE__*/jsxRuntimeExports.jsx(ActionBar, _extends({}, actionBarProps));

	  // Toolbar

	  const Toolbar = slots == null ? void 0 : slots.toolbar;
	  const toolbarProps = useSlotProps({
	    elementType: Toolbar,
	    externalSlotProps: slotProps == null ? void 0 : slotProps.toolbar,
	    additionalProps: {
	      isLandscape,
	      onChange,
	      value,
	      view,
	      onViewChange,
	      views,
	      disabled,
	      readOnly,
	      className: classes.toolbar
	    },
	    ownerState: _extends({}, props, {
	      wrapperVariant
	    })
	  });
	  const toolbar = toolbarHasView(toolbarProps) && !!Toolbar ? /*#__PURE__*/jsxRuntimeExports.jsx(Toolbar, _extends({}, toolbarProps)) : null;

	  // Content

	  const content = children;

	  // Tabs

	  const Tabs = slots == null ? void 0 : slots.tabs;
	  const tabs = view && Tabs ? /*#__PURE__*/jsxRuntimeExports.jsx(Tabs, _extends({
	    view: view,
	    onViewChange: onViewChange
	  }, slotProps == null ? void 0 : slotProps.tabs)) : null;

	  // Shortcuts

	  const Shortcuts = (_slots$shortcuts = slots == null ? void 0 : slots.shortcuts) != null ? _slots$shortcuts : PickersShortcuts;
	  const shortcutsProps = useSlotProps({
	    elementType: Shortcuts,
	    externalSlotProps: slotProps == null ? void 0 : slotProps.shortcuts,
	    additionalProps: {
	      isValid,
	      isLandscape,
	      onChange: onSelectShortcut,
	      className: classes.shortcuts
	    },
	    ownerState: {
	      isValid,
	      isLandscape,
	      onChange: onSelectShortcut,
	      className: classes.shortcuts,
	      wrapperVariant
	    }
	  });
	  const shortcuts = view && !!Shortcuts ? /*#__PURE__*/jsxRuntimeExports.jsx(Shortcuts, _extends({}, shortcutsProps)) : null;
	  return {
	    toolbar,
	    content,
	    tabs,
	    actionBar,
	    shortcuts
	  };
	};
	var usePickerLayout$1 = usePickerLayout;

	const useUtilityClasses$d = ownerState => {
	  const {
	    isLandscape,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root', isLandscape && 'landscape'],
	    contentWrapper: ['contentWrapper']
	  };
	  return composeClasses(slots, getPickersLayoutUtilityClass, classes);
	};
	const PickersLayoutRoot = styled$1('div', {
	  name: 'MuiPickersLayout',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme,
	  ownerState
	}) => ({
	  display: 'grid',
	  gridAutoColumns: 'max-content auto max-content',
	  gridAutoRows: 'max-content auto max-content',
	  [`& .${pickersLayoutClasses.toolbar}`]: ownerState.isLandscape ? {
	    gridColumn: theme.direction === 'rtl' ? 3 : 1,
	    gridRow: '2 / 3'
	  } : {
	    gridColumn: '2 / 4',
	    gridRow: 1
	  },
	  [`.${pickersLayoutClasses.shortcuts}`]: ownerState.isLandscape ? {
	    gridColumn: '2 / 4',
	    gridRow: 1
	  } : {
	    gridColumn: theme.direction === 'rtl' ? 3 : 1,
	    gridRow: '2 / 3'
	  },
	  [`& .${pickersLayoutClasses.actionBar}`]: {
	    gridColumn: '1 / 4',
	    gridRow: 3
	  }
	}));
	PickersLayoutRoot.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // | To update them edit the TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------
	  as: PropTypes.elementType,
	  ownerState: PropTypes.shape({
	    isLandscape: PropTypes.bool.isRequired
	  }).isRequired,
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	};
	const PickersLayoutContentWrapper = styled$1('div', {
	  name: 'MuiPickersLayout',
	  slot: 'ContentWrapper',
	  overridesResolver: (props, styles) => styles.contentWrapper
	})({
	  gridColumn: 2,
	  gridRow: 2,
	  display: 'flex',
	  flexDirection: 'column'
	});

	/**
	 * Demos:
	 *
	 * - [Custom layout](https://mui.com/x/react-date-pickers/custom-layout/)
	 *
	 * API:
	 *
	 * - [PickersLayout API](https://mui.com/x/api/date-pickers/pickers-layout/)
	 */
	const PickersLayout = function PickersLayout(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPickersLayout'
	  });
	  const {
	    toolbar,
	    content,
	    tabs,
	    actionBar,
	    shortcuts
	  } = usePickerLayout$1(props);
	  const {
	    sx,
	    className,
	    isLandscape,
	    ref,
	    wrapperVariant
	  } = props;
	  const ownerState = props;
	  const classes = useUtilityClasses$d(ownerState);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(PickersLayoutRoot, {
	    ref: ref,
	    sx: sx,
	    className: clsx(className, classes.root),
	    ownerState: ownerState,
	    children: [isLandscape ? shortcuts : toolbar, isLandscape ? toolbar : shortcuts, /*#__PURE__*/jsxRuntimeExports.jsx(PickersLayoutContentWrapper, {
	      className: classes.contentWrapper,
	      children: wrapperVariant === 'desktop' ? /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	        children: [content, tabs]
	      }) : /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	        children: [tabs, content]
	      })
	    }), actionBar]
	  });
	};

	const validateTime = ({
	  adapter,
	  value,
	  props
	}) => {
	  if (value === null) {
	    return null;
	  }
	  const {
	    minTime,
	    maxTime,
	    minutesStep,
	    shouldDisableClock,
	    shouldDisableTime,
	    disableIgnoringDatePartForTimeValidation = false,
	    disablePast,
	    disableFuture,
	    timezone
	  } = props;
	  const now = adapter.utils.dateWithTimezone(undefined, timezone);
	  const isAfter = createIsAfterIgnoreDatePart(disableIgnoringDatePartForTimeValidation, adapter.utils);
	  switch (true) {
	    case !adapter.utils.isValid(value):
	      return 'invalidDate';
	    case Boolean(minTime && isAfter(minTime, value)):
	      return 'minTime';
	    case Boolean(maxTime && isAfter(value, maxTime)):
	      return 'maxTime';
	    case Boolean(disableFuture && adapter.utils.isAfter(value, now)):
	      return 'disableFuture';
	    case Boolean(disablePast && adapter.utils.isBefore(value, now)):
	      return 'disablePast';
	    case Boolean(shouldDisableTime && shouldDisableTime(value, 'hours')):
	      return 'shouldDisableTime-hours';
	    case Boolean(shouldDisableTime && shouldDisableTime(value, 'minutes')):
	      return 'shouldDisableTime-minutes';
	    case Boolean(shouldDisableTime && shouldDisableTime(value, 'seconds')):
	      return 'shouldDisableTime-seconds';
	    case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getHours(value), 'hours')):
	      return 'shouldDisableClock-hours';
	    case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getMinutes(value), 'minutes')):
	      return 'shouldDisableClock-minutes';
	    case Boolean(shouldDisableClock && shouldDisableClock(adapter.utils.getSeconds(value), 'seconds')):
	      return 'shouldDisableClock-seconds';
	    case Boolean(minutesStep && adapter.utils.getMinutes(value) % minutesStep !== 0):
	      return 'minutesStep';
	    default:
	      return null;
	  }
	};

	const validateDateTime = ({
	  props,
	  value,
	  adapter
	}) => {
	  const dateValidationResult = validateDate({
	    adapter,
	    value,
	    props
	  });
	  if (dateValidationResult !== null) {
	    return dateValidationResult;
	  }
	  return validateTime({
	    adapter,
	    value,
	    props
	  });
	};

	const getPickersSlideTransitionUtilityClass = slot => generateUtilityClass('MuiPickersSlideTransition', slot);
	const pickersSlideTransitionClasses = generateUtilityClasses('MuiPickersSlideTransition', ['root', 'slideEnter-left', 'slideEnter-right', 'slideEnterActive', 'slideExit', 'slideExitActiveLeft-left', 'slideExitActiveLeft-right']);

	const _excluded$k = ["children", "className", "reduceAnimations", "slideDirection", "transKey", "classes"];
	const useUtilityClasses$c = ownerState => {
	  const {
	    classes,
	    slideDirection
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    exit: ['slideExit'],
	    enterActive: ['slideEnterActive'],
	    enter: [`slideEnter-${slideDirection}`],
	    exitActive: [`slideExitActiveLeft-${slideDirection}`]
	  };
	  return composeClasses(slots, getPickersSlideTransitionUtilityClass, classes);
	};
	const PickersSlideTransitionRoot = styled$1(TransitionGroup$1, {
	  name: 'MuiPickersSlideTransition',
	  slot: 'Root',
	  overridesResolver: (_, styles) => [styles.root, {
	    [`.${pickersSlideTransitionClasses['slideEnter-left']}`]: styles['slideEnter-left']
	  }, {
	    [`.${pickersSlideTransitionClasses['slideEnter-right']}`]: styles['slideEnter-right']
	  }, {
	    [`.${pickersSlideTransitionClasses.slideEnterActive}`]: styles.slideEnterActive
	  }, {
	    [`.${pickersSlideTransitionClasses.slideExit}`]: styles.slideExit
	  }, {
	    [`.${pickersSlideTransitionClasses['slideExitActiveLeft-left']}`]: styles['slideExitActiveLeft-left']
	  }, {
	    [`.${pickersSlideTransitionClasses['slideExitActiveLeft-right']}`]: styles['slideExitActiveLeft-right']
	  }]
	})(({
	  theme
	}) => {
	  const slideTransition = theme.transitions.create('transform', {
	    duration: theme.transitions.duration.complex,
	    easing: 'cubic-bezier(0.35, 0.8, 0.4, 1)'
	  });
	  return {
	    display: 'block',
	    position: 'relative',
	    overflowX: 'hidden',
	    '& > *': {
	      position: 'absolute',
	      top: 0,
	      right: 0,
	      left: 0
	    },
	    [`& .${pickersSlideTransitionClasses['slideEnter-left']}`]: {
	      willChange: 'transform',
	      transform: 'translate(100%)',
	      zIndex: 1
	    },
	    [`& .${pickersSlideTransitionClasses['slideEnter-right']}`]: {
	      willChange: 'transform',
	      transform: 'translate(-100%)',
	      zIndex: 1
	    },
	    [`& .${pickersSlideTransitionClasses.slideEnterActive}`]: {
	      transform: 'translate(0%)',
	      transition: slideTransition
	    },
	    [`& .${pickersSlideTransitionClasses.slideExit}`]: {
	      transform: 'translate(0%)'
	    },
	    [`& .${pickersSlideTransitionClasses['slideExitActiveLeft-left']}`]: {
	      willChange: 'transform',
	      transform: 'translate(-100%)',
	      transition: slideTransition,
	      zIndex: 0
	    },
	    [`& .${pickersSlideTransitionClasses['slideExitActiveLeft-right']}`]: {
	      willChange: 'transform',
	      transform: 'translate(100%)',
	      transition: slideTransition,
	      zIndex: 0
	    }
	  };
	});

	/**
	 * @ignore - do not document.
	 */
	function PickersSlideTransition(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPickersSlideTransition'
	  });
	  const {
	      children,
	      className,
	      reduceAnimations,
	      transKey
	      // extracting `classes` from `other`
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$k);
	  const classes = useUtilityClasses$c(props);
	  const theme = useTheme();
	  if (reduceAnimations) {
	    return /*#__PURE__*/jsxRuntimeExports.jsx("div", {
	      className: clsx(classes.root, className),
	      children: children
	    });
	  }
	  const transitionClasses = {
	    exit: classes.exit,
	    enterActive: classes.enterActive,
	    enter: classes.enter,
	    exitActive: classes.exitActive
	  };
	  return /*#__PURE__*/jsxRuntimeExports.jsx(PickersSlideTransitionRoot, {
	    className: clsx(classes.root, className),
	    childFactory: element => /*#__PURE__*/reactExports.cloneElement(element, {
	      classNames: transitionClasses
	    }),
	    role: "presentation",
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(CSSTransition$1, _extends({
	      mountOnEnter: true,
	      unmountOnExit: true,
	      timeout: theme.transitions.duration.complex,
	      classNames: transitionClasses
	    }, other, {
	      children: children
	    }), transKey)
	  });
	}

	const useIsDateDisabled = ({
	  shouldDisableDate,
	  shouldDisableMonth,
	  shouldDisableYear,
	  minDate,
	  maxDate,
	  disableFuture,
	  disablePast,
	  timezone
	}) => {
	  const adapter = useLocalizationContext();
	  return reactExports.useCallback(day => validateDate({
	    adapter,
	    value: day,
	    props: {
	      shouldDisableDate,
	      shouldDisableMonth,
	      shouldDisableYear,
	      minDate,
	      maxDate,
	      disableFuture,
	      disablePast,
	      timezone
	    }
	  }) !== null, [adapter, shouldDisableDate, shouldDisableMonth, shouldDisableYear, minDate, maxDate, disableFuture, disablePast, timezone]);
	};

	const getDayCalendarUtilityClass = slot => generateUtilityClass('MuiDayCalendar', slot);
	generateUtilityClasses('MuiDayCalendar', ['root', 'header', 'weekDayLabel', 'loadingContainer', 'slideTransition', 'monthContainer', 'weekContainer', 'weekNumberLabel', 'weekNumber']);

	const _excluded$j = ["parentProps", "day", "focusableDay", "selectedDays", "isDateDisabled", "currentMonthNumber", "isViewFocused"],
	  _excluded2$5 = ["ownerState"];
	const useUtilityClasses$b = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    header: ['header'],
	    weekDayLabel: ['weekDayLabel'],
	    loadingContainer: ['loadingContainer'],
	    slideTransition: ['slideTransition'],
	    monthContainer: ['monthContainer'],
	    weekContainer: ['weekContainer'],
	    weekNumberLabel: ['weekNumberLabel'],
	    weekNumber: ['weekNumber']
	  };
	  return composeClasses(slots, getDayCalendarUtilityClass, classes);
	};
	const weeksContainerHeight = (DAY_SIZE + DAY_MARGIN * 2) * 6;
	const PickersCalendarDayRoot = styled$1('div', {
	  name: 'MuiDayCalendar',
	  slot: 'Root',
	  overridesResolver: (_, styles) => styles.root
	})({});
	const PickersCalendarDayHeader = styled$1('div', {
	  name: 'MuiDayCalendar',
	  slot: 'Header',
	  overridesResolver: (_, styles) => styles.header
	})({
	  display: 'flex',
	  justifyContent: 'center',
	  alignItems: 'center'
	});
	const PickersCalendarWeekDayLabel = styled$1(Typography$1, {
	  name: 'MuiDayCalendar',
	  slot: 'WeekDayLabel',
	  overridesResolver: (_, styles) => styles.weekDayLabel
	})(({
	  theme
	}) => ({
	  width: 36,
	  height: 40,
	  margin: '0 2px',
	  textAlign: 'center',
	  display: 'flex',
	  justifyContent: 'center',
	  alignItems: 'center',
	  color: (theme.vars || theme).palette.text.secondary
	}));
	const PickersCalendarWeekNumberLabel = styled$1(Typography$1, {
	  name: 'MuiDayCalendar',
	  slot: 'WeekNumberLabel',
	  overridesResolver: (_, styles) => styles.weekNumberLabel
	})(({
	  theme
	}) => ({
	  width: 36,
	  height: 40,
	  margin: '0 2px',
	  textAlign: 'center',
	  display: 'flex',
	  justifyContent: 'center',
	  alignItems: 'center',
	  color: theme.palette.text.disabled
	}));
	const PickersCalendarWeekNumber = styled$1(Typography$1, {
	  name: 'MuiDayCalendar',
	  slot: 'WeekNumber',
	  overridesResolver: (_, styles) => styles.weekNumber
	})(({
	  theme
	}) => _extends({}, theme.typography.caption, {
	  width: DAY_SIZE,
	  height: DAY_SIZE,
	  padding: 0,
	  margin: `0 ${DAY_MARGIN}px`,
	  color: theme.palette.text.disabled,
	  fontSize: '0.75rem',
	  alignItems: 'center',
	  justifyContent: 'center',
	  display: 'inline-flex'
	}));
	const PickersCalendarLoadingContainer = styled$1('div', {
	  name: 'MuiDayCalendar',
	  slot: 'LoadingContainer',
	  overridesResolver: (_, styles) => styles.loadingContainer
	})({
	  display: 'flex',
	  justifyContent: 'center',
	  alignItems: 'center',
	  minHeight: weeksContainerHeight
	});
	const PickersCalendarSlideTransition = styled$1(PickersSlideTransition, {
	  name: 'MuiDayCalendar',
	  slot: 'SlideTransition',
	  overridesResolver: (_, styles) => styles.slideTransition
	})({
	  minHeight: weeksContainerHeight
	});
	const PickersCalendarWeekContainer = styled$1('div', {
	  name: 'MuiDayCalendar',
	  slot: 'MonthContainer',
	  overridesResolver: (_, styles) => styles.monthContainer
	})({
	  overflow: 'hidden'
	});
	const PickersCalendarWeek = styled$1('div', {
	  name: 'MuiDayCalendar',
	  slot: 'WeekContainer',
	  overridesResolver: (_, styles) => styles.weekContainer
	})({
	  margin: `${DAY_MARGIN}px 0`,
	  display: 'flex',
	  justifyContent: 'center'
	});
	function WrappedDay(_ref) {
	  var _ref2, _slots$day, _slotProps$day;
	  let {
	      parentProps,
	      day,
	      focusableDay,
	      selectedDays,
	      isDateDisabled,
	      currentMonthNumber,
	      isViewFocused
	    } = _ref,
	    other = _objectWithoutPropertiesLoose(_ref, _excluded$j);
	  const {
	    disabled,
	    disableHighlightToday,
	    isMonthSwitchingAnimating,
	    showDaysOutsideCurrentMonth,
	    components,
	    componentsProps,
	    slots,
	    slotProps,
	    timezone
	  } = parentProps;
	  const utils = useUtils();
	  const now = useNow(timezone);
	  const isFocusableDay = focusableDay !== null && utils.isSameDay(day, focusableDay);
	  const isSelected = selectedDays.some(selectedDay => utils.isSameDay(selectedDay, day));
	  const isToday = utils.isSameDay(day, now);
	  const Day = (_ref2 = (_slots$day = slots == null ? void 0 : slots.day) != null ? _slots$day : components == null ? void 0 : components.Day) != null ? _ref2 : PickersDay;
	  // We don't want to pass to ownerState down, to avoid re-rendering all the day whenever a prop changes.
	  const _useSlotProps = useSlotProps({
	      elementType: Day,
	      externalSlotProps: (_slotProps$day = slotProps == null ? void 0 : slotProps.day) != null ? _slotProps$day : componentsProps == null ? void 0 : componentsProps.day,
	      additionalProps: _extends({
	        disableHighlightToday,
	        showDaysOutsideCurrentMonth,
	        role: 'gridcell',
	        isAnimating: isMonthSwitchingAnimating,
	        // it is used in date range dragging logic by accessing `dataset.timestamp`
	        'data-timestamp': utils.toJsDate(day).valueOf()
	      }, other),
	      ownerState: _extends({}, parentProps, {
	        day,
	        selected: isSelected
	      })
	    }),
	    dayProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2$5);
	  const isDisabled = reactExports.useMemo(() => disabled || isDateDisabled(day), [disabled, isDateDisabled, day]);
	  const outsideCurrentMonth = reactExports.useMemo(() => utils.getMonth(day) !== currentMonthNumber, [utils, day, currentMonthNumber]);
	  const isFirstVisibleCell = reactExports.useMemo(() => {
	    const startOfMonth = utils.startOfMonth(utils.setMonth(day, currentMonthNumber));
	    if (!showDaysOutsideCurrentMonth) {
	      return utils.isSameDay(day, startOfMonth);
	    }
	    return utils.isSameDay(day, utils.startOfWeek(startOfMonth));
	  }, [currentMonthNumber, day, showDaysOutsideCurrentMonth, utils]);
	  const isLastVisibleCell = reactExports.useMemo(() => {
	    const endOfMonth = utils.endOfMonth(utils.setMonth(day, currentMonthNumber));
	    if (!showDaysOutsideCurrentMonth) {
	      return utils.isSameDay(day, endOfMonth);
	    }
	    return utils.isSameDay(day, utils.endOfWeek(endOfMonth));
	  }, [currentMonthNumber, day, showDaysOutsideCurrentMonth, utils]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(Day, _extends({}, dayProps, {
	    day: day,
	    disabled: isDisabled,
	    autoFocus: isViewFocused && isFocusableDay,
	    today: isToday,
	    outsideCurrentMonth: outsideCurrentMonth,
	    isFirstVisibleCell: isFirstVisibleCell,
	    isLastVisibleCell: isLastVisibleCell,
	    selected: isSelected,
	    tabIndex: isFocusableDay ? 0 : -1,
	    "aria-selected": isSelected,
	    "aria-current": isToday ? 'date' : undefined
	  }));
	}

	/**
	 * @ignore - do not document.
	 */
	function DayCalendar(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDayCalendar'
	  });
	  const {
	    onFocusedDayChange,
	    className,
	    currentMonth,
	    selectedDays,
	    focusedDay,
	    loading,
	    onSelectedDaysChange,
	    onMonthSwitchingAnimationEnd,
	    readOnly,
	    reduceAnimations,
	    renderLoading = () => /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	      children: "..."
	    }),
	    slideDirection,
	    TransitionProps,
	    disablePast,
	    disableFuture,
	    minDate,
	    maxDate,
	    shouldDisableDate,
	    shouldDisableMonth,
	    shouldDisableYear,
	    dayOfWeekFormatter: dayOfWeekFormatterFromProps,
	    hasFocus,
	    onFocusedViewChange,
	    gridLabelId,
	    displayWeekNumber,
	    fixedWeekNumber,
	    autoFocus,
	    timezone
	  } = props;
	  const now = useNow(timezone);
	  const utils = useUtils();
	  const classes = useUtilityClasses$b(props);
	  const theme = useTheme();
	  const isRTL = theme.direction === 'rtl';

	  // before we could define this outside of the component scope, but now we need utils, which is only defined here
	  const dayOfWeekFormatter = dayOfWeekFormatterFromProps || ((_day, date) => utils.format(date, 'weekdayShort').charAt(0).toUpperCase());
	  const isDateDisabled = useIsDateDisabled({
	    shouldDisableDate,
	    shouldDisableMonth,
	    shouldDisableYear,
	    minDate,
	    maxDate,
	    disablePast,
	    disableFuture,
	    timezone
	  });
	  const localeText = useLocaleText();
	  const [internalHasFocus, setInternalHasFocus] = useControlled({
	    name: 'DayCalendar',
	    state: 'hasFocus',
	    controlled: hasFocus,
	    default: autoFocus != null ? autoFocus : false
	  });
	  const [internalFocusedDay, setInternalFocusedDay] = reactExports.useState(() => focusedDay || now);
	  const handleDaySelect = useEventCallback(day => {
	    if (readOnly) {
	      return;
	    }
	    onSelectedDaysChange(day);
	  });
	  const focusDay = day => {
	    if (!isDateDisabled(day)) {
	      onFocusedDayChange(day);
	      setInternalFocusedDay(day);
	      onFocusedViewChange == null || onFocusedViewChange(true);
	      setInternalHasFocus(true);
	    }
	  };
	  const handleKeyDown = useEventCallback((event, day) => {
	    switch (event.key) {
	      case 'ArrowUp':
	        focusDay(utils.addDays(day, -7));
	        event.preventDefault();
	        break;
	      case 'ArrowDown':
	        focusDay(utils.addDays(day, 7));
	        event.preventDefault();
	        break;
	      case 'ArrowLeft':
	        {
	          const newFocusedDayDefault = utils.addDays(day, isRTL ? 1 : -1);
	          const nextAvailableMonth = utils.addMonths(day, isRTL ? 1 : -1);
	          const closestDayToFocus = findClosestEnabledDate({
	            utils,
	            date: newFocusedDayDefault,
	            minDate: isRTL ? newFocusedDayDefault : utils.startOfMonth(nextAvailableMonth),
	            maxDate: isRTL ? utils.endOfMonth(nextAvailableMonth) : newFocusedDayDefault,
	            isDateDisabled,
	            timezone
	          });
	          focusDay(closestDayToFocus || newFocusedDayDefault);
	          event.preventDefault();
	          break;
	        }
	      case 'ArrowRight':
	        {
	          const newFocusedDayDefault = utils.addDays(day, isRTL ? -1 : 1);
	          const nextAvailableMonth = utils.addMonths(day, isRTL ? -1 : 1);
	          const closestDayToFocus = findClosestEnabledDate({
	            utils,
	            date: newFocusedDayDefault,
	            minDate: isRTL ? utils.startOfMonth(nextAvailableMonth) : newFocusedDayDefault,
	            maxDate: isRTL ? newFocusedDayDefault : utils.endOfMonth(nextAvailableMonth),
	            isDateDisabled,
	            timezone
	          });
	          focusDay(closestDayToFocus || newFocusedDayDefault);
	          event.preventDefault();
	          break;
	        }
	      case 'Home':
	        focusDay(utils.startOfWeek(day));
	        event.preventDefault();
	        break;
	      case 'End':
	        focusDay(utils.endOfWeek(day));
	        event.preventDefault();
	        break;
	      case 'PageUp':
	        focusDay(utils.addMonths(day, 1));
	        event.preventDefault();
	        break;
	      case 'PageDown':
	        focusDay(utils.addMonths(day, -1));
	        event.preventDefault();
	        break;
	    }
	  });
	  const handleFocus = useEventCallback((event, day) => focusDay(day));
	  const handleBlur = useEventCallback((event, day) => {
	    if (internalHasFocus && utils.isSameDay(internalFocusedDay, day)) {
	      onFocusedViewChange == null || onFocusedViewChange(false);
	    }
	  });
	  const currentMonthNumber = utils.getMonth(currentMonth);
	  const validSelectedDays = reactExports.useMemo(() => selectedDays.filter(day => !!day).map(day => utils.startOfDay(day)), [utils, selectedDays]);

	  // need a new ref whenever the `key` of the transition changes: http://reactcommunity.org/react-transition-group/transition/#Transition-prop-nodeRef.
	  const transitionKey = currentMonthNumber;
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  const slideNodeRef = reactExports.useMemo(() => /*#__PURE__*/reactExports.createRef(), [transitionKey]);
	  const startOfCurrentWeek = utils.startOfWeek(now);
	  const focusableDay = reactExports.useMemo(() => {
	    const startOfMonth = utils.startOfMonth(currentMonth);
	    const endOfMonth = utils.endOfMonth(currentMonth);
	    if (isDateDisabled(internalFocusedDay) || utils.isAfterDay(internalFocusedDay, endOfMonth) || utils.isBeforeDay(internalFocusedDay, startOfMonth)) {
	      return findClosestEnabledDate({
	        utils,
	        date: internalFocusedDay,
	        minDate: startOfMonth,
	        maxDate: endOfMonth,
	        disablePast,
	        disableFuture,
	        isDateDisabled,
	        timezone
	      });
	    }
	    return internalFocusedDay;
	  }, [currentMonth, disableFuture, disablePast, internalFocusedDay, isDateDisabled, utils, timezone]);
	  const weeksToDisplay = reactExports.useMemo(() => {
	    const currentMonthWithTimezone = utils.setTimezone(currentMonth, timezone);
	    const toDisplay = utils.getWeekArray(currentMonthWithTimezone);
	    let nextMonth = utils.addMonths(currentMonthWithTimezone, 1);
	    while (fixedWeekNumber && toDisplay.length < fixedWeekNumber) {
	      const additionalWeeks = utils.getWeekArray(nextMonth);
	      const hasCommonWeek = utils.isSameDay(toDisplay[toDisplay.length - 1][0], additionalWeeks[0][0]);
	      additionalWeeks.slice(hasCommonWeek ? 1 : 0).forEach(week => {
	        if (toDisplay.length < fixedWeekNumber) {
	          toDisplay.push(week);
	        }
	      });
	      nextMonth = utils.addMonths(nextMonth, 1);
	    }
	    return toDisplay;
	  }, [currentMonth, fixedWeekNumber, utils, timezone]);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(PickersCalendarDayRoot, {
	    role: "grid",
	    "aria-labelledby": gridLabelId,
	    className: classes.root,
	    children: [/*#__PURE__*/jsxRuntimeExports.jsxs(PickersCalendarDayHeader, {
	      role: "row",
	      className: classes.header,
	      children: [displayWeekNumber && /*#__PURE__*/jsxRuntimeExports.jsx(PickersCalendarWeekNumberLabel, {
	        variant: "caption",
	        role: "columnheader",
	        "aria-label": localeText.calendarWeekNumberHeaderLabel,
	        className: classes.weekNumberLabel,
	        children: localeText.calendarWeekNumberHeaderText
	      }), getWeekdays(utils, now).map((weekday, i) => {
	        var _dayOfWeekFormatter;
	        const day = utils.format(weekday, 'weekdayShort');
	        return /*#__PURE__*/jsxRuntimeExports.jsx(PickersCalendarWeekDayLabel, {
	          variant: "caption",
	          role: "columnheader",
	          "aria-label": utils.format(utils.addDays(startOfCurrentWeek, i), 'weekday'),
	          className: classes.weekDayLabel,
	          children: (_dayOfWeekFormatter = dayOfWeekFormatter == null ? void 0 : dayOfWeekFormatter(day, weekday)) != null ? _dayOfWeekFormatter : day
	        }, day + i.toString());
	      })]
	    }), loading ? /*#__PURE__*/jsxRuntimeExports.jsx(PickersCalendarLoadingContainer, {
	      className: classes.loadingContainer,
	      children: renderLoading()
	    }) : /*#__PURE__*/jsxRuntimeExports.jsx(PickersCalendarSlideTransition, _extends({
	      transKey: transitionKey,
	      onExited: onMonthSwitchingAnimationEnd,
	      reduceAnimations: reduceAnimations,
	      slideDirection: slideDirection,
	      className: clsx(className, classes.slideTransition)
	    }, TransitionProps, {
	      nodeRef: slideNodeRef,
	      children: /*#__PURE__*/jsxRuntimeExports.jsx(PickersCalendarWeekContainer, {
	        ref: slideNodeRef,
	        role: "rowgroup",
	        className: classes.monthContainer,
	        children: weeksToDisplay.map((week, index) => /*#__PURE__*/jsxRuntimeExports.jsxs(PickersCalendarWeek, {
	          role: "row",
	          className: classes.weekContainer
	          // fix issue of announcing row 1 as row 2
	          // caused by week day labels row
	          ,

	          "aria-rowindex": index + 1,
	          children: [displayWeekNumber && /*#__PURE__*/jsxRuntimeExports.jsx(PickersCalendarWeekNumber, {
	            className: classes.weekNumber,
	            role: "rowheader",
	            "aria-label": localeText.calendarWeekNumberAriaLabelText(utils.getWeekNumber(week[0])),
	            children: localeText.calendarWeekNumberText(utils.getWeekNumber(week[0]))
	          }), week.map((day, dayIndex) => /*#__PURE__*/jsxRuntimeExports.jsx(WrappedDay, {
	            parentProps: props,
	            day: day,
	            selectedDays: validSelectedDays,
	            focusableDay: focusableDay,
	            onKeyDown: handleKeyDown,
	            onFocus: handleFocus,
	            onBlur: handleBlur,
	            onDaySelect: handleDaySelect,
	            isDateDisabled: isDateDisabled,
	            currentMonthNumber: currentMonthNumber,
	            isViewFocused: internalHasFocus
	            // fix issue of announcing column 1 as column 2 when `displayWeekNumber` is enabled
	            ,

	            "aria-colindex": dayIndex + 1
	          }, day.toString()))]
	        }, `week-${week[0]}`))
	      })
	    }))]
	  });
	}

	const createCalendarStateReducer = (reduceAnimations, disableSwitchToMonthOnDayFocus, utils) => (state, action) => {
	  switch (action.type) {
	    case 'changeMonth':
	      return _extends({}, state, {
	        slideDirection: action.direction,
	        currentMonth: action.newMonth,
	        isMonthSwitchingAnimating: !reduceAnimations
	      });
	    case 'finishMonthSwitchingAnimation':
	      return _extends({}, state, {
	        isMonthSwitchingAnimating: false
	      });
	    case 'changeFocusedDay':
	      {
	        if (state.focusedDay != null && action.focusedDay != null && utils.isSameDay(action.focusedDay, state.focusedDay)) {
	          return state;
	        }
	        const needMonthSwitch = action.focusedDay != null && !disableSwitchToMonthOnDayFocus && !utils.isSameMonth(state.currentMonth, action.focusedDay);
	        return _extends({}, state, {
	          focusedDay: action.focusedDay,
	          isMonthSwitchingAnimating: needMonthSwitch && !reduceAnimations && !action.withoutMonthSwitchingAnimation,
	          currentMonth: needMonthSwitch ? utils.startOfMonth(action.focusedDay) : state.currentMonth,
	          slideDirection: action.focusedDay != null && utils.isAfterDay(action.focusedDay, state.currentMonth) ? 'left' : 'right'
	        });
	      }
	    default:
	      throw new Error('missing support');
	  }
	};
	const useCalendarState = params => {
	  const {
	    value,
	    referenceDate: referenceDateProp,
	    defaultCalendarMonth,
	    disableFuture,
	    disablePast,
	    disableSwitchToMonthOnDayFocus = false,
	    maxDate,
	    minDate,
	    onMonthChange,
	    reduceAnimations,
	    shouldDisableDate,
	    timezone
	  } = params;
	  const now = useNow(timezone);
	  const utils = useUtils();
	  const reducerFn = reactExports.useRef(createCalendarStateReducer(Boolean(reduceAnimations), disableSwitchToMonthOnDayFocus, utils)).current;
	  const referenceDate = reactExports.useMemo(() => {
	    let externalReferenceDate = null;
	    if (referenceDateProp) {
	      externalReferenceDate = referenceDateProp;
	    } else if (defaultCalendarMonth) {
	      // For `defaultCalendarMonth`, we just want to keep the month and the year to avoid a behavior change.
	      externalReferenceDate = utils.startOfMonth(defaultCalendarMonth);
	    }
	    return singleItemValueManager.getInitialReferenceValue({
	      value,
	      utils,
	      timezone,
	      props: params,
	      referenceDate: externalReferenceDate,
	      granularity: SECTION_TYPE_GRANULARITY.day
	    });
	  }, [] // eslint-disable-line react-hooks/exhaustive-deps
	  );
	  const [calendarState, dispatch] = reactExports.useReducer(reducerFn, {
	    isMonthSwitchingAnimating: false,
	    focusedDay: utils.isValid(value) ? value : now,
	    currentMonth: utils.startOfMonth(referenceDate),
	    slideDirection: 'left'
	  });
	  const handleChangeMonth = reactExports.useCallback(payload => {
	    dispatch(_extends({
	      type: 'changeMonth'
	    }, payload));
	    if (onMonthChange) {
	      onMonthChange(payload.newMonth);
	    }
	  }, [onMonthChange]);
	  const changeMonth = reactExports.useCallback(newDate => {
	    const newDateRequested = newDate;
	    if (utils.isSameMonth(newDateRequested, calendarState.currentMonth)) {
	      return;
	    }
	    handleChangeMonth({
	      newMonth: utils.startOfMonth(newDateRequested),
	      direction: utils.isAfterDay(newDateRequested, calendarState.currentMonth) ? 'left' : 'right'
	    });
	  }, [calendarState.currentMonth, handleChangeMonth, utils]);
	  const isDateDisabled = useIsDateDisabled({
	    shouldDisableDate,
	    minDate,
	    maxDate,
	    disableFuture,
	    disablePast,
	    timezone
	  });
	  const onMonthSwitchingAnimationEnd = reactExports.useCallback(() => {
	    dispatch({
	      type: 'finishMonthSwitchingAnimation'
	    });
	  }, []);
	  const changeFocusedDay = useEventCallback((newFocusedDate, withoutMonthSwitchingAnimation) => {
	    if (!isDateDisabled(newFocusedDate)) {
	      dispatch({
	        type: 'changeFocusedDay',
	        focusedDay: newFocusedDate,
	        withoutMonthSwitchingAnimation
	      });
	    }
	  });
	  return {
	    referenceDate,
	    calendarState,
	    changeMonth,
	    changeFocusedDay,
	    isDateDisabled,
	    onMonthSwitchingAnimationEnd,
	    handleChangeMonth
	  };
	};

	const _excluded$i = ["ownerState"];
	const useClearableField = ({
	  clearable,
	  fieldProps: forwardedFieldProps,
	  InputProps: ForwardedInputProps,
	  onClear,
	  slots,
	  slotProps,
	  components,
	  componentsProps
	}) => {
	  var _ref, _slots$clearButton, _slotProps$clearButto, _ref2, _slots$clearIcon, _slotProps$clearIcon;
	  const localeText = useLocaleText();
	  const IconButton = (_ref = (_slots$clearButton = slots == null ? void 0 : slots.clearButton) != null ? _slots$clearButton : components == null ? void 0 : components.ClearButton) != null ? _ref : IconButton$1;
	  // The spread is here to avoid this bug mui/material-ui#34056
	  const _useSlotProps = useSlotProps({
	      elementType: IconButton,
	      externalSlotProps: (_slotProps$clearButto = slotProps == null ? void 0 : slotProps.clearButton) != null ? _slotProps$clearButto : componentsProps == null ? void 0 : componentsProps.clearButton,
	      ownerState: {},
	      className: 'clearButton',
	      additionalProps: {
	        title: localeText.fieldClearLabel
	      }
	    }),
	    iconButtonProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded$i);
	  const EndClearIcon = (_ref2 = (_slots$clearIcon = slots == null ? void 0 : slots.clearIcon) != null ? _slots$clearIcon : components == null ? void 0 : components.ClearIcon) != null ? _ref2 : ClearIcon;
	  const endClearIconProps = useSlotProps({
	    elementType: EndClearIcon,
	    externalSlotProps: (_slotProps$clearIcon = slotProps == null ? void 0 : slotProps.clearIcon) != null ? _slotProps$clearIcon : componentsProps == null ? void 0 : componentsProps.clearIcon,
	    ownerState: {}
	  });
	  const InputProps = _extends({}, ForwardedInputProps, {
	    endAdornment: clearable ? /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	      children: [/*#__PURE__*/jsxRuntimeExports.jsx(InputAdornment$1, {
	        position: "end",
	        sx: {
	          marginRight: ForwardedInputProps != null && ForwardedInputProps.endAdornment ? -1 : -1.5
	        },
	        children: /*#__PURE__*/jsxRuntimeExports.jsx(IconButton, _extends({}, iconButtonProps, {
	          onClick: onClear,
	          children: /*#__PURE__*/jsxRuntimeExports.jsx(EndClearIcon, _extends({
	            fontSize: "small"
	          }, endClearIconProps))
	        }))
	      }), ForwardedInputProps == null ? void 0 : ForwardedInputProps.endAdornment]
	    }) : ForwardedInputProps == null ? void 0 : ForwardedInputProps.endAdornment
	  });
	  const fieldProps = _extends({}, forwardedFieldProps, {
	    sx: [{
	      '& .clearButton': {
	        opacity: 1
	      },
	      '@media (pointer: fine)': {
	        '& .clearButton': {
	          opacity: 0
	        },
	        '&:hover, &:focus-within': {
	          '.clearButton': {
	            opacity: 1
	          }
	        }
	      }
	    }, ...(Array.isArray(forwardedFieldProps.sx) ? forwardedFieldProps.sx : [forwardedFieldProps.sx])]
	  });
	  return {
	    InputProps,
	    fieldProps
	  };
	};

	const _excluded$h = ["components", "componentsProps", "slots", "slotProps", "InputProps", "inputProps"],
	  _excluded2$4 = ["inputRef"],
	  _excluded3$3 = ["ref", "onPaste", "onKeyDown", "inputMode", "readOnly", "clearable", "onClear"];
	/**
	 * Demos:
	 *
	 * - [DateField](http://mui.com/x/react-date-pickers/date-field/)
	 * - [Fields](https://mui.com/x/react-date-pickers/fields/)
	 *
	 * API:
	 *
	 * - [DateField API](https://mui.com/x/api/date-pickers/date-field/)
	 */
	const DateField = /*#__PURE__*/reactExports.forwardRef(function DateField(inProps, ref) {
	  var _ref, _slots$textField, _slotProps$textField;
	  const themeProps = useThemeProps({
	    props: inProps,
	    name: 'MuiDateField'
	  });
	  const {
	      components,
	      componentsProps,
	      slots,
	      slotProps,
	      InputProps,
	      inputProps
	    } = themeProps,
	    other = _objectWithoutPropertiesLoose(themeProps, _excluded$h);
	  const ownerState = themeProps;
	  const TextField = (_ref = (_slots$textField = slots == null ? void 0 : slots.textField) != null ? _slots$textField : components == null ? void 0 : components.TextField) != null ? _ref : TextField$1;
	  const _useSlotProps = useSlotProps({
	      elementType: TextField,
	      externalSlotProps: (_slotProps$textField = slotProps == null ? void 0 : slotProps.textField) != null ? _slotProps$textField : componentsProps == null ? void 0 : componentsProps.textField,
	      externalForwardedProps: other,
	      ownerState
	    }),
	    {
	      inputRef: externalInputRef
	    } = _useSlotProps,
	    textFieldProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2$4);

	  // TODO: Remove when mui/material-ui#35088 will be merged
	  textFieldProps.inputProps = _extends({}, inputProps, textFieldProps.inputProps);
	  textFieldProps.InputProps = _extends({}, InputProps, textFieldProps.InputProps);
	  const _useDateField = useDateField({
	      props: textFieldProps,
	      inputRef: externalInputRef
	    }),
	    {
	      ref: inputRef,
	      onPaste,
	      onKeyDown,
	      inputMode,
	      readOnly,
	      clearable,
	      onClear
	    } = _useDateField,
	    fieldProps = _objectWithoutPropertiesLoose(_useDateField, _excluded3$3);
	  const {
	    InputProps: ProcessedInputProps,
	    fieldProps: processedFieldProps
	  } = useClearableField({
	    onClear,
	    clearable,
	    fieldProps,
	    InputProps: fieldProps.InputProps,
	    slots,
	    slotProps,
	    components,
	    componentsProps
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TextField, _extends({
	    ref: ref
	  }, processedFieldProps, {
	    InputProps: _extends({}, ProcessedInputProps, {
	      readOnly
	    }),
	    inputProps: _extends({}, fieldProps.inputProps, {
	      inputMode,
	      onPaste,
	      onKeyDown,
	      ref: inputRef
	    })
	  }));
	});

	const useDefaultizedTimeField = props => {
	  var _props$ampm, _props$disablePast, _props$disableFuture, _props$format;
	  const utils = useUtils();
	  const ampm = (_props$ampm = props.ampm) != null ? _props$ampm : utils.is12HourCycleInCurrentLocale();
	  const defaultFormat = ampm ? utils.formats.fullTime12h : utils.formats.fullTime24h;
	  return _extends({}, props, {
	    disablePast: (_props$disablePast = props.disablePast) != null ? _props$disablePast : false,
	    disableFuture: (_props$disableFuture = props.disableFuture) != null ? _props$disableFuture : false,
	    format: (_props$format = props.format) != null ? _props$format : defaultFormat
	  });
	};
	const useTimeField = ({
	  props: inProps,
	  inputRef
	}) => {
	  const props = useDefaultizedTimeField(inProps);
	  const {
	    forwardedProps,
	    internalProps
	  } = splitFieldInternalAndForwardedProps(props, 'time');
	  return useField({
	    inputRef,
	    forwardedProps,
	    internalProps,
	    valueManager: singleItemValueManager,
	    fieldValueManager: singleItemFieldValueManager,
	    validator: validateTime,
	    valueType: 'time'
	  });
	};

	const _excluded$g = ["slots", "slotProps", "components", "componentsProps", "InputProps", "inputProps"],
	  _excluded2$3 = ["inputRef"],
	  _excluded3$2 = ["ref", "onPaste", "onKeyDown", "inputMode", "readOnly", "clearable", "onClear"];
	/**
	 * Demos:
	 *
	 * - [TimeField](http://mui.com/x/react-date-pickers/time-field/)
	 * - [Fields](https://mui.com/x/react-date-pickers/fields/)
	 *
	 * API:
	 *
	 * - [TimeField API](https://mui.com/x/api/date-pickers/time-field/)
	 */
	const TimeField = /*#__PURE__*/reactExports.forwardRef(function TimeField(inProps, ref) {
	  var _ref, _slots$textField, _slotProps$textField;
	  const themeProps = useThemeProps({
	    props: inProps,
	    name: 'MuiTimeField'
	  });
	  const {
	      slots,
	      slotProps,
	      components,
	      componentsProps,
	      InputProps,
	      inputProps
	    } = themeProps,
	    other = _objectWithoutPropertiesLoose(themeProps, _excluded$g);
	  const ownerState = themeProps;
	  const TextField = (_ref = (_slots$textField = slots == null ? void 0 : slots.textField) != null ? _slots$textField : components == null ? void 0 : components.TextField) != null ? _ref : TextField$1;
	  const _useSlotProps = useSlotProps({
	      elementType: TextField,
	      externalSlotProps: (_slotProps$textField = slotProps == null ? void 0 : slotProps.textField) != null ? _slotProps$textField : componentsProps == null ? void 0 : componentsProps.textField,
	      externalForwardedProps: other,
	      ownerState
	    }),
	    {
	      inputRef: externalInputRef
	    } = _useSlotProps,
	    textFieldProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2$3);

	  // TODO: Remove when mui/material-ui#35088 will be merged
	  textFieldProps.inputProps = _extends({}, inputProps, textFieldProps.inputProps);
	  textFieldProps.InputProps = _extends({}, InputProps, textFieldProps.InputProps);
	  const _useTimeField = useTimeField({
	      props: textFieldProps,
	      inputRef: externalInputRef
	    }),
	    {
	      ref: inputRef,
	      onPaste,
	      onKeyDown,
	      inputMode,
	      readOnly,
	      clearable,
	      onClear
	    } = _useTimeField,
	    fieldProps = _objectWithoutPropertiesLoose(_useTimeField, _excluded3$2);
	  const {
	    InputProps: ProcessedInputProps,
	    fieldProps: processedFieldProps
	  } = useClearableField({
	    onClear,
	    clearable,
	    fieldProps,
	    InputProps: fieldProps.InputProps,
	    slots,
	    slotProps,
	    components,
	    componentsProps
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TextField, _extends({
	    ref: ref
	  }, processedFieldProps, {
	    InputProps: _extends({}, ProcessedInputProps, {
	      readOnly
	    }),
	    inputProps: _extends({}, fieldProps.inputProps, {
	      inputMode,
	      onPaste,
	      onKeyDown,
	      ref: inputRef
	    })
	  }));
	});

	const useDefaultizedDateTimeField = props => {
	  var _props$ampm, _props$disablePast, _props$disableFuture, _props$format, _props$minDateTime, _props$maxDateTime, _props$minDateTime2, _props$maxDateTime2;
	  const utils = useUtils();
	  const defaultDates = useDefaultDates();
	  const ampm = (_props$ampm = props.ampm) != null ? _props$ampm : utils.is12HourCycleInCurrentLocale();
	  const defaultFormat = ampm ? utils.formats.keyboardDateTime12h : utils.formats.keyboardDateTime24h;
	  return _extends({}, props, {
	    disablePast: (_props$disablePast = props.disablePast) != null ? _props$disablePast : false,
	    disableFuture: (_props$disableFuture = props.disableFuture) != null ? _props$disableFuture : false,
	    format: (_props$format = props.format) != null ? _props$format : defaultFormat,
	    disableIgnoringDatePartForTimeValidation: Boolean(props.minDateTime || props.maxDateTime),
	    minDate: applyDefaultDate(utils, (_props$minDateTime = props.minDateTime) != null ? _props$minDateTime : props.minDate, defaultDates.minDate),
	    maxDate: applyDefaultDate(utils, (_props$maxDateTime = props.maxDateTime) != null ? _props$maxDateTime : props.maxDate, defaultDates.maxDate),
	    minTime: (_props$minDateTime2 = props.minDateTime) != null ? _props$minDateTime2 : props.minTime,
	    maxTime: (_props$maxDateTime2 = props.maxDateTime) != null ? _props$maxDateTime2 : props.maxTime
	  });
	};
	const useDateTimeField = ({
	  props: inProps,
	  inputRef
	}) => {
	  const props = useDefaultizedDateTimeField(inProps);
	  const {
	    forwardedProps,
	    internalProps
	  } = splitFieldInternalAndForwardedProps(props, 'date-time');
	  return useField({
	    inputRef,
	    forwardedProps,
	    internalProps,
	    valueManager: singleItemValueManager,
	    fieldValueManager: singleItemFieldValueManager,
	    validator: validateDateTime,
	    valueType: 'date-time'
	  });
	};

	const _excluded$f = ["components", "componentsProps", "slots", "slotProps", "InputProps", "inputProps"],
	  _excluded2$2 = ["inputRef"],
	  _excluded3$1 = ["ref", "onPaste", "onKeyDown", "inputMode", "readOnly", "clearable", "onClear"];
	/**
	 * Demos:
	 *
	 * - [DateTimeField](http://mui.com/x/react-date-pickers/date-time-field/)
	 * - [Fields](https://mui.com/x/react-date-pickers/fields/)
	 *
	 * API:
	 *
	 * - [DateTimeField API](https://mui.com/x/api/date-pickers/date-time-field/)
	 */
	const DateTimeField = /*#__PURE__*/reactExports.forwardRef(function DateTimeField(inProps, ref) {
	  var _ref, _slots$textField, _slotProps$textField;
	  const themeProps = useThemeProps({
	    props: inProps,
	    name: 'MuiDateTimeField'
	  });
	  const {
	      components,
	      componentsProps,
	      slots,
	      slotProps,
	      InputProps,
	      inputProps
	    } = themeProps,
	    other = _objectWithoutPropertiesLoose(themeProps, _excluded$f);
	  const ownerState = themeProps;
	  const TextField = (_ref = (_slots$textField = slots == null ? void 0 : slots.textField) != null ? _slots$textField : components == null ? void 0 : components.TextField) != null ? _ref : TextField$1;
	  const _useSlotProps = useSlotProps({
	      elementType: TextField,
	      externalSlotProps: (_slotProps$textField = slotProps == null ? void 0 : slotProps.textField) != null ? _slotProps$textField : componentsProps == null ? void 0 : componentsProps.textField,
	      externalForwardedProps: other,
	      ownerState
	    }),
	    {
	      inputRef: externalInputRef
	    } = _useSlotProps,
	    textFieldProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2$2);

	  // TODO: Remove when mui/material-ui#35088 will be merged
	  textFieldProps.inputProps = _extends({}, inputProps, textFieldProps.inputProps);
	  textFieldProps.InputProps = _extends({}, InputProps, textFieldProps.InputProps);
	  const _useDateTimeField = useDateTimeField({
	      props: textFieldProps,
	      inputRef: externalInputRef
	    }),
	    {
	      ref: inputRef,
	      onPaste,
	      onKeyDown,
	      inputMode,
	      readOnly,
	      clearable,
	      onClear
	    } = _useDateTimeField,
	    fieldProps = _objectWithoutPropertiesLoose(_useDateTimeField, _excluded3$1);
	  const {
	    InputProps: ProcessedInputProps,
	    fieldProps: processedFieldProps
	  } = useClearableField({
	    onClear,
	    clearable,
	    fieldProps,
	    InputProps: fieldProps.InputProps,
	    slots,
	    slotProps,
	    components,
	    componentsProps
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(TextField, _extends({
	    ref: ref
	  }, processedFieldProps, {
	    InputProps: _extends({}, ProcessedInputProps, {
	      readOnly
	    }),
	    inputProps: _extends({}, fieldProps.inputProps, {
	      inputMode,
	      onPaste,
	      onKeyDown,
	      ref: inputRef
	    })
	  }));
	});

	const getPickersFadeTransitionGroupUtilityClass = slot => generateUtilityClass('MuiPickersFadeTransitionGroup', slot);
	generateUtilityClasses('MuiPickersFadeTransitionGroup', ['root']);

	const useUtilityClasses$a = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getPickersFadeTransitionGroupUtilityClass, classes);
	};
	const PickersFadeTransitionGroupRoot = styled$1(TransitionGroup$1, {
	  name: 'MuiPickersFadeTransitionGroup',
	  slot: 'Root',
	  overridesResolver: (_, styles) => styles.root
	})({
	  display: 'block',
	  position: 'relative'
	});

	/**
	 * @ignore - do not document.
	 */
	function PickersFadeTransitionGroup(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPickersFadeTransitionGroup'
	  });
	  const {
	    children,
	    className,
	    reduceAnimations,
	    transKey
	  } = props;
	  const classes = useUtilityClasses$a(props);
	  const theme = useTheme();
	  if (reduceAnimations) {
	    return children;
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(PickersFadeTransitionGroupRoot, {
	    className: clsx(classes.root, className),
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(Fade$1, {
	      appear: false,
	      mountOnEnter: true,
	      unmountOnExit: true,
	      timeout: {
	        appear: theme.transitions.duration.enteringScreen,
	        enter: theme.transitions.duration.enteringScreen,
	        exit: 0
	      },
	      children: children
	    }, transKey)
	  });
	}

	function getPickersMonthUtilityClass(slot) {
	  return generateUtilityClass('MuiPickersMonth', slot);
	}
	const pickersMonthClasses = generateUtilityClasses('MuiPickersMonth', ['root', 'monthButton', 'disabled', 'selected']);

	const _excluded$e = ["autoFocus", "children", "disabled", "selected", "value", "tabIndex", "onClick", "onKeyDown", "onFocus", "onBlur", "aria-current", "aria-label", "monthsPerRow"];
	const useUtilityClasses$9 = ownerState => {
	  const {
	    disabled,
	    selected,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    monthButton: ['monthButton', disabled && 'disabled', selected && 'selected']
	  };
	  return composeClasses(slots, getPickersMonthUtilityClass, classes);
	};
	const PickersMonthRoot = styled$1('div', {
	  name: 'MuiPickersMonth',
	  slot: 'Root',
	  overridesResolver: (_, styles) => [styles.root]
	})(({
	  ownerState
	}) => ({
	  flexBasis: ownerState.monthsPerRow === 3 ? '33.3%' : '25%',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center'
	}));
	const PickersMonthButton = styled$1('button', {
	  name: 'MuiPickersMonth',
	  slot: 'MonthButton',
	  overridesResolver: (_, styles) => [styles.monthButton, {
	    [`&.${pickersMonthClasses.disabled}`]: styles.disabled
	  }, {
	    [`&.${pickersMonthClasses.selected}`]: styles.selected
	  }]
	})(({
	  theme
	}) => _extends({
	  color: 'unset',
	  backgroundColor: 'transparent',
	  border: 0,
	  outline: 0
	}, theme.typography.subtitle1, {
	  margin: '8px 0',
	  height: 36,
	  width: 72,
	  borderRadius: 18,
	  cursor: 'pointer',
	  '&:focus': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
	  },
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
	  },
	  '&:disabled': {
	    cursor: 'auto',
	    pointerEvents: 'none'
	  },
	  [`&.${pickersMonthClasses.disabled}`]: {
	    color: (theme.vars || theme).palette.text.secondary
	  },
	  [`&.${pickersMonthClasses.selected}`]: {
	    color: (theme.vars || theme).palette.primary.contrastText,
	    backgroundColor: (theme.vars || theme).palette.primary.main,
	    '&:focus, &:hover': {
	      backgroundColor: (theme.vars || theme).palette.primary.dark
	    }
	  }
	}));

	/**
	 * @ignore - do not document.
	 */
	const PickersMonth = /*#__PURE__*/reactExports.memo(function PickersMonth(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPickersMonth'
	  });
	  const {
	      autoFocus,
	      children,
	      disabled,
	      selected,
	      value,
	      tabIndex,
	      onClick,
	      onKeyDown,
	      onFocus,
	      onBlur,
	      'aria-current': ariaCurrent,
	      'aria-label': ariaLabel
	      // We don't want to forward this prop to the root element
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$e);
	  const ref = reactExports.useRef(null);
	  const classes = useUtilityClasses$9(props);
	  useEnhancedEffect$1(() => {
	    if (autoFocus) {
	      var _ref$current;
	      (_ref$current = ref.current) == null || _ref$current.focus();
	    }
	  }, [autoFocus]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(PickersMonthRoot, _extends({
	    className: classes.root,
	    ownerState: props
	  }, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(PickersMonthButton, {
	      ref: ref,
	      disabled: disabled,
	      type: "button",
	      role: "radio",
	      tabIndex: disabled ? -1 : tabIndex,
	      "aria-current": ariaCurrent,
	      "aria-checked": selected,
	      "aria-label": ariaLabel,
	      onClick: event => onClick(event, value),
	      onKeyDown: event => onKeyDown(event, value),
	      onFocus: event => onFocus(event, value),
	      onBlur: event => onBlur(event, value),
	      className: classes.monthButton,
	      ownerState: props,
	      children: children
	    })
	  }));
	});

	function getMonthCalendarUtilityClass(slot) {
	  return generateUtilityClass('MuiMonthCalendar', slot);
	}
	generateUtilityClasses('MuiMonthCalendar', ['root']);

	const _excluded$d = ["className", "value", "defaultValue", "referenceDate", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "shouldDisableMonth", "readOnly", "disableHighlightToday", "autoFocus", "onMonthFocus", "hasFocus", "onFocusedViewChange", "monthsPerRow", "timezone", "gridLabelId"];
	const useUtilityClasses$8 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getMonthCalendarUtilityClass, classes);
	};
	function useMonthCalendarDefaultizedProps(props, name) {
	  const utils = useUtils();
	  const defaultDates = useDefaultDates();
	  const themeProps = useThemeProps({
	    props,
	    name
	  });
	  return _extends({
	    disableFuture: false,
	    disablePast: false
	  }, themeProps, {
	    minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
	    maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate)
	  });
	}
	const MonthCalendarRoot = styled$1('div', {
	  name: 'MuiMonthCalendar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'flex',
	  flexWrap: 'wrap',
	  alignContent: 'stretch',
	  padding: '0 4px',
	  width: DIALOG_WIDTH,
	  // avoid padding increasing width over defined
	  boxSizing: 'border-box'
	});
	/**
	 * Demos:
	 *
	 * - [DateCalendar](https://mui.com/x/react-date-pickers/date-calendar/)
	 *
	 * API:
	 *
	 * - [MonthCalendar API](https://mui.com/x/api/date-pickers/month-calendar/)
	 */
	const MonthCalendar = /*#__PURE__*/reactExports.forwardRef(function MonthCalendar(inProps, ref) {
	  const props = useMonthCalendarDefaultizedProps(inProps, 'MuiMonthCalendar');
	  const {
	      className,
	      value: valueProp,
	      defaultValue,
	      referenceDate: referenceDateProp,
	      disabled,
	      disableFuture,
	      disablePast,
	      maxDate,
	      minDate,
	      onChange,
	      shouldDisableMonth,
	      readOnly,
	      disableHighlightToday,
	      autoFocus = false,
	      onMonthFocus,
	      hasFocus,
	      onFocusedViewChange,
	      monthsPerRow = 3,
	      timezone: timezoneProp,
	      gridLabelId
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$d);
	  const {
	    value,
	    handleValueChange,
	    timezone
	  } = useControlledValueWithTimezone({
	    name: 'MonthCalendar',
	    timezone: timezoneProp,
	    value: valueProp,
	    defaultValue,
	    onChange: onChange,
	    valueManager: singleItemValueManager
	  });
	  const now = useNow(timezone);
	  const theme = useTheme$1();
	  const utils = useUtils();
	  const referenceDate = reactExports.useMemo(() => singleItemValueManager.getInitialReferenceValue({
	    value,
	    utils,
	    props,
	    timezone,
	    referenceDate: referenceDateProp,
	    granularity: SECTION_TYPE_GRANULARITY.month
	  }), [] // eslint-disable-line react-hooks/exhaustive-deps
	  );
	  const ownerState = props;
	  const classes = useUtilityClasses$8(ownerState);
	  const todayMonth = reactExports.useMemo(() => utils.getMonth(now), [utils, now]);
	  const selectedMonth = reactExports.useMemo(() => {
	    if (value != null) {
	      return utils.getMonth(value);
	    }
	    if (disableHighlightToday) {
	      return null;
	    }
	    return utils.getMonth(referenceDate);
	  }, [value, utils, disableHighlightToday, referenceDate]);
	  const [focusedMonth, setFocusedMonth] = reactExports.useState(() => selectedMonth || todayMonth);
	  const [internalHasFocus, setInternalHasFocus] = useControlled({
	    name: 'MonthCalendar',
	    state: 'hasFocus',
	    controlled: hasFocus,
	    default: autoFocus != null ? autoFocus : false
	  });
	  const changeHasFocus = useEventCallback(newHasFocus => {
	    setInternalHasFocus(newHasFocus);
	    if (onFocusedViewChange) {
	      onFocusedViewChange(newHasFocus);
	    }
	  });
	  const isMonthDisabled = reactExports.useCallback(dateToValidate => {
	    const firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, minDate) ? now : minDate);
	    const lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, maxDate) ? now : maxDate);
	    const monthToValidate = utils.startOfMonth(dateToValidate);
	    if (utils.isBefore(monthToValidate, firstEnabledMonth)) {
	      return true;
	    }
	    if (utils.isAfter(monthToValidate, lastEnabledMonth)) {
	      return true;
	    }
	    if (!shouldDisableMonth) {
	      return false;
	    }
	    return shouldDisableMonth(monthToValidate);
	  }, [disableFuture, disablePast, maxDate, minDate, now, shouldDisableMonth, utils]);
	  const handleMonthSelection = useEventCallback((event, month) => {
	    if (readOnly) {
	      return;
	    }
	    const newDate = utils.setMonth(value != null ? value : referenceDate, month);
	    handleValueChange(newDate);
	  });
	  const focusMonth = useEventCallback(month => {
	    if (!isMonthDisabled(utils.setMonth(value != null ? value : referenceDate, month))) {
	      setFocusedMonth(month);
	      changeHasFocus(true);
	      if (onMonthFocus) {
	        onMonthFocus(month);
	      }
	    }
	  });
	  reactExports.useEffect(() => {
	    setFocusedMonth(prevFocusedMonth => selectedMonth !== null && prevFocusedMonth !== selectedMonth ? selectedMonth : prevFocusedMonth);
	  }, [selectedMonth]);
	  const handleKeyDown = useEventCallback((event, month) => {
	    const monthsInYear = 12;
	    const monthsInRow = 3;
	    switch (event.key) {
	      case 'ArrowUp':
	        focusMonth((monthsInYear + month - monthsInRow) % monthsInYear);
	        event.preventDefault();
	        break;
	      case 'ArrowDown':
	        focusMonth((monthsInYear + month + monthsInRow) % monthsInYear);
	        event.preventDefault();
	        break;
	      case 'ArrowLeft':
	        focusMonth((monthsInYear + month + (theme.direction === 'ltr' ? -1 : 1)) % monthsInYear);
	        event.preventDefault();
	        break;
	      case 'ArrowRight':
	        focusMonth((monthsInYear + month + (theme.direction === 'ltr' ? 1 : -1)) % monthsInYear);
	        event.preventDefault();
	        break;
	    }
	  });
	  const handleMonthFocus = useEventCallback((event, month) => {
	    focusMonth(month);
	  });
	  const handleMonthBlur = useEventCallback((event, month) => {
	    if (focusedMonth === month) {
	      changeHasFocus(false);
	    }
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsx(MonthCalendarRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    role: "radiogroup",
	    "aria-labelledby": gridLabelId
	  }, other, {
	    children: getMonthsInYear(utils, value != null ? value : referenceDate).map(month => {
	      const monthNumber = utils.getMonth(month);
	      const monthText = utils.format(month, 'monthShort');
	      const monthLabel = utils.format(month, 'month');
	      const isSelected = monthNumber === selectedMonth;
	      const isDisabled = disabled || isMonthDisabled(month);
	      return /*#__PURE__*/jsxRuntimeExports.jsx(PickersMonth, {
	        selected: isSelected,
	        value: monthNumber,
	        onClick: handleMonthSelection,
	        onKeyDown: handleKeyDown,
	        autoFocus: internalHasFocus && monthNumber === focusedMonth,
	        disabled: isDisabled,
	        tabIndex: monthNumber === focusedMonth ? 0 : -1,
	        onFocus: handleMonthFocus,
	        onBlur: handleMonthBlur,
	        "aria-current": todayMonth === monthNumber ? 'date' : undefined,
	        "aria-label": monthLabel,
	        monthsPerRow: monthsPerRow,
	        children: monthText
	      }, monthText);
	    })
	  }));
	});

	function getPickersYearUtilityClass(slot) {
	  return generateUtilityClass('MuiPickersYear', slot);
	}
	const pickersYearClasses = generateUtilityClasses('MuiPickersYear', ['root', 'yearButton', 'selected', 'disabled']);

	const _excluded$c = ["autoFocus", "className", "children", "disabled", "selected", "value", "tabIndex", "onClick", "onKeyDown", "onFocus", "onBlur", "aria-current", "yearsPerRow"];
	const useUtilityClasses$7 = ownerState => {
	  const {
	    disabled,
	    selected,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    yearButton: ['yearButton', disabled && 'disabled', selected && 'selected']
	  };
	  return composeClasses(slots, getPickersYearUtilityClass, classes);
	};
	const PickersYearRoot = styled$1('div', {
	  name: 'MuiPickersYear',
	  slot: 'Root',
	  overridesResolver: (_, styles) => [styles.root]
	})(({
	  ownerState
	}) => ({
	  flexBasis: ownerState.yearsPerRow === 3 ? '33.3%' : '25%',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center'
	}));
	const PickersYearButton = styled$1('button', {
	  name: 'MuiPickersYear',
	  slot: 'YearButton',
	  overridesResolver: (_, styles) => [styles.yearButton, {
	    [`&.${pickersYearClasses.disabled}`]: styles.disabled
	  }, {
	    [`&.${pickersYearClasses.selected}`]: styles.selected
	  }]
	})(({
	  theme
	}) => _extends({
	  color: 'unset',
	  backgroundColor: 'transparent',
	  border: 0,
	  outline: 0
	}, theme.typography.subtitle1, {
	  margin: '6px 0',
	  height: 36,
	  width: 72,
	  borderRadius: 18,
	  cursor: 'pointer',
	  '&:focus': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.focusOpacity})` : alpha(theme.palette.action.active, theme.palette.action.focusOpacity)
	  },
	  '&:hover': {
	    backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(theme.palette.action.active, theme.palette.action.hoverOpacity)
	  },
	  '&:disabled': {
	    cursor: 'auto',
	    pointerEvents: 'none'
	  },
	  [`&.${pickersYearClasses.disabled}`]: {
	    color: (theme.vars || theme).palette.text.secondary
	  },
	  [`&.${pickersYearClasses.selected}`]: {
	    color: (theme.vars || theme).palette.primary.contrastText,
	    backgroundColor: (theme.vars || theme).palette.primary.main,
	    '&:focus, &:hover': {
	      backgroundColor: (theme.vars || theme).palette.primary.dark
	    }
	  }
	}));

	/**
	 * @ignore - internal component.
	 */
	const PickersYear = /*#__PURE__*/reactExports.memo(function PickersYear(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPickersYear'
	  });
	  const {
	      autoFocus,
	      className,
	      children,
	      disabled,
	      selected,
	      value,
	      tabIndex,
	      onClick,
	      onKeyDown,
	      onFocus,
	      onBlur,
	      'aria-current': ariaCurrent
	      // We don't want to forward this prop to the root element
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$c);
	  const ref = reactExports.useRef(null);
	  const classes = useUtilityClasses$7(props);

	  // We can't forward the `autoFocus` to the button because it is a native button, not a MUI Button
	  reactExports.useEffect(() => {
	    if (autoFocus) {
	      // `ref.current` being `null` would be a bug in MUI.
	      ref.current.focus();
	    }
	  }, [autoFocus]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(PickersYearRoot, _extends({
	    className: clsx(classes.root, className),
	    ownerState: props
	  }, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(PickersYearButton, {
	      ref: ref,
	      disabled: disabled,
	      type: "button",
	      role: "radio",
	      tabIndex: disabled ? -1 : tabIndex,
	      "aria-current": ariaCurrent,
	      "aria-checked": selected,
	      onClick: event => onClick(event, value),
	      onKeyDown: event => onKeyDown(event, value),
	      onFocus: event => onFocus(event, value),
	      onBlur: event => onBlur(event, value),
	      className: classes.yearButton,
	      ownerState: props,
	      children: children
	    })
	  }));
	});

	function getYearCalendarUtilityClass(slot) {
	  return generateUtilityClass('MuiYearCalendar', slot);
	}
	generateUtilityClasses('MuiYearCalendar', ['root']);

	const _excluded$b = ["autoFocus", "className", "value", "defaultValue", "referenceDate", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onChange", "readOnly", "shouldDisableYear", "disableHighlightToday", "onYearFocus", "hasFocus", "onFocusedViewChange", "yearsPerRow", "timezone", "gridLabelId"];
	const useUtilityClasses$6 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getYearCalendarUtilityClass, classes);
	};
	function useYearCalendarDefaultizedProps(props, name) {
	  var _themeProps$yearsPerR;
	  const utils = useUtils();
	  const defaultDates = useDefaultDates();
	  const themeProps = useThemeProps({
	    props,
	    name
	  });
	  return _extends({
	    disablePast: false,
	    disableFuture: false
	  }, themeProps, {
	    yearsPerRow: (_themeProps$yearsPerR = themeProps.yearsPerRow) != null ? _themeProps$yearsPerR : 3,
	    minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
	    maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate)
	  });
	}
	const YearCalendarRoot = styled$1('div', {
	  name: 'MuiYearCalendar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'flex',
	  flexDirection: 'row',
	  flexWrap: 'wrap',
	  overflowY: 'auto',
	  height: '100%',
	  padding: '0 4px',
	  width: DIALOG_WIDTH,
	  maxHeight: MAX_CALENDAR_HEIGHT,
	  // avoid padding increasing width over defined
	  boxSizing: 'border-box',
	  position: 'relative'
	});
	/**
	 * Demos:
	 *
	 * - [DateCalendar](https://mui.com/x/react-date-pickers/date-calendar/)
	 *
	 * API:
	 *
	 * - [YearCalendar API](https://mui.com/x/api/date-pickers/year-calendar/)
	 */
	const YearCalendar = /*#__PURE__*/reactExports.forwardRef(function YearCalendar(inProps, ref) {
	  const props = useYearCalendarDefaultizedProps(inProps, 'MuiYearCalendar');
	  const {
	      autoFocus,
	      className,
	      value: valueProp,
	      defaultValue,
	      referenceDate: referenceDateProp,
	      disabled,
	      disableFuture,
	      disablePast,
	      maxDate,
	      minDate,
	      onChange,
	      readOnly,
	      shouldDisableYear,
	      disableHighlightToday,
	      onYearFocus,
	      hasFocus,
	      onFocusedViewChange,
	      yearsPerRow,
	      timezone: timezoneProp,
	      gridLabelId
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$b);
	  const {
	    value,
	    handleValueChange,
	    timezone
	  } = useControlledValueWithTimezone({
	    name: 'YearCalendar',
	    timezone: timezoneProp,
	    value: valueProp,
	    defaultValue,
	    onChange: onChange,
	    valueManager: singleItemValueManager
	  });
	  const now = useNow(timezone);
	  const theme = useTheme$1();
	  const utils = useUtils();
	  const referenceDate = reactExports.useMemo(() => singleItemValueManager.getInitialReferenceValue({
	    value,
	    utils,
	    props,
	    timezone,
	    referenceDate: referenceDateProp,
	    granularity: SECTION_TYPE_GRANULARITY.year
	  }), [] // eslint-disable-line react-hooks/exhaustive-deps
	  );
	  const ownerState = props;
	  const classes = useUtilityClasses$6(ownerState);
	  const todayYear = reactExports.useMemo(() => utils.getYear(now), [utils, now]);
	  const selectedYear = reactExports.useMemo(() => {
	    if (value != null) {
	      return utils.getYear(value);
	    }
	    if (disableHighlightToday) {
	      return null;
	    }
	    return utils.getYear(referenceDate);
	  }, [value, utils, disableHighlightToday, referenceDate]);
	  const [focusedYear, setFocusedYear] = reactExports.useState(() => selectedYear || todayYear);
	  const [internalHasFocus, setInternalHasFocus] = useControlled({
	    name: 'YearCalendar',
	    state: 'hasFocus',
	    controlled: hasFocus,
	    default: autoFocus != null ? autoFocus : false
	  });
	  const changeHasFocus = useEventCallback(newHasFocus => {
	    setInternalHasFocus(newHasFocus);
	    if (onFocusedViewChange) {
	      onFocusedViewChange(newHasFocus);
	    }
	  });
	  const isYearDisabled = reactExports.useCallback(dateToValidate => {
	    if (disablePast && utils.isBeforeYear(dateToValidate, now)) {
	      return true;
	    }
	    if (disableFuture && utils.isAfterYear(dateToValidate, now)) {
	      return true;
	    }
	    if (minDate && utils.isBeforeYear(dateToValidate, minDate)) {
	      return true;
	    }
	    if (maxDate && utils.isAfterYear(dateToValidate, maxDate)) {
	      return true;
	    }
	    if (!shouldDisableYear) {
	      return false;
	    }
	    const yearToValidate = utils.startOfYear(dateToValidate);
	    return shouldDisableYear(yearToValidate);
	  }, [disableFuture, disablePast, maxDate, minDate, now, shouldDisableYear, utils]);
	  const handleYearSelection = useEventCallback((event, year) => {
	    if (readOnly) {
	      return;
	    }
	    const newDate = utils.setYear(value != null ? value : referenceDate, year);
	    handleValueChange(newDate);
	  });
	  const focusYear = useEventCallback(year => {
	    if (!isYearDisabled(utils.setYear(value != null ? value : referenceDate, year))) {
	      setFocusedYear(year);
	      changeHasFocus(true);
	      onYearFocus == null || onYearFocus(year);
	    }
	  });
	  reactExports.useEffect(() => {
	    setFocusedYear(prevFocusedYear => selectedYear !== null && prevFocusedYear !== selectedYear ? selectedYear : prevFocusedYear);
	  }, [selectedYear]);
	  const handleKeyDown = useEventCallback((event, year) => {
	    switch (event.key) {
	      case 'ArrowUp':
	        focusYear(year - yearsPerRow);
	        event.preventDefault();
	        break;
	      case 'ArrowDown':
	        focusYear(year + yearsPerRow);
	        event.preventDefault();
	        break;
	      case 'ArrowLeft':
	        focusYear(year + (theme.direction === 'ltr' ? -1 : 1));
	        event.preventDefault();
	        break;
	      case 'ArrowRight':
	        focusYear(year + (theme.direction === 'ltr' ? 1 : -1));
	        event.preventDefault();
	        break;
	    }
	  });
	  const handleYearFocus = useEventCallback((event, year) => {
	    focusYear(year);
	  });
	  const handleYearBlur = useEventCallback((event, year) => {
	    if (focusedYear === year) {
	      changeHasFocus(false);
	    }
	  });
	  const scrollerRef = reactExports.useRef(null);
	  const handleRef = useForkRef(ref, scrollerRef);
	  reactExports.useEffect(() => {
	    if (autoFocus || scrollerRef.current === null) {
	      return;
	    }
	    const tabbableButton = scrollerRef.current.querySelector('[tabindex="0"]');
	    if (!tabbableButton) {
	      return;
	    }

	    // Taken from useScroll in x-data-grid, but vertically centered
	    const offsetHeight = tabbableButton.offsetHeight;
	    const offsetTop = tabbableButton.offsetTop;
	    const clientHeight = scrollerRef.current.clientHeight;
	    const scrollTop = scrollerRef.current.scrollTop;
	    const elementBottom = offsetTop + offsetHeight;
	    if (offsetHeight > clientHeight || offsetTop < scrollTop) {
	      // Button already visible
	      return;
	    }
	    scrollerRef.current.scrollTop = elementBottom - clientHeight / 2 - offsetHeight / 2;
	  }, [autoFocus]);
	  return /*#__PURE__*/jsxRuntimeExports.jsx(YearCalendarRoot, _extends({
	    ref: handleRef,
	    className: clsx(classes.root, className),
	    ownerState: ownerState,
	    role: "radiogroup",
	    "aria-labelledby": gridLabelId
	  }, other, {
	    children: utils.getYearRange(minDate, maxDate).map(year => {
	      const yearNumber = utils.getYear(year);
	      const isSelected = yearNumber === selectedYear;
	      const isDisabled = disabled || isYearDisabled(year);
	      return /*#__PURE__*/jsxRuntimeExports.jsx(PickersYear, {
	        selected: isSelected,
	        value: yearNumber,
	        onClick: handleYearSelection,
	        onKeyDown: handleKeyDown,
	        autoFocus: internalHasFocus && yearNumber === focusedYear,
	        disabled: isDisabled,
	        tabIndex: yearNumber === focusedYear ? 0 : -1,
	        onFocus: handleYearFocus,
	        onBlur: handleYearBlur,
	        "aria-current": todayYear === yearNumber ? 'date' : undefined,
	        yearsPerRow: yearsPerRow,
	        children: utils.format(year, 'year')
	      }, utils.format(year, 'year'));
	    })
	  }));
	});

	const getPickersCalendarHeaderUtilityClass = slot => generateUtilityClass('MuiPickersCalendarHeader', slot);
	const pickersCalendarHeaderClasses = generateUtilityClasses('MuiPickersCalendarHeader', ['root', 'labelContainer', 'label', 'switchViewButton', 'switchViewIcon']);

	const _excluded$a = ["slots", "slotProps", "components", "componentsProps", "currentMonth", "disabled", "disableFuture", "disablePast", "maxDate", "minDate", "onMonthChange", "onViewChange", "view", "reduceAnimations", "views", "labelId", "className", "timezone"],
	  _excluded2$1 = ["ownerState"];
	const useUtilityClasses$5 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    labelContainer: ['labelContainer'],
	    label: ['label'],
	    switchViewButton: ['switchViewButton'],
	    switchViewIcon: ['switchViewIcon']
	  };
	  return composeClasses(slots, getPickersCalendarHeaderUtilityClass, classes);
	};
	const PickersCalendarHeaderRoot = styled$1('div', {
	  name: 'MuiPickersCalendarHeader',
	  slot: 'Root',
	  overridesResolver: (_, styles) => styles.root
	})({
	  display: 'flex',
	  alignItems: 'center',
	  marginTop: 16,
	  marginBottom: 8,
	  paddingLeft: 24,
	  paddingRight: 12,
	  // prevent jumping in safari
	  maxHeight: 30,
	  minHeight: 30
	});
	const PickersCalendarHeaderLabelContainer = styled$1('div', {
	  name: 'MuiPickersCalendarHeader',
	  slot: 'LabelContainer',
	  overridesResolver: (_, styles) => styles.labelContainer
	})(({
	  theme
	}) => _extends({
	  display: 'flex',
	  overflow: 'hidden',
	  alignItems: 'center',
	  cursor: 'pointer',
	  marginRight: 'auto'
	}, theme.typography.body1, {
	  fontWeight: theme.typography.fontWeightMedium
	}));
	const PickersCalendarHeaderLabel = styled$1('div', {
	  name: 'MuiPickersCalendarHeader',
	  slot: 'Label',
	  overridesResolver: (_, styles) => styles.label
	})({
	  marginRight: 6
	});
	const PickersCalendarHeaderSwitchViewButton = styled$1(IconButton$1, {
	  name: 'MuiPickersCalendarHeader',
	  slot: 'SwitchViewButton',
	  overridesResolver: (_, styles) => styles.switchViewButton
	})(({
	  ownerState
	}) => _extends({
	  marginRight: 'auto'
	}, ownerState.view === 'year' && {
	  [`.${pickersCalendarHeaderClasses.switchViewIcon}`]: {
	    transform: 'rotate(180deg)'
	  }
	}));
	const PickersCalendarHeaderSwitchViewIcon = styled$1(ArrowDropDownIcon, {
	  name: 'MuiPickersCalendarHeader',
	  slot: 'SwitchViewIcon',
	  overridesResolver: (_, styles) => styles.switchViewIcon
	})(({
	  theme
	}) => ({
	  willChange: 'transform',
	  transition: theme.transitions.create('transform'),
	  transform: 'rotate(0deg)'
	}));
	/**
	 * Demos:
	 *
	 * - [DateCalendar](https://mui.com/x/react-date-pickers/date-calendar/)
	 * - [DateRangeCalendar](https://mui.com/x/react-date-pickers/date-range-calendar/)
	 * - [Custom slots and subcomponents](https://mui.com/x/react-date-pickers/custom-components/)
	 *
	 * API:
	 *
	 * - [PickersCalendarHeader API](https://mui.com/x/api/date-pickers/pickers-calendar-header/)
	 */
	const PickersCalendarHeader = /*#__PURE__*/reactExports.forwardRef(function PickersCalendarHeader(inProps, ref) {
	  var _ref, _slots$switchViewButt, _ref2, _slots$switchViewIcon;
	  const localeText = useLocaleText();
	  const utils = useUtils();
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiPickersCalendarHeader'
	  });
	  const {
	      slots,
	      slotProps,
	      components,
	      currentMonth: month,
	      disabled,
	      disableFuture,
	      disablePast,
	      maxDate,
	      minDate,
	      onMonthChange,
	      onViewChange,
	      view,
	      reduceAnimations,
	      views,
	      labelId,
	      className,
	      timezone
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$a);
	  const ownerState = props;
	  const classes = useUtilityClasses$5(props);
	  const SwitchViewButton = (_ref = (_slots$switchViewButt = slots == null ? void 0 : slots.switchViewButton) != null ? _slots$switchViewButt : components == null ? void 0 : components.SwitchViewButton) != null ? _ref : PickersCalendarHeaderSwitchViewButton;
	  const switchViewButtonProps = useSlotProps({
	    elementType: SwitchViewButton,
	    externalSlotProps: slotProps == null ? void 0 : slotProps.switchViewButton,
	    additionalProps: {
	      size: 'small',
	      'aria-label': localeText.calendarViewSwitchingButtonAriaLabel(view)
	    },
	    ownerState,
	    className: classes.switchViewButton
	  });
	  const SwitchViewIcon = (_ref2 = (_slots$switchViewIcon = slots == null ? void 0 : slots.switchViewIcon) != null ? _slots$switchViewIcon : components == null ? void 0 : components.SwitchViewIcon) != null ? _ref2 : PickersCalendarHeaderSwitchViewIcon;
	  // The spread is here to avoid this bug mui/material-ui#34056
	  const _useSlotProps = useSlotProps({
	      elementType: SwitchViewIcon,
	      externalSlotProps: slotProps == null ? void 0 : slotProps.switchViewIcon,
	      ownerState: undefined,
	      className: classes.switchViewIcon
	    }),
	    switchViewIconProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2$1);
	  const selectNextMonth = () => onMonthChange(utils.addMonths(month, 1), 'left');
	  const selectPreviousMonth = () => onMonthChange(utils.addMonths(month, -1), 'right');
	  const isNextMonthDisabled = useNextMonthDisabled(month, {
	    disableFuture,
	    maxDate,
	    timezone
	  });
	  const isPreviousMonthDisabled = usePreviousMonthDisabled(month, {
	    disablePast,
	    minDate,
	    timezone
	  });
	  const handleToggleView = () => {
	    if (views.length === 1 || !onViewChange || disabled) {
	      return;
	    }
	    if (views.length === 2) {
	      onViewChange(views.find(el => el !== view) || views[0]);
	    } else {
	      // switching only between first 2
	      const nextIndexToOpen = views.indexOf(view) !== 0 ? 0 : 1;
	      onViewChange(views[nextIndexToOpen]);
	    }
	  };

	  // No need to display more information
	  if (views.length === 1 && views[0] === 'year') {
	    return null;
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(PickersCalendarHeaderRoot, _extends({}, other, {
	    ownerState: ownerState,
	    className: clsx(className, classes.root),
	    ref: ref,
	    children: [/*#__PURE__*/jsxRuntimeExports.jsxs(PickersCalendarHeaderLabelContainer, {
	      role: "presentation",
	      onClick: handleToggleView,
	      ownerState: ownerState
	      // putting this on the label item element below breaks when using transition
	      ,

	      "aria-live": "polite",
	      className: classes.labelContainer,
	      children: [/*#__PURE__*/jsxRuntimeExports.jsx(PickersFadeTransitionGroup, {
	        reduceAnimations: reduceAnimations,
	        transKey: utils.format(month, 'monthAndYear'),
	        children: /*#__PURE__*/jsxRuntimeExports.jsx(PickersCalendarHeaderLabel, {
	          id: labelId,
	          ownerState: ownerState,
	          className: classes.label,
	          children: utils.format(month, 'monthAndYear')
	        })
	      }), views.length > 1 && !disabled && /*#__PURE__*/jsxRuntimeExports.jsx(SwitchViewButton, _extends({}, switchViewButtonProps, {
	        children: /*#__PURE__*/jsxRuntimeExports.jsx(SwitchViewIcon, _extends({}, switchViewIconProps))
	      }))]
	    }), /*#__PURE__*/jsxRuntimeExports.jsx(Fade$1, {
	      in: view === 'day',
	      children: /*#__PURE__*/jsxRuntimeExports.jsx(PickersArrowSwitcher, {
	        slots: slots,
	        slotProps: slotProps,
	        onGoToPrevious: selectPreviousMonth,
	        isPreviousDisabled: isPreviousMonthDisabled,
	        previousLabel: localeText.previousMonth,
	        onGoToNext: selectNextMonth,
	        isNextDisabled: isNextMonthDisabled,
	        nextLabel: localeText.nextMonth
	      })
	    })]
	  }));
	});

	const getDateCalendarUtilityClass = slot => generateUtilityClass('MuiDateCalendar', slot);
	generateUtilityClasses('MuiDateCalendar', ['root', 'viewTransitionContainer']);

	const _excluded$9 = ["autoFocus", "onViewChange", "value", "defaultValue", "referenceDate", "disableFuture", "disablePast", "defaultCalendarMonth", "onChange", "onYearChange", "onMonthChange", "reduceAnimations", "shouldDisableDate", "shouldDisableMonth", "shouldDisableYear", "view", "views", "openTo", "className", "disabled", "readOnly", "minDate", "maxDate", "disableHighlightToday", "focusedView", "onFocusedViewChange", "showDaysOutsideCurrentMonth", "fixedWeekNumber", "dayOfWeekFormatter", "components", "componentsProps", "slots", "slotProps", "loading", "renderLoading", "displayWeekNumber", "yearsPerRow", "monthsPerRow", "timezone"];
	const useUtilityClasses$4 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    viewTransitionContainer: ['viewTransitionContainer']
	  };
	  return composeClasses(slots, getDateCalendarUtilityClass, classes);
	};
	function useDateCalendarDefaultizedProps(props, name) {
	  var _themeProps$loading, _themeProps$disablePa, _themeProps$disableFu, _themeProps$openTo, _themeProps$views, _themeProps$reduceAni, _themeProps$renderLoa;
	  const utils = useUtils();
	  const defaultDates = useDefaultDates();
	  const defaultReduceAnimations = useDefaultReduceAnimations();
	  const themeProps = useThemeProps({
	    props,
	    name
	  });
	  return _extends({}, themeProps, {
	    loading: (_themeProps$loading = themeProps.loading) != null ? _themeProps$loading : false,
	    disablePast: (_themeProps$disablePa = themeProps.disablePast) != null ? _themeProps$disablePa : false,
	    disableFuture: (_themeProps$disableFu = themeProps.disableFuture) != null ? _themeProps$disableFu : false,
	    openTo: (_themeProps$openTo = themeProps.openTo) != null ? _themeProps$openTo : 'day',
	    views: (_themeProps$views = themeProps.views) != null ? _themeProps$views : ['year', 'day'],
	    reduceAnimations: (_themeProps$reduceAni = themeProps.reduceAnimations) != null ? _themeProps$reduceAni : defaultReduceAnimations,
	    renderLoading: (_themeProps$renderLoa = themeProps.renderLoading) != null ? _themeProps$renderLoa : () => /*#__PURE__*/jsxRuntimeExports.jsx("span", {
	      children: "..."
	    }),
	    minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
	    maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate)
	  });
	}
	const DateCalendarRoot = styled$1(PickerViewRoot, {
	  name: 'MuiDateCalendar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({
	  display: 'flex',
	  flexDirection: 'column',
	  height: VIEW_HEIGHT
	});
	const DateCalendarViewTransitionContainer = styled$1(PickersFadeTransitionGroup, {
	  name: 'MuiDateCalendar',
	  slot: 'ViewTransitionContainer',
	  overridesResolver: (props, styles) => styles.viewTransitionContainer
	})({});
	/**
	 * Demos:
	 *
	 * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)
	 * - [DateCalendar](https://mui.com/x/react-date-pickers/date-calendar/)
	 * - [Validation](https://mui.com/x/react-date-pickers/validation/)
	 *
	 * API:
	 *
	 * - [DateCalendar API](https://mui.com/x/api/date-pickers/date-calendar/)
	 */
	const DateCalendar = /*#__PURE__*/reactExports.forwardRef(function DateCalendar(inProps, ref) {
	  var _ref, _slots$calendarHeader, _slotProps$calendarHe;
	  const utils = useUtils();
	  const id = useId();
	  const props = useDateCalendarDefaultizedProps(inProps, 'MuiDateCalendar');
	  const {
	      autoFocus,
	      onViewChange,
	      value: valueProp,
	      defaultValue,
	      referenceDate: referenceDateProp,
	      disableFuture,
	      disablePast,
	      defaultCalendarMonth,
	      onChange,
	      onYearChange,
	      onMonthChange,
	      reduceAnimations,
	      shouldDisableDate,
	      shouldDisableMonth,
	      shouldDisableYear,
	      view: inView,
	      views,
	      openTo,
	      className,
	      disabled,
	      readOnly,
	      minDate,
	      maxDate,
	      disableHighlightToday,
	      focusedView: inFocusedView,
	      onFocusedViewChange,
	      showDaysOutsideCurrentMonth,
	      fixedWeekNumber,
	      dayOfWeekFormatter,
	      components,
	      componentsProps,
	      slots,
	      slotProps,
	      loading,
	      renderLoading,
	      displayWeekNumber,
	      yearsPerRow,
	      monthsPerRow,
	      timezone: timezoneProp
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$9);
	  const {
	    value,
	    handleValueChange,
	    timezone
	  } = useControlledValueWithTimezone({
	    name: 'DateCalendar',
	    timezone: timezoneProp,
	    value: valueProp,
	    defaultValue,
	    onChange,
	    valueManager: singleItemValueManager
	  });
	  const {
	    view,
	    setView,
	    focusedView,
	    setFocusedView,
	    goToNextView,
	    setValueAndGoToNextView
	  } = useViews({
	    view: inView,
	    views,
	    openTo,
	    onChange: handleValueChange,
	    onViewChange,
	    autoFocus,
	    focusedView: inFocusedView,
	    onFocusedViewChange
	  });
	  const {
	    referenceDate,
	    calendarState,
	    changeFocusedDay,
	    changeMonth,
	    handleChangeMonth,
	    isDateDisabled,
	    onMonthSwitchingAnimationEnd
	  } = useCalendarState({
	    value,
	    defaultCalendarMonth,
	    referenceDate: referenceDateProp,
	    reduceAnimations,
	    onMonthChange,
	    minDate,
	    maxDate,
	    shouldDisableDate,
	    disablePast,
	    disableFuture,
	    timezone
	  });

	  // When disabled, limit the view to the selected date
	  const minDateWithDisabled = disabled && value || minDate;
	  const maxDateWithDisabled = disabled && value || maxDate;
	  const gridLabelId = `${id}-grid-label`;
	  const hasFocus = focusedView !== null;
	  const CalendarHeader = (_ref = (_slots$calendarHeader = slots == null ? void 0 : slots.calendarHeader) != null ? _slots$calendarHeader : components == null ? void 0 : components.CalendarHeader) != null ? _ref : PickersCalendarHeader;
	  const calendarHeaderProps = useSlotProps({
	    elementType: CalendarHeader,
	    externalSlotProps: (_slotProps$calendarHe = slotProps == null ? void 0 : slotProps.calendarHeader) != null ? _slotProps$calendarHe : componentsProps == null ? void 0 : componentsProps.calendarHeader,
	    additionalProps: {
	      views,
	      view,
	      currentMonth: calendarState.currentMonth,
	      onViewChange: setView,
	      onMonthChange: (newMonth, direction) => handleChangeMonth({
	        newMonth,
	        direction
	      }),
	      minDate: minDateWithDisabled,
	      maxDate: maxDateWithDisabled,
	      disabled,
	      disablePast,
	      disableFuture,
	      reduceAnimations,
	      timezone,
	      labelId: gridLabelId,
	      slots,
	      slotProps
	    },
	    ownerState: props
	  });
	  const handleDateMonthChange = useEventCallback(newDate => {
	    const startOfMonth = utils.startOfMonth(newDate);
	    const endOfMonth = utils.endOfMonth(newDate);
	    const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
	      utils,
	      date: newDate,
	      minDate: utils.isBefore(minDate, startOfMonth) ? startOfMonth : minDate,
	      maxDate: utils.isAfter(maxDate, endOfMonth) ? endOfMonth : maxDate,
	      disablePast,
	      disableFuture,
	      isDateDisabled,
	      timezone
	    }) : newDate;
	    if (closestEnabledDate) {
	      setValueAndGoToNextView(closestEnabledDate, 'finish');
	      onMonthChange == null || onMonthChange(startOfMonth);
	    } else {
	      goToNextView();
	      changeMonth(startOfMonth);
	    }
	    changeFocusedDay(closestEnabledDate, true);
	  });
	  const handleDateYearChange = useEventCallback(newDate => {
	    const startOfYear = utils.startOfYear(newDate);
	    const endOfYear = utils.endOfYear(newDate);
	    const closestEnabledDate = isDateDisabled(newDate) ? findClosestEnabledDate({
	      utils,
	      date: newDate,
	      minDate: utils.isBefore(minDate, startOfYear) ? startOfYear : minDate,
	      maxDate: utils.isAfter(maxDate, endOfYear) ? endOfYear : maxDate,
	      disablePast,
	      disableFuture,
	      isDateDisabled,
	      timezone
	    }) : newDate;
	    if (closestEnabledDate) {
	      setValueAndGoToNextView(closestEnabledDate, 'finish');
	      onYearChange == null || onYearChange(closestEnabledDate);
	    } else {
	      goToNextView();
	      changeMonth(startOfYear);
	    }
	    changeFocusedDay(closestEnabledDate, true);
	  });
	  const handleSelectedDayChange = useEventCallback(day => {
	    if (day) {
	      // If there is a date already selected, then we want to keep its time
	      return handleValueChange(mergeDateAndTime(utils, day, value != null ? value : referenceDate), 'finish', view);
	    }
	    return handleValueChange(day, 'finish', view);
	  });
	  reactExports.useEffect(() => {
	    if (value != null && utils.isValid(value)) {
	      changeMonth(value);
	    }
	  }, [value]); // eslint-disable-line

	  const ownerState = props;
	  const classes = useUtilityClasses$4(ownerState);
	  const baseDateValidationProps = {
	    disablePast,
	    disableFuture,
	    maxDate,
	    minDate
	  };
	  const commonViewProps = {
	    disableHighlightToday,
	    readOnly,
	    disabled,
	    timezone,
	    gridLabelId
	  };
	  const prevOpenViewRef = reactExports.useRef(view);
	  reactExports.useEffect(() => {
	    // If the view change and the focus was on the previous view
	    // Then we update the focus.
	    if (prevOpenViewRef.current === view) {
	      return;
	    }
	    if (focusedView === prevOpenViewRef.current) {
	      setFocusedView(view, true);
	    }
	    prevOpenViewRef.current = view;
	  }, [focusedView, setFocusedView, view]);
	  const selectedDays = reactExports.useMemo(() => [value], [value]);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(DateCalendarRoot, _extends({
	    ref: ref,
	    className: clsx(classes.root, className),
	    ownerState: ownerState
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(CalendarHeader, _extends({}, calendarHeaderProps)), /*#__PURE__*/jsxRuntimeExports.jsx(DateCalendarViewTransitionContainer, {
	      reduceAnimations: reduceAnimations,
	      className: classes.viewTransitionContainer,
	      transKey: view,
	      ownerState: ownerState,
	      children: /*#__PURE__*/jsxRuntimeExports.jsxs("div", {
	        children: [view === 'year' && /*#__PURE__*/jsxRuntimeExports.jsx(YearCalendar, _extends({}, baseDateValidationProps, commonViewProps, {
	          value: value,
	          onChange: handleDateYearChange,
	          shouldDisableYear: shouldDisableYear,
	          hasFocus: hasFocus,
	          onFocusedViewChange: isViewFocused => setFocusedView('year', isViewFocused),
	          yearsPerRow: yearsPerRow,
	          referenceDate: referenceDate
	        })), view === 'month' && /*#__PURE__*/jsxRuntimeExports.jsx(MonthCalendar, _extends({}, baseDateValidationProps, commonViewProps, {
	          hasFocus: hasFocus,
	          className: className,
	          value: value,
	          onChange: handleDateMonthChange,
	          shouldDisableMonth: shouldDisableMonth,
	          onFocusedViewChange: isViewFocused => setFocusedView('month', isViewFocused),
	          monthsPerRow: monthsPerRow,
	          referenceDate: referenceDate
	        })), view === 'day' && /*#__PURE__*/jsxRuntimeExports.jsx(DayCalendar, _extends({}, calendarState, baseDateValidationProps, commonViewProps, {
	          onMonthSwitchingAnimationEnd: onMonthSwitchingAnimationEnd,
	          onFocusedDayChange: changeFocusedDay,
	          reduceAnimations: reduceAnimations,
	          selectedDays: selectedDays,
	          onSelectedDaysChange: handleSelectedDayChange,
	          shouldDisableDate: shouldDisableDate,
	          shouldDisableMonth: shouldDisableMonth,
	          shouldDisableYear: shouldDisableYear,
	          hasFocus: hasFocus,
	          onFocusedViewChange: isViewFocused => setFocusedView('day', isViewFocused),
	          showDaysOutsideCurrentMonth: showDaysOutsideCurrentMonth,
	          fixedWeekNumber: fixedWeekNumber,
	          dayOfWeekFormatter: dayOfWeekFormatter,
	          displayWeekNumber: displayWeekNumber,
	          components: components,
	          componentsProps: componentsProps,
	          slots: slots,
	          slotProps: slotProps,
	          loading: loading,
	          renderLoading: renderLoading
	        }))]
	      })
	    })]
	  }));
	});

	function getDatePickerToolbarUtilityClass(slot) {
	  return generateUtilityClass('MuiDatePickerToolbar', slot);
	}
	generateUtilityClasses('MuiDatePickerToolbar', ['root', 'title']);

	const _excluded$8 = ["value", "isLandscape", "onChange", "toolbarFormat", "toolbarPlaceholder", "views"];
	const useUtilityClasses$3 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    title: ['title']
	  };
	  return composeClasses(slots, getDatePickerToolbarUtilityClass, classes);
	};
	const DatePickerToolbarRoot = styled$1(PickersToolbar, {
	  name: 'MuiDatePickerToolbar',
	  slot: 'Root',
	  overridesResolver: (_, styles) => styles.root
	})({});

	/**
	 * @ignore - do not document.
	 */
	const DatePickerToolbarTitle = styled$1(Typography$1, {
	  name: 'MuiDatePickerToolbar',
	  slot: 'Title',
	  overridesResolver: (_, styles) => styles.title
	})(({
	  ownerState
	}) => _extends({}, ownerState.isLandscape && {
	  margin: 'auto 16px auto auto'
	}));
	/**
	 * Demos:
	 *
	 * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)
	 * - [Custom components](https://mui.com/x/react-date-pickers/custom-components/)
	 *
	 * API:
	 *
	 * - [DatePickerToolbar API](https://mui.com/x/api/date-pickers/date-picker-toolbar/)
	 */
	const DatePickerToolbar = /*#__PURE__*/reactExports.forwardRef(function DatePickerToolbar(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDatePickerToolbar'
	  });
	  const {
	      value,
	      isLandscape,
	      toolbarFormat,
	      toolbarPlaceholder = '––',
	      views
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$8);
	  const utils = useUtils();
	  const localeText = useLocaleText();
	  const classes = useUtilityClasses$3(props);
	  const dateText = reactExports.useMemo(() => {
	    if (!value) {
	      return toolbarPlaceholder;
	    }
	    const formatFromViews = resolveDateFormat(utils, {
	      format: toolbarFormat,
	      views
	    }, true);
	    return utils.formatByString(value, formatFromViews);
	  }, [value, toolbarFormat, toolbarPlaceholder, utils, views]);
	  const ownerState = props;
	  return /*#__PURE__*/jsxRuntimeExports.jsx(DatePickerToolbarRoot, _extends({
	    ref: ref,
	    toolbarTitle: localeText.datePickerToolbarTitle,
	    isLandscape: isLandscape,
	    className: classes.root
	  }, other, {
	    children: /*#__PURE__*/jsxRuntimeExports.jsx(DatePickerToolbarTitle, {
	      variant: "h4",
	      align: isLandscape ? 'left' : 'center',
	      ownerState: ownerState,
	      className: classes.title,
	      children: dateText
	    })
	  }));
	});

	function useDatePickerDefaultizedProps(props, name) {
	  var _themeProps$slots, _themeProps$disableFu, _themeProps$disablePa, _themeProps$slotProps;
	  const utils = useUtils();
	  const defaultDates = useDefaultDates();
	  const themeProps = useThemeProps({
	    props,
	    name
	  });
	  const localeText = reactExports.useMemo(() => {
	    var _themeProps$localeTex;
	    if (((_themeProps$localeTex = themeProps.localeText) == null ? void 0 : _themeProps$localeTex.toolbarTitle) == null) {
	      return themeProps.localeText;
	    }
	    return _extends({}, themeProps.localeText, {
	      datePickerToolbarTitle: themeProps.localeText.toolbarTitle
	    });
	  }, [themeProps.localeText]);
	  const slots = (_themeProps$slots = themeProps.slots) != null ? _themeProps$slots : uncapitalizeObjectKeys(themeProps.components);
	  return _extends({}, themeProps, {
	    localeText
	  }, applyDefaultViewProps({
	    views: themeProps.views,
	    openTo: themeProps.openTo,
	    defaultViews: ['year', 'day'],
	    defaultOpenTo: 'day'
	  }), {
	    disableFuture: (_themeProps$disableFu = themeProps.disableFuture) != null ? _themeProps$disableFu : false,
	    disablePast: (_themeProps$disablePa = themeProps.disablePast) != null ? _themeProps$disablePa : false,
	    minDate: applyDefaultDate(utils, themeProps.minDate, defaultDates.minDate),
	    maxDate: applyDefaultDate(utils, themeProps.maxDate, defaultDates.maxDate),
	    slots: _extends({
	      toolbar: DatePickerToolbar
	    }, slots),
	    slotProps: (_themeProps$slotProps = themeProps.slotProps) != null ? _themeProps$slotProps : themeProps.componentsProps
	  });
	}

	const _excluded$7 = ["props", "getOpenDialogAriaText"],
	  _excluded2 = ["ownerState"],
	  _excluded3 = ["ownerState"];
	/**
	 * Hook managing all the single-date desktop pickers:
	 * - DesktopDatePicker
	 * - DesktopDateTimePicker
	 * - DesktopTimePicker
	 */
	const useDesktopPicker = _ref => {
	  var _innerSlotProps$toolb, _innerSlotProps$toolb2, _slots$inputAdornment, _slots$openPickerButt, _slots$layout;
	  let {
	      props,
	      getOpenDialogAriaText
	    } = _ref,
	    pickerParams = _objectWithoutPropertiesLoose(_ref, _excluded$7);
	  const {
	    slots,
	    slotProps: innerSlotProps,
	    className,
	    sx,
	    format,
	    formatDensity,
	    timezone,
	    name,
	    label,
	    inputRef,
	    readOnly,
	    disabled,
	    autoFocus,
	    localeText,
	    reduceAnimations
	  } = props;
	  const utils = useUtils();
	  const internalInputRef = reactExports.useRef(null);
	  const containerRef = reactExports.useRef(null);
	  const labelId = useId();
	  const isToolbarHidden = (_innerSlotProps$toolb = innerSlotProps == null || (_innerSlotProps$toolb2 = innerSlotProps.toolbar) == null ? void 0 : _innerSlotProps$toolb2.hidden) != null ? _innerSlotProps$toolb : false;
	  const {
	    open,
	    actions,
	    hasUIView,
	    layoutProps,
	    renderCurrentView,
	    shouldRestoreFocus,
	    fieldProps: pickerFieldProps
	  } = usePicker(_extends({}, pickerParams, {
	    props,
	    inputRef: internalInputRef,
	    autoFocusView: true,
	    additionalViewProps: {},
	    wrapperVariant: 'desktop'
	  }));
	  const InputAdornment = (_slots$inputAdornment = slots.inputAdornment) != null ? _slots$inputAdornment : InputAdornment$1;
	  const _useSlotProps = useSlotProps({
	      elementType: InputAdornment,
	      externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.inputAdornment,
	      additionalProps: {
	        position: 'end'
	      },
	      ownerState: props
	    }),
	    inputAdornmentProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2);
	  const OpenPickerButton = (_slots$openPickerButt = slots.openPickerButton) != null ? _slots$openPickerButt : IconButton$1;
	  const _useSlotProps2 = useSlotProps({
	      elementType: OpenPickerButton,
	      externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.openPickerButton,
	      additionalProps: {
	        disabled: disabled || readOnly,
	        onClick: open ? actions.onClose : actions.onOpen,
	        'aria-label': getOpenDialogAriaText(pickerFieldProps.value, utils),
	        edge: inputAdornmentProps.position
	      },
	      ownerState: props
	    }),
	    openPickerButtonProps = _objectWithoutPropertiesLoose(_useSlotProps2, _excluded3);
	  const OpenPickerIcon = slots.openPickerIcon;
	  const Field = slots.field;
	  const fieldProps = useSlotProps({
	    elementType: Field,
	    externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.field,
	    additionalProps: _extends({}, pickerFieldProps, isToolbarHidden && {
	      id: labelId
	    }, {
	      readOnly,
	      disabled,
	      className,
	      sx,
	      format,
	      formatDensity,
	      timezone,
	      label,
	      name,
	      autoFocus: autoFocus && !props.open,
	      focused: open ? true : undefined
	    }),
	    ownerState: props
	  });

	  // TODO: Move to `useSlotProps` when https://github.com/mui/material-ui/pull/35088 will be merged
	  if (hasUIView) {
	    fieldProps.InputProps = _extends({}, fieldProps.InputProps, {
	      ref: containerRef,
	      [`${inputAdornmentProps.position}Adornment`]: /*#__PURE__*/jsxRuntimeExports.jsx(InputAdornment, _extends({}, inputAdornmentProps, {
	        children: /*#__PURE__*/jsxRuntimeExports.jsx(OpenPickerButton, _extends({}, openPickerButtonProps, {
	          children: /*#__PURE__*/jsxRuntimeExports.jsx(OpenPickerIcon, _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.openPickerIcon))
	        }))
	      }))
	    });
	  }
	  const slotsForField = _extends({
	    textField: slots.textField,
	    clearIcon: slots.clearIcon,
	    clearButton: slots.clearButton
	  }, fieldProps.slots);
	  const Layout = (_slots$layout = slots.layout) != null ? _slots$layout : PickersLayout;
	  const handleInputRef = useForkRef(internalInputRef, fieldProps.inputRef, inputRef);
	  let labelledById = labelId;
	  if (isToolbarHidden) {
	    if (label) {
	      labelledById = `${labelId}-label`;
	    } else {
	      labelledById = undefined;
	    }
	  }
	  const slotProps = _extends({}, innerSlotProps, {
	    toolbar: _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.toolbar, {
	      titleId: labelId
	    }),
	    popper: _extends({
	      'aria-labelledby': labelledById
	    }, innerSlotProps == null ? void 0 : innerSlotProps.popper)
	  });
	  const renderPicker = () => /*#__PURE__*/jsxRuntimeExports.jsxs(LocalizationProvider, {
	    localeText: localeText,
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(Field, _extends({}, fieldProps, {
	      slots: slotsForField,
	      slotProps: slotProps,
	      inputRef: handleInputRef
	    })), /*#__PURE__*/jsxRuntimeExports.jsx(PickersPopper, _extends({
	      role: "dialog",
	      placement: "bottom-start",
	      anchorEl: containerRef.current
	    }, actions, {
	      open: open,
	      slots: slots,
	      slotProps: slotProps,
	      shouldRestoreFocus: shouldRestoreFocus,
	      reduceAnimations: reduceAnimations,
	      children: /*#__PURE__*/jsxRuntimeExports.jsx(Layout, _extends({}, layoutProps, slotProps == null ? void 0 : slotProps.layout, {
	        slots: slots,
	        slotProps: slotProps,
	        children: renderCurrentView()
	      }))
	    }))]
	  });
	  return {
	    renderPicker
	  };
	};

	const renderDateViewCalendar = ({
	  view,
	  onViewChange,
	  views,
	  focusedView,
	  onFocusedViewChange,
	  value,
	  defaultValue,
	  referenceDate,
	  onChange,
	  className,
	  classes,
	  disableFuture,
	  disablePast,
	  minDate,
	  maxDate,
	  shouldDisableDate,
	  shouldDisableMonth,
	  shouldDisableYear,
	  reduceAnimations,
	  onMonthChange,
	  monthsPerRow,
	  onYearChange,
	  yearsPerRow,
	  defaultCalendarMonth,
	  components,
	  componentsProps,
	  slots,
	  slotProps,
	  loading,
	  renderLoading,
	  disableHighlightToday,
	  readOnly,
	  disabled,
	  showDaysOutsideCurrentMonth,
	  dayOfWeekFormatter,
	  sx,
	  autoFocus,
	  fixedWeekNumber,
	  displayWeekNumber,
	  timezone
	}) => /*#__PURE__*/jsxRuntimeExports.jsx(DateCalendar, {
	  view: view,
	  onViewChange: onViewChange,
	  views: views.filter(isDatePickerView),
	  focusedView: focusedView && isDatePickerView(focusedView) ? focusedView : null,
	  onFocusedViewChange: onFocusedViewChange,
	  value: value,
	  defaultValue: defaultValue,
	  referenceDate: referenceDate,
	  onChange: onChange,
	  className: className,
	  classes: classes,
	  disableFuture: disableFuture,
	  disablePast: disablePast,
	  minDate: minDate,
	  maxDate: maxDate,
	  shouldDisableDate: shouldDisableDate,
	  shouldDisableMonth: shouldDisableMonth,
	  shouldDisableYear: shouldDisableYear,
	  reduceAnimations: reduceAnimations,
	  onMonthChange: onMonthChange,
	  monthsPerRow: monthsPerRow,
	  onYearChange: onYearChange,
	  yearsPerRow: yearsPerRow,
	  defaultCalendarMonth: defaultCalendarMonth,
	  components: components,
	  componentsProps: componentsProps,
	  slots: slots,
	  slotProps: slotProps,
	  loading: loading,
	  renderLoading: renderLoading,
	  disableHighlightToday: disableHighlightToday,
	  readOnly: readOnly,
	  disabled: disabled,
	  showDaysOutsideCurrentMonth: showDaysOutsideCurrentMonth,
	  dayOfWeekFormatter: dayOfWeekFormatter,
	  sx: sx,
	  autoFocus: autoFocus,
	  fixedWeekNumber: fixedWeekNumber,
	  displayWeekNumber: displayWeekNumber,
	  timezone: timezone
	});

	/**
	 * Demos:
	 *
	 * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)
	 * - [Validation](https://mui.com/x/react-date-pickers/validation/)
	 *
	 * API:
	 *
	 * - [DesktopDatePicker API](https://mui.com/x/api/date-pickers/desktop-date-picker/)
	 */
	const DesktopDatePicker = /*#__PURE__*/reactExports.forwardRef(function DesktopDatePicker(inProps, ref) {
	  var _defaultizedProps$yea, _defaultizedProps$slo2, _props$localeText$ope, _props$localeText;
	  const localeText = useLocaleText();
	  const utils = useUtils();

	  // Props with the default values common to all date pickers
	  const defaultizedProps = useDatePickerDefaultizedProps(inProps, 'MuiDesktopDatePicker');
	  const viewRenderers = _extends({
	    day: renderDateViewCalendar,
	    month: renderDateViewCalendar,
	    year: renderDateViewCalendar
	  }, defaultizedProps.viewRenderers);

	  // Props with the default values specific to the desktop variant
	  const props = _extends({}, defaultizedProps, {
	    viewRenderers,
	    format: resolveDateFormat(utils, defaultizedProps, false),
	    yearsPerRow: (_defaultizedProps$yea = defaultizedProps.yearsPerRow) != null ? _defaultizedProps$yea : 4,
	    slots: _extends({
	      openPickerIcon: CalendarIcon,
	      field: DateField
	    }, defaultizedProps.slots),
	    slotProps: _extends({}, defaultizedProps.slotProps, {
	      field: ownerState => {
	        var _defaultizedProps$slo;
	        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
	          ref
	        });
	      },
	      toolbar: _extends({
	        hidden: true
	      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)
	    })
	  });
	  const {
	    renderPicker
	  } = useDesktopPicker({
	    props,
	    valueManager: singleItemValueManager,
	    valueType: 'date',
	    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openDatePickerDialogue) != null ? _props$localeText$ope : localeText.openDatePickerDialogue,
	    validator: validateDate
	  });
	  return renderPicker();
	});
	DesktopDatePicker.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // | To update them edit the TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------
	  /**
	   * If `true`, the main element is focused during the first mount.
	   * This main element is:
	   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
	   * - the `input` element if there is a field rendered.
	   */
	  autoFocus: PropTypes.bool,
	  /**
	   * Class name applied to the root element.
	   */
	  className: PropTypes.string,
	  /**
	   * If `true`, the popover or modal will close after submitting the full date.
	   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
	   */
	  closeOnSelect: PropTypes.bool,
	  /**
	   * Overridable components.
	   * @default {}
	   * @deprecated Please use `slots`.
	   */
	  components: PropTypes.object,
	  /**
	   * The props used for each component slot.
	   * @default {}
	   * @deprecated Please use `slotProps`.
	   */
	  componentsProps: PropTypes.object,
	  /**
	   * Formats the day of week displayed in the calendar header.
	   * @param {string} day The day of week provided by the adapter.  Deprecated, will be removed in v7: Use `date` instead.
	   * @param {TDate} date The date of the day of week provided by the adapter.
	   * @returns {string} The name to display.
	   * @default (_day: string, date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
	   */
	  dayOfWeekFormatter: PropTypes.func,
	  /**
	   * Default calendar month displayed when `value` and `defaultValue` are empty.
	   * @deprecated Consider using `referenceDate` instead.
	   */
	  defaultCalendarMonth: PropTypes.any,
	  /**
	   * The default value.
	   * Used when the component is not controlled.
	   */
	  defaultValue: PropTypes.any,
	  /**
	   * If `true`, the picker and text field are disabled.
	   * @default false
	   */
	  disabled: PropTypes.bool,
	  /**
	   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
	   * @default false
	   */
	  disableFuture: PropTypes.bool,
	  /**
	   * If `true`, today's date is rendering without highlighting with circle.
	   * @default false
	   */
	  disableHighlightToday: PropTypes.bool,
	  /**
	   * If `true`, the open picker button will not be rendered (renders only the field).
	   * @default false
	   */
	  disableOpenPicker: PropTypes.bool,
	  /**
	   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
	   * @default false
	   */
	  disablePast: PropTypes.bool,
	  /**
	   * If `true`, the week number will be display in the calendar.
	   */
	  displayWeekNumber: PropTypes.bool,
	  /**
	   * Calendar will show more weeks in order to match this value.
	   * Put it to 6 for having fix number of week in Gregorian calendars
	   * @default undefined
	   */
	  fixedWeekNumber: PropTypes.number,
	  /**
	   * Format of the date when rendered in the input(s).
	   * Defaults to localized format based on the used `views`.
	   */
	  format: PropTypes.string,
	  /**
	   * Density of the format when rendered in the input.
	   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
	   * @default "dense"
	   */
	  formatDensity: PropTypes.oneOf(['dense', 'spacious']),
	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType$1,
	  /**
	   * The label content.
	   */
	  label: PropTypes.node,
	  /**
	   * If `true`, calls `renderLoading` instead of rendering the day calendar.
	   * Can be used to preload information and show it in calendar.
	   * @default false
	   */
	  loading: PropTypes.bool,
	  /**
	   * Locale for components texts.
	   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
	   */
	  localeText: PropTypes.object,
	  /**
	   * Maximal selectable date.
	   */
	  maxDate: PropTypes.any,
	  /**
	   * Minimal selectable date.
	   */
	  minDate: PropTypes.any,
	  /**
	   * Months rendered per row.
	   * @default 3
	   */
	  monthsPerRow: PropTypes.oneOf([3, 4]),
	  /**
	   * Name attribute used by the `input` element in the Field.
	   */
	  name: PropTypes.string,
	  /**
	   * Callback fired when the value is accepted.
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TValue} value The value that was just accepted.
	   */
	  onAccept: PropTypes.func,
	  /**
	   * Callback fired when the value changes.
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TValue} value The new value.
	   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
	   */
	  onChange: PropTypes.func,
	  /**
	   * Callback fired when the popup requests to be closed.
	   * Use in controlled mode (see `open`).
	   */
	  onClose: PropTypes.func,
	  /**
	   * Callback fired when the error associated to the current value changes.
	   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
	   *
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TError} error The new error describing why the current value is not valid.
	   * @param {TValue} value The value associated to the error.
	   */
	  onError: PropTypes.func,
	  /**
	   * Callback fired on month change.
	   * @template TDate
	   * @param {TDate} month The new month.
	   */
	  onMonthChange: PropTypes.func,
	  /**
	   * Callback fired when the popup requests to be opened.
	   * Use in controlled mode (see `open`).
	   */
	  onOpen: PropTypes.func,
	  /**
	   * Callback fired when the selected sections change.
	   * @param {FieldSelectedSections} newValue The new selected sections.
	   */
	  onSelectedSectionsChange: PropTypes.func,
	  /**
	   * Callback fired on view change.
	   * @template TView
	   * @param {TView} view The new view.
	   */
	  onViewChange: PropTypes.func,
	  /**
	   * Callback fired on year change.
	   * @template TDate
	   * @param {TDate} year The new year.
	   */
	  onYearChange: PropTypes.func,
	  /**
	   * Control the popup or dialog open state.
	   * @default false
	   */
	  open: PropTypes.bool,
	  /**
	   * The default visible view.
	   * Used when the component view is not controlled.
	   * Must be a valid option from `views` list.
	   */
	  openTo: PropTypes.oneOf(['day', 'month', 'year']),
	  /**
	   * Force rendering in particular orientation.
	   */
	  orientation: PropTypes.oneOf(['landscape', 'portrait']),
	  readOnly: PropTypes.bool,
	  /**
	   * If `true`, disable heavy animations.
	   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
	   */
	  reduceAnimations: PropTypes.bool,
	  /**
	   * The date used to generate the new value when both `value` and `defaultValue` are empty.
	   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
	   */
	  referenceDate: PropTypes.any,
	  /**
	   * Component displaying when passed `loading` true.
	   * @returns {React.ReactNode} The node to render when loading.
	   * @default () => <span data-mui-test="loading-progress">...</span>
	   */
	  renderLoading: PropTypes.func,
	  /**
	   * The currently selected sections.
	   * This prop accept four formats:
	   * 1. If a number is provided, the section at this index will be selected.
	   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
	   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
	   * 4. If `null` is provided, no section will be selected
	   * If not provided, the selected sections will be handled internally.
	   */
	  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({
	    endIndex: PropTypes.number.isRequired,
	    startIndex: PropTypes.number.isRequired
	  })]),
	  /**
	   * Disable specific date.
	   *
	   * Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
	   *
	   * @template TDate
	   * @param {TDate} day The date to test.
	   * @returns {boolean} If `true` the date will be disabled.
	   */
	  shouldDisableDate: PropTypes.func,
	  /**
	   * Disable specific month.
	   * @template TDate
	   * @param {TDate} month The month to test.
	   * @returns {boolean} If `true`, the month will be disabled.
	   */
	  shouldDisableMonth: PropTypes.func,
	  /**
	   * Disable specific year.
	   * @template TDate
	   * @param {TDate} year The year to test.
	   * @returns {boolean} If `true`, the year will be disabled.
	   */
	  shouldDisableYear: PropTypes.func,
	  /**
	   * If `true`, days outside the current month are rendered:
	   *
	   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
	   *
	   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
	   *
	   * - ignored if `calendars` equals more than `1` on range pickers.
	   * @default false
	   */
	  showDaysOutsideCurrentMonth: PropTypes.bool,
	  /**
	   * The props used for each component slot.
	   * @default {}
	   */
	  slotProps: PropTypes.object,
	  /**
	   * Overridable component slots.
	   * @default {}
	   */
	  slots: PropTypes.object,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * Choose which timezone to use for the value.
	   * Example: "default", "system", "UTC", "America/New_York".
	   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
	   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.
	   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
	   */
	  timezone: PropTypes.string,
	  /**
	   * The selected value.
	   * Used when the component is controlled.
	   */
	  value: PropTypes.any,
	  /**
	   * The visible view.
	   * Used when the component view is controlled.
	   * Must be a valid option from `views` list.
	   */
	  view: PropTypes.oneOf(['day', 'month', 'year']),
	  /**
	   * Define custom view renderers for each section.
	   * If `null`, the section will only have field editing.
	   * If `undefined`, internally defined view will be the used.
	   */
	  viewRenderers: PropTypes.shape({
	    day: PropTypes.func,
	    month: PropTypes.func,
	    year: PropTypes.func
	  }),
	  /**
	   * Available views.
	   */
	  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired),
	  /**
	   * Years rendered per row.
	   * @default 4
	   */
	  yearsPerRow: PropTypes.oneOf([3, 4])
	};

	const _excluded$6 = ["props", "getOpenDialogAriaText"];
	/**
	 * Hook managing all the single-date mobile pickers:
	 * - MobileDatePicker
	 * - MobileDateTimePicker
	 * - MobileTimePicker
	 */
	const useMobilePicker = _ref => {
	  var _innerSlotProps$toolb, _innerSlotProps$toolb2, _slots$layout;
	  let {
	      props,
	      getOpenDialogAriaText
	    } = _ref,
	    pickerParams = _objectWithoutPropertiesLoose(_ref, _excluded$6);
	  const {
	    slots,
	    slotProps: innerSlotProps,
	    className,
	    sx,
	    format,
	    formatDensity,
	    timezone,
	    name,
	    label,
	    inputRef,
	    readOnly,
	    disabled,
	    localeText
	  } = props;
	  const utils = useUtils();
	  const internalInputRef = reactExports.useRef(null);
	  const labelId = useId();
	  const isToolbarHidden = (_innerSlotProps$toolb = innerSlotProps == null || (_innerSlotProps$toolb2 = innerSlotProps.toolbar) == null ? void 0 : _innerSlotProps$toolb2.hidden) != null ? _innerSlotProps$toolb : false;
	  const {
	    open,
	    actions,
	    layoutProps,
	    renderCurrentView,
	    fieldProps: pickerFieldProps
	  } = usePicker(_extends({}, pickerParams, {
	    props,
	    inputRef: internalInputRef,
	    autoFocusView: true,
	    additionalViewProps: {},
	    wrapperVariant: 'mobile'
	  }));
	  const Field = slots.field;
	  const fieldProps = useSlotProps({
	    elementType: Field,
	    externalSlotProps: innerSlotProps == null ? void 0 : innerSlotProps.field,
	    additionalProps: _extends({}, pickerFieldProps, isToolbarHidden && {
	      id: labelId
	    }, !(disabled || readOnly) && {
	      onClick: actions.onOpen,
	      onKeyDown: onSpaceOrEnter(actions.onOpen)
	    }, {
	      readOnly: readOnly != null ? readOnly : true,
	      disabled,
	      className,
	      sx,
	      format,
	      formatDensity,
	      timezone,
	      label,
	      name
	    }),
	    ownerState: props
	  });

	  // TODO: Move to `useSlotProps` when https://github.com/mui/material-ui/pull/35088 will be merged
	  fieldProps.inputProps = _extends({}, fieldProps.inputProps, {
	    'aria-label': getOpenDialogAriaText(pickerFieldProps.value, utils)
	  });
	  const slotsForField = _extends({
	    textField: slots.textField
	  }, fieldProps.slots);
	  const Layout = (_slots$layout = slots.layout) != null ? _slots$layout : PickersLayout;
	  const handleInputRef = useForkRef(internalInputRef, fieldProps.inputRef, inputRef);
	  let labelledById = labelId;
	  if (isToolbarHidden) {
	    if (label) {
	      labelledById = `${labelId}-label`;
	    } else {
	      labelledById = undefined;
	    }
	  }
	  const slotProps = _extends({}, innerSlotProps, {
	    toolbar: _extends({}, innerSlotProps == null ? void 0 : innerSlotProps.toolbar, {
	      titleId: labelId
	    }),
	    mobilePaper: _extends({
	      'aria-labelledby': labelledById
	    }, innerSlotProps == null ? void 0 : innerSlotProps.mobilePaper)
	  });
	  const renderPicker = () => /*#__PURE__*/jsxRuntimeExports.jsxs(LocalizationProvider, {
	    localeText: localeText,
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(Field, _extends({}, fieldProps, {
	      slots: slotsForField,
	      slotProps: slotProps,
	      inputRef: handleInputRef
	    })), /*#__PURE__*/jsxRuntimeExports.jsx(PickersModalDialog, _extends({}, actions, {
	      open: open,
	      slots: slots,
	      slotProps: slotProps,
	      children: /*#__PURE__*/jsxRuntimeExports.jsx(Layout, _extends({}, layoutProps, slotProps == null ? void 0 : slotProps.layout, {
	        slots: slots,
	        slotProps: slotProps,
	        children: renderCurrentView()
	      }))
	    }))]
	  });
	  return {
	    renderPicker
	  };
	};

	/**
	 * Demos:
	 *
	 * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)
	 * - [Validation](https://mui.com/x/react-date-pickers/validation/)
	 *
	 * API:
	 *
	 * - [MobileDatePicker API](https://mui.com/x/api/date-pickers/mobile-date-picker/)
	 */
	const MobileDatePicker = /*#__PURE__*/reactExports.forwardRef(function MobileDatePicker(inProps, ref) {
	  var _defaultizedProps$slo2, _props$localeText$ope, _props$localeText;
	  const localeText = useLocaleText();
	  const utils = useUtils();

	  // Props with the default values common to all date pickers
	  const defaultizedProps = useDatePickerDefaultizedProps(inProps, 'MuiMobileDatePicker');
	  const viewRenderers = _extends({
	    day: renderDateViewCalendar,
	    month: renderDateViewCalendar,
	    year: renderDateViewCalendar
	  }, defaultizedProps.viewRenderers);

	  // Props with the default values specific to the mobile variant
	  const props = _extends({}, defaultizedProps, {
	    viewRenderers,
	    format: resolveDateFormat(utils, defaultizedProps, false),
	    slots: _extends({
	      field: DateField
	    }, defaultizedProps.slots),
	    slotProps: _extends({}, defaultizedProps.slotProps, {
	      field: ownerState => {
	        var _defaultizedProps$slo;
	        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
	          ref
	        });
	      },
	      toolbar: _extends({
	        hidden: false
	      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)
	    })
	  });
	  const {
	    renderPicker
	  } = useMobilePicker({
	    props,
	    valueManager: singleItemValueManager,
	    valueType: 'date',
	    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openDatePickerDialogue) != null ? _props$localeText$ope : localeText.openDatePickerDialogue,
	    validator: validateDate
	  });
	  return renderPicker();
	});
	MobileDatePicker.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // | To update them edit the TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------
	  /**
	   * If `true`, the main element is focused during the first mount.
	   * This main element is:
	   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
	   * - the `input` element if there is a field rendered.
	   */
	  autoFocus: PropTypes.bool,
	  /**
	   * Class name applied to the root element.
	   */
	  className: PropTypes.string,
	  /**
	   * If `true`, the popover or modal will close after submitting the full date.
	   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
	   */
	  closeOnSelect: PropTypes.bool,
	  /**
	   * Overridable components.
	   * @default {}
	   * @deprecated Please use `slots`.
	   */
	  components: PropTypes.object,
	  /**
	   * The props used for each component slot.
	   * @default {}
	   * @deprecated Please use `slotProps`.
	   */
	  componentsProps: PropTypes.object,
	  /**
	   * Formats the day of week displayed in the calendar header.
	   * @param {string} day The day of week provided by the adapter.  Deprecated, will be removed in v7: Use `date` instead.
	   * @param {TDate} date The date of the day of week provided by the adapter.
	   * @returns {string} The name to display.
	   * @default (_day: string, date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
	   */
	  dayOfWeekFormatter: PropTypes.func,
	  /**
	   * Default calendar month displayed when `value` and `defaultValue` are empty.
	   * @deprecated Consider using `referenceDate` instead.
	   */
	  defaultCalendarMonth: PropTypes.any,
	  /**
	   * The default value.
	   * Used when the component is not controlled.
	   */
	  defaultValue: PropTypes.any,
	  /**
	   * If `true`, the picker and text field are disabled.
	   * @default false
	   */
	  disabled: PropTypes.bool,
	  /**
	   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
	   * @default false
	   */
	  disableFuture: PropTypes.bool,
	  /**
	   * If `true`, today's date is rendering without highlighting with circle.
	   * @default false
	   */
	  disableHighlightToday: PropTypes.bool,
	  /**
	   * If `true`, the open picker button will not be rendered (renders only the field).
	   * @default false
	   */
	  disableOpenPicker: PropTypes.bool,
	  /**
	   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
	   * @default false
	   */
	  disablePast: PropTypes.bool,
	  /**
	   * If `true`, the week number will be display in the calendar.
	   */
	  displayWeekNumber: PropTypes.bool,
	  /**
	   * Calendar will show more weeks in order to match this value.
	   * Put it to 6 for having fix number of week in Gregorian calendars
	   * @default undefined
	   */
	  fixedWeekNumber: PropTypes.number,
	  /**
	   * Format of the date when rendered in the input(s).
	   * Defaults to localized format based on the used `views`.
	   */
	  format: PropTypes.string,
	  /**
	   * Density of the format when rendered in the input.
	   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
	   * @default "dense"
	   */
	  formatDensity: PropTypes.oneOf(['dense', 'spacious']),
	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType$1,
	  /**
	   * The label content.
	   */
	  label: PropTypes.node,
	  /**
	   * If `true`, calls `renderLoading` instead of rendering the day calendar.
	   * Can be used to preload information and show it in calendar.
	   * @default false
	   */
	  loading: PropTypes.bool,
	  /**
	   * Locale for components texts.
	   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
	   */
	  localeText: PropTypes.object,
	  /**
	   * Maximal selectable date.
	   */
	  maxDate: PropTypes.any,
	  /**
	   * Minimal selectable date.
	   */
	  minDate: PropTypes.any,
	  /**
	   * Months rendered per row.
	   * @default 3
	   */
	  monthsPerRow: PropTypes.oneOf([3, 4]),
	  /**
	   * Name attribute used by the `input` element in the Field.
	   */
	  name: PropTypes.string,
	  /**
	   * Callback fired when the value is accepted.
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TValue} value The value that was just accepted.
	   */
	  onAccept: PropTypes.func,
	  /**
	   * Callback fired when the value changes.
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TValue} value The new value.
	   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
	   */
	  onChange: PropTypes.func,
	  /**
	   * Callback fired when the popup requests to be closed.
	   * Use in controlled mode (see `open`).
	   */
	  onClose: PropTypes.func,
	  /**
	   * Callback fired when the error associated to the current value changes.
	   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
	   *
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TError} error The new error describing why the current value is not valid.
	   * @param {TValue} value The value associated to the error.
	   */
	  onError: PropTypes.func,
	  /**
	   * Callback fired on month change.
	   * @template TDate
	   * @param {TDate} month The new month.
	   */
	  onMonthChange: PropTypes.func,
	  /**
	   * Callback fired when the popup requests to be opened.
	   * Use in controlled mode (see `open`).
	   */
	  onOpen: PropTypes.func,
	  /**
	   * Callback fired when the selected sections change.
	   * @param {FieldSelectedSections} newValue The new selected sections.
	   */
	  onSelectedSectionsChange: PropTypes.func,
	  /**
	   * Callback fired on view change.
	   * @template TView
	   * @param {TView} view The new view.
	   */
	  onViewChange: PropTypes.func,
	  /**
	   * Callback fired on year change.
	   * @template TDate
	   * @param {TDate} year The new year.
	   */
	  onYearChange: PropTypes.func,
	  /**
	   * Control the popup or dialog open state.
	   * @default false
	   */
	  open: PropTypes.bool,
	  /**
	   * The default visible view.
	   * Used when the component view is not controlled.
	   * Must be a valid option from `views` list.
	   */
	  openTo: PropTypes.oneOf(['day', 'month', 'year']),
	  /**
	   * Force rendering in particular orientation.
	   */
	  orientation: PropTypes.oneOf(['landscape', 'portrait']),
	  readOnly: PropTypes.bool,
	  /**
	   * If `true`, disable heavy animations.
	   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
	   */
	  reduceAnimations: PropTypes.bool,
	  /**
	   * The date used to generate the new value when both `value` and `defaultValue` are empty.
	   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
	   */
	  referenceDate: PropTypes.any,
	  /**
	   * Component displaying when passed `loading` true.
	   * @returns {React.ReactNode} The node to render when loading.
	   * @default () => <span data-mui-test="loading-progress">...</span>
	   */
	  renderLoading: PropTypes.func,
	  /**
	   * The currently selected sections.
	   * This prop accept four formats:
	   * 1. If a number is provided, the section at this index will be selected.
	   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
	   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
	   * 4. If `null` is provided, no section will be selected
	   * If not provided, the selected sections will be handled internally.
	   */
	  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({
	    endIndex: PropTypes.number.isRequired,
	    startIndex: PropTypes.number.isRequired
	  })]),
	  /**
	   * Disable specific date.
	   *
	   * Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
	   *
	   * @template TDate
	   * @param {TDate} day The date to test.
	   * @returns {boolean} If `true` the date will be disabled.
	   */
	  shouldDisableDate: PropTypes.func,
	  /**
	   * Disable specific month.
	   * @template TDate
	   * @param {TDate} month The month to test.
	   * @returns {boolean} If `true`, the month will be disabled.
	   */
	  shouldDisableMonth: PropTypes.func,
	  /**
	   * Disable specific year.
	   * @template TDate
	   * @param {TDate} year The year to test.
	   * @returns {boolean} If `true`, the year will be disabled.
	   */
	  shouldDisableYear: PropTypes.func,
	  /**
	   * If `true`, days outside the current month are rendered:
	   *
	   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
	   *
	   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
	   *
	   * - ignored if `calendars` equals more than `1` on range pickers.
	   * @default false
	   */
	  showDaysOutsideCurrentMonth: PropTypes.bool,
	  /**
	   * The props used for each component slot.
	   * @default {}
	   */
	  slotProps: PropTypes.object,
	  /**
	   * Overridable component slots.
	   * @default {}
	   */
	  slots: PropTypes.object,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * Choose which timezone to use for the value.
	   * Example: "default", "system", "UTC", "America/New_York".
	   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
	   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.
	   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
	   */
	  timezone: PropTypes.string,
	  /**
	   * The selected value.
	   * Used when the component is controlled.
	   */
	  value: PropTypes.any,
	  /**
	   * The visible view.
	   * Used when the component view is controlled.
	   * Must be a valid option from `views` list.
	   */
	  view: PropTypes.oneOf(['day', 'month', 'year']),
	  /**
	   * Define custom view renderers for each section.
	   * If `null`, the section will only have field editing.
	   * If `undefined`, internally defined view will be the used.
	   */
	  viewRenderers: PropTypes.shape({
	    day: PropTypes.func,
	    month: PropTypes.func,
	    year: PropTypes.func
	  }),
	  /**
	   * Available views.
	   */
	  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired),
	  /**
	   * Years rendered per row.
	   * @default 3
	   */
	  yearsPerRow: PropTypes.oneOf([3, 4])
	};

	const _excluded$5 = ["desktopModeMediaQuery"];
	/**
	 * Demos:
	 *
	 * - [DatePicker](https://mui.com/x/react-date-pickers/date-picker/)
	 * - [Validation](https://mui.com/x/react-date-pickers/validation/)
	 *
	 * API:
	 *
	 * - [DatePicker API](https://mui.com/x/api/date-pickers/date-picker/)
	 */
	const DatePicker = /*#__PURE__*/reactExports.forwardRef(function DatePicker(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDatePicker'
	  });
	  const {
	      desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$5);

	  // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)
	  const isDesktop = useMediaQuery(desktopModeMediaQuery, {
	    defaultMatches: true
	  });
	  if (isDesktop) {
	    return /*#__PURE__*/jsxRuntimeExports.jsx(DesktopDatePicker, _extends({
	      ref: ref
	    }, other));
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(MobileDatePicker, _extends({
	    ref: ref
	  }, other));
	});

	function getTimePickerToolbarUtilityClass(slot) {
	  return generateUtilityClass('MuiTimePickerToolbar', slot);
	}
	const timePickerToolbarClasses = generateUtilityClasses('MuiTimePickerToolbar', ['root', 'separator', 'hourMinuteLabel', 'hourMinuteLabelLandscape', 'hourMinuteLabelReverse', 'ampmSelection', 'ampmLandscape', 'ampmLabel']);

	const _excluded$4 = ["ampm", "ampmInClock", "value", "isLandscape", "onChange", "view", "onViewChange", "views", "disabled", "readOnly"];
	const useUtilityClasses$2 = ownerState => {
	  const {
	    theme,
	    isLandscape,
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    separator: ['separator'],
	    hourMinuteLabel: ['hourMinuteLabel', isLandscape && 'hourMinuteLabelLandscape', theme.direction === 'rtl' && 'hourMinuteLabelReverse'],
	    ampmSelection: ['ampmSelection', isLandscape && 'ampmLandscape'],
	    ampmLabel: ['ampmLabel']
	  };
	  return composeClasses(slots, getTimePickerToolbarUtilityClass, classes);
	};
	const TimePickerToolbarRoot = styled$1(PickersToolbar, {
	  name: 'MuiTimePickerToolbar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})({});
	const TimePickerToolbarSeparator = styled$1(PickersToolbarText, {
	  name: 'MuiTimePickerToolbar',
	  slot: 'Separator',
	  overridesResolver: (props, styles) => styles.separator
	})({
	  outline: 0,
	  margin: '0 4px 0 2px',
	  cursor: 'default'
	});
	const TimePickerToolbarHourMinuteLabel = styled$1('div', {
	  name: 'MuiTimePickerToolbar',
	  slot: 'HourMinuteLabel',
	  overridesResolver: (props, styles) => [{
	    [`&.${timePickerToolbarClasses.hourMinuteLabelLandscape}`]: styles.hourMinuteLabelLandscape,
	    [`&.${timePickerToolbarClasses.hourMinuteLabelReverse}`]: styles.hourMinuteLabelReverse
	  }, styles.hourMinuteLabel]
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'flex',
	  justifyContent: 'flex-end',
	  alignItems: 'flex-end'
	}, ownerState.isLandscape && {
	  marginTop: 'auto'
	}, theme.direction === 'rtl' && {
	  flexDirection: 'row-reverse'
	}));
	TimePickerToolbarHourMinuteLabel.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // | To update them edit the TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------
	  as: PropTypes.elementType,
	  ownerState: PropTypes.object.isRequired,
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	};
	const TimePickerToolbarAmPmSelection = styled$1('div', {
	  name: 'MuiTimePickerToolbar',
	  slot: 'AmPmSelection',
	  overridesResolver: (props, styles) => [{
	    [`.${timePickerToolbarClasses.ampmLabel}`]: styles.ampmLabel
	  }, {
	    [`&.${timePickerToolbarClasses.ampmLandscape}`]: styles.ampmLandscape
	  }, styles.ampmSelection]
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex',
	  flexDirection: 'column',
	  marginRight: 'auto',
	  marginLeft: 12
	}, ownerState.isLandscape && {
	  margin: '4px 0 auto',
	  flexDirection: 'row',
	  justifyContent: 'space-around',
	  flexBasis: '100%'
	}, {
	  [`& .${timePickerToolbarClasses.ampmLabel}`]: {
	    fontSize: 17
	  }
	}));
	TimePickerToolbarAmPmSelection.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // | To update them edit the TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------
	  as: PropTypes.elementType,
	  ownerState: PropTypes.object.isRequired,
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	};

	/**
	 * Demos:
	 *
	 * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)
	 * - [Custom components](https://mui.com/x/react-date-pickers/custom-components/)
	 *
	 * API:
	 *
	 * - [TimePickerToolbar API](https://mui.com/x/api/date-pickers/time-picker-toolbar/)
	 */
	function TimePickerToolbar(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTimePickerToolbar'
	  });
	  const {
	      ampm,
	      ampmInClock,
	      value,
	      isLandscape,
	      onChange,
	      view,
	      onViewChange,
	      views,
	      disabled,
	      readOnly
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$4);
	  const utils = useUtils();
	  const localeText = useLocaleText();
	  const theme = useTheme();
	  const showAmPmControl = Boolean(ampm && !ampmInClock && views.includes('hours'));
	  const {
	    meridiemMode,
	    handleMeridiemChange
	  } = useMeridiemMode(value, ampm, onChange);
	  const formatHours = time => ampm ? utils.format(time, 'hours12h') : utils.format(time, 'hours24h');
	  const ownerState = props;
	  const classes = useUtilityClasses$2(_extends({}, ownerState, {
	    theme
	  }));
	  const separator = /*#__PURE__*/jsxRuntimeExports.jsx(TimePickerToolbarSeparator, {
	    tabIndex: -1,
	    value: ":",
	    variant: "h3",
	    selected: false,
	    className: classes.separator
	  });
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(TimePickerToolbarRoot, _extends({
	    landscapeDirection: "row",
	    toolbarTitle: localeText.timePickerToolbarTitle,
	    isLandscape: isLandscape,
	    ownerState: ownerState,
	    className: classes.root
	  }, other, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsxs(TimePickerToolbarHourMinuteLabel, {
	      className: classes.hourMinuteLabel,
	      ownerState: ownerState,
	      children: [arrayIncludes(views, 'hours') && /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButton, {
	        tabIndex: -1,
	        variant: "h3",
	        onClick: () => onViewChange('hours'),
	        selected: view === 'hours',
	        value: value ? formatHours(value) : '--'
	      }), arrayIncludes(views, ['hours', 'minutes']) && separator, arrayIncludes(views, 'minutes') && /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButton, {
	        tabIndex: -1,
	        variant: "h3",
	        onClick: () => onViewChange('minutes'),
	        selected: view === 'minutes',
	        value: value ? utils.format(value, 'minutes') : '--'
	      }), arrayIncludes(views, ['minutes', 'seconds']) && separator, arrayIncludes(views, 'seconds') && /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButton, {
	        variant: "h3",
	        onClick: () => onViewChange('seconds'),
	        selected: view === 'seconds',
	        value: value ? utils.format(value, 'seconds') : '--'
	      })]
	    }), showAmPmControl && /*#__PURE__*/jsxRuntimeExports.jsxs(TimePickerToolbarAmPmSelection, {
	      className: classes.ampmSelection,
	      ownerState: ownerState,
	      children: [/*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButton, {
	        disableRipple: true,
	        variant: "subtitle2",
	        selected: meridiemMode === 'am',
	        typographyClassName: classes.ampmLabel,
	        value: formatMeridiem(utils, 'am'),
	        onClick: readOnly ? undefined : () => handleMeridiemChange('am'),
	        disabled: disabled
	      }), /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButton, {
	        disableRipple: true,
	        variant: "subtitle2",
	        selected: meridiemMode === 'pm',
	        typographyClassName: classes.ampmLabel,
	        value: formatMeridiem(utils, 'pm'),
	        onClick: readOnly ? undefined : () => handleMeridiemChange('pm'),
	        disabled: disabled
	      })]
	    })]
	  }));
	}

	function useTimePickerDefaultizedProps(props, name) {
	  var _themeProps$ampm, _themeProps$slots, _themeProps$slotProps, _themeProps$disableFu, _themeProps$disablePa;
	  const utils = useUtils();
	  const themeProps = useThemeProps({
	    props,
	    name
	  });
	  const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils.is12HourCycleInCurrentLocale();
	  const localeText = reactExports.useMemo(() => {
	    var _themeProps$localeTex;
	    if (((_themeProps$localeTex = themeProps.localeText) == null ? void 0 : _themeProps$localeTex.toolbarTitle) == null) {
	      return themeProps.localeText;
	    }
	    return _extends({}, themeProps.localeText, {
	      timePickerToolbarTitle: themeProps.localeText.toolbarTitle
	    });
	  }, [themeProps.localeText]);
	  const slots = (_themeProps$slots = themeProps.slots) != null ? _themeProps$slots : uncapitalizeObjectKeys(themeProps.components);
	  const slotProps = (_themeProps$slotProps = themeProps.slotProps) != null ? _themeProps$slotProps : themeProps.componentsProps;
	  return _extends({}, themeProps, {
	    ampm,
	    localeText
	  }, applyDefaultViewProps({
	    views: themeProps.views,
	    openTo: themeProps.openTo,
	    defaultViews: ['hours', 'minutes'],
	    defaultOpenTo: 'hours'
	  }), {
	    disableFuture: (_themeProps$disableFu = themeProps.disableFuture) != null ? _themeProps$disableFu : false,
	    disablePast: (_themeProps$disablePa = themeProps.disablePast) != null ? _themeProps$disablePa : false,
	    slots: _extends({
	      toolbar: TimePickerToolbar
	    }, slots),
	    slotProps: _extends({}, slotProps, {
	      toolbar: _extends({
	        ampm,
	        ampmInClock: themeProps.ampmInClock
	      }, slotProps == null ? void 0 : slotProps.toolbar)
	    })
	  });
	}

	const renderTimeViewClock = ({
	  view,
	  onViewChange,
	  focusedView,
	  onFocusedViewChange,
	  views,
	  value,
	  defaultValue,
	  referenceDate,
	  onChange,
	  className,
	  classes,
	  disableFuture,
	  disablePast,
	  minTime,
	  maxTime,
	  shouldDisableTime,
	  shouldDisableClock,
	  minutesStep,
	  ampm,
	  ampmInClock,
	  components,
	  componentsProps,
	  slots,
	  slotProps,
	  readOnly,
	  disabled,
	  sx,
	  autoFocus,
	  showViewSwitcher,
	  disableIgnoringDatePartForTimeValidation,
	  timezone
	}) => /*#__PURE__*/jsxRuntimeExports.jsx(TimeClock, {
	  view: view,
	  onViewChange: onViewChange,
	  focusedView: focusedView && isTimeView(focusedView) ? focusedView : null,
	  onFocusedViewChange: onFocusedViewChange,
	  views: views.filter(isTimeView),
	  value: value,
	  defaultValue: defaultValue,
	  referenceDate: referenceDate,
	  onChange: onChange,
	  className: className,
	  classes: classes,
	  disableFuture: disableFuture,
	  disablePast: disablePast,
	  minTime: minTime,
	  maxTime: maxTime,
	  shouldDisableTime: shouldDisableTime,
	  shouldDisableClock: shouldDisableClock,
	  minutesStep: minutesStep,
	  ampm: ampm,
	  ampmInClock: ampmInClock,
	  components: components,
	  componentsProps: componentsProps,
	  slots: slots,
	  slotProps: slotProps,
	  readOnly: readOnly,
	  disabled: disabled,
	  sx: sx,
	  autoFocus: autoFocus,
	  showViewSwitcher: showViewSwitcher,
	  disableIgnoringDatePartForTimeValidation: disableIgnoringDatePartForTimeValidation,
	  timezone: timezone
	});
	const renderDigitalClockTimeView = ({
	  view,
	  onViewChange,
	  focusedView,
	  onFocusedViewChange,
	  views,
	  value,
	  defaultValue,
	  referenceDate,
	  onChange,
	  className,
	  classes,
	  disableFuture,
	  disablePast,
	  minTime,
	  maxTime,
	  shouldDisableTime,
	  shouldDisableClock,
	  minutesStep,
	  ampm,
	  components,
	  componentsProps,
	  slots,
	  slotProps,
	  readOnly,
	  disabled,
	  sx,
	  autoFocus,
	  disableIgnoringDatePartForTimeValidation,
	  timeSteps,
	  skipDisabled,
	  timezone
	}) => /*#__PURE__*/jsxRuntimeExports.jsx(DigitalClock, {
	  view: view,
	  onViewChange: onViewChange,
	  focusedView: focusedView,
	  onFocusedViewChange: onFocusedViewChange,
	  views: views.filter(isTimeView),
	  value: value,
	  defaultValue: defaultValue,
	  referenceDate: referenceDate,
	  onChange: onChange,
	  className: className,
	  classes: classes,
	  disableFuture: disableFuture,
	  disablePast: disablePast,
	  minTime: minTime,
	  maxTime: maxTime,
	  shouldDisableTime: shouldDisableTime,
	  shouldDisableClock: shouldDisableClock,
	  minutesStep: minutesStep,
	  ampm: ampm,
	  components: components,
	  componentsProps: componentsProps,
	  slots: slots,
	  slotProps: slotProps,
	  readOnly: readOnly,
	  disabled: disabled,
	  sx: sx,
	  autoFocus: autoFocus,
	  disableIgnoringDatePartForTimeValidation: disableIgnoringDatePartForTimeValidation,
	  timeStep: timeSteps == null ? void 0 : timeSteps.minutes,
	  skipDisabled: skipDisabled,
	  timezone: timezone
	});
	const renderMultiSectionDigitalClockTimeView = ({
	  view,
	  onViewChange,
	  focusedView,
	  onFocusedViewChange,
	  views,
	  value,
	  defaultValue,
	  referenceDate,
	  onChange,
	  className,
	  classes,
	  disableFuture,
	  disablePast,
	  minTime,
	  maxTime,
	  shouldDisableTime,
	  shouldDisableClock,
	  minutesStep,
	  ampm,
	  components,
	  componentsProps,
	  slots,
	  slotProps,
	  readOnly,
	  disabled,
	  sx,
	  autoFocus,
	  disableIgnoringDatePartForTimeValidation,
	  timeSteps,
	  skipDisabled,
	  timezone
	}) => /*#__PURE__*/jsxRuntimeExports.jsx(MultiSectionDigitalClock, {
	  view: view,
	  onViewChange: onViewChange,
	  focusedView: focusedView,
	  onFocusedViewChange: onFocusedViewChange,
	  views: views.filter(isTimeView),
	  value: value,
	  defaultValue: defaultValue,
	  referenceDate: referenceDate,
	  onChange: onChange,
	  className: className,
	  classes: classes,
	  disableFuture: disableFuture,
	  disablePast: disablePast,
	  minTime: minTime,
	  maxTime: maxTime,
	  shouldDisableTime: shouldDisableTime,
	  shouldDisableClock: shouldDisableClock,
	  minutesStep: minutesStep,
	  ampm: ampm,
	  components: components,
	  componentsProps: componentsProps,
	  slots: slots,
	  slotProps: slotProps,
	  readOnly: readOnly,
	  disabled: disabled,
	  sx: sx,
	  autoFocus: autoFocus,
	  disableIgnoringDatePartForTimeValidation: disableIgnoringDatePartForTimeValidation,
	  timeSteps: timeSteps,
	  skipDisabled: skipDisabled,
	  timezone: timezone
	});

	const _excluded$3 = ["views", "format"];
	const resolveDateTimeFormat = (utils, _ref) => {
	  let {
	      views,
	      format
	    } = _ref,
	    other = _objectWithoutPropertiesLoose(_ref, _excluded$3);
	  if (format) {
	    return format;
	  }
	  const dateViews = [];
	  const timeViews = [];
	  views.forEach(view => {
	    if (isTimeView(view)) {
	      timeViews.push(view);
	    } else {
	      dateViews.push(view);
	    }
	  });
	  if (timeViews.length === 0) {
	    return resolveDateFormat(utils, _extends({
	      views: dateViews
	    }, other), false);
	  }
	  if (dateViews.length === 0) {
	    return resolveTimeFormat(utils, _extends({
	      views: timeViews
	    }, other));
	  }
	  const timeFormat = resolveTimeFormat(utils, _extends({
	    views: timeViews
	  }, other));
	  const dateFormat = resolveDateFormat(utils, _extends({
	    views: dateViews
	  }, other), false);
	  return `${dateFormat} ${timeFormat}`;
	};
	const resolveViews = (ampm, views, shouldUseSingleColumn) => {
	  if (shouldUseSingleColumn) {
	    return views.filter(view => !isInternalTimeView(view) || view === 'hours');
	  }
	  return ampm ? [...views, 'meridiem'] : views;
	};
	const resolveShouldRenderTimeInASingleColumn = (timeSteps, threshold) => {
	  var _timeSteps$hours, _timeSteps$minutes;
	  return 24 * 60 / (((_timeSteps$hours = timeSteps.hours) != null ? _timeSteps$hours : 1) * ((_timeSteps$minutes = timeSteps.minutes) != null ? _timeSteps$minutes : 5)) <= threshold;
	};
	function resolveTimeViewsResponse({
	  thresholdToRenderTimeInASingleColumn: inThreshold,
	  ampm,
	  timeSteps: inTimeSteps,
	  views
	}) {
	  const thresholdToRenderTimeInASingleColumn = inThreshold != null ? inThreshold : 24;
	  const timeSteps = _extends({
	    hours: 1,
	    minutes: 5,
	    seconds: 5
	  }, inTimeSteps);
	  const shouldRenderTimeInASingleColumn = resolveShouldRenderTimeInASingleColumn(timeSteps, thresholdToRenderTimeInASingleColumn);
	  return {
	    thresholdToRenderTimeInASingleColumn,
	    timeSteps,
	    shouldRenderTimeInASingleColumn,
	    views: resolveViews(ampm, views, shouldRenderTimeInASingleColumn)
	  };
	}

	/**
	 * Demos:
	 *
	 * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)
	 * - [Validation](https://mui.com/x/react-date-pickers/validation/)
	 *
	 * API:
	 *
	 * - [DesktopTimePicker API](https://mui.com/x/api/date-pickers/desktop-time-picker/)
	 */
	const DesktopTimePicker = /*#__PURE__*/reactExports.forwardRef(function DesktopTimePicker(inProps, ref) {
	  var _defaultizedProps$amp, _viewRenderers$hours, _defaultizedProps$slo2, _defaultizedProps$slo3, _props$localeText$ope, _props$localeText;
	  const localeText = useLocaleText();
	  const utils = useUtils();

	  // Props with the default values common to all time pickers
	  const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiDesktopTimePicker');
	  const {
	    shouldRenderTimeInASingleColumn,
	    views: resolvedViews,
	    timeSteps
	  } = resolveTimeViewsResponse(defaultizedProps);
	  const renderTimeView = shouldRenderTimeInASingleColumn ? renderDigitalClockTimeView : renderMultiSectionDigitalClockTimeView;
	  const viewRenderers = _extends({
	    hours: renderTimeView,
	    minutes: renderTimeView,
	    seconds: renderTimeView,
	    meridiem: renderTimeView
	  }, defaultizedProps.viewRenderers);
	  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;
	  const actionBarActions = shouldRenderTimeInASingleColumn ? [] : ['accept'];
	  // Need to avoid adding the `meridiem` view when unexpected renderer is specified
	  const shouldHoursRendererContainMeridiemView = ((_viewRenderers$hours = viewRenderers.hours) == null ? void 0 : _viewRenderers$hours.name) === renderMultiSectionDigitalClockTimeView.name;
	  const views = !shouldHoursRendererContainMeridiemView ? resolvedViews.filter(view => view !== 'meridiem') : resolvedViews;

	  // Props with the default values specific to the desktop variant
	  const props = _extends({}, defaultizedProps, {
	    ampmInClock,
	    timeSteps,
	    viewRenderers,
	    format: resolveTimeFormat(utils, defaultizedProps),
	    // Setting only `hours` time view in case of single column time picker
	    // Allows for easy view lifecycle management
	    views: shouldRenderTimeInASingleColumn ? ['hours'] : views,
	    slots: _extends({
	      field: TimeField,
	      openPickerIcon: ClockIcon
	    }, defaultizedProps.slots),
	    slotProps: _extends({}, defaultizedProps.slotProps, {
	      field: ownerState => {
	        var _defaultizedProps$slo;
	        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
	          ref
	        });
	      },
	      toolbar: _extends({
	        hidden: true,
	        ampmInClock
	      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),
	      actionBar: _extends({
	        actions: actionBarActions
	      }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.actionBar)
	    })
	  });
	  const {
	    renderPicker
	  } = useDesktopPicker({
	    props,
	    valueManager: singleItemValueManager,
	    valueType: 'time',
	    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openTimePickerDialogue) != null ? _props$localeText$ope : localeText.openTimePickerDialogue,
	    validator: validateTime
	  });
	  return renderPicker();
	});
	DesktopTimePicker.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // | To update them edit the TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------
	  /**
	   * 12h/24h view for hour selection clock.
	   * @default `utils.is12HourCycleInCurrentLocale()`
	   */
	  ampm: PropTypes.bool,
	  /**
	   * Display ampm controls under the clock (instead of in the toolbar).
	   * @default true on desktop, false on mobile
	   */
	  ampmInClock: PropTypes.bool,
	  /**
	   * If `true`, the main element is focused during the first mount.
	   * This main element is:
	   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
	   * - the `input` element if there is a field rendered.
	   */
	  autoFocus: PropTypes.bool,
	  /**
	   * Class name applied to the root element.
	   */
	  className: PropTypes.string,
	  /**
	   * If `true`, the popover or modal will close after submitting the full date.
	   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
	   */
	  closeOnSelect: PropTypes.bool,
	  /**
	   * Overridable components.
	   * @default {}
	   * @deprecated Please use `slots`.
	   */
	  components: PropTypes.object,
	  /**
	   * The props used for each component slot.
	   * @default {}
	   * @deprecated Please use `slotProps`.
	   */
	  componentsProps: PropTypes.object,
	  /**
	   * The default value.
	   * Used when the component is not controlled.
	   */
	  defaultValue: PropTypes.any,
	  /**
	   * If `true`, the picker and text field are disabled.
	   * @default false
	   */
	  disabled: PropTypes.bool,
	  /**
	   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
	   * @default false
	   */
	  disableFuture: PropTypes.bool,
	  /**
	   * Do not ignore date part when validating min/max time.
	   * @default false
	   */
	  disableIgnoringDatePartForTimeValidation: PropTypes.bool,
	  /**
	   * If `true`, the open picker button will not be rendered (renders only the field).
	   * @default false
	   */
	  disableOpenPicker: PropTypes.bool,
	  /**
	   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
	   * @default false
	   */
	  disablePast: PropTypes.bool,
	  /**
	   * Format of the date when rendered in the input(s).
	   * Defaults to localized format based on the used `views`.
	   */
	  format: PropTypes.string,
	  /**
	   * Density of the format when rendered in the input.
	   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
	   * @default "dense"
	   */
	  formatDensity: PropTypes.oneOf(['dense', 'spacious']),
	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType$1,
	  /**
	   * The label content.
	   */
	  label: PropTypes.node,
	  /**
	   * Locale for components texts.
	   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
	   */
	  localeText: PropTypes.object,
	  /**
	   * Maximal selectable time.
	   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
	   */
	  maxTime: PropTypes.any,
	  /**
	   * Minimal selectable time.
	   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
	   */
	  minTime: PropTypes.any,
	  /**
	   * Step over minutes.
	   * @default 1
	   */
	  minutesStep: PropTypes.number,
	  /**
	   * Name attribute used by the `input` element in the Field.
	   */
	  name: PropTypes.string,
	  /**
	   * Callback fired when the value is accepted.
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TValue} value The value that was just accepted.
	   */
	  onAccept: PropTypes.func,
	  /**
	   * Callback fired when the value changes.
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TValue} value The new value.
	   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
	   */
	  onChange: PropTypes.func,
	  /**
	   * Callback fired when the popup requests to be closed.
	   * Use in controlled mode (see `open`).
	   */
	  onClose: PropTypes.func,
	  /**
	   * Callback fired when the error associated to the current value changes.
	   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
	   *
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TError} error The new error describing why the current value is not valid.
	   * @param {TValue} value The value associated to the error.
	   */
	  onError: PropTypes.func,
	  /**
	   * Callback fired when the popup requests to be opened.
	   * Use in controlled mode (see `open`).
	   */
	  onOpen: PropTypes.func,
	  /**
	   * Callback fired when the selected sections change.
	   * @param {FieldSelectedSections} newValue The new selected sections.
	   */
	  onSelectedSectionsChange: PropTypes.func,
	  /**
	   * Callback fired on view change.
	   * @template TView
	   * @param {TView} view The new view.
	   */
	  onViewChange: PropTypes.func,
	  /**
	   * Control the popup or dialog open state.
	   * @default false
	   */
	  open: PropTypes.bool,
	  /**
	   * The default visible view.
	   * Used when the component view is not controlled.
	   * Must be a valid option from `views` list.
	   */
	  openTo: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),
	  /**
	   * Force rendering in particular orientation.
	   */
	  orientation: PropTypes.oneOf(['landscape', 'portrait']),
	  readOnly: PropTypes.bool,
	  /**
	   * If `true`, disable heavy animations.
	   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
	   */
	  reduceAnimations: PropTypes.bool,
	  /**
	   * The date used to generate the new value when both `value` and `defaultValue` are empty.
	   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
	   */
	  referenceDate: PropTypes.any,
	  /**
	   * The currently selected sections.
	   * This prop accept four formats:
	   * 1. If a number is provided, the section at this index will be selected.
	   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
	   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
	   * 4. If `null` is provided, no section will be selected
	   * If not provided, the selected sections will be handled internally.
	   */
	  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({
	    endIndex: PropTypes.number.isRequired,
	    startIndex: PropTypes.number.isRequired
	  })]),
	  /**
	   * Disable specific clock time.
	   * @param {number} clockValue The value to check.
	   * @param {TimeView} view The clock type of the timeValue.
	   * @returns {boolean} If `true` the time will be disabled.
	   * @deprecated Consider using `shouldDisableTime`.
	   */
	  shouldDisableClock: PropTypes.func,
	  /**
	   * Disable specific time.
	   * @template TDate
	   * @param {TDate} value The value to check.
	   * @param {TimeView} view The clock type of the timeValue.
	   * @returns {boolean} If `true` the time will be disabled.
	   */
	  shouldDisableTime: PropTypes.func,
	  /**
	   * If `true`, disabled digital clock items will not be rendered.
	   * @default false
	   */
	  skipDisabled: PropTypes.bool,
	  /**
	   * The props used for each component slot.
	   * @default {}
	   */
	  slotProps: PropTypes.object,
	  /**
	   * Overridable component slots.
	   * @default {}
	   */
	  slots: PropTypes.object,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * Amount of time options below or at which the single column time renderer is used.
	   * @default 24
	   */
	  thresholdToRenderTimeInASingleColumn: PropTypes.number,
	  /**
	   * The time steps between two time unit options.
	   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.
	   * When single column time renderer is used, only `timeStep.minutes` will be used.
	   * @default{ hours: 1, minutes: 5, seconds: 5 }
	   */
	  timeSteps: PropTypes.shape({
	    hours: PropTypes.number,
	    minutes: PropTypes.number,
	    seconds: PropTypes.number
	  }),
	  /**
	   * Choose which timezone to use for the value.
	   * Example: "default", "system", "UTC", "America/New_York".
	   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
	   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.
	   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
	   */
	  timezone: PropTypes.string,
	  /**
	   * The selected value.
	   * Used when the component is controlled.
	   */
	  value: PropTypes.any,
	  /**
	   * The visible view.
	   * Used when the component view is controlled.
	   * Must be a valid option from `views` list.
	   */
	  view: PropTypes.oneOf(['hours', 'meridiem', 'minutes', 'seconds']),
	  /**
	   * Define custom view renderers for each section.
	   * If `null`, the section will only have field editing.
	   * If `undefined`, internally defined view will be the used.
	   */
	  viewRenderers: PropTypes.shape({
	    hours: PropTypes.func,
	    meridiem: PropTypes.func,
	    minutes: PropTypes.func,
	    seconds: PropTypes.func
	  }),
	  /**
	   * Available views.
	   */
	  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)
	};

	/**
	 * Demos:
	 *
	 * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)
	 * - [Validation](https://mui.com/x/react-date-pickers/validation/)
	 *
	 * API:
	 *
	 * - [MobileTimePicker API](https://mui.com/x/api/date-pickers/mobile-time-picker/)
	 */
	const MobileTimePicker = /*#__PURE__*/reactExports.forwardRef(function MobileTimePicker(inProps, ref) {
	  var _defaultizedProps$amp, _defaultizedProps$slo2, _props$localeText$ope, _props$localeText;
	  const localeText = useLocaleText();
	  const utils = useUtils();

	  // Props with the default values common to all time pickers
	  const defaultizedProps = useTimePickerDefaultizedProps(inProps, 'MuiMobileTimePicker');
	  const viewRenderers = _extends({
	    hours: renderTimeViewClock,
	    minutes: renderTimeViewClock,
	    seconds: renderTimeViewClock
	  }, defaultizedProps.viewRenderers);
	  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : false;

	  // Props with the default values specific to the mobile variant
	  const props = _extends({}, defaultizedProps, {
	    ampmInClock,
	    viewRenderers,
	    format: resolveTimeFormat(utils, defaultizedProps),
	    slots: _extends({
	      field: TimeField
	    }, defaultizedProps.slots),
	    slotProps: _extends({}, defaultizedProps.slotProps, {
	      field: ownerState => {
	        var _defaultizedProps$slo;
	        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
	          ref
	        });
	      },
	      toolbar: _extends({
	        hidden: false,
	        ampmInClock
	      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar)
	    })
	  });
	  const {
	    renderPicker
	  } = useMobilePicker({
	    props,
	    valueManager: singleItemValueManager,
	    valueType: 'time',
	    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openTimePickerDialogue) != null ? _props$localeText$ope : localeText.openTimePickerDialogue,
	    validator: validateTime
	  });
	  return renderPicker();
	});
	MobileTimePicker.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // | To update them edit the TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------
	  /**
	   * 12h/24h view for hour selection clock.
	   * @default `utils.is12HourCycleInCurrentLocale()`
	   */
	  ampm: PropTypes.bool,
	  /**
	   * Display ampm controls under the clock (instead of in the toolbar).
	   * @default true on desktop, false on mobile
	   */
	  ampmInClock: PropTypes.bool,
	  /**
	   * If `true`, the main element is focused during the first mount.
	   * This main element is:
	   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
	   * - the `input` element if there is a field rendered.
	   */
	  autoFocus: PropTypes.bool,
	  /**
	   * Class name applied to the root element.
	   */
	  className: PropTypes.string,
	  /**
	   * If `true`, the popover or modal will close after submitting the full date.
	   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
	   */
	  closeOnSelect: PropTypes.bool,
	  /**
	   * Overridable components.
	   * @default {}
	   * @deprecated Please use `slots`.
	   */
	  components: PropTypes.object,
	  /**
	   * The props used for each component slot.
	   * @default {}
	   * @deprecated Please use `slotProps`.
	   */
	  componentsProps: PropTypes.object,
	  /**
	   * The default value.
	   * Used when the component is not controlled.
	   */
	  defaultValue: PropTypes.any,
	  /**
	   * If `true`, the picker and text field are disabled.
	   * @default false
	   */
	  disabled: PropTypes.bool,
	  /**
	   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
	   * @default false
	   */
	  disableFuture: PropTypes.bool,
	  /**
	   * Do not ignore date part when validating min/max time.
	   * @default false
	   */
	  disableIgnoringDatePartForTimeValidation: PropTypes.bool,
	  /**
	   * If `true`, the open picker button will not be rendered (renders only the field).
	   * @default false
	   */
	  disableOpenPicker: PropTypes.bool,
	  /**
	   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
	   * @default false
	   */
	  disablePast: PropTypes.bool,
	  /**
	   * Format of the date when rendered in the input(s).
	   * Defaults to localized format based on the used `views`.
	   */
	  format: PropTypes.string,
	  /**
	   * Density of the format when rendered in the input.
	   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
	   * @default "dense"
	   */
	  formatDensity: PropTypes.oneOf(['dense', 'spacious']),
	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType$1,
	  /**
	   * The label content.
	   */
	  label: PropTypes.node,
	  /**
	   * Locale for components texts.
	   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
	   */
	  localeText: PropTypes.object,
	  /**
	   * Maximal selectable time.
	   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
	   */
	  maxTime: PropTypes.any,
	  /**
	   * Minimal selectable time.
	   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
	   */
	  minTime: PropTypes.any,
	  /**
	   * Step over minutes.
	   * @default 1
	   */
	  minutesStep: PropTypes.number,
	  /**
	   * Name attribute used by the `input` element in the Field.
	   */
	  name: PropTypes.string,
	  /**
	   * Callback fired when the value is accepted.
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TValue} value The value that was just accepted.
	   */
	  onAccept: PropTypes.func,
	  /**
	   * Callback fired when the value changes.
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TValue} value The new value.
	   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
	   */
	  onChange: PropTypes.func,
	  /**
	   * Callback fired when the popup requests to be closed.
	   * Use in controlled mode (see `open`).
	   */
	  onClose: PropTypes.func,
	  /**
	   * Callback fired when the error associated to the current value changes.
	   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
	   *
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TError} error The new error describing why the current value is not valid.
	   * @param {TValue} value The value associated to the error.
	   */
	  onError: PropTypes.func,
	  /**
	   * Callback fired when the popup requests to be opened.
	   * Use in controlled mode (see `open`).
	   */
	  onOpen: PropTypes.func,
	  /**
	   * Callback fired when the selected sections change.
	   * @param {FieldSelectedSections} newValue The new selected sections.
	   */
	  onSelectedSectionsChange: PropTypes.func,
	  /**
	   * Callback fired on view change.
	   * @template TView
	   * @param {TView} view The new view.
	   */
	  onViewChange: PropTypes.func,
	  /**
	   * Control the popup or dialog open state.
	   * @default false
	   */
	  open: PropTypes.bool,
	  /**
	   * The default visible view.
	   * Used when the component view is not controlled.
	   * Must be a valid option from `views` list.
	   */
	  openTo: PropTypes.oneOf(['hours', 'minutes', 'seconds']),
	  /**
	   * Force rendering in particular orientation.
	   */
	  orientation: PropTypes.oneOf(['landscape', 'portrait']),
	  readOnly: PropTypes.bool,
	  /**
	   * If `true`, disable heavy animations.
	   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
	   */
	  reduceAnimations: PropTypes.bool,
	  /**
	   * The date used to generate the new value when both `value` and `defaultValue` are empty.
	   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
	   */
	  referenceDate: PropTypes.any,
	  /**
	   * The currently selected sections.
	   * This prop accept four formats:
	   * 1. If a number is provided, the section at this index will be selected.
	   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
	   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
	   * 4. If `null` is provided, no section will be selected
	   * If not provided, the selected sections will be handled internally.
	   */
	  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({
	    endIndex: PropTypes.number.isRequired,
	    startIndex: PropTypes.number.isRequired
	  })]),
	  /**
	   * Disable specific clock time.
	   * @param {number} clockValue The value to check.
	   * @param {TimeView} view The clock type of the timeValue.
	   * @returns {boolean} If `true` the time will be disabled.
	   * @deprecated Consider using `shouldDisableTime`.
	   */
	  shouldDisableClock: PropTypes.func,
	  /**
	   * Disable specific time.
	   * @template TDate
	   * @param {TDate} value The value to check.
	   * @param {TimeView} view The clock type of the timeValue.
	   * @returns {boolean} If `true` the time will be disabled.
	   */
	  shouldDisableTime: PropTypes.func,
	  /**
	   * The props used for each component slot.
	   * @default {}
	   */
	  slotProps: PropTypes.object,
	  /**
	   * Overridable component slots.
	   * @default {}
	   */
	  slots: PropTypes.object,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * Choose which timezone to use for the value.
	   * Example: "default", "system", "UTC", "America/New_York".
	   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
	   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.
	   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
	   */
	  timezone: PropTypes.string,
	  /**
	   * The selected value.
	   * Used when the component is controlled.
	   */
	  value: PropTypes.any,
	  /**
	   * The visible view.
	   * Used when the component view is controlled.
	   * Must be a valid option from `views` list.
	   */
	  view: PropTypes.oneOf(['hours', 'minutes', 'seconds']),
	  /**
	   * Define custom view renderers for each section.
	   * If `null`, the section will only have field editing.
	   * If `undefined`, internally defined view will be the used.
	   */
	  viewRenderers: PropTypes.shape({
	    hours: PropTypes.func,
	    minutes: PropTypes.func,
	    seconds: PropTypes.func
	  }),
	  /**
	   * Available views.
	   */
	  views: PropTypes.arrayOf(PropTypes.oneOf(['hours', 'minutes', 'seconds']).isRequired)
	};

	const _excluded$2 = ["desktopModeMediaQuery"];
	/**
	 * Demos:
	 *
	 * - [TimePicker](https://mui.com/x/react-date-pickers/time-picker/)
	 * - [Validation](https://mui.com/x/react-date-pickers/validation/)
	 *
	 * API:
	 *
	 * - [TimePicker API](https://mui.com/x/api/date-pickers/time-picker/)
	 */
	const TimePicker = /*#__PURE__*/reactExports.forwardRef(function TimePicker(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiTimePicker'
	  });
	  const {
	      desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$2);

	  // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)
	  const isDesktop = useMediaQuery(desktopModeMediaQuery, {
	    defaultMatches: true
	  });
	  if (isDesktop) {
	    return /*#__PURE__*/jsxRuntimeExports.jsx(DesktopTimePicker, _extends({
	      ref: ref
	    }, other));
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(MobileTimePicker, _extends({
	    ref: ref
	  }, other));
	});

	function getDateTimePickerTabsUtilityClass(slot) {
	  return generateUtilityClass('MuiDateTimePickerTabs', slot);
	}
	generateUtilityClasses('MuiDateTimePickerTabs', ['root']);

	const viewToTab = view => {
	  if (isDatePickerView(view)) {
	    return 'date';
	  }
	  return 'time';
	};
	const tabToView = tab => {
	  if (tab === 'date') {
	    return 'day';
	  }
	  return 'hours';
	};
	const useUtilityClasses$1 = ownerState => {
	  const {
	    classes
	  } = ownerState;
	  const slots = {
	    root: ['root']
	  };
	  return composeClasses(slots, getDateTimePickerTabsUtilityClass, classes);
	};
	const DateTimePickerTabsRoot = styled$1(Tabs$1, {
	  name: 'MuiDateTimePickerTabs',
	  slot: 'Root',
	  overridesResolver: (_, styles) => styles.root
	})(({
	  theme
	}) => ({
	  boxShadow: `0 -1px 0 0 inset ${(theme.vars || theme).palette.divider}`,
	  '&:last-child': {
	    boxShadow: `0 1px 0 0 inset ${(theme.vars || theme).palette.divider}`,
	    [`& .${tabsClasses$1.indicator}`]: {
	      bottom: 'auto',
	      top: 0
	    }
	  }
	}));

	/**
	 * Demos:
	 *
	 * - [DateTimePicker](https://mui.com/x/react-date-pickers/date-time-picker/)
	 * - [Custom slots and subcomponents](https://mui.com/x/react-date-pickers/custom-components/)
	 *
	 * API:
	 *
	 * - [DateTimePickerTabs API](https://mui.com/x/api/date-pickers/date-time-picker-tabs/)
	 */
	const DateTimePickerTabs = function DateTimePickerTabs(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDateTimePickerTabs'
	  });
	  const {
	    dateIcon = /*#__PURE__*/jsxRuntimeExports.jsx(DateRangeIcon, {}),
	    onViewChange,
	    timeIcon = /*#__PURE__*/jsxRuntimeExports.jsx(TimeIcon, {}),
	    view,
	    hidden = typeof window === 'undefined' || window.innerHeight < 667
	  } = props;
	  const localeText = useLocaleText();
	  const classes = useUtilityClasses$1(props);
	  const handleChange = (event, value) => {
	    onViewChange(tabToView(value));
	  };
	  if (hidden) {
	    return null;
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(DateTimePickerTabsRoot, {
	    ownerState: props,
	    variant: "fullWidth",
	    value: viewToTab(view),
	    onChange: handleChange,
	    className: classes.root,
	    children: [/*#__PURE__*/jsxRuntimeExports.jsx(Tab$1, {
	      value: "date",
	      "aria-label": localeText.dateTableLabel,
	      icon: /*#__PURE__*/jsxRuntimeExports.jsx(reactExports.Fragment, {
	        children: dateIcon
	      })
	    }), /*#__PURE__*/jsxRuntimeExports.jsx(Tab$1, {
	      value: "time",
	      "aria-label": localeText.timeTableLabel,
	      icon: /*#__PURE__*/jsxRuntimeExports.jsx(reactExports.Fragment, {
	        children: timeIcon
	      })
	    })]
	  });
	};

	function getDateTimePickerToolbarUtilityClass(slot) {
	  return generateUtilityClass('MuiDateTimePickerToolbar', slot);
	}
	const dateTimePickerToolbarClasses = generateUtilityClasses('MuiDateTimePickerToolbar', ['root', 'dateContainer', 'timeContainer', 'timeDigitsContainer', 'separator', 'timeLabelReverse', 'ampmSelection', 'ampmLandscape', 'ampmLabel']);

	const _excluded$1 = ["ampm", "ampmInClock", "value", "onChange", "view", "isLandscape", "onViewChange", "toolbarFormat", "toolbarPlaceholder", "views", "disabled", "readOnly", "toolbarVariant"];
	const useUtilityClasses = ownerState => {
	  const {
	    classes,
	    theme,
	    isLandscape
	  } = ownerState;
	  const slots = {
	    root: ['root'],
	    dateContainer: ['dateContainer'],
	    timeContainer: ['timeContainer', theme.direction === 'rtl' && 'timeLabelReverse'],
	    timeDigitsContainer: ['timeDigitsContainer', theme.direction === 'rtl' && 'timeLabelReverse'],
	    separator: ['separator'],
	    ampmSelection: ['ampmSelection', isLandscape && 'ampmLandscape'],
	    ampmLabel: ['ampmLabel']
	  };
	  return composeClasses(slots, getDateTimePickerToolbarUtilityClass, classes);
	};
	const DateTimePickerToolbarRoot = styled$1(PickersToolbar, {
	  name: 'MuiDateTimePickerToolbar',
	  slot: 'Root',
	  overridesResolver: (props, styles) => styles.root
	})(({
	  theme,
	  ownerState
	}) => ({
	  paddingLeft: ownerState.toolbarVariant === 'desktop' && !ownerState.isLandscape ? 24 : 16,
	  paddingRight: ownerState.toolbarVariant === 'desktop' && !ownerState.isLandscape ? 0 : 16,
	  borderBottom: ownerState.toolbarVariant === 'desktop' ? `1px solid ${(theme.vars || theme).palette.divider}` : undefined,
	  borderRight: ownerState.toolbarVariant === 'desktop' && ownerState.isLandscape ? `1px solid ${(theme.vars || theme).palette.divider}` : undefined,
	  justifyContent: 'space-around',
	  position: 'relative'
	}));
	DateTimePickerToolbarRoot.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // | To update them edit the TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------
	  as: PropTypes.elementType,
	  classes: PropTypes.object,
	  className: PropTypes.string,
	  isLandscape: PropTypes.bool.isRequired,
	  isMobileKeyboardViewOpen: PropTypes.bool,
	  landscapeDirection: PropTypes.oneOf(['column', 'row']),
	  ownerState: PropTypes.object.isRequired,
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  toggleMobileKeyboardView: PropTypes.func,
	  toolbarTitle: PropTypes.node,
	  viewType: PropTypes.oneOf(['date', 'time'])
	};
	const DateTimePickerToolbarDateContainer = styled$1('div', {
	  name: 'MuiDateTimePickerToolbar',
	  slot: 'DateContainer',
	  overridesResolver: (props, styles) => styles.dateContainer
	})({
	  display: 'flex',
	  flexDirection: 'column',
	  alignItems: 'flex-start'
	});
	const DateTimePickerToolbarTimeContainer = styled$1('div', {
	  name: 'MuiDateTimePickerToolbar',
	  slot: 'TimeContainer',
	  overridesResolver: (props, styles) => styles.timeContainer
	})(({
	  theme,
	  ownerState
	}) => {
	  const direction = ownerState.isLandscape && ownerState.toolbarVariant !== 'desktop' ? 'column' : 'row';
	  return _extends({
	    display: 'flex',
	    flexDirection: direction
	  }, ownerState.toolbarVariant === 'desktop' && _extends({}, !ownerState.isLandscape && {
	    gap: 9,
	    marginRight: 4,
	    alignSelf: 'flex-end'
	  }), theme.direction === 'rtl' && {
	    flexDirection: `${direction}-reverse`
	  });
	});
	const DateTimePickerToolbarTimeDigitsContainer = styled$1('div', {
	  name: 'MuiDateTimePickerToolbar',
	  slot: 'TimeDigitsContainer',
	  overridesResolver: (props, styles) => styles.timeDigitsContainer
	})(({
	  theme,
	  ownerState
	}) => _extends({
	  display: 'flex'
	}, ownerState.toolbarVariant === 'desktop' && {
	  gap: 1.5
	}, theme.direction === 'rtl' && {
	  flexDirection: 'row-reverse'
	}));
	DateTimePickerToolbarTimeContainer.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // | To update them edit the TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------
	  as: PropTypes.elementType,
	  ownerState: PropTypes.object.isRequired,
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])
	};
	const DateTimePickerToolbarSeparator = styled$1(PickersToolbarText, {
	  name: 'MuiDateTimePickerToolbar',
	  slot: 'Separator',
	  overridesResolver: (props, styles) => styles.separator
	})(({
	  ownerState
	}) => ({
	  margin: ownerState.toolbarVariant === 'desktop' ? 0 : '0 4px 0 2px',
	  cursor: 'default'
	}));

	// Taken from TimePickerToolbar
	const DateTimePickerToolbarAmPmSelection = styled$1('div', {
	  name: 'MuiDateTimePickerToolbar',
	  slot: 'AmPmSelection',
	  overridesResolver: (props, styles) => [{
	    [`.${dateTimePickerToolbarClasses.ampmLabel}`]: styles.ampmLabel
	  }, {
	    [`&.${dateTimePickerToolbarClasses.ampmLandscape}`]: styles.ampmLandscape
	  }, styles.ampmSelection]
	})(({
	  ownerState
	}) => _extends({
	  display: 'flex',
	  flexDirection: 'column',
	  marginRight: 'auto',
	  marginLeft: 12
	}, ownerState.isLandscape && {
	  margin: '4px 0 auto',
	  flexDirection: 'row',
	  justifyContent: 'space-around',
	  width: '100%'
	}, {
	  [`& .${dateTimePickerToolbarClasses.ampmLabel}`]: {
	    fontSize: 17
	  }
	}));

	/**
	 * Demos:
	 *
	 * - [DateTimePicker](https://mui.com/x/react-date-pickers/date-time-picker/)
	 * - [Custom components](https://mui.com/x/react-date-pickers/custom-components/)
	 *
	 * API:
	 *
	 * - [DateTimePickerToolbar API](https://mui.com/x/api/date-pickers/date-time-picker-toolbar/)
	 */
	function DateTimePickerToolbar(inProps) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDateTimePickerToolbar'
	  });
	  const {
	      ampm,
	      ampmInClock,
	      value,
	      onChange,
	      view,
	      isLandscape,
	      onViewChange,
	      toolbarFormat,
	      toolbarPlaceholder = '––',
	      views,
	      disabled,
	      readOnly,
	      toolbarVariant = 'mobile'
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded$1);
	  const ownerState = props;
	  const utils = useUtils();
	  const {
	    meridiemMode,
	    handleMeridiemChange
	  } = useMeridiemMode(value, ampm, onChange);
	  const showAmPmControl = Boolean(ampm && !ampmInClock);
	  const isDesktop = toolbarVariant === 'desktop';
	  const localeText = useLocaleText();
	  const theme = useTheme();
	  const classes = useUtilityClasses(_extends({}, ownerState, {
	    theme
	  }));
	  const formatHours = time => ampm ? utils.format(time, 'hours12h') : utils.format(time, 'hours24h');
	  const dateText = reactExports.useMemo(() => {
	    if (!value) {
	      return toolbarPlaceholder;
	    }
	    if (toolbarFormat) {
	      return utils.formatByString(value, toolbarFormat);
	    }
	    return utils.format(value, 'shortDate');
	  }, [value, toolbarFormat, toolbarPlaceholder, utils]);
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(DateTimePickerToolbarRoot, _extends({
	    toolbarTitle: localeText.dateTimePickerToolbarTitle,
	    isLandscape: isLandscape,
	    className: classes.root
	  }, other, {
	    ownerState: ownerState,
	    children: [/*#__PURE__*/jsxRuntimeExports.jsxs(DateTimePickerToolbarDateContainer, {
	      className: classes.dateContainer,
	      ownerState: ownerState,
	      children: [views.includes('year') && /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButton, {
	        tabIndex: -1,
	        variant: "subtitle1",
	        onClick: () => onViewChange('year'),
	        selected: view === 'year',
	        value: value ? utils.format(value, 'year') : '–'
	      }), views.includes('day') && /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButton, {
	        tabIndex: -1,
	        variant: isDesktop ? 'h5' : 'h4',
	        onClick: () => onViewChange('day'),
	        selected: view === 'day',
	        value: dateText
	      })]
	    }), /*#__PURE__*/jsxRuntimeExports.jsxs(DateTimePickerToolbarTimeContainer, {
	      className: classes.timeContainer,
	      ownerState: ownerState,
	      children: [/*#__PURE__*/jsxRuntimeExports.jsxs(DateTimePickerToolbarTimeDigitsContainer, {
	        className: classes.timeDigitsContainer,
	        ownerState: ownerState,
	        children: [views.includes('hours') && /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButton, {
	          variant: isDesktop ? 'h5' : 'h3',
	          width: isDesktop && !isLandscape ? MULTI_SECTION_CLOCK_SECTION_WIDTH : undefined,
	          onClick: () => onViewChange('hours'),
	          selected: view === 'hours',
	          value: value ? formatHours(value) : '--'
	        }), views.includes('minutes') && /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	          children: [/*#__PURE__*/jsxRuntimeExports.jsx(DateTimePickerToolbarSeparator, {
	            variant: isDesktop ? 'h5' : 'h3',
	            value: ":",
	            className: classes.separator,
	            ownerState: ownerState
	          }), /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButton, {
	            variant: isDesktop ? 'h5' : 'h3',
	            width: isDesktop && !isLandscape ? MULTI_SECTION_CLOCK_SECTION_WIDTH : undefined,
	            onClick: () => onViewChange('minutes'),
	            selected: view === 'minutes',
	            value: value ? utils.format(value, 'minutes') : '--'
	          })]
	        }), views.includes('seconds') && /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	          children: [/*#__PURE__*/jsxRuntimeExports.jsx(DateTimePickerToolbarSeparator, {
	            variant: isDesktop ? 'h5' : 'h3',
	            value: ":",
	            className: classes.separator,
	            ownerState: ownerState
	          }), /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButton, {
	            variant: isDesktop ? 'h5' : 'h3',
	            width: isDesktop && !isLandscape ? MULTI_SECTION_CLOCK_SECTION_WIDTH : undefined,
	            onClick: () => onViewChange('seconds'),
	            selected: view === 'seconds',
	            value: value ? utils.format(value, 'seconds') : '--'
	          })]
	        })]
	      }), showAmPmControl && !isDesktop && /*#__PURE__*/jsxRuntimeExports.jsxs(DateTimePickerToolbarAmPmSelection, {
	        className: classes.ampmSelection,
	        ownerState: ownerState,
	        children: [/*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButton, {
	          variant: "subtitle2",
	          selected: meridiemMode === 'am',
	          typographyClassName: classes.ampmLabel,
	          value: formatMeridiem(utils, 'am'),
	          onClick: readOnly ? undefined : () => handleMeridiemChange('am'),
	          disabled: disabled
	        }), /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButton, {
	          variant: "subtitle2",
	          selected: meridiemMode === 'pm',
	          typographyClassName: classes.ampmLabel,
	          value: formatMeridiem(utils, 'pm'),
	          onClick: readOnly ? undefined : () => handleMeridiemChange('pm'),
	          disabled: disabled
	        })]
	      }), ampm && isDesktop && /*#__PURE__*/jsxRuntimeExports.jsx(PickersToolbarButton, {
	        variant: "h5",
	        onClick: () => onViewChange('meridiem'),
	        selected: view === 'meridiem',
	        value: value && meridiemMode ? formatMeridiem(utils, meridiemMode) : '--',
	        width: MULTI_SECTION_CLOCK_SECTION_WIDTH
	      })]
	    })]
	  }));
	}

	function useDateTimePickerDefaultizedProps(props, name) {
	  var _themeProps$ampm, _themeProps$slots, _themeProps$slotProps, _themeProps$orientati, _themeProps$disableIg, _themeProps$disableFu, _themeProps$disablePa, _themeProps$minDateTi, _themeProps$maxDateTi, _themeProps$minDateTi2, _themeProps$maxDateTi2;
	  const utils = useUtils();
	  const defaultDates = useDefaultDates();
	  const themeProps = useThemeProps({
	    props,
	    name
	  });
	  const ampm = (_themeProps$ampm = themeProps.ampm) != null ? _themeProps$ampm : utils.is12HourCycleInCurrentLocale();
	  const localeText = reactExports.useMemo(() => {
	    var _themeProps$localeTex;
	    if (((_themeProps$localeTex = themeProps.localeText) == null ? void 0 : _themeProps$localeTex.toolbarTitle) == null) {
	      return themeProps.localeText;
	    }
	    return _extends({}, themeProps.localeText, {
	      dateTimePickerToolbarTitle: themeProps.localeText.toolbarTitle
	    });
	  }, [themeProps.localeText]);
	  const slots = (_themeProps$slots = themeProps.slots) != null ? _themeProps$slots : uncapitalizeObjectKeys(themeProps.components);
	  const slotProps = (_themeProps$slotProps = themeProps.slotProps) != null ? _themeProps$slotProps : themeProps.componentsProps;
	  return _extends({}, themeProps, applyDefaultViewProps({
	    views: themeProps.views,
	    openTo: themeProps.openTo,
	    defaultViews: ['year', 'day', 'hours', 'minutes'],
	    defaultOpenTo: 'day'
	  }), {
	    ampm,
	    localeText,
	    orientation: (_themeProps$orientati = themeProps.orientation) != null ? _themeProps$orientati : 'portrait',
	    // TODO: Remove from public API
	    disableIgnoringDatePartForTimeValidation: (_themeProps$disableIg = themeProps.disableIgnoringDatePartForTimeValidation) != null ? _themeProps$disableIg : Boolean(themeProps.minDateTime || themeProps.maxDateTime ||
	    // allow time clock to correctly check time validity: https://github.com/mui/mui-x/issues/8520
	    themeProps.disablePast || themeProps.disableFuture),
	    disableFuture: (_themeProps$disableFu = themeProps.disableFuture) != null ? _themeProps$disableFu : false,
	    disablePast: (_themeProps$disablePa = themeProps.disablePast) != null ? _themeProps$disablePa : false,
	    minDate: applyDefaultDate(utils, (_themeProps$minDateTi = themeProps.minDateTime) != null ? _themeProps$minDateTi : themeProps.minDate, defaultDates.minDate),
	    maxDate: applyDefaultDate(utils, (_themeProps$maxDateTi = themeProps.maxDateTime) != null ? _themeProps$maxDateTi : themeProps.maxDate, defaultDates.maxDate),
	    minTime: (_themeProps$minDateTi2 = themeProps.minDateTime) != null ? _themeProps$minDateTi2 : themeProps.minTime,
	    maxTime: (_themeProps$maxDateTi2 = themeProps.maxDateTime) != null ? _themeProps$maxDateTi2 : themeProps.maxTime,
	    slots: _extends({
	      toolbar: DateTimePickerToolbar,
	      tabs: DateTimePickerTabs
	    }, slots),
	    slotProps: _extends({}, slotProps, {
	      toolbar: _extends({
	        ampm
	      }, slotProps == null ? void 0 : slotProps.toolbar)
	    })
	  });
	}

	const DateTimeViewWrapper = styled$1('div')({
	  display: 'flex',
	  margin: '0 auto'
	});

	const renderDesktopDateTimeView = ({
	  view,
	  onViewChange,
	  views,
	  focusedView,
	  onFocusedViewChange,
	  value,
	  defaultValue,
	  referenceDate,
	  onChange,
	  className,
	  classes,
	  disableFuture,
	  disablePast,
	  minDate,
	  minTime,
	  maxDate,
	  maxTime,
	  shouldDisableDate,
	  shouldDisableMonth,
	  shouldDisableYear,
	  shouldDisableTime,
	  shouldDisableClock,
	  reduceAnimations,
	  minutesStep,
	  ampm,
	  onMonthChange,
	  monthsPerRow,
	  onYearChange,
	  yearsPerRow,
	  defaultCalendarMonth,
	  components,
	  componentsProps,
	  slots,
	  slotProps,
	  loading,
	  renderLoading,
	  disableHighlightToday,
	  readOnly,
	  disabled,
	  showDaysOutsideCurrentMonth,
	  dayOfWeekFormatter,
	  sx,
	  autoFocus,
	  fixedWeekNumber,
	  displayWeekNumber,
	  timezone,
	  disableIgnoringDatePartForTimeValidation,
	  timeSteps,
	  skipDisabled,
	  timeViewsCount,
	  shouldRenderTimeInASingleColumn
	}) => {
	  var _resolveComponentProp, _slotProps$actionBar;
	  const isActionBarVisible = !!((_resolveComponentProp = resolveComponentProps((_slotProps$actionBar = slotProps == null ? void 0 : slotProps.actionBar) != null ? _slotProps$actionBar : componentsProps == null ? void 0 : componentsProps.actionBar, {})) != null && (_resolveComponentProp = _resolveComponentProp.actions) != null && _resolveComponentProp.length);
	  const commonTimeProps = {
	    view: isInternalTimeView(view) ? view : 'hours',
	    onViewChange,
	    focusedView: focusedView && isInternalTimeView(focusedView) ? focusedView : null,
	    onFocusedViewChange,
	    views: views.filter(isInternalTimeView),
	    value,
	    defaultValue,
	    referenceDate,
	    onChange,
	    className,
	    classes,
	    disableFuture,
	    disablePast,
	    minTime,
	    maxTime,
	    shouldDisableTime,
	    shouldDisableClock,
	    minutesStep,
	    ampm,
	    components,
	    componentsProps,
	    slots,
	    slotProps,
	    readOnly,
	    disabled,
	    autoFocus,
	    disableIgnoringDatePartForTimeValidation,
	    timeSteps,
	    skipDisabled,
	    timezone
	  };
	  return /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	    children: [/*#__PURE__*/jsxRuntimeExports.jsxs(DateTimeViewWrapper, {
	      children: [/*#__PURE__*/jsxRuntimeExports.jsx(DateCalendar, {
	        view: isDatePickerView(view) ? view : 'day',
	        onViewChange: onViewChange,
	        views: views.filter(isDatePickerView),
	        focusedView: focusedView && isDatePickerView(focusedView) ? focusedView : null,
	        onFocusedViewChange: onFocusedViewChange,
	        value: value,
	        defaultValue: defaultValue,
	        referenceDate: referenceDate,
	        onChange: onChange,
	        className: className,
	        classes: classes,
	        disableFuture: disableFuture,
	        disablePast: disablePast,
	        minDate: minDate,
	        maxDate: maxDate,
	        shouldDisableDate: shouldDisableDate,
	        shouldDisableMonth: shouldDisableMonth,
	        shouldDisableYear: shouldDisableYear,
	        reduceAnimations: reduceAnimations,
	        onMonthChange: onMonthChange,
	        monthsPerRow: monthsPerRow,
	        onYearChange: onYearChange,
	        yearsPerRow: yearsPerRow,
	        defaultCalendarMonth: defaultCalendarMonth,
	        components: components,
	        componentsProps: componentsProps,
	        slots: slots,
	        slotProps: slotProps,
	        loading: loading,
	        renderLoading: renderLoading,
	        disableHighlightToday: disableHighlightToday,
	        readOnly: readOnly,
	        disabled: disabled,
	        showDaysOutsideCurrentMonth: showDaysOutsideCurrentMonth,
	        dayOfWeekFormatter: dayOfWeekFormatter,
	        sx: sx,
	        autoFocus: autoFocus,
	        fixedWeekNumber: fixedWeekNumber,
	        displayWeekNumber: displayWeekNumber,
	        timezone: timezone
	      }), timeViewsCount > 0 && /*#__PURE__*/jsxRuntimeExports.jsxs(reactExports.Fragment, {
	        children: [/*#__PURE__*/jsxRuntimeExports.jsx(Divider$1, {
	          orientation: "vertical"
	        }), shouldRenderTimeInASingleColumn ? renderDigitalClockTimeView(_extends({}, commonTimeProps, {
	          view: 'hours',
	          views: ['hours'],
	          focusedView: focusedView && isInternalTimeView(focusedView) ? 'hours' : null,
	          sx: _extends({
	            width: 'auto',
	            [`&.${digitalClockClasses.root}`]: {
	              maxHeight: VIEW_HEIGHT
	            }
	          }, Array.isArray(sx) ? sx : [sx])
	        })) : renderMultiSectionDigitalClockTimeView(_extends({}, commonTimeProps, {
	          view: isInternalTimeView(view) ? view : 'hours',
	          views: views.filter(isInternalTimeView),
	          focusedView: focusedView && isInternalTimeView(focusedView) ? focusedView : null,
	          sx: _extends({
	            borderBottom: 0,
	            width: 'auto',
	            [`.${multiSectionDigitalClockSectionClasses.root}`]: {
	              maxHeight: '100%'
	            }
	          }, Array.isArray(sx) ? sx : [sx])
	        }))]
	      })]
	    }), isActionBarVisible && /*#__PURE__*/jsxRuntimeExports.jsx(Divider$1, {})]
	  });
	};

	/**
	 * Demos:
	 *
	 * - [DateTimePicker](https://mui.com/x/react-date-pickers/date-time-picker/)
	 * - [Validation](https://mui.com/x/react-date-pickers/validation/)
	 *
	 * API:
	 *
	 * - [DesktopDateTimePicker API](https://mui.com/x/api/date-pickers/desktop-date-time-picker/)
	 */
	const DesktopDateTimePicker = /*#__PURE__*/reactExports.forwardRef(function DesktopDateTimePicker(inProps, ref) {
	  var _defaultizedProps$amp, _defaultizedProps$yea, _defaultizedProps$slo2, _defaultizedProps$slo3, _defaultizedProps$slo4, _props$localeText$ope, _props$localeText;
	  const localeText = useLocaleText();
	  const utils = useUtils();

	  // Props with the default values common to all date time pickers
	  const defaultizedProps = useDateTimePickerDefaultizedProps(inProps, 'MuiDesktopDateTimePicker');
	  const {
	    shouldRenderTimeInASingleColumn,
	    thresholdToRenderTimeInASingleColumn,
	    views,
	    timeSteps
	  } = resolveTimeViewsResponse(defaultizedProps);
	  const shouldUseNewRenderer = !defaultizedProps.viewRenderers || Object.keys(defaultizedProps.viewRenderers).length === 0;
	  const viewRenderers =
	  // we can only ensure the expected two-column layout if none of the renderers are overridden
	  shouldUseNewRenderer ? {
	    day: renderDesktopDateTimeView,
	    month: renderDesktopDateTimeView,
	    year: renderDesktopDateTimeView,
	    hours: renderDesktopDateTimeView,
	    minutes: renderDesktopDateTimeView,
	    seconds: renderDesktopDateTimeView,
	    meridiem: renderDesktopDateTimeView
	  } : _extends({
	    day: renderDateViewCalendar,
	    month: renderDateViewCalendar,
	    year: renderDateViewCalendar,
	    hours: null,
	    minutes: null,
	    seconds: null,
	    meridiem: null
	  }, defaultizedProps.viewRenderers);
	  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : true;
	  // add "accept" action only when the new date time view renderers are used
	  const actionBarActions = shouldUseNewRenderer ? ['accept'] : [];

	  // Props with the default values specific to the desktop variant
	  const props = _extends({}, defaultizedProps, {
	    viewRenderers,
	    format: resolveDateTimeFormat(utils, defaultizedProps),
	    views,
	    yearsPerRow: (_defaultizedProps$yea = defaultizedProps.yearsPerRow) != null ? _defaultizedProps$yea : 4,
	    ampmInClock,
	    timeSteps,
	    thresholdToRenderTimeInASingleColumn,
	    shouldRenderTimeInASingleColumn,
	    slots: _extends({
	      field: DateTimeField,
	      openPickerIcon: CalendarIcon
	    }, defaultizedProps.slots),
	    slotProps: _extends({}, defaultizedProps.slotProps, {
	      field: ownerState => {
	        var _defaultizedProps$slo;
	        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
	          ref
	        });
	      },
	      toolbar: _extends({
	        hidden: true,
	        ampmInClock,
	        toolbarVariant: shouldUseNewRenderer ? 'desktop' : 'mobile'
	      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),
	      tabs: _extends({
	        hidden: true
	      }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.tabs),
	      actionBar: _extends({
	        actions: actionBarActions
	      }, (_defaultizedProps$slo4 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo4.actionBar)
	    })
	  });
	  const {
	    renderPicker
	  } = useDesktopPicker({
	    props,
	    valueManager: singleItemValueManager,
	    valueType: 'date-time',
	    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openDatePickerDialogue) != null ? _props$localeText$ope : localeText.openDatePickerDialogue,
	    validator: validateDateTime
	  });
	  return renderPicker();
	});
	DesktopDateTimePicker.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // | To update them edit the TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------
	  /**
	   * 12h/24h view for hour selection clock.
	   * @default `utils.is12HourCycleInCurrentLocale()`
	   */
	  ampm: PropTypes.bool,
	  /**
	   * Display ampm controls under the clock (instead of in the toolbar).
	   * @default true on desktop, false on mobile
	   */
	  ampmInClock: PropTypes.bool,
	  /**
	   * If `true`, the main element is focused during the first mount.
	   * This main element is:
	   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
	   * - the `input` element if there is a field rendered.
	   */
	  autoFocus: PropTypes.bool,
	  /**
	   * Class name applied to the root element.
	   */
	  className: PropTypes.string,
	  /**
	   * If `true`, the popover or modal will close after submitting the full date.
	   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
	   */
	  closeOnSelect: PropTypes.bool,
	  /**
	   * Overridable components.
	   * @default {}
	   * @deprecated Please use `slots`.
	   */
	  components: PropTypes.object,
	  /**
	   * The props used for each component slot.
	   * @default {}
	   * @deprecated Please use `slotProps`.
	   */
	  componentsProps: PropTypes.object,
	  /**
	   * Formats the day of week displayed in the calendar header.
	   * @param {string} day The day of week provided by the adapter.  Deprecated, will be removed in v7: Use `date` instead.
	   * @param {TDate} date The date of the day of week provided by the adapter.
	   * @returns {string} The name to display.
	   * @default (_day: string, date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
	   */
	  dayOfWeekFormatter: PropTypes.func,
	  /**
	   * Default calendar month displayed when `value` and `defaultValue` are empty.
	   * @deprecated Consider using `referenceDate` instead.
	   */
	  defaultCalendarMonth: PropTypes.any,
	  /**
	   * The default value.
	   * Used when the component is not controlled.
	   */
	  defaultValue: PropTypes.any,
	  /**
	   * If `true`, the picker and text field are disabled.
	   * @default false
	   */
	  disabled: PropTypes.bool,
	  /**
	   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
	   * @default false
	   */
	  disableFuture: PropTypes.bool,
	  /**
	   * If `true`, today's date is rendering without highlighting with circle.
	   * @default false
	   */
	  disableHighlightToday: PropTypes.bool,
	  /**
	   * Do not ignore date part when validating min/max time.
	   * @default false
	   */
	  disableIgnoringDatePartForTimeValidation: PropTypes.bool,
	  /**
	   * If `true`, the open picker button will not be rendered (renders only the field).
	   * @default false
	   */
	  disableOpenPicker: PropTypes.bool,
	  /**
	   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
	   * @default false
	   */
	  disablePast: PropTypes.bool,
	  /**
	   * If `true`, the week number will be display in the calendar.
	   */
	  displayWeekNumber: PropTypes.bool,
	  /**
	   * Calendar will show more weeks in order to match this value.
	   * Put it to 6 for having fix number of week in Gregorian calendars
	   * @default undefined
	   */
	  fixedWeekNumber: PropTypes.number,
	  /**
	   * Format of the date when rendered in the input(s).
	   * Defaults to localized format based on the used `views`.
	   */
	  format: PropTypes.string,
	  /**
	   * Density of the format when rendered in the input.
	   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
	   * @default "dense"
	   */
	  formatDensity: PropTypes.oneOf(['dense', 'spacious']),
	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType$1,
	  /**
	   * The label content.
	   */
	  label: PropTypes.node,
	  /**
	   * If `true`, calls `renderLoading` instead of rendering the day calendar.
	   * Can be used to preload information and show it in calendar.
	   * @default false
	   */
	  loading: PropTypes.bool,
	  /**
	   * Locale for components texts.
	   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
	   */
	  localeText: PropTypes.object,
	  /**
	   * Maximal selectable date.
	   */
	  maxDate: PropTypes.any,
	  /**
	   * Maximal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
	   */
	  maxDateTime: PropTypes.any,
	  /**
	   * Maximal selectable time.
	   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
	   */
	  maxTime: PropTypes.any,
	  /**
	   * Minimal selectable date.
	   */
	  minDate: PropTypes.any,
	  /**
	   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
	   */
	  minDateTime: PropTypes.any,
	  /**
	   * Minimal selectable time.
	   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
	   */
	  minTime: PropTypes.any,
	  /**
	   * Step over minutes.
	   * @default 1
	   */
	  minutesStep: PropTypes.number,
	  /**
	   * Months rendered per row.
	   * @default 3
	   */
	  monthsPerRow: PropTypes.oneOf([3, 4]),
	  /**
	   * Name attribute used by the `input` element in the Field.
	   */
	  name: PropTypes.string,
	  /**
	   * Callback fired when the value is accepted.
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TValue} value The value that was just accepted.
	   */
	  onAccept: PropTypes.func,
	  /**
	   * Callback fired when the value changes.
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TValue} value The new value.
	   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
	   */
	  onChange: PropTypes.func,
	  /**
	   * Callback fired when the popup requests to be closed.
	   * Use in controlled mode (see `open`).
	   */
	  onClose: PropTypes.func,
	  /**
	   * Callback fired when the error associated to the current value changes.
	   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
	   *
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TError} error The new error describing why the current value is not valid.
	   * @param {TValue} value The value associated to the error.
	   */
	  onError: PropTypes.func,
	  /**
	   * Callback fired on month change.
	   * @template TDate
	   * @param {TDate} month The new month.
	   */
	  onMonthChange: PropTypes.func,
	  /**
	   * Callback fired when the popup requests to be opened.
	   * Use in controlled mode (see `open`).
	   */
	  onOpen: PropTypes.func,
	  /**
	   * Callback fired when the selected sections change.
	   * @param {FieldSelectedSections} newValue The new selected sections.
	   */
	  onSelectedSectionsChange: PropTypes.func,
	  /**
	   * Callback fired on view change.
	   * @template TView
	   * @param {TView} view The new view.
	   */
	  onViewChange: PropTypes.func,
	  /**
	   * Callback fired on year change.
	   * @template TDate
	   * @param {TDate} year The new year.
	   */
	  onYearChange: PropTypes.func,
	  /**
	   * Control the popup or dialog open state.
	   * @default false
	   */
	  open: PropTypes.bool,
	  /**
	   * The default visible view.
	   * Used when the component view is not controlled.
	   * Must be a valid option from `views` list.
	   */
	  openTo: PropTypes.oneOf(['day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'year']),
	  /**
	   * Force rendering in particular orientation.
	   */
	  orientation: PropTypes.oneOf(['landscape', 'portrait']),
	  readOnly: PropTypes.bool,
	  /**
	   * If `true`, disable heavy animations.
	   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
	   */
	  reduceAnimations: PropTypes.bool,
	  /**
	   * The date used to generate the new value when both `value` and `defaultValue` are empty.
	   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
	   */
	  referenceDate: PropTypes.any,
	  /**
	   * Component displaying when passed `loading` true.
	   * @returns {React.ReactNode} The node to render when loading.
	   * @default () => <span data-mui-test="loading-progress">...</span>
	   */
	  renderLoading: PropTypes.func,
	  /**
	   * The currently selected sections.
	   * This prop accept four formats:
	   * 1. If a number is provided, the section at this index will be selected.
	   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
	   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
	   * 4. If `null` is provided, no section will be selected
	   * If not provided, the selected sections will be handled internally.
	   */
	  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({
	    endIndex: PropTypes.number.isRequired,
	    startIndex: PropTypes.number.isRequired
	  })]),
	  /**
	   * Disable specific clock time.
	   * @param {number} clockValue The value to check.
	   * @param {TimeView} view The clock type of the timeValue.
	   * @returns {boolean} If `true` the time will be disabled.
	   * @deprecated Consider using `shouldDisableTime`.
	   */
	  shouldDisableClock: PropTypes.func,
	  /**
	   * Disable specific date.
	   *
	   * Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
	   *
	   * @template TDate
	   * @param {TDate} day The date to test.
	   * @returns {boolean} If `true` the date will be disabled.
	   */
	  shouldDisableDate: PropTypes.func,
	  /**
	   * Disable specific month.
	   * @template TDate
	   * @param {TDate} month The month to test.
	   * @returns {boolean} If `true`, the month will be disabled.
	   */
	  shouldDisableMonth: PropTypes.func,
	  /**
	   * Disable specific time.
	   * @template TDate
	   * @param {TDate} value The value to check.
	   * @param {TimeView} view The clock type of the timeValue.
	   * @returns {boolean} If `true` the time will be disabled.
	   */
	  shouldDisableTime: PropTypes.func,
	  /**
	   * Disable specific year.
	   * @template TDate
	   * @param {TDate} year The year to test.
	   * @returns {boolean} If `true`, the year will be disabled.
	   */
	  shouldDisableYear: PropTypes.func,
	  /**
	   * If `true`, days outside the current month are rendered:
	   *
	   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
	   *
	   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
	   *
	   * - ignored if `calendars` equals more than `1` on range pickers.
	   * @default false
	   */
	  showDaysOutsideCurrentMonth: PropTypes.bool,
	  /**
	   * If `true`, disabled digital clock items will not be rendered.
	   * @default false
	   */
	  skipDisabled: PropTypes.bool,
	  /**
	   * The props used for each component slot.
	   * @default {}
	   */
	  slotProps: PropTypes.object,
	  /**
	   * Overridable component slots.
	   * @default {}
	   */
	  slots: PropTypes.object,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * Amount of time options below or at which the single column time renderer is used.
	   * @default 24
	   */
	  thresholdToRenderTimeInASingleColumn: PropTypes.number,
	  /**
	   * The time steps between two time unit options.
	   * For example, if `timeStep.minutes = 8`, then the available minute options will be `[0, 8, 16, 24, 32, 40, 48, 56]`.
	   * When single column time renderer is used, only `timeStep.minutes` will be used.
	   * @default{ hours: 1, minutes: 5, seconds: 5 }
	   */
	  timeSteps: PropTypes.shape({
	    hours: PropTypes.number,
	    minutes: PropTypes.number,
	    seconds: PropTypes.number
	  }),
	  /**
	   * Choose which timezone to use for the value.
	   * Example: "default", "system", "UTC", "America/New_York".
	   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
	   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.
	   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
	   */
	  timezone: PropTypes.string,
	  /**
	   * The selected value.
	   * Used when the component is controlled.
	   */
	  value: PropTypes.any,
	  /**
	   * The visible view.
	   * Used when the component view is controlled.
	   * Must be a valid option from `views` list.
	   */
	  view: PropTypes.oneOf(['day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'year']),
	  /**
	   * Define custom view renderers for each section.
	   * If `null`, the section will only have field editing.
	   * If `undefined`, internally defined view will be the used.
	   */
	  viewRenderers: PropTypes.shape({
	    day: PropTypes.func,
	    hours: PropTypes.func,
	    meridiem: PropTypes.func,
	    minutes: PropTypes.func,
	    month: PropTypes.func,
	    seconds: PropTypes.func,
	    year: PropTypes.func
	  }),
	  /**
	   * Available views.
	   */
	  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']).isRequired),
	  /**
	   * Years rendered per row.
	   * @default 4
	   */
	  yearsPerRow: PropTypes.oneOf([3, 4])
	};

	/**
	 * Demos:
	 *
	 * - [DateTimePicker](https://mui.com/x/react-date-pickers/date-time-picker/)
	 * - [Validation](https://mui.com/x/react-date-pickers/validation/)
	 *
	 * API:
	 *
	 * - [MobileDateTimePicker API](https://mui.com/x/api/date-pickers/mobile-date-time-picker/)
	 */
	const MobileDateTimePicker = /*#__PURE__*/reactExports.forwardRef(function MobileDateTimePicker(inProps, ref) {
	  var _defaultizedProps$amp, _defaultizedProps$slo2, _defaultizedProps$slo3, _props$localeText$ope, _props$localeText;
	  const localeText = useLocaleText();
	  const utils = useUtils();

	  // Props with the default values common to all date time pickers
	  const defaultizedProps = useDateTimePickerDefaultizedProps(inProps, 'MuiMobileDateTimePicker');
	  const viewRenderers = _extends({
	    day: renderDateViewCalendar,
	    month: renderDateViewCalendar,
	    year: renderDateViewCalendar,
	    hours: renderTimeViewClock,
	    minutes: renderTimeViewClock,
	    seconds: renderTimeViewClock
	  }, defaultizedProps.viewRenderers);
	  const ampmInClock = (_defaultizedProps$amp = defaultizedProps.ampmInClock) != null ? _defaultizedProps$amp : false;

	  // Props with the default values specific to the mobile variant
	  const props = _extends({}, defaultizedProps, {
	    viewRenderers,
	    format: resolveDateTimeFormat(utils, defaultizedProps),
	    ampmInClock,
	    slots: _extends({
	      field: DateTimeField
	    }, defaultizedProps.slots),
	    slotProps: _extends({}, defaultizedProps.slotProps, {
	      field: ownerState => {
	        var _defaultizedProps$slo;
	        return _extends({}, resolveComponentProps((_defaultizedProps$slo = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo.field, ownerState), extractValidationProps(defaultizedProps), {
	          ref
	        });
	      },
	      toolbar: _extends({
	        hidden: false,
	        ampmInClock
	      }, (_defaultizedProps$slo2 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo2.toolbar),
	      tabs: _extends({
	        hidden: false
	      }, (_defaultizedProps$slo3 = defaultizedProps.slotProps) == null ? void 0 : _defaultizedProps$slo3.tabs)
	    })
	  });
	  const {
	    renderPicker
	  } = useMobilePicker({
	    props,
	    valueManager: singleItemValueManager,
	    valueType: 'date-time',
	    getOpenDialogAriaText: (_props$localeText$ope = (_props$localeText = props.localeText) == null ? void 0 : _props$localeText.openDatePickerDialogue) != null ? _props$localeText$ope : localeText.openDatePickerDialogue,
	    validator: validateDateTime
	  });
	  return renderPicker();
	});
	MobileDateTimePicker.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // | To update them edit the TypeScript types and run "yarn proptypes"  |
	  // ----------------------------------------------------------------------
	  /**
	   * 12h/24h view for hour selection clock.
	   * @default `utils.is12HourCycleInCurrentLocale()`
	   */
	  ampm: PropTypes.bool,
	  /**
	   * Display ampm controls under the clock (instead of in the toolbar).
	   * @default true on desktop, false on mobile
	   */
	  ampmInClock: PropTypes.bool,
	  /**
	   * If `true`, the main element is focused during the first mount.
	   * This main element is:
	   * - the element chosen by the visible view if any (i.e: the selected day on the `day` view).
	   * - the `input` element if there is a field rendered.
	   */
	  autoFocus: PropTypes.bool,
	  /**
	   * Class name applied to the root element.
	   */
	  className: PropTypes.string,
	  /**
	   * If `true`, the popover or modal will close after submitting the full date.
	   * @default `true` for desktop, `false` for mobile (based on the chosen wrapper and `desktopModeMediaQuery` prop).
	   */
	  closeOnSelect: PropTypes.bool,
	  /**
	   * Overridable components.
	   * @default {}
	   * @deprecated Please use `slots`.
	   */
	  components: PropTypes.object,
	  /**
	   * The props used for each component slot.
	   * @default {}
	   * @deprecated Please use `slotProps`.
	   */
	  componentsProps: PropTypes.object,
	  /**
	   * Formats the day of week displayed in the calendar header.
	   * @param {string} day The day of week provided by the adapter.  Deprecated, will be removed in v7: Use `date` instead.
	   * @param {TDate} date The date of the day of week provided by the adapter.
	   * @returns {string} The name to display.
	   * @default (_day: string, date: TDate) => adapter.format(date, 'weekdayShort').charAt(0).toUpperCase()
	   */
	  dayOfWeekFormatter: PropTypes.func,
	  /**
	   * Default calendar month displayed when `value` and `defaultValue` are empty.
	   * @deprecated Consider using `referenceDate` instead.
	   */
	  defaultCalendarMonth: PropTypes.any,
	  /**
	   * The default value.
	   * Used when the component is not controlled.
	   */
	  defaultValue: PropTypes.any,
	  /**
	   * If `true`, the picker and text field are disabled.
	   * @default false
	   */
	  disabled: PropTypes.bool,
	  /**
	   * If `true`, disable values after the current date for date components, time for time components and both for date time components.
	   * @default false
	   */
	  disableFuture: PropTypes.bool,
	  /**
	   * If `true`, today's date is rendering without highlighting with circle.
	   * @default false
	   */
	  disableHighlightToday: PropTypes.bool,
	  /**
	   * Do not ignore date part when validating min/max time.
	   * @default false
	   */
	  disableIgnoringDatePartForTimeValidation: PropTypes.bool,
	  /**
	   * If `true`, the open picker button will not be rendered (renders only the field).
	   * @default false
	   */
	  disableOpenPicker: PropTypes.bool,
	  /**
	   * If `true`, disable values before the current date for date components, time for time components and both for date time components.
	   * @default false
	   */
	  disablePast: PropTypes.bool,
	  /**
	   * If `true`, the week number will be display in the calendar.
	   */
	  displayWeekNumber: PropTypes.bool,
	  /**
	   * Calendar will show more weeks in order to match this value.
	   * Put it to 6 for having fix number of week in Gregorian calendars
	   * @default undefined
	   */
	  fixedWeekNumber: PropTypes.number,
	  /**
	   * Format of the date when rendered in the input(s).
	   * Defaults to localized format based on the used `views`.
	   */
	  format: PropTypes.string,
	  /**
	   * Density of the format when rendered in the input.
	   * Setting `formatDensity` to `"spacious"` will add a space before and after each `/`, `-` and `.` character.
	   * @default "dense"
	   */
	  formatDensity: PropTypes.oneOf(['dense', 'spacious']),
	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType$1,
	  /**
	   * The label content.
	   */
	  label: PropTypes.node,
	  /**
	   * If `true`, calls `renderLoading` instead of rendering the day calendar.
	   * Can be used to preload information and show it in calendar.
	   * @default false
	   */
	  loading: PropTypes.bool,
	  /**
	   * Locale for components texts.
	   * Allows overriding texts coming from `LocalizationProvider` and `theme`.
	   */
	  localeText: PropTypes.object,
	  /**
	   * Maximal selectable date.
	   */
	  maxDate: PropTypes.any,
	  /**
	   * Maximal selectable moment of time with binding to date, to set max time in each day use `maxTime`.
	   */
	  maxDateTime: PropTypes.any,
	  /**
	   * Maximal selectable time.
	   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
	   */
	  maxTime: PropTypes.any,
	  /**
	   * Minimal selectable date.
	   */
	  minDate: PropTypes.any,
	  /**
	   * Minimal selectable moment of time with binding to date, to set min time in each day use `minTime`.
	   */
	  minDateTime: PropTypes.any,
	  /**
	   * Minimal selectable time.
	   * The date part of the object will be ignored unless `props.disableIgnoringDatePartForTimeValidation === true`.
	   */
	  minTime: PropTypes.any,
	  /**
	   * Step over minutes.
	   * @default 1
	   */
	  minutesStep: PropTypes.number,
	  /**
	   * Months rendered per row.
	   * @default 3
	   */
	  monthsPerRow: PropTypes.oneOf([3, 4]),
	  /**
	   * Name attribute used by the `input` element in the Field.
	   */
	  name: PropTypes.string,
	  /**
	   * Callback fired when the value is accepted.
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TValue} value The value that was just accepted.
	   */
	  onAccept: PropTypes.func,
	  /**
	   * Callback fired when the value changes.
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TValue} value The new value.
	   * @param {FieldChangeHandlerContext<TError>} context The context containing the validation result of the current value.
	   */
	  onChange: PropTypes.func,
	  /**
	   * Callback fired when the popup requests to be closed.
	   * Use in controlled mode (see `open`).
	   */
	  onClose: PropTypes.func,
	  /**
	   * Callback fired when the error associated to the current value changes.
	   * If the error has a non-null value, then the `TextField` will be rendered in `error` state.
	   *
	   * @template TValue The value type. Will be either the same type as `value` or `null`. Can be in `[start, end]` format in case of range value.
	   * @template TError The validation error type. Will be either `string` or a `null`. Can be in `[start, end]` format in case of range value.
	   * @param {TError} error The new error describing why the current value is not valid.
	   * @param {TValue} value The value associated to the error.
	   */
	  onError: PropTypes.func,
	  /**
	   * Callback fired on month change.
	   * @template TDate
	   * @param {TDate} month The new month.
	   */
	  onMonthChange: PropTypes.func,
	  /**
	   * Callback fired when the popup requests to be opened.
	   * Use in controlled mode (see `open`).
	   */
	  onOpen: PropTypes.func,
	  /**
	   * Callback fired when the selected sections change.
	   * @param {FieldSelectedSections} newValue The new selected sections.
	   */
	  onSelectedSectionsChange: PropTypes.func,
	  /**
	   * Callback fired on view change.
	   * @template TView
	   * @param {TView} view The new view.
	   */
	  onViewChange: PropTypes.func,
	  /**
	   * Callback fired on year change.
	   * @template TDate
	   * @param {TDate} year The new year.
	   */
	  onYearChange: PropTypes.func,
	  /**
	   * Control the popup or dialog open state.
	   * @default false
	   */
	  open: PropTypes.bool,
	  /**
	   * The default visible view.
	   * Used when the component view is not controlled.
	   * Must be a valid option from `views` list.
	   */
	  openTo: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']),
	  /**
	   * Force rendering in particular orientation.
	   */
	  orientation: PropTypes.oneOf(['landscape', 'portrait']),
	  readOnly: PropTypes.bool,
	  /**
	   * If `true`, disable heavy animations.
	   * @default `@media(prefers-reduced-motion: reduce)` || `navigator.userAgent` matches Android <10 or iOS <13
	   */
	  reduceAnimations: PropTypes.bool,
	  /**
	   * The date used to generate the new value when both `value` and `defaultValue` are empty.
	   * @default The closest valid date-time using the validation props, except callbacks like `shouldDisable<...>`.
	   */
	  referenceDate: PropTypes.any,
	  /**
	   * Component displaying when passed `loading` true.
	   * @returns {React.ReactNode} The node to render when loading.
	   * @default () => <span data-mui-test="loading-progress">...</span>
	   */
	  renderLoading: PropTypes.func,
	  /**
	   * The currently selected sections.
	   * This prop accept four formats:
	   * 1. If a number is provided, the section at this index will be selected.
	   * 2. If an object with a `startIndex` and `endIndex` properties are provided, the sections between those two indexes will be selected.
	   * 3. If a string of type `FieldSectionType` is provided, the first section with that name will be selected.
	   * 4. If `null` is provided, no section will be selected
	   * If not provided, the selected sections will be handled internally.
	   */
	  selectedSections: PropTypes.oneOfType([PropTypes.oneOf(['all', 'day', 'hours', 'meridiem', 'minutes', 'month', 'seconds', 'weekDay', 'year']), PropTypes.number, PropTypes.shape({
	    endIndex: PropTypes.number.isRequired,
	    startIndex: PropTypes.number.isRequired
	  })]),
	  /**
	   * Disable specific clock time.
	   * @param {number} clockValue The value to check.
	   * @param {TimeView} view The clock type of the timeValue.
	   * @returns {boolean} If `true` the time will be disabled.
	   * @deprecated Consider using `shouldDisableTime`.
	   */
	  shouldDisableClock: PropTypes.func,
	  /**
	   * Disable specific date.
	   *
	   * Warning: This function can be called multiple times (e.g. when rendering date calendar, checking if focus can be moved to a certain date, etc.). Expensive computations can impact performance.
	   *
	   * @template TDate
	   * @param {TDate} day The date to test.
	   * @returns {boolean} If `true` the date will be disabled.
	   */
	  shouldDisableDate: PropTypes.func,
	  /**
	   * Disable specific month.
	   * @template TDate
	   * @param {TDate} month The month to test.
	   * @returns {boolean} If `true`, the month will be disabled.
	   */
	  shouldDisableMonth: PropTypes.func,
	  /**
	   * Disable specific time.
	   * @template TDate
	   * @param {TDate} value The value to check.
	   * @param {TimeView} view The clock type of the timeValue.
	   * @returns {boolean} If `true` the time will be disabled.
	   */
	  shouldDisableTime: PropTypes.func,
	  /**
	   * Disable specific year.
	   * @template TDate
	   * @param {TDate} year The year to test.
	   * @returns {boolean} If `true`, the year will be disabled.
	   */
	  shouldDisableYear: PropTypes.func,
	  /**
	   * If `true`, days outside the current month are rendered:
	   *
	   * - if `fixedWeekNumber` is defined, renders days to have the weeks requested.
	   *
	   * - if `fixedWeekNumber` is not defined, renders day to fill the first and last week of the current month.
	   *
	   * - ignored if `calendars` equals more than `1` on range pickers.
	   * @default false
	   */
	  showDaysOutsideCurrentMonth: PropTypes.bool,
	  /**
	   * The props used for each component slot.
	   * @default {}
	   */
	  slotProps: PropTypes.object,
	  /**
	   * Overridable component slots.
	   * @default {}
	   */
	  slots: PropTypes.object,
	  /**
	   * The system prop that allows defining system overrides as well as additional CSS styles.
	   */
	  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),
	  /**
	   * Choose which timezone to use for the value.
	   * Example: "default", "system", "UTC", "America/New_York".
	   * If you pass values from other timezones to some props, they will be converted to this timezone before being used.
	   * @see See the {@link https://mui.com/x/react-date-pickers/timezone/ timezones documention} for more details.
	   * @default The timezone of the `value` or `defaultValue` prop is defined, 'default' otherwise.
	   */
	  timezone: PropTypes.string,
	  /**
	   * The selected value.
	   * Used when the component is controlled.
	   */
	  value: PropTypes.any,
	  /**
	   * The visible view.
	   * Used when the component view is controlled.
	   * Must be a valid option from `views` list.
	   */
	  view: PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']),
	  /**
	   * Define custom view renderers for each section.
	   * If `null`, the section will only have field editing.
	   * If `undefined`, internally defined view will be the used.
	   */
	  viewRenderers: PropTypes.shape({
	    day: PropTypes.func,
	    hours: PropTypes.func,
	    minutes: PropTypes.func,
	    month: PropTypes.func,
	    seconds: PropTypes.func,
	    year: PropTypes.func
	  }),
	  /**
	   * Available views.
	   */
	  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'hours', 'minutes', 'month', 'seconds', 'year']).isRequired),
	  /**
	   * Years rendered per row.
	   * @default 3
	   */
	  yearsPerRow: PropTypes.oneOf([3, 4])
	};

	const _excluded = ["desktopModeMediaQuery"];
	/**
	 * Demos:
	 *
	 * - [DateTimePicker](https://mui.com/x/react-date-pickers/date-time-picker/)
	 * - [Validation](https://mui.com/x/react-date-pickers/validation/)
	 *
	 * API:
	 *
	 * - [DateTimePicker API](https://mui.com/x/api/date-pickers/date-time-picker/)
	 */
	const DateTimePicker = /*#__PURE__*/reactExports.forwardRef(function DateTimePicker(inProps, ref) {
	  const props = useThemeProps({
	    props: inProps,
	    name: 'MuiDateTimePicker'
	  });
	  const {
	      desktopModeMediaQuery = DEFAULT_DESKTOP_MODE_MEDIA_QUERY
	    } = props,
	    other = _objectWithoutPropertiesLoose(props, _excluded);

	  // defaults to `true` in environments where `window.matchMedia` would not be available (i.e. test/jsdom)
	  const isDesktop = useMediaQuery(desktopModeMediaQuery, {
	    defaultMatches: true
	  });
	  if (isDesktop) {
	    return /*#__PURE__*/jsxRuntimeExports.jsx(DesktopDateTimePicker, _extends({
	      ref: ref
	    }, other));
	  }
	  return /*#__PURE__*/jsxRuntimeExports.jsx(MobileDateTimePicker, _extends({
	    ref: ref
	  }, other));
	});

	var weekOfYear$1 = {exports: {}};

	(function (module, exports) {
		!function (e, t) {
		  module.exports = t() ;
		}(commonjsGlobal, function () {

		  var e = "week",
		    t = "year";
		  return function (i, n, r) {
		    var f = n.prototype;
		    f.week = function (i) {
		      if (void 0 === i && (i = null), null !== i) return this.add(7 * (i - this.week()), "day");
		      var n = this.$locale().yearStart || 1;
		      if (11 === this.month() && this.date() > 25) {
		        var f = r(this).startOf(t).add(1, t).date(n),
		          s = r(this).endOf(e);
		        if (f.isBefore(s)) return 1;
		      }
		      var a = r(this).startOf(t).date(n).startOf(e).subtract(1, "millisecond"),
		        o = this.diff(a, e, !0);
		      return o < 0 ? r(this).startOf("week").week() : Math.ceil(o);
		    }, f.weeks = function (e) {
		      return void 0 === e && (e = null), this.week(e);
		    };
		  };
		}); 
	} (weekOfYear$1));

	var weekOfYearExports = weekOfYear$1.exports;
	var weekOfYear = /*@__PURE__*/getDefaultExportFromCjs(weekOfYearExports);

	var localizedFormat = {exports: {}};

	(function (module, exports) {
		!function (e, t) {
		  module.exports = t() ;
		}(commonjsGlobal, function () {

		  var e = {
		    LTS: "h:mm:ss A",
		    LT: "h:mm A",
		    L: "MM/DD/YYYY",
		    LL: "MMMM D, YYYY",
		    LLL: "MMMM D, YYYY h:mm A",
		    LLLL: "dddd, MMMM D, YYYY h:mm A"
		  };
		  return function (t, o, n) {
		    var r = o.prototype,
		      i = r.format;
		    n.en.formats = e, r.format = function (t) {
		      void 0 === t && (t = "YYYY-MM-DDTHH:mm:ssZ");
		      var o = this.$locale().formats,
		        n = function (t, o) {
		          return t.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (t, n, r) {
		            var i = r && r.toUpperCase();
		            return n || o[r] || e[r] || o[i].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (e, t, o) {
		              return t || o.slice(1);
		            });
		          });
		        }(t, void 0 === o ? {} : o);
		      return i.call(this, n);
		    };
		  };
		}); 
	} (localizedFormat));

	var localizedFormatExports = localizedFormat.exports;
	var localizedFormatPlugin = /*@__PURE__*/getDefaultExportFromCjs(localizedFormatExports);

	var isBetween = {exports: {}};

	(function (module, exports) {
		!function (e, i) {
		  module.exports = i() ;
		}(commonjsGlobal, function () {

		  return function (e, i, t) {
		    i.prototype.isBetween = function (e, i, s, f) {
		      var n = t(e),
		        o = t(i),
		        r = "(" === (f = f || "()")[0],
		        u = ")" === f[1];
		      return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
		    };
		  };
		}); 
	} (isBetween));

	var isBetweenExports = isBetween.exports;
	var isBetweenPlugin = /*@__PURE__*/getDefaultExportFromCjs(isBetweenExports);

	dayjs.extend(customParsing);
	dayjs.extend(localizedFormatPlugin);
	dayjs.extend(isBetweenPlugin);
	const localeNotFoundWarning = buildWarning(['Your locale has not been found.', 'Either the locale key is not a supported one. Locales supported by dayjs are available here: https://github.com/iamkun/dayjs/tree/dev/src/locale', "Or you forget to import the locale from 'dayjs/locale/{localeUsed}'", 'fallback on English locale']);
	const formatTokenMap = {
	  // Year
	  YY: 'year',
	  YYYY: {
	    sectionType: 'year',
	    contentType: 'digit',
	    maxLength: 4
	  },
	  // Month
	  M: {
	    sectionType: 'month',
	    contentType: 'digit',
	    maxLength: 2
	  },
	  MM: 'month',
	  MMM: {
	    sectionType: 'month',
	    contentType: 'letter'
	  },
	  MMMM: {
	    sectionType: 'month',
	    contentType: 'letter'
	  },
	  // Day of the month
	  D: {
	    sectionType: 'day',
	    contentType: 'digit',
	    maxLength: 2
	  },
	  DD: 'day',
	  Do: {
	    sectionType: 'day',
	    contentType: 'digit-with-letter'
	  },
	  // Day of the week
	  d: {
	    sectionType: 'weekDay',
	    contentType: 'digit',
	    maxLength: 2
	  },
	  dd: {
	    sectionType: 'weekDay',
	    contentType: 'letter'
	  },
	  ddd: {
	    sectionType: 'weekDay',
	    contentType: 'letter'
	  },
	  dddd: {
	    sectionType: 'weekDay',
	    contentType: 'letter'
	  },
	  // Meridiem
	  A: 'meridiem',
	  a: 'meridiem',
	  // Hours
	  H: {
	    sectionType: 'hours',
	    contentType: 'digit',
	    maxLength: 2
	  },
	  HH: 'hours',
	  h: {
	    sectionType: 'hours',
	    contentType: 'digit',
	    maxLength: 2
	  },
	  hh: 'hours',
	  // Minutes
	  m: {
	    sectionType: 'minutes',
	    contentType: 'digit',
	    maxLength: 2
	  },
	  mm: 'minutes',
	  // Seconds
	  s: {
	    sectionType: 'seconds',
	    contentType: 'digit',
	    maxLength: 2
	  },
	  ss: 'seconds'
	};
	const defaultFormats = {
	  year: 'YYYY',
	  month: 'MMMM',
	  monthShort: 'MMM',
	  dayOfMonth: 'D',
	  weekday: 'dddd',
	  weekdayShort: 'dd',
	  hours24h: 'HH',
	  hours12h: 'hh',
	  meridiem: 'A',
	  minutes: 'mm',
	  seconds: 'ss',
	  fullDate: 'll',
	  fullDateWithWeekday: 'dddd, LL',
	  keyboardDate: 'L',
	  shortDate: 'MMM D',
	  normalDate: 'D MMMM',
	  normalDateWithWeekday: 'ddd, MMM D',
	  monthAndYear: 'MMMM YYYY',
	  monthAndDate: 'MMMM D',
	  fullTime: 'LT',
	  fullTime12h: 'hh:mm A',
	  fullTime24h: 'HH:mm',
	  fullDateTime: 'lll',
	  fullDateTime12h: 'll hh:mm A',
	  fullDateTime24h: 'll HH:mm',
	  keyboardDateTime: 'L LT',
	  keyboardDateTime12h: 'L hh:mm A',
	  keyboardDateTime24h: 'L HH:mm'
	};
	const MISSING_UTC_PLUGIN = ['Missing UTC plugin', 'To be able to use UTC or timezones, you have to enable the `utc` plugin', 'Find more information on https://mui.com/x/react-date-pickers/timezone/#day-js-and-utc'].join('\n');
	const MISSING_TIMEZONE_PLUGIN = ['Missing timezone plugin', 'To be able to use timezones, you have to enable both the `utc` and the `timezone` plugin', 'Find more information on https://mui.com/x/react-date-pickers/timezone/#day-js-and-timezone'].join('\n');
	const withLocale = (dayjs, locale) => !locale ? dayjs : (...args) => dayjs(...args).locale(locale);

	/**
	 * Based on `@date-io/dayjs`
	 *
	 * MIT License
	 *
	 * Copyright (c) 2017 Dmitriy Kovalenko
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 */
	class AdapterDayjs {
	  constructor({
	    locale: _locale,
	    formats,
	    instance
	  } = {}) {
	    var _this$rawDayJsInstanc;
	    this.isMUIAdapter = true;
	    this.isTimezoneCompatible = true;
	    this.lib = 'dayjs';
	    this.rawDayJsInstance = void 0;
	    this.dayjs = void 0;
	    this.locale = void 0;
	    this.formats = void 0;
	    this.escapedCharacters = {
	      start: '[',
	      end: ']'
	    };
	    this.formatTokenMap = formatTokenMap;
	    this.setLocaleToValue = value => {
	      const expectedLocale = this.getCurrentLocaleCode();
	      if (expectedLocale === value.locale()) {
	        return value;
	      }
	      return value.locale(expectedLocale);
	    };
	    this.hasUTCPlugin = () => typeof dayjs.utc !== 'undefined';
	    this.hasTimezonePlugin = () => typeof dayjs.tz !== 'undefined';
	    this.isSame = (value, comparing, comparisonTemplate) => {
	      const comparingInValueTimezone = this.setTimezone(comparing, this.getTimezone(value));
	      return value.format(comparisonTemplate) === comparingInValueTimezone.format(comparisonTemplate);
	    };
	    /**
	     * Replaces "default" by undefined and "system" by the system timezone before passing it to `dayjs`.
	     */
	    this.cleanTimezone = timezone => {
	      switch (timezone) {
	        case 'default':
	          {
	            return undefined;
	          }
	        case 'system':
	          {
	            return dayjs.tz.guess();
	          }
	        default:
	          {
	            return timezone;
	          }
	      }
	    };
	    this.createSystemDate = value => {
	      // TODO v7: Stop using `this.rawDayJsInstance` (drop the `instance` param on the adapters)
	      /* istanbul ignore next */
	      if (this.rawDayJsInstance) {
	        return this.rawDayJsInstance(value);
	      }
	      if (this.hasUTCPlugin() && this.hasTimezonePlugin()) {
	        const timezone = dayjs.tz.guess();

	        // We can't change the system timezone in the tests
	        /* istanbul ignore next */
	        if (timezone !== 'UTC') {
	          return dayjs.tz(value, timezone);
	        }
	        return dayjs(value);
	      }
	      return dayjs(value);
	    };
	    this.createUTCDate = value => {
	      /* istanbul ignore next */
	      if (!this.hasUTCPlugin()) {
	        throw new Error(MISSING_UTC_PLUGIN);
	      }
	      return dayjs.utc(value);
	    };
	    this.createTZDate = (value, timezone) => {
	      /* istanbul ignore next */
	      if (!this.hasUTCPlugin()) {
	        throw new Error(MISSING_UTC_PLUGIN);
	      }

	      /* istanbul ignore next */
	      if (!this.hasTimezonePlugin()) {
	        throw new Error(MISSING_TIMEZONE_PLUGIN);
	      }
	      const keepLocalTime = value !== undefined && !value.endsWith('Z');
	      return dayjs(value).tz(this.cleanTimezone(timezone), keepLocalTime);
	    };
	    this.getLocaleFormats = () => {
	      const locales = dayjs.Ls;
	      const locale = this.locale || 'en';
	      let localeObject = locales[locale];
	      if (localeObject === undefined) {
	        localeNotFoundWarning();
	        localeObject = locales.en;
	      }
	      return localeObject.formats;
	    };
	    /**
	     * If the new day does not have the same offset as the old one (when switching to summer day time for example),
	     * Then dayjs will not automatically adjust the offset (moment does).
	     * We have to parse again the value to make sure the `fixOffset` method is applied.
	     * See https://github.com/iamkun/dayjs/blob/b3624de619d6e734cd0ffdbbd3502185041c1b60/src/plugin/timezone/index.js#L72
	     */
	    this.adjustOffset = value => {
	      if (!this.hasTimezonePlugin()) {
	        return value;
	      }
	      const timezone = this.getTimezone(value);
	      if (timezone !== 'UTC') {
	        var _fixedValue$$offset, _value$$offset;
	        const fixedValue = value.tz(this.cleanTimezone(timezone), true);
	        // @ts-ignore
	        if (((_fixedValue$$offset = fixedValue.$offset) != null ? _fixedValue$$offset : 0) === ((_value$$offset = value.$offset) != null ? _value$$offset : 0)) {
	          return value;
	        }
	        return fixedValue;
	      }
	      return value;
	    };
	    this.date = value => {
	      if (value === null) {
	        return null;
	      }
	      return this.dayjs(value);
	    };
	    this.dateWithTimezone = (value, timezone) => {
	      if (value === null) {
	        return null;
	      }
	      let parsedValue;
	      if (timezone === 'UTC') {
	        parsedValue = this.createUTCDate(value);
	      } else if (timezone === 'system' || timezone === 'default' && !this.hasTimezonePlugin()) {
	        parsedValue = this.createSystemDate(value);
	      } else {
	        parsedValue = this.createTZDate(value, timezone);
	      }
	      if (this.locale === undefined) {
	        return parsedValue;
	      }
	      return parsedValue.locale(this.locale);
	    };
	    this.getTimezone = value => {
	      if (this.hasTimezonePlugin()) {
	        var _value$$x;
	        // @ts-ignore
	        const zone = (_value$$x = value.$x) == null ? void 0 : _value$$x.$timezone;
	        if (zone) {
	          return zone;
	        }
	      }
	      if (this.hasUTCPlugin() && value.isUTC()) {
	        return 'UTC';
	      }
	      return 'system';
	    };
	    this.setTimezone = (value, timezone) => {
	      if (this.getTimezone(value) === timezone) {
	        return value;
	      }
	      if (timezone === 'UTC') {
	        /* istanbul ignore next */
	        if (!this.hasUTCPlugin()) {
	          throw new Error(MISSING_UTC_PLUGIN);
	        }
	        return value.utc();
	      }

	      // We know that we have the UTC plugin.
	      // Otherwise, the value timezone would always equal "system".
	      // And it would be caught by the first "if" of this method.
	      if (timezone === 'system') {
	        return value.local();
	      }
	      if (!this.hasTimezonePlugin()) {
	        if (timezone === 'default') {
	          return value;
	        }

	        /* istanbul ignore next */
	        throw new Error(MISSING_TIMEZONE_PLUGIN);
	      }
	      return dayjs.tz(value, this.cleanTimezone(timezone));
	    };
	    this.toJsDate = value => {
	      return value.toDate();
	    };
	    this.parseISO = isoString => {
	      return this.dayjs(isoString);
	    };
	    this.toISO = value => {
	      return value.toISOString();
	    };
	    this.parse = (value, format) => {
	      if (value === '') {
	        return null;
	      }
	      return this.dayjs(value, format, this.locale, true);
	    };
	    this.getCurrentLocaleCode = () => {
	      return this.locale || 'en';
	    };
	    this.is12HourCycleInCurrentLocale = () => {
	      /* istanbul ignore next */
	      return /A|a/.test(this.getLocaleFormats().LT || '');
	    };
	    this.expandFormat = format => {
	      const localeFormats = this.getLocaleFormats();

	      // @see https://github.com/iamkun/dayjs/blob/dev/src/plugin/localizedFormat/index.js
	      const t = formatBis => formatBis.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, (_, a, b) => a || b.slice(1));
	      return format.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, (_, a, b) => {
	        const B = b && b.toUpperCase();
	        return a || localeFormats[b] || t(localeFormats[B]);
	      });
	    };
	    this.getFormatHelperText = format => {
	      return this.expandFormat(format).replace(/a/gi, '(a|p)m').toLocaleLowerCase();
	    };
	    this.isNull = value => {
	      return value === null;
	    };
	    this.isValid = value => {
	      return this.dayjs(value).isValid();
	    };
	    this.format = (value, formatKey) => {
	      return this.formatByString(value, this.formats[formatKey]);
	    };
	    this.formatByString = (value, formatString) => {
	      return this.dayjs(value).format(formatString);
	    };
	    this.formatNumber = numberToFormat => {
	      return numberToFormat;
	    };
	    this.getDiff = (value, comparing, unit) => {
	      return value.diff(comparing, unit);
	    };
	    this.isEqual = (value, comparing) => {
	      if (value === null && comparing === null) {
	        return true;
	      }
	      return this.dayjs(value).toDate().getTime() === this.dayjs(comparing).toDate().getTime();
	    };
	    this.isSameYear = (value, comparing) => {
	      return this.isSame(value, comparing, 'YYYY');
	    };
	    this.isSameMonth = (value, comparing) => {
	      return this.isSame(value, comparing, 'YYYY-MM');
	    };
	    this.isSameDay = (value, comparing) => {
	      return this.isSame(value, comparing, 'YYYY-MM-DD');
	    };
	    this.isSameHour = (value, comparing) => {
	      return value.isSame(comparing, 'hour');
	    };
	    this.isAfter = (value, comparing) => {
	      return value > comparing;
	    };
	    this.isAfterYear = (value, comparing) => {
	      if (!this.hasUTCPlugin()) {
	        return value.isAfter(comparing, 'year');
	      }
	      return !this.isSameYear(value, comparing) && value.utc() > comparing.utc();
	    };
	    this.isAfterDay = (value, comparing) => {
	      if (!this.hasUTCPlugin()) {
	        return value.isAfter(comparing, 'day');
	      }
	      return !this.isSameDay(value, comparing) && value.utc() > comparing.utc();
	    };
	    this.isBefore = (value, comparing) => {
	      return value < comparing;
	    };
	    this.isBeforeYear = (value, comparing) => {
	      if (!this.hasUTCPlugin()) {
	        return value.isBefore(comparing, 'year');
	      }
	      return !this.isSameYear(value, comparing) && value.utc() < comparing.utc();
	    };
	    this.isBeforeDay = (value, comparing) => {
	      if (!this.hasUTCPlugin()) {
	        return value.isBefore(comparing, 'day');
	      }
	      return !this.isSameDay(value, comparing) && value.utc() < comparing.utc();
	    };
	    this.isWithinRange = (value, [start, end]) => {
	      return value >= start && value <= end;
	    };
	    this.startOfYear = value => {
	      return this.adjustOffset(value.startOf('year'));
	    };
	    this.startOfMonth = value => {
	      return this.adjustOffset(value.startOf('month'));
	    };
	    this.startOfWeek = value => {
	      return this.adjustOffset(value.startOf('week'));
	    };
	    this.startOfDay = value => {
	      return this.adjustOffset(value.startOf('day'));
	    };
	    this.endOfYear = value => {
	      return this.adjustOffset(value.endOf('year'));
	    };
	    this.endOfMonth = value => {
	      return this.adjustOffset(value.endOf('month'));
	    };
	    this.endOfWeek = value => {
	      return this.adjustOffset(value.endOf('week'));
	    };
	    this.endOfDay = value => {
	      return this.adjustOffset(value.endOf('day'));
	    };
	    this.addYears = (value, amount) => {
	      return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'year') : value.add(amount, 'year'));
	    };
	    this.addMonths = (value, amount) => {
	      return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'month') : value.add(amount, 'month'));
	    };
	    this.addWeeks = (value, amount) => {
	      return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'week') : value.add(amount, 'week'));
	    };
	    this.addDays = (value, amount) => {
	      return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'day') : value.add(amount, 'day'));
	    };
	    this.addHours = (value, amount) => {
	      return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'hour') : value.add(amount, 'hour'));
	    };
	    this.addMinutes = (value, amount) => {
	      return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'minute') : value.add(amount, 'minute'));
	    };
	    this.addSeconds = (value, amount) => {
	      return this.adjustOffset(amount < 0 ? value.subtract(Math.abs(amount), 'second') : value.add(amount, 'second'));
	    };
	    this.getYear = value => {
	      return value.year();
	    };
	    this.getMonth = value => {
	      return value.month();
	    };
	    this.getDate = value => {
	      return value.date();
	    };
	    this.getHours = value => {
	      return value.hour();
	    };
	    this.getMinutes = value => {
	      return value.minute();
	    };
	    this.getSeconds = value => {
	      return value.second();
	    };
	    this.getMilliseconds = value => {
	      return value.millisecond();
	    };
	    this.setYear = (value, year) => {
	      return this.adjustOffset(value.set('year', year));
	    };
	    this.setMonth = (value, month) => {
	      return this.adjustOffset(value.set('month', month));
	    };
	    this.setDate = (value, date) => {
	      return this.adjustOffset(value.set('date', date));
	    };
	    this.setHours = (value, hours) => {
	      return this.adjustOffset(value.set('hour', hours));
	    };
	    this.setMinutes = (value, minutes) => {
	      return this.adjustOffset(value.set('minute', minutes));
	    };
	    this.setSeconds = (value, seconds) => {
	      return this.adjustOffset(value.set('second', seconds));
	    };
	    this.setMilliseconds = (value, milliseconds) => {
	      return this.adjustOffset(value.set('millisecond', milliseconds));
	    };
	    this.getDaysInMonth = value => {
	      return value.daysInMonth();
	    };
	    this.getNextMonth = value => {
	      return this.addMonths(value, 1);
	    };
	    this.getPreviousMonth = value => {
	      return this.addMonths(value, -1);
	    };
	    this.getMonthArray = value => {
	      const firstMonth = value.startOf('year');
	      const monthArray = [firstMonth];
	      while (monthArray.length < 12) {
	        const prevMonth = monthArray[monthArray.length - 1];
	        monthArray.push(this.addMonths(prevMonth, 1));
	      }
	      return monthArray;
	    };
	    this.mergeDateAndTime = (dateParam, timeParam) => {
	      return dateParam.hour(timeParam.hour()).minute(timeParam.minute()).second(timeParam.second());
	    };
	    this.getWeekdays = () => {
	      const start = this.dayjs().startOf('week');
	      return [0, 1, 2, 3, 4, 5, 6].map(diff => this.formatByString(this.addDays(start, diff), 'dd'));
	    };
	    this.getWeekArray = value => {
	      const cleanValue = this.setLocaleToValue(value);
	      const start = cleanValue.startOf('month').startOf('week');
	      const end = cleanValue.endOf('month').endOf('week');
	      let count = 0;
	      let current = start;
	      const nestedWeeks = [];
	      while (current < end) {
	        const weekNumber = Math.floor(count / 7);
	        nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
	        nestedWeeks[weekNumber].push(current);
	        current = this.addDays(current, 1);
	        count += 1;
	      }
	      return nestedWeeks;
	    };
	    this.getWeekNumber = value => {
	      return value.week();
	    };
	    this.getYearRange = (start, end) => {
	      const startDate = start.startOf('year');
	      const endDate = end.endOf('year');
	      const years = [];
	      let current = startDate;
	      while (current < endDate) {
	        years.push(current);
	        current = this.addYears(current, 1);
	      }
	      return years;
	    };
	    this.getMeridiemText = ampm => {
	      return ampm === 'am' ? 'AM' : 'PM';
	    };
	    this.rawDayJsInstance = instance;
	    this.dayjs = withLocale((_this$rawDayJsInstanc = this.rawDayJsInstance) != null ? _this$rawDayJsInstanc : dayjs, _locale);
	    this.locale = _locale;
	    this.formats = _extends({}, defaultFormats, formats);
	    dayjs.extend(weekOfYear);
	  }
	}

	var ExpandMore = {};

	var _interopRequireDefault = interopRequireDefaultExports;
	Object.defineProperty(ExpandMore, "__esModule", {
	  value: true
	});
	var default_1 = ExpandMore.default = void 0;
	var _createSvgIcon = _interopRequireDefault(requireCreateSvgIcon());
	var _jsxRuntime = requireJsxRuntime();
	var _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
	  d: "M16.59 8.59 12 13.17 7.41 8.59 6 10l6 6 6-6z"
	}), 'ExpandMore');
	default_1 = ExpandMore.default = _default;

	const MaterialAllOfRenderer = ({
	  schema,
	  rootSchema,
	  visible,
	  renderers,
	  cells,
	  path,
	  uischemas,
	  uischema
	}) => {
	  const delegateUISchema = findMatchingUISchema(uischemas)(schema, uischema.scope, path);
	  if (delegateUISchema) {
	    return /*#__PURE__*/React.createElement(Hidden, {
	      xsUp: !visible
	    }, /*#__PURE__*/React.createElement(JsonFormsDispatch, {
	      schema: schema,
	      uischema: delegateUISchema,
	      path: path,
	      renderers: renderers,
	      cells: cells
	    }));
	  }
	  const allOfRenderInfos = createCombinatorRenderInfos(schema.allOf, rootSchema, 'allOf', uischema, path, uischemas);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, allOfRenderInfos.map((allOfRenderInfo, allOfIndex) => ( /*#__PURE__*/React.createElement(JsonFormsDispatch, {
	    key: allOfIndex,
	    schema: allOfRenderInfo.schema,
	    uischema: allOfRenderInfo.uischema,
	    path: path,
	    renderers: renderers,
	    cells: cells
	  }))));
	};
	const materialAllOfControlTester = rankWith(3, isAllOfControl);
	var MaterialAllOfRenderer$1 = withJsonFormsAllOfProps(MaterialAllOfRenderer);
	class CombinatorProperties extends React.Component {
	  render() {
	    const {
	      schema,
	      combinatorKeyword,
	      path
	    } = this.props;
	    const otherProps = omit$1(schema, combinatorKeyword);
	    const foundUISchema = Generate.uiSchema(otherProps, 'VerticalLayout');
	    let isLayoutWithElements = false;
	    if (foundUISchema !== null && isLayout(foundUISchema)) {
	      isLayoutWithElements = foundUISchema.elements.length > 0;
	    }
	    if (isLayoutWithElements) {
	      return /*#__PURE__*/React.createElement(JsonFormsDispatch, {
	        schema: otherProps,
	        path: path,
	        uischema: foundUISchema
	      });
	    }
	    return null;
	  }
	}
	const MaterialAnyOfRenderer = ({
	  schema,
	  rootSchema,
	  indexOfFittingSchema,
	  visible,
	  path,
	  renderers,
	  cells,
	  uischema,
	  uischemas
	}) => {
	  const [selectedAnyOf, setSelectedAnyOf] = reactExports.useState(indexOfFittingSchema || 0);
	  const handleChange = reactExports.useCallback((_ev, value) => setSelectedAnyOf(value), [setSelectedAnyOf]);
	  const anyOf = 'anyOf';
	  const anyOfRenderInfos = createCombinatorRenderInfos(schema.anyOf, rootSchema, anyOf, uischema, path, uischemas);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(CombinatorProperties, {
	    schema: schema,
	    combinatorKeyword: anyOf,
	    path: path
	  }), /*#__PURE__*/React.createElement(Tabs$1, {
	    value: selectedAnyOf,
	    onChange: handleChange
	  }, anyOfRenderInfos.map(anyOfRenderInfo => ( /*#__PURE__*/React.createElement(Tab$1, {
	    key: anyOfRenderInfo.label,
	    label: anyOfRenderInfo.label
	  })))), anyOfRenderInfos.map((anyOfRenderInfo, anyOfIndex) => selectedAnyOf === anyOfIndex && ( /*#__PURE__*/React.createElement(JsonFormsDispatch, {
	    key: anyOfIndex,
	    schema: anyOfRenderInfo.schema,
	    uischema: anyOfRenderInfo.uischema,
	    path: path,
	    renderers: renderers,
	    cells: cells
	  }))));
	};
	const materialAnyOfControlTester = rankWith(3, isAnyOfControl);
	var MaterialAnyOfRenderer$1 = withJsonFormsAnyOfProps(MaterialAnyOfRenderer);
	const StyledTableCell = styled$1(TableCell$1)({
	  borderBottom: 'none'
	});
	const NoBorderTableCell = ({
	  children,
	  ...otherProps
	}) => ( /*#__PURE__*/React.createElement(StyledTableCell, Object.assign({}, otherProps), children));
	const StyledBadge = styled$1(Badge$1)(({
	  theme
	}) => ({
	  color: theme.palette.error.main
	}));
	const ValidationIcon = ({
	  errorMessages,
	  id
	}) => {
	  return /*#__PURE__*/React.createElement(Tooltip$1, {
	    id: id,
	    title: errorMessages
	  }, /*#__PURE__*/React.createElement(StyledBadge, {
	    badgeContent: errorMessages.split('\n').length
	  }, /*#__PURE__*/React.createElement(default_1$2, {
	    color: 'inherit'
	  })));
	};
	const fixedCellSmall = {
	  paddingLeft: 0,
	  paddingRight: 0
	};
	const TableToolbar = /*#__PURE__*/React.memo(function TableToolbar({
	  numColumns,
	  errors,
	  label,
	  path,
	  addItem,
	  schema,
	  enabled,
	  translations
	}) {
	  return /*#__PURE__*/React.createElement(TableRow$1, null, /*#__PURE__*/React.createElement(NoBorderTableCell, {
	    colSpan: numColumns
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    container: true,
	    justifyContent: 'flex-start',
	    alignItems: 'center',
	    spacing: 2
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(Typography$1, {
	    variant: 'h6'
	  }, label)), /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, errors.length !== 0 && ( /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(ValidationIcon, {
	    id: 'tooltip-validation',
	    errorMessages: errors
	  })))))), enabled ? ( /*#__PURE__*/React.createElement(NoBorderTableCell, {
	    align: 'right',
	    style: fixedCellSmall
	  }, /*#__PURE__*/React.createElement(Tooltip$1, {
	    id: 'tooltip-add',
	    title: translations.addTooltip,
	    placement: 'bottom'
	  }, /*#__PURE__*/React.createElement(IconButton$1, {
	    "aria-label": translations.addAriaLabel,
	    onClick: addItem(path, createDefaultValue(schema)),
	    size: 'large'
	  }, /*#__PURE__*/React.createElement(default_1$3, null))))) : null);
	});
	const styles = {
	  fixedCell: {
	    width: '150px',
	    height: '50px',
	    paddingLeft: 0,
	    paddingRight: 0,
	    textAlign: 'center'
	  },
	  fixedCellSmall: {
	    width: '50px',
	    height: '50px',
	    paddingLeft: 0,
	    paddingRight: 0,
	    textAlign: 'center'
	  }
	};
	const generateCells = (Cell, schema, rowPath, enabled, cells) => {
	  if (schema.type === 'object') {
	    return getValidColumnProps(schema).map(prop => {
	      const cellPath = Paths.compose(rowPath, prop);
	      const props = {
	        propName: prop,
	        schema,
	        title: schema.properties?.[prop]?.title ?? startCase$1(prop),
	        rowPath,
	        cellPath,
	        enabled,
	        cells
	      };
	      return /*#__PURE__*/React.createElement(Cell, Object.assign({
	        key: cellPath
	      }, props));
	    });
	  } else {
	    const props = {
	      schema,
	      rowPath,
	      cellPath: rowPath,
	      enabled
	    };
	    return /*#__PURE__*/React.createElement(Cell, Object.assign({
	      key: rowPath
	    }, props));
	  }
	};
	const getValidColumnProps = scopedSchema => {
	  if (scopedSchema.type === 'object' && typeof scopedSchema.properties === 'object') {
	    return Object.keys(scopedSchema.properties).filter(prop => scopedSchema.properties[prop].type !== 'array');
	  }
	  return [''];
	};
	const EmptyTable = ({
	  numColumns,
	  translations
	}) => ( /*#__PURE__*/React.createElement(TableRow$1, null, /*#__PURE__*/React.createElement(NoBorderTableCell, {
	  colSpan: numColumns
	}, /*#__PURE__*/React.createElement(Typography$1, {
	  align: 'center'
	}, translations.noDataMessage))));
	const TableHeaderCell = /*#__PURE__*/React.memo(function TableHeaderCell({
	  title
	}) {
	  return /*#__PURE__*/React.createElement(TableCell$1, null, title);
	});
	const ctxToNonEmptyCellProps = (ctx, ownProps) => {
	  const path = ownProps.rowPath + (ownProps.schema.type === 'object' ? '.' + ownProps.propName : '');
	  const errors = formatErrorMessage(union$1(errorsAt(path, ownProps.schema, p => p === path)(ctx.core.errors).map(error => error.message)));
	  return {
	    rowPath: ownProps.rowPath,
	    propName: ownProps.propName,
	    schema: ownProps.schema,
	    rootSchema: ctx.core.schema,
	    errors,
	    path,
	    enabled: ownProps.enabled,
	    cells: ownProps.cells || ctx.cells,
	    renderers: ownProps.renderers || ctx.renderers
	  };
	};
	const controlWithoutLabel = scope => ({
	  type: 'Control',
	  scope: scope,
	  label: false
	});
	const NonEmptyCellComponent = /*#__PURE__*/React.memo(function NonEmptyCellComponent({
	  path,
	  propName,
	  schema,
	  rootSchema,
	  errors,
	  enabled,
	  renderers,
	  cells,
	  isValid
	}) {
	  return /*#__PURE__*/React.createElement(NoBorderTableCell, null, schema.properties ? ( /*#__PURE__*/React.createElement(DispatchCell, {
	    schema: Resolve.schema(schema, `#/properties/${encode(propName)}`, rootSchema),
	    uischema: controlWithoutLabel(`#/properties/${encode(propName)}`),
	    path: path,
	    enabled: enabled,
	    renderers: renderers,
	    cells: cells
	  })) : ( /*#__PURE__*/React.createElement(DispatchCell, {
	    schema: schema,
	    uischema: controlWithoutLabel('#'),
	    path: path,
	    enabled: enabled,
	    renderers: renderers,
	    cells: cells
	  })), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: !isValid
	  }, !isValid && errors));
	});
	const NonEmptyCell = ownProps => {
	  const ctx = useJsonForms();
	  const emptyCellProps = ctxToNonEmptyCellProps(ctx, ownProps);
	  const isValid = isEmpty$6(emptyCellProps.errors);
	  return /*#__PURE__*/React.createElement(NonEmptyCellComponent, Object.assign({}, emptyCellProps, {
	    isValid: isValid
	  }));
	};
	const NonEmptyRowComponent = ({
	  childPath,
	  schema,
	  rowIndex,
	  openDeleteDialog,
	  moveUpCreator,
	  moveDownCreator,
	  enableUp,
	  enableDown,
	  showSortButtons,
	  enabled,
	  cells,
	  path,
	  translations
	}) => {
	  const moveUp = reactExports.useMemo(() => moveUpCreator(path, rowIndex), [moveUpCreator, path, rowIndex]);
	  const moveDown = reactExports.useMemo(() => moveDownCreator(path, rowIndex), [moveDownCreator, path, rowIndex]);
	  return /*#__PURE__*/React.createElement(TableRow$1, {
	    key: childPath,
	    hover: true
	  }, generateCells(NonEmptyCell, schema, childPath, enabled, cells), enabled ? ( /*#__PURE__*/React.createElement(NoBorderTableCell, {
	    style: showSortButtons ? styles.fixedCell : styles.fixedCellSmall
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    container: true,
	    direction: 'row',
	    justifyContent: 'flex-end',
	    alignItems: 'center'
	  }, showSortButtons ? ( /*#__PURE__*/React.createElement(reactExports.Fragment, null, /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(IconButton$1, {
	    "aria-label": translations.upAriaLabel,
	    onClick: moveUp,
	    disabled: !enableUp,
	    size: 'large'
	  }, /*#__PURE__*/React.createElement(default_1$4, null))), /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(IconButton$1, {
	    "aria-label": translations.downAriaLabel,
	    onClick: moveDown,
	    disabled: !enableDown,
	    size: 'large'
	  }, /*#__PURE__*/React.createElement(default_1$5, null))))) : null, /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(IconButton$1, {
	    "aria-label": translations.removeAriaLabel,
	    onClick: () => openDeleteDialog(childPath, rowIndex),
	    size: 'large'
	  }, /*#__PURE__*/React.createElement(default_1$6, null)))))) : null);
	};
	const NonEmptyRow = /*#__PURE__*/React.memo(NonEmptyRowComponent);
	const TableRows = ({
	  data,
	  path,
	  schema,
	  openDeleteDialog,
	  moveUp,
	  moveDown,
	  uischema,
	  config,
	  enabled,
	  cells,
	  translations
	}) => {
	  const isEmptyTable = data === 0;
	  if (isEmptyTable) {
	    return /*#__PURE__*/React.createElement(EmptyTable, {
	      numColumns: getValidColumnProps(schema).length + 1,
	      translations: translations
	    });
	  }
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  return /*#__PURE__*/React.createElement(React.Fragment, null, range$1(data).map(index => {
	    const childPath = Paths.compose(path, `${index}`);
	    return /*#__PURE__*/React.createElement(NonEmptyRow, {
	      key: childPath,
	      childPath: childPath,
	      rowIndex: index,
	      schema: schema,
	      openDeleteDialog: openDeleteDialog,
	      moveUpCreator: moveUp,
	      moveDownCreator: moveDown,
	      enableUp: index !== 0,
	      enableDown: index !== data - 1,
	      showSortButtons: appliedUiSchemaOptions.showSortButtons || appliedUiSchemaOptions.showArrayTableSortButtons,
	      enabled: enabled,
	      cells: cells,
	      path: path,
	      translations: translations
	    });
	  }));
	};
	class MaterialTableControl extends React.Component {
	  constructor() {
	    super(...arguments);
	    this.addItem = (path, value) => this.props.addItem(path, value);
	  }
	  render() {
	    const {
	      label,
	      path,
	      schema,
	      rootSchema,
	      uischema,
	      errors,
	      openDeleteDialog,
	      visible,
	      enabled,
	      cells,
	      translations
	    } = this.props;
	    const controlElement = uischema;
	    const isObjectSchema = schema.type === 'object';
	    const headerCells = isObjectSchema ? generateCells(TableHeaderCell, schema, path, enabled, cells) : undefined;
	    return /*#__PURE__*/React.createElement(Hidden, {
	      xsUp: !visible
	    }, /*#__PURE__*/React.createElement(Table$1, null, /*#__PURE__*/React.createElement(TableHead$1, null, /*#__PURE__*/React.createElement(TableToolbar, {
	      errors: errors,
	      label: label,
	      addItem: this.addItem,
	      numColumns: isObjectSchema ? headerCells.length : 1,
	      path: path,
	      uischema: controlElement,
	      schema: schema,
	      rootSchema: rootSchema,
	      enabled: enabled,
	      translations: translations
	    }), isObjectSchema && ( /*#__PURE__*/React.createElement(TableRow$1, null, headerCells, enabled ? /*#__PURE__*/React.createElement(TableCell$1, null) : null))), /*#__PURE__*/React.createElement(TableBody$1, null, /*#__PURE__*/React.createElement(TableRows, Object.assign({
	      openDeleteDialog: openDeleteDialog,
	      translations: translations
	    }, this.props)))));
	  }
	}
	const DeleteDialog = /*#__PURE__*/React.memo(function DeleteDialog({
	  open,
	  onClose,
	  onConfirm,
	  onCancel,
	  title,
	  message,
	  acceptText,
	  declineText
	}) {
	  return /*#__PURE__*/React.createElement(Dialog$1, {
	    open: open,
	    keepMounted: true,
	    onClose: onClose,
	    "aria-labelledby": 'alert-dialog-confirmdelete-title',
	    "aria-describedby": 'alert-dialog-confirmdelete-description'
	  }, /*#__PURE__*/React.createElement(DialogTitle$1, {
	    id: 'alert-dialog-confirmdelete-title'
	  }, title), /*#__PURE__*/React.createElement(DialogContent$1, null, /*#__PURE__*/React.createElement(DialogContentText$1, {
	    id: 'alert-dialog-confirmdelete-description'
	  }, message)), /*#__PURE__*/React.createElement(DialogActions$1, null, /*#__PURE__*/React.createElement(Button$1, {
	    onClick: onCancel,
	    color: 'primary'
	  }, declineText), /*#__PURE__*/React.createElement(Button$1, {
	    onClick: onConfirm,
	    color: 'primary'
	  }, acceptText)));
	});
	const MaterialArrayControlRenderer = props => {
	  const [open, setOpen] = reactExports.useState(false);
	  const [path, setPath] = reactExports.useState(undefined);
	  const [rowData, setRowData] = reactExports.useState(undefined);
	  const {
	    removeItems,
	    visible
	  } = props;
	  const openDeleteDialog = reactExports.useCallback((p, rowIndex) => {
	    setOpen(true);
	    setPath(p);
	    setRowData(rowIndex);
	  }, [setOpen, setPath, setRowData]);
	  const deleteCancel = reactExports.useCallback(() => setOpen(false), [setOpen]);
	  const deleteConfirm = reactExports.useCallback(() => {
	    const p = path.substring(0, path.lastIndexOf('.'));
	    removeItems(p, [rowData])();
	    setOpen(false);
	  }, [setOpen, path, rowData]);
	  const deleteClose = reactExports.useCallback(() => setOpen(false), [setOpen]);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(MaterialTableControl, Object.assign({}, props, {
	    openDeleteDialog: openDeleteDialog
	  })), /*#__PURE__*/React.createElement(DeleteDialog, {
	    open: open,
	    onCancel: deleteCancel,
	    onConfirm: deleteConfirm,
	    onClose: deleteClose,
	    acceptText: props.translations.deleteDialogAccept,
	    declineText: props.translations.deleteDialogDecline,
	    title: props.translations.deleteDialogTitle,
	    message: props.translations.deleteDialogMessage
	  }));
	};
	const materialArrayControlTester = rankWith(3, or(isObjectArrayControl, isPrimitiveArrayControl));
	var MaterialArrayControlRenderer$1 = withJsonFormsArrayLayoutProps(MaterialArrayControlRenderer);
	const useFocus = () => {
	  const [focused, setFocused] = reactExports.useState(false);
	  const onFocus = reactExports.useCallback(() => setFocused(true), []);
	  const onBlur = reactExports.useCallback(() => setFocused(false), []);
	  return [focused, onFocus, onBlur];
	};
	const MuiAutocomplete = props => {
	  const {
	    description,
	    errors,
	    visible,
	    required,
	    label,
	    data,
	    className,
	    id,
	    enabled,
	    uischema,
	    path,
	    handleChange,
	    options,
	    config,
	    getOptionLabel,
	    renderOption,
	    filterOptions,
	    isValid
	  } = props;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const [inputValue, setInputValue] = React.useState(data ?? '');
	  const [focused, onFocus, onBlur] = useFocus();
	  const findOption = options.find(o => o.value === data) ?? null;
	  const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
	  const firstFormHelperText = showDescription ? description : !isValid ? errors : null;
	  const secondFormHelperText = showDescription && !isValid ? errors : null;
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(Autocomplete$1, {
	    className: className,
	    id: id,
	    disabled: !enabled,
	    value: findOption,
	    onChange: (_event, newValue) => {
	      handleChange(path, newValue?.value);
	    },
	    inputValue: inputValue,
	    onInputChange: (_event, newInputValue) => {
	      setInputValue(newInputValue);
	    },
	    autoHighlight: true,
	    autoSelect: true,
	    autoComplete: true,
	    fullWidth: true,
	    options: options,
	    getOptionLabel: getOptionLabel || (option => option?.label),
	    freeSolo: false,
	    renderInput: params => {
	      return /*#__PURE__*/React.createElement(TextField$1, Object.assign({
	        label: label,
	        variant: 'standard',
	        type: 'text',
	        inputProps: params.inputProps,
	        inputRef: params.InputProps.ref,
	        autoFocus: appliedUiSchemaOptions.focus,
	        disabled: !enabled
	      }, params, {
	        id: id + '-input',
	        required: required && !appliedUiSchemaOptions.hideRequiredAsterisk,
	        error: !isValid,
	        fullWidth: !appliedUiSchemaOptions.trim,
	        InputLabelProps: data ? {
	          shrink: true
	        } : undefined,
	        onFocus: onFocus,
	        onBlur: onBlur,
	        focused: focused
	      }));
	    },
	    renderOption: renderOption,
	    filterOptions: filterOptions
	  }), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: !isValid && !showDescription
	  }, firstFormHelperText), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: !isValid
	  }, secondFormHelperText));
	};
	const MuiCheckbox = /*#__PURE__*/React.memo(function MuiCheckbox(props) {
	  const {
	    data,
	    className,
	    id,
	    enabled,
	    uischema,
	    path,
	    handleChange,
	    config,
	    inputProps
	  } = props;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const inputPropsMerged = merge$2({}, inputProps, {
	    autoFocus: !!appliedUiSchemaOptions.focus
	  });
	  const checked = !!data;
	  return /*#__PURE__*/React.createElement(Checkbox$1, {
	    checked: checked,
	    onChange: (_ev, isChecked) => handleChange(path, isChecked),
	    className: className,
	    id: id,
	    disabled: !enabled,
	    inputProps: inputPropsMerged
	  });
	});
	dayjs.extend(customParsing);
	const createOnChangeHandler = (path, handleChange, saveFormat) => time => {
	  if (!time) {
	    handleChange(path, undefined);
	    return;
	  }
	  const result = dayjs(time).format(saveFormat);
	  handleChange(path, result);
	};
	const getData = (data, saveFormat) => {
	  if (!data) {
	    return null;
	  }
	  const dayjsData = dayjs(data, saveFormat);
	  if (dayjsData.toString() === 'Invalid Date') {
	    return null;
	  }
	  return dayjsData;
	};
	const renderLayoutElements = (elements, schema, path, enabled, renderers, cells) => {
	  return elements.map((child, index) => ( /*#__PURE__*/React.createElement(Grid$1, {
	    item: true,
	    key: `${path}-${index}`,
	    xs: true
	  }, /*#__PURE__*/React.createElement(JsonFormsDispatch, {
	    uischema: child,
	    schema: schema,
	    path: path,
	    enabled: enabled,
	    renderers: renderers,
	    cells: cells
	  }))));
	};
	const MaterialLayoutRendererComponent = ({
	  visible,
	  elements,
	  schema,
	  path,
	  enabled,
	  direction,
	  renderers,
	  cells
	}) => {
	  if (isEmpty$6(elements)) {
	    return null;
	  } else {
	    return /*#__PURE__*/React.createElement(Hidden, {
	      xsUp: !visible
	    }, /*#__PURE__*/React.createElement(Grid$1, {
	      container: true,
	      direction: direction,
	      spacing: direction === 'row' ? 2 : 0
	    }, renderLayoutElements(elements, schema, path, enabled, renderers, cells)));
	  }
	};
	const MaterialLayoutRenderer = /*#__PURE__*/React.memo(MaterialLayoutRendererComponent);
	const withAjvProps = Component => function WithAjvProps(props) {
	  const ctx = useJsonForms();
	  const ajv = getAjv({
	    jsonforms: {
	      ...ctx
	    }
	  });
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {
	    ajv: ajv
	  }));
	};
	const eventToValue$3 = ev => ev.target.value;
	const useDebouncedChange = (handleChange, defaultValue, data, path, eventToValueFunction = eventToValue$3, timeout = 300) => {
	  const [input, setInput] = reactExports.useState(data ?? defaultValue);
	  reactExports.useEffect(() => {
	    setInput(data ?? defaultValue);
	  }, [data]);
	  const debouncedUpdate = reactExports.useCallback(debounce$3(newValue => handleChange(path, newValue), timeout), [handleChange, path, timeout]);
	  const onChange = reactExports.useCallback(ev => {
	    const newValue = eventToValueFunction(ev);
	    setInput(newValue ?? defaultValue);
	    debouncedUpdate(newValue);
	  }, [debouncedUpdate, eventToValueFunction]);
	  const onClear = reactExports.useCallback(() => {
	    setInput(defaultValue);
	    handleChange(path, undefined);
	  }, [defaultValue, handleChange, path]);
	  return [input, onChange, onClear];
	};
	const i18nDefaults = {
	  'enum.none': 'None'
	};
	const toNumber$1 = value => value === '' ? undefined : parseInt(value, 10);
	const eventToValue$2 = ev => toNumber$1(ev.target.value);
	const MuiInputInteger = /*#__PURE__*/React.memo(function MuiInputInteger(props) {
	  const {
	    data,
	    className,
	    id,
	    enabled,
	    uischema,
	    path,
	    handleChange,
	    config
	  } = props;
	  const inputProps = {
	    step: '1'
	  };
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const [inputValue, onChange] = useDebouncedChange(handleChange, '', data, path, eventToValue$2);
	  return /*#__PURE__*/React.createElement(Input$1, {
	    type: 'number',
	    value: inputValue,
	    onChange: onChange,
	    className: className,
	    id: id,
	    disabled: !enabled,
	    autoFocus: appliedUiSchemaOptions.focus,
	    inputProps: inputProps,
	    fullWidth: true
	  });
	});
	const toNumber = value => value === '' ? undefined : parseFloat(value);
	const eventToValue$1 = ev => toNumber(ev.target.value);
	const MuiInputNumber = /*#__PURE__*/React.memo(function MuiInputNumber(props) {
	  const {
	    data,
	    className,
	    id,
	    enabled,
	    uischema,
	    path,
	    handleChange,
	    config
	  } = props;
	  const inputProps = {
	    step: '0.1'
	  };
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const [inputValue, onChange] = useDebouncedChange(handleChange, '', data, path, eventToValue$1);
	  return /*#__PURE__*/React.createElement(Input$1, {
	    type: 'number',
	    value: inputValue,
	    onChange: onChange,
	    className: className,
	    id: id,
	    disabled: !enabled,
	    autoFocus: appliedUiSchemaOptions.focus,
	    inputProps: inputProps,
	    fullWidth: true
	  });
	});
	const MuiInputNumberFormat = /*#__PURE__*/React.memo(function MuiInputNumberFormat(props) {
	  const {
	    className,
	    id,
	    enabled,
	    uischema,
	    isValid,
	    path,
	    handleChange,
	    schema,
	    config
	  } = props;
	  const maxLength = schema.maxLength;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  let inputProps;
	  if (appliedUiSchemaOptions.restrict) {
	    inputProps = {
	      maxLength: maxLength
	    };
	  } else {
	    inputProps = {};
	  }
	  const formattedNumber = props.toFormatted(props.data);
	  const validStringNumber = reactExports.useCallback(ev => props.fromFormatted(ev.currentTarget.value), [props.fromFormatted]);
	  const [inputValue, onChange] = useDebouncedChange(handleChange, '', formattedNumber, path, validStringNumber);
	  return /*#__PURE__*/React.createElement(Input$1, {
	    type: 'text',
	    value: inputValue,
	    onChange: onChange,
	    className: className,
	    id: id,
	    disabled: !enabled,
	    autoFocus: appliedUiSchemaOptions.focus,
	    multiline: appliedUiSchemaOptions.multi,
	    fullWidth: !appliedUiSchemaOptions.trim || maxLength === undefined,
	    inputProps: inputProps,
	    error: !isValid
	  });
	});
	const eventToValue = ev => ev.target.value === '' ? undefined : ev.target.value;
	const MuiInputText = /*#__PURE__*/React.memo(function MuiInputText(props) {
	  const [showAdornment, setShowAdornment] = reactExports.useState(false);
	  const {
	    data,
	    config,
	    className,
	    id,
	    enabled,
	    uischema,
	    isValid,
	    path,
	    handleChange,
	    schema,
	    muiInputProps,
	    inputComponent
	  } = props;
	  const maxLength = schema.maxLength;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  let inputProps;
	  if (appliedUiSchemaOptions.restrict) {
	    inputProps = {
	      maxLength: maxLength
	    };
	  } else {
	    inputProps = {};
	  }
	  inputProps = merge$2(inputProps, muiInputProps);
	  if (appliedUiSchemaOptions.trim && maxLength !== undefined) {
	    inputProps.size = maxLength;
	  }
	  const [inputText, onChange, onClear] = useDebouncedChange(handleChange, '', data, path, eventToValue);
	  const onPointerEnter = () => setShowAdornment(true);
	  const onPointerLeave = () => setShowAdornment(false);
	  const theme = useTheme();
	  const closeStyle = {
	    background: theme.jsonforms?.input?.delete?.background || theme.palette.background.default,
	    borderRadius: '50%'
	  };
	  return /*#__PURE__*/React.createElement(Input$1, {
	    type: appliedUiSchemaOptions.format === 'password' ? 'password' : 'text',
	    value: inputText,
	    onChange: onChange,
	    className: className,
	    id: id,
	    disabled: !enabled,
	    autoFocus: appliedUiSchemaOptions.focus,
	    multiline: appliedUiSchemaOptions.multi,
	    fullWidth: !appliedUiSchemaOptions.trim || maxLength === undefined,
	    inputProps: inputProps,
	    error: !isValid,
	    onPointerEnter: onPointerEnter,
	    onPointerLeave: onPointerLeave,
	    endAdornment: /*#__PURE__*/React.createElement(InputAdornment$1, {
	      position: 'end',
	      style: {
	        display: !showAdornment || !enabled || data === undefined ? 'none' : 'flex',
	        position: 'absolute',
	        right: 0
	      }
	    }, /*#__PURE__*/React.createElement(IconButton$1, {
	      "aria-label": 'Clear input field',
	      onClick: onClear,
	      size: 'large'
	    }, /*#__PURE__*/React.createElement(default_1$1, {
	      style: closeStyle
	    }))),
	    inputComponent: inputComponent
	  });
	});
	const MuiInputTime = /*#__PURE__*/React.memo(function MuiInputTime(props) {
	  const {
	    data,
	    className,
	    id,
	    enabled,
	    uischema,
	    path,
	    handleChange,
	    config
	  } = props;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const [inputValue, onChange] = useDebouncedChange(handleChange, '', data, path);
	  return /*#__PURE__*/React.createElement(Input$1, {
	    type: 'time',
	    value: inputValue,
	    onChange: onChange,
	    className: className,
	    id: id,
	    disabled: !enabled,
	    autoFocus: appliedUiSchemaOptions.focus,
	    fullWidth: true
	  });
	});
	const MuiSelect = /*#__PURE__*/React.memo(function MuiSelect(props) {
	  const {
	    data,
	    className,
	    id,
	    enabled,
	    schema,
	    uischema,
	    path,
	    handleChange,
	    options,
	    config,
	    t
	  } = props;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const noneOptionLabel = reactExports.useMemo(() => t('enum.none', i18nDefaults['enum.none'], {
	    schema,
	    uischema,
	    path
	  }), [t, schema, uischema, path]);
	  return /*#__PURE__*/React.createElement(Select$1, {
	    className: className,
	    id: id,
	    disabled: !enabled,
	    autoFocus: appliedUiSchemaOptions.focus,
	    value: data !== undefined ? data : '',
	    onChange: ev => handleChange(path, ev.target.value || undefined),
	    fullWidth: true,
	    variant: 'standard'
	  }, [/*#__PURE__*/React.createElement(MenuItem$1, {
	    value: '',
	    key: 'jsonforms.enum.none'
	  }, /*#__PURE__*/React.createElement("em", null, noneOptionLabel))].concat(options.map(optionValue => ( /*#__PURE__*/React.createElement(MenuItem$1, {
	    value: optionValue.value,
	    key: optionValue.value
	  }, optionValue.label)))));
	});
	const MuiToggle = /*#__PURE__*/React.memo(function MuiToggle(props) {
	  const {
	    data,
	    className,
	    id,
	    enabled,
	    uischema,
	    path,
	    handleChange,
	    config,
	    inputProps
	  } = props;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const inputPropsMerged = merge$2({}, inputProps, {
	    autoFocus: !!appliedUiSchemaOptions.focus
	  });
	  const checked = !!data;
	  return /*#__PURE__*/React.createElement(Switch$1, {
	    checked: checked,
	    onChange: (_ev, isChecked) => handleChange(path, isChecked),
	    className: className,
	    id: id,
	    disabled: !enabled,
	    inputProps: inputPropsMerged
	  });
	});
	const MaterialEnumArrayRenderer = ({
	  schema,
	  visible,
	  errors,
	  path,
	  options,
	  data,
	  addItem,
	  removeItem,
	  handleChange: _handleChange,
	  ...otherProps
	}) => {
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xlUp: !visible
	  }, /*#__PURE__*/React.createElement(FormControl$1, {
	    component: 'fieldset'
	  }, /*#__PURE__*/React.createElement(FormGroup$1, {
	    row: true
	  }, options.map((option, index) => {
	    const optionPath = Paths.compose(path, `${index}`);
	    const checkboxValue = data?.includes(option.value) ? option.value : undefined;
	    return /*#__PURE__*/React.createElement(FormControlLabel$1, {
	      id: option.value,
	      key: option.value,
	      control: /*#__PURE__*/React.createElement(MuiCheckbox, Object.assign({
	        key: 'checkbox-' + option.value,
	        isValid: isEmpty$6(errors),
	        path: optionPath,
	        handleChange: (_childPath, newValue) => newValue ? addItem(path, option.value) : removeItem(path, option.value),
	        data: checkboxValue,
	        errors: errors,
	        schema: schema,
	        visible: visible
	      }, otherProps)),
	      label: option.label
	    });
	  })), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: true
	  }, errors)));
	};
	const hasOneOfItems = schema => schema.oneOf !== undefined && schema.oneOf.length > 0 && schema.oneOf.every(entry => {
	  return entry.const !== undefined;
	});
	const hasEnumItems = schema => schema.type === 'string' && schema.enum !== undefined;
	const materialEnumArrayRendererTester = rankWith(5, and(uiTypeIs('Control'), and(schemaMatches(schema => hasType(schema, 'array') && !Array.isArray(schema.items) && schema.uniqueItems === true), schemaSubPathMatches('items', schema => {
	  return hasOneOfItems(schema) || hasEnumItems(schema);
	}))));
	var MaterialEnumArrayRenderer$1 = withJsonFormsMultiEnumProps(MaterialEnumArrayRenderer);
	const MaterialObjectRenderer = ({
	  renderers,
	  cells,
	  uischemas,
	  schema,
	  label,
	  path,
	  visible,
	  enabled,
	  uischema,
	  rootSchema
	}) => {
	  const detailUiSchema = reactExports.useMemo(() => findUISchema(uischemas, schema, uischema.scope, path, () => isEmpty$6(path) ? Generate.uiSchema(schema, 'VerticalLayout') : {
	    ...Generate.uiSchema(schema, 'Group'),
	    label
	  }, uischema, rootSchema), [uischemas, schema, uischema.scope, path, label, uischema, rootSchema]);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(JsonFormsDispatch, {
	    visible: visible,
	    enabled: enabled,
	    schema: schema,
	    uischema: detailUiSchema,
	    path: path,
	    renderers: renderers,
	    cells: cells
	  }));
	};
	const materialObjectControlTester = rankWith(2, isObjectControl);
	var MaterialObjectRenderer$1 = withJsonFormsDetailProps(MaterialObjectRenderer);
	const MaterialOneOfRenderer = ({
	  handleChange,
	  schema,
	  path,
	  renderers,
	  cells,
	  rootSchema,
	  id,
	  visible,
	  indexOfFittingSchema,
	  uischema,
	  uischemas,
	  data
	}) => {
	  const [open, setOpen] = reactExports.useState(false);
	  const [selectedIndex, setSelectedIndex] = reactExports.useState(indexOfFittingSchema || 0);
	  const [newSelectedIndex, setNewSelectedIndex] = reactExports.useState(0);
	  const handleClose = reactExports.useCallback(() => setOpen(false), [setOpen]);
	  const cancel = reactExports.useCallback(() => {
	    setOpen(false);
	  }, [setOpen]);
	  const oneOfRenderInfos = createCombinatorRenderInfos(schema.oneOf, rootSchema, 'oneOf', uischema, path, uischemas);
	  const openNewTab = newIndex => {
	    handleChange(path, createDefaultValue(oneOfRenderInfos[newIndex].schema));
	    setSelectedIndex(newIndex);
	  };
	  const confirm = reactExports.useCallback(() => {
	    openNewTab(newSelectedIndex);
	    setOpen(false);
	  }, [handleChange, createDefaultValue, newSelectedIndex]);
	  const handleTabChange = reactExports.useCallback((_event, newOneOfIndex) => {
	    setNewSelectedIndex(newOneOfIndex);
	    if (isEmpty$6(data)) {
	      openNewTab(newOneOfIndex);
	    } else {
	      setOpen(true);
	    }
	  }, [setOpen, setSelectedIndex, data]);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(CombinatorProperties, {
	    schema: schema,
	    combinatorKeyword: 'oneOf',
	    path: path
	  }), /*#__PURE__*/React.createElement(Tabs$1, {
	    value: selectedIndex,
	    onChange: handleTabChange
	  }, oneOfRenderInfos.map(oneOfRenderInfo => ( /*#__PURE__*/React.createElement(Tab$1, {
	    key: oneOfRenderInfo.label,
	    label: oneOfRenderInfo.label
	  })))), oneOfRenderInfos.map((oneOfRenderInfo, oneOfIndex) => selectedIndex === oneOfIndex && ( /*#__PURE__*/React.createElement(JsonFormsDispatch, {
	    key: oneOfIndex,
	    schema: oneOfRenderInfo.schema,
	    uischema: oneOfRenderInfo.uischema,
	    path: path,
	    renderers: renderers,
	    cells: cells
	  }))), /*#__PURE__*/React.createElement(Dialog$1, {
	    open: open,
	    onClose: handleClose,
	    "aria-labelledby": 'alert-dialog-title',
	    "aria-describedby": 'alert-dialog-description'
	  }, /*#__PURE__*/React.createElement(DialogTitle$1, {
	    id: 'alert-dialog-title'
	  }, 'Clear form?'), /*#__PURE__*/React.createElement(DialogContent$1, null, /*#__PURE__*/React.createElement(DialogContentText$1, {
	    id: 'alert-dialog-description'
	  }, "Your data will be cleared if you navigate away from this tab. Do you want to proceed?")), /*#__PURE__*/React.createElement(DialogActions$1, null, /*#__PURE__*/React.createElement(Button$1, {
	    onClick: cancel,
	    color: 'primary'
	  }, "No"), /*#__PURE__*/React.createElement(Button$1, {
	    onClick: confirm,
	    color: 'primary',
	    autoFocus: true,
	    id: `oneOf-${id}-confirm-yes`
	  }, "Yes"))));
	};
	const materialOneOfControlTester = rankWith(3, isOneOfControl);
	var MaterialOneOfRenderer$1 = withJsonFormsOneOfProps(MaterialOneOfRenderer);
	const materialLabelRendererTester = rankWith(1, uiTypeIs('Label'));
	const MaterialLabelRenderer = ({
	  text,
	  visible
	}) => {
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(Typography$1, {
	    variant: 'h6'
	  }, text));
	};
	var MaterialLabelRenderer$1 = withJsonFormsLabelProps(MaterialLabelRenderer);
	const ArrayLayoutToolbar = /*#__PURE__*/React.memo(function ArrayLayoutToolbar({
	  label,
	  errors,
	  addItem,
	  path,
	  enabled,
	  createDefault,
	  translations
	}) {
	  return /*#__PURE__*/React.createElement(Toolbar$1, {
	    disableGutters: true
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    container: true,
	    alignItems: 'center',
	    justifyContent: 'space-between'
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    container: true,
	    justifyContent: 'flex-start',
	    alignItems: 'center',
	    spacing: 2
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(Typography$1, {
	    variant: 'h6'
	  }, label)), /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, errors.length !== 0 && ( /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(ValidationIcon, {
	    id: 'tooltip-validation',
	    errorMessages: errors
	  })))))), enabled && ( /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    container: true
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(Tooltip$1, {
	    id: 'tooltip-add',
	    title: translations.addTooltip,
	    placement: 'bottom'
	  }, /*#__PURE__*/React.createElement(IconButton$1, {
	    "aria-label": translations.addTooltip,
	    onClick: addItem(path, createDefault()),
	    size: 'large'
	  }, /*#__PURE__*/React.createElement(default_1$3, null)))))))));
	});
	const ListWithDetailMasterItem = ({
	  index,
	  childLabel,
	  selected,
	  enabled,
	  handleSelect,
	  removeItem,
	  path,
	  translations
	}) => {
	  return /*#__PURE__*/React.createElement(ListItem$1, {
	    button: true,
	    selected: selected,
	    onClick: handleSelect(index)
	  }, /*#__PURE__*/React.createElement(ListItemAvatar$1, null, /*#__PURE__*/React.createElement(Avatar$1, {
	    "aria-label": 'Index'
	  }, index + 1)), /*#__PURE__*/React.createElement(ListItemText$1, {
	    primary: childLabel
	  }), enabled && ( /*#__PURE__*/React.createElement(ListItemSecondaryAction$1, null, /*#__PURE__*/React.createElement(IconButton$1, {
	    "aria-label": translations.removeAriaLabel,
	    onClick: removeItem(path, index),
	    size: 'large'
	  }, /*#__PURE__*/React.createElement(default_1$6, null)))));
	};
	var ListWithDetailMasterItem$1 = withJsonFormsMasterListItemProps(ListWithDetailMasterItem);
	const MaterialListWithDetailRenderer = ({
	  uischemas,
	  schema,
	  uischema,
	  path,
	  enabled,
	  errors,
	  visible,
	  label,
	  required,
	  removeItems,
	  addItem,
	  data,
	  renderers,
	  cells,
	  config,
	  rootSchema,
	  translations
	}) => {
	  const [selectedIndex, setSelectedIndex] = reactExports.useState(undefined);
	  const handleRemoveItem = reactExports.useCallback((p, value) => () => {
	    removeItems(p, [value])();
	    if (selectedIndex === value) {
	      setSelectedIndex(undefined);
	    } else if (selectedIndex > value) {
	      setSelectedIndex(selectedIndex - 1);
	    }
	  }, [removeItems, setSelectedIndex]);
	  const handleListItemClick = reactExports.useCallback(index => () => setSelectedIndex(index), [setSelectedIndex]);
	  const handleCreateDefaultValue = reactExports.useCallback(() => createDefaultValue(schema), [createDefaultValue]);
	  const foundUISchema = reactExports.useMemo(() => findUISchema(uischemas, schema, uischema.scope, path, undefined, uischema, rootSchema), [uischemas, schema, uischema.scope, path, uischema, rootSchema]);
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  React.useEffect(() => {
	    setSelectedIndex(undefined);
	  }, [schema]);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(ArrayLayoutToolbar, {
	    translations: translations,
	    label: computeLabel(label, required, appliedUiSchemaOptions.hideRequiredAsterisk),
	    errors: errors,
	    path: path,
	    enabled: enabled,
	    addItem: addItem,
	    createDefault: handleCreateDefaultValue
	  }), /*#__PURE__*/React.createElement(Grid$1, {
	    container: true,
	    direction: 'row',
	    spacing: 2
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    item: true,
	    xs: 3
	  }, /*#__PURE__*/React.createElement(List$1, null, data > 0 ? map$1(range$1(data), index => ( /*#__PURE__*/React.createElement(ListWithDetailMasterItem$1, {
	    index: index,
	    path: path,
	    schema: schema,
	    enabled: enabled,
	    handleSelect: handleListItemClick,
	    removeItem: handleRemoveItem,
	    selected: selectedIndex === index,
	    key: index,
	    translations: translations
	  }))) : ( /*#__PURE__*/React.createElement("p", null, "No data")))), /*#__PURE__*/React.createElement(Grid$1, {
	    item: true,
	    xs: true
	  }, selectedIndex !== undefined ? ( /*#__PURE__*/React.createElement(JsonFormsDispatch, {
	    renderers: renderers,
	    cells: cells,
	    visible: visible,
	    schema: schema,
	    uischema: foundUISchema,
	    path: compose$1(path, `${selectedIndex}`)
	  })) : ( /*#__PURE__*/React.createElement(Typography$1, {
	    variant: 'h6'
	  }, translations.noSelection)))));
	};
	const materialListWithDetailTester = rankWith(4, and(uiTypeIs('ListWithDetail'), isObjectArray));
	var MaterialListWithDetailRenderer$1 = withJsonFormsArrayLayoutProps(MaterialListWithDetailRenderer);
	const MaterialInputControl = props => {
	  const [focused, onFocus, onBlur] = useFocus();
	  const {
	    id,
	    description,
	    errors,
	    label,
	    uischema,
	    visible,
	    required,
	    config,
	    input
	  } = props;
	  const isValid = errors.length === 0;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
	  const firstFormHelperText = showDescription ? description : !isValid ? errors : null;
	  const secondFormHelperText = showDescription && !isValid ? errors : null;
	  const InnerComponent = input;
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(FormControl$1, {
	    fullWidth: !appliedUiSchemaOptions.trim,
	    onFocus: onFocus,
	    onBlur: onBlur,
	    id: id,
	    variant: 'standard'
	  }, /*#__PURE__*/React.createElement(InputLabel$1, {
	    htmlFor: id + '-input',
	    error: !isValid,
	    required: showAsRequired(required, appliedUiSchemaOptions.hideRequiredAsterisk)
	  }, label), /*#__PURE__*/React.createElement(InnerComponent, Object.assign({}, props, {
	    id: id + '-input',
	    isValid: isValid,
	    visible: visible
	  })), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: !isValid && !showDescription
	  }, firstFormHelperText), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: !isValid
	  }, secondFormHelperText)));
	};
	const findEnumSchema = schemas => schemas.find(s => s.enum !== undefined && (s.type === 'string' || s.type === undefined));
	const findTextSchema = schemas => schemas.find(s => s.type === 'string' && s.enum === undefined);
	const MuiAutocompleteInputText = props => {
	  const {
	    data,
	    config,
	    className,
	    id,
	    enabled,
	    uischema,
	    isValid,
	    path,
	    handleChange,
	    schema
	  } = props;
	  const enumSchema = findEnumSchema(schema.anyOf);
	  const stringSchema = findTextSchema(schema.anyOf);
	  const maxLength = stringSchema.maxLength;
	  const appliedUiSchemaOptions = reactExports.useMemo(() => merge$2({}, config, uischema.options), [config, uischema.options]);
	  const inputProps = reactExports.useMemo(() => {
	    let propMemo = {};
	    if (appliedUiSchemaOptions.restrict) {
	      propMemo = {
	        maxLength: maxLength
	      };
	    }
	    if (appliedUiSchemaOptions.trim && maxLength !== undefined) {
	      propMemo.size = maxLength;
	    }
	    propMemo.list = props.id + 'datalist';
	    return propMemo;
	  }, [appliedUiSchemaOptions, props.id]);
	  const [inputText, onChange] = useDebouncedChange(handleChange, '', data, path);
	  const dataList = /*#__PURE__*/React.createElement("datalist", {
	    id: props.id + 'datalist'
	  }, enumSchema.enum.map(optionValue => ( /*#__PURE__*/React.createElement("option", {
	    value: optionValue,
	    key: optionValue
	  }))));
	  return /*#__PURE__*/React.createElement(Input$1, {
	    type: 'text',
	    value: inputText,
	    onChange: onChange,
	    className: className,
	    id: id,
	    disabled: !enabled,
	    autoFocus: appliedUiSchemaOptions.focus,
	    fullWidth: !appliedUiSchemaOptions.trim || maxLength === undefined,
	    inputProps: inputProps,
	    error: !isValid,
	    endAdornment: dataList
	  });
	};
	class MaterialAnyOfStringOrEnumControl extends Control {
	  render() {
	    return /*#__PURE__*/React.createElement(MaterialInputControl, Object.assign({}, this.props, {
	      input: MuiAutocompleteInputText
	    }));
	  }
	}
	const hasEnumAndText = schemas => {
	  const enumSchema = findEnumSchema(schemas);
	  const stringSchema = findTextSchema(schemas);
	  const remainingSchemas = schemas.filter(s => s !== enumSchema || s !== stringSchema);
	  const wrongType = remainingSchemas.find(s => s.type && s.type !== 'string');
	  return enumSchema && stringSchema && !wrongType;
	};
	const simpleAnyOf = and(uiTypeIs('Control'), schemaMatches(schema => Object.prototype.hasOwnProperty.call(schema, 'anyOf') && hasEnumAndText(schema.anyOf)));
	const materialAnyOfStringOrEnumControlTester = rankWith(5, simpleAnyOf);
	var MaterialAnyOfStringOrEnumControl$1 = withJsonFormsControlProps(MaterialAnyOfStringOrEnumControl);
	const MaterialBooleanControl = ({
	  data,
	  visible,
	  label,
	  id,
	  enabled,
	  uischema,
	  schema,
	  rootSchema,
	  handleChange,
	  errors,
	  path,
	  config,
	  description
	}) => {
	  const isValid = errors.length === 0;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const showDescription = !isDescriptionHidden(visible, description, false, appliedUiSchemaOptions.showUnfocusedDescription);
	  const showTooltip = !showDescription && !isDescriptionHidden(visible, description, true, true);
	  const firstFormHelperText = showDescription ? description : !isValid ? errors : null;
	  const secondFormHelperText = showDescription && !isValid ? errors : null;
	  const descriptionIds = [];
	  const tooltipId = `${id}-tip`;
	  const helpId1 = `${id}-help1`;
	  const helpId2 = `${id}-help2`;
	  if (showTooltip) {
	    descriptionIds.push(tooltipId);
	  }
	  if (firstFormHelperText) {
	    descriptionIds.push(helpId1);
	  }
	  if (secondFormHelperText) {
	    descriptionIds.push(helpId2);
	  }
	  const ariaDescribedBy = descriptionIds.join(' ');
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(Tooltip$1, {
	    id: tooltipId,
	    title: showTooltip ? description : ''
	  }, /*#__PURE__*/React.createElement(FormControlLabel$1, {
	    label: label,
	    id: id,
	    control: /*#__PURE__*/React.createElement(MuiCheckbox, {
	      id: `${id}-input`,
	      isValid: isEmpty$6(errors),
	      data: data,
	      enabled: enabled,
	      visible: visible,
	      path: path,
	      uischema: uischema,
	      schema: schema,
	      rootSchema: rootSchema,
	      handleChange: handleChange,
	      errors: errors,
	      config: config,
	      inputProps: {
	        'aria-describedby': ariaDescribedBy
	      }
	    })
	  })), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    id: helpId1,
	    error: !isValid && !showDescription
	  }, firstFormHelperText), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    id: helpId2,
	    error: !isValid
	  }, secondFormHelperText));
	};
	const materialBooleanControlTester = rankWith(2, isBooleanControl);
	var MaterialBooleanControl$1 = withJsonFormsControlProps(MaterialBooleanControl);
	const MaterialBooleanToggleControl = ({
	  data,
	  visible,
	  label,
	  id,
	  enabled,
	  uischema,
	  schema,
	  rootSchema,
	  handleChange,
	  errors,
	  path,
	  config,
	  description
	}) => {
	  const isValid = errors.length === 0;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const showDescription = !isDescriptionHidden(visible, description, false, appliedUiSchemaOptions.showUnfocusedDescription);
	  const showTooltip = !showDescription && !isDescriptionHidden(visible, description, true, true);
	  const firstFormHelperText = showDescription ? description : !isValid ? errors : null;
	  const secondFormHelperText = showDescription && !isValid ? errors : null;
	  const descriptionIds = [];
	  const tooltipId = `${id}-tip`;
	  const helpId1 = `${id}-help1`;
	  const helpId2 = `${id}-help2`;
	  if (showTooltip) {
	    descriptionIds.push(tooltipId);
	  }
	  if (firstFormHelperText) {
	    descriptionIds.push(helpId1);
	  }
	  if (secondFormHelperText) {
	    descriptionIds.push(helpId2);
	  }
	  const ariaDescribedBy = descriptionIds.join(' ');
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(Tooltip$1, {
	    id: tooltipId,
	    title: showTooltip ? description : ''
	  }, /*#__PURE__*/React.createElement(FormControlLabel$1, {
	    label: label,
	    id: id,
	    control: /*#__PURE__*/React.createElement(MuiToggle, {
	      id: `${id}-input`,
	      isValid: isEmpty$6(errors),
	      data: data,
	      enabled: enabled,
	      visible: visible,
	      path: path,
	      uischema: uischema,
	      schema: schema,
	      rootSchema: rootSchema,
	      handleChange: handleChange,
	      errors: errors,
	      config: config,
	      inputProps: {
	        'aria-describedby': ariaDescribedBy
	      }
	    })
	  })), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    id: helpId1,
	    error: !isValid && !showDescription
	  }, firstFormHelperText), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    id: helpId2,
	    error: !isValid
	  }, secondFormHelperText));
	};
	const materialBooleanToggleControlTester = rankWith(3, and(isBooleanControl, optionIs('toggle', true)));
	var MaterialBooleanToggleControl$1 = withJsonFormsControlProps(MaterialBooleanToggleControl);
	const MaterialDateControl = props => {
	  const [focused, onFocus, onBlur] = useFocus();
	  const {
	    description,
	    id,
	    errors,
	    label,
	    uischema,
	    visible,
	    enabled,
	    required,
	    path,
	    handleChange,
	    data,
	    config
	  } = props;
	  const isValid = errors.length === 0;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
	  const format = appliedUiSchemaOptions.dateFormat ?? 'YYYY-MM-DD';
	  const saveFormat = appliedUiSchemaOptions.dateSaveFormat ?? 'YYYY-MM-DD';
	  const views = appliedUiSchemaOptions.views ?? ['year', 'day'];
	  const firstFormHelperText = showDescription ? description : !isValid ? errors : null;
	  const secondFormHelperText = showDescription && !isValid ? errors : null;
	  const onChange = reactExports.useMemo(() => createOnChangeHandler(path, handleChange, saveFormat), [path, handleChange, saveFormat]);
	  const value = getData(data, saveFormat);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(LocalizationProvider, {
	    dateAdapter: AdapterDayjs
	  }, /*#__PURE__*/React.createElement(DatePicker, {
	    label: label,
	    value: value,
	    onChange: onChange,
	    format: format,
	    views: views,
	    disabled: !enabled,
	    slotProps: {
	      actionBar: ({
	        wrapperVariant
	      }) => ({
	        actions: wrapperVariant === 'desktop' ? [] : ['clear', 'cancel', 'accept']
	      }),
	      textField: {
	        id: id + '-input',
	        required: required && !appliedUiSchemaOptions.hideRequiredAsterisk,
	        autoFocus: appliedUiSchemaOptions.focus,
	        error: !isValid,
	        fullWidth: !appliedUiSchemaOptions.trim,
	        inputProps: {
	          type: 'text'
	        },
	        InputLabelProps: data ? {
	          shrink: true
	        } : undefined,
	        onFocus: onFocus,
	        onBlur: onBlur,
	        variant: 'standard'
	      }
	    }
	  }), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: !isValid && !showDescription
	  }, firstFormHelperText), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: !isValid
	  }, secondFormHelperText)));
	};
	const materialDateControlTester = rankWith(4, isDateControl);
	var MaterialDateControl$1 = withJsonFormsControlProps(MaterialDateControl);
	const MaterialDateTimeControl = props => {
	  const [focused, onFocus, onBlur] = useFocus();
	  const {
	    id,
	    description,
	    errors,
	    label,
	    uischema,
	    visible,
	    enabled,
	    required,
	    path,
	    handleChange,
	    data,
	    config
	  } = props;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const isValid = errors.length === 0;
	  const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
	  const format = appliedUiSchemaOptions.dateTimeFormat ?? 'YYYY-MM-DD HH:mm';
	  const saveFormat = appliedUiSchemaOptions.dateTimeSaveFormat ?? undefined;
	  const views = appliedUiSchemaOptions.views ?? ['year', 'day', 'hours', 'minutes'];
	  const firstFormHelperText = showDescription ? description : !isValid ? errors : null;
	  const secondFormHelperText = showDescription && !isValid ? errors : null;
	  const onChange = reactExports.useMemo(() => createOnChangeHandler(path, handleChange, saveFormat), [path, handleChange, saveFormat]);
	  const value = getData(data, saveFormat);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(LocalizationProvider, {
	    dateAdapter: AdapterDayjs
	  }, /*#__PURE__*/React.createElement(DateTimePicker, {
	    label: label,
	    value: value,
	    onChange: onChange,
	    format: format,
	    ampm: !!appliedUiSchemaOptions.ampm,
	    views: views,
	    disabled: !enabled,
	    slotProps: {
	      actionBar: ({
	        wrapperVariant
	      }) => ({
	        actions: wrapperVariant === 'desktop' ? [] : ['clear', 'cancel', 'accept']
	      }),
	      textField: {
	        id: id + '-input',
	        required: required && !appliedUiSchemaOptions.hideRequiredAsterisk,
	        autoFocus: appliedUiSchemaOptions.focus,
	        error: !isValid,
	        fullWidth: !appliedUiSchemaOptions.trim,
	        inputProps: {
	          type: 'text'
	        },
	        InputLabelProps: data ? {
	          shrink: true
	        } : undefined,
	        onFocus: onFocus,
	        onBlur: onBlur,
	        variant: 'standard'
	      }
	    }
	  }), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: !isValid && !showDescription
	  }, firstFormHelperText), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: !isValid
	  }, secondFormHelperText)));
	};
	const materialDateTimeControlTester = rankWith(2, isDateTimeControl);
	var MaterialDateTimeControl$1 = withJsonFormsControlProps(MaterialDateTimeControl);
	const MaterialEnumControl = props => {
	  const {
	    config,
	    uischema,
	    errors
	  } = props;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const isValid = errors.length === 0;
	  return appliedUiSchemaOptions.autocomplete === false ? ( /*#__PURE__*/React.createElement(MaterialInputControl, Object.assign({}, props, {
	    input: MuiSelect
	  }))) : ( /*#__PURE__*/React.createElement(MuiAutocomplete, Object.assign({}, props, {
	    isValid: isValid
	  })));
	};
	const materialEnumControlTester = rankWith(2, isEnumControl);
	var MaterialEnumControl$1 = withJsonFormsEnumProps(withTranslateProps( /*#__PURE__*/React.memo(MaterialEnumControl)), false);
	const MaterialIntegerControl = props => ( /*#__PURE__*/React.createElement(MaterialInputControl, Object.assign({}, props, {
	  input: MuiInputInteger
	})));
	const materialIntegerControlTester = rankWith(2, isIntegerControl);
	var MaterialIntegerControl$1 = withJsonFormsControlProps(MaterialIntegerControl);
	const MaterialNativeControl = props => {
	  const [focused, onFocus, onBlur] = useFocus();
	  const {
	    id,
	    errors,
	    label,
	    schema,
	    description,
	    enabled,
	    visible,
	    required,
	    path,
	    handleChange,
	    data,
	    config
	  } = props;
	  const isValid = errors.length === 0;
	  const appliedUiSchemaOptions = merge$2({}, config, props.uischema.options);
	  const [inputValue, onChange] = useDebouncedChange(handleChange, '', data, path);
	  const fieldType = appliedUiSchemaOptions.format ?? schema.format;
	  const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(TextField$1, {
	    required: showAsRequired(required, appliedUiSchemaOptions.hideRequiredAsterisk),
	    id: id + '-input',
	    label: label,
	    type: fieldType,
	    error: !isValid,
	    disabled: !enabled,
	    fullWidth: !appliedUiSchemaOptions.trim,
	    onFocus: onFocus,
	    onBlur: onBlur,
	    helperText: !isValid ? errors : showDescription ? description : null,
	    InputLabelProps: {
	      shrink: true
	    },
	    value: inputValue,
	    onChange: onChange
	  }));
	};
	const materialNativeControlTester = rankWith(2, or(isDateControl, isTimeControl));
	var MaterialNativeControl$1 = withJsonFormsControlProps(MaterialNativeControl);
	const MaterialNumberControl = props => ( /*#__PURE__*/React.createElement(MaterialInputControl, Object.assign({}, props, {
	  input: MuiInputNumber
	})));
	const materialNumberControlTester = rankWith(2, isNumberControl);
	var MaterialNumberControl$1 = withJsonFormsControlProps(MaterialNumberControl);
	const MaterialOneOfEnumControl = props => {
	  const {
	    config,
	    uischema,
	    errors
	  } = props;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const isValid = errors.length === 0;
	  return appliedUiSchemaOptions.autocomplete === false ? ( /*#__PURE__*/React.createElement(MaterialInputControl, Object.assign({}, props, {
	    input: MuiSelect
	  }))) : ( /*#__PURE__*/React.createElement(MuiAutocomplete, Object.assign({}, props, {
	    isValid: isValid
	  })));
	};
	const materialOneOfEnumControlTester = rankWith(5, isOneOfEnumControl);
	var MaterialOneOfEnumControl$1 = withJsonFormsOneOfEnumProps(withTranslateProps( /*#__PURE__*/React.memo(MaterialOneOfEnumControl)), false);
	const MaterialRadioGroup = props => {
	  const [focused, onFocus, onBlur] = useFocus();
	  const {
	    config,
	    id,
	    label,
	    required,
	    description,
	    errors,
	    data,
	    visible,
	    options,
	    handleChange,
	    path,
	    enabled
	  } = props;
	  const isValid = errors.length === 0;
	  const appliedUiSchemaOptions = merge$2({}, config, props.uischema.options);
	  const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
	  const onChange = (_ev, value) => handleChange(path, value);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(FormControl$1, {
	    component: 'fieldset',
	    fullWidth: !appliedUiSchemaOptions.trim,
	    onFocus: onFocus,
	    onBlur: onBlur
	  }, /*#__PURE__*/React.createElement(FormLabel$1, {
	    htmlFor: id,
	    error: !isValid,
	    component: 'legend',
	    required: showAsRequired(required, appliedUiSchemaOptions.hideRequiredAsterisk)
	  }, label), /*#__PURE__*/React.createElement(RadioGroup$1, {
	    value: props.data ?? '',
	    onChange: onChange,
	    row: true
	  }, options.map(option => ( /*#__PURE__*/React.createElement(FormControlLabel$1, {
	    value: option.value,
	    key: option.label,
	    control: /*#__PURE__*/React.createElement(Radio$1, {
	      checked: data === option.value
	    }),
	    label: option.label,
	    disabled: !enabled
	  })))), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: !isValid
	  }, !isValid ? errors : showDescription ? description : null)));
	};
	const MaterialOneOfRadioGroupControl = props => {
	  return /*#__PURE__*/React.createElement(MaterialRadioGroup, Object.assign({}, props));
	};
	const materialOneOfRadioGroupControlTester = rankWith(20, and(isOneOfEnumControl, optionIs('format', 'radio')));
	var MaterialOneOfRadioGroupControl$1 = withJsonFormsOneOfEnumProps(MaterialOneOfRadioGroupControl);
	const MaterialRadioGroupControl = props => {
	  return /*#__PURE__*/React.createElement(MaterialRadioGroup, Object.assign({}, props));
	};
	const materialRadioGroupControlTester = rankWith(20, and(isEnumControl, optionIs('format', 'radio')));
	var MaterialRadioGroupControl$1 = withJsonFormsEnumProps(MaterialRadioGroupControl);
	const MaterialSliderControl = props => {
	  const [focused, onFocus, onBlur] = useFocus();
	  const {
	    id,
	    data,
	    description,
	    enabled,
	    errors,
	    label,
	    schema,
	    handleChange,
	    visible,
	    path,
	    required,
	    config
	  } = props;
	  const isValid = errors.length === 0;
	  const appliedUiSchemaOptions = merge$2({}, config, props.uischema.options);
	  const labelStyle = {
	    whiteSpace: 'nowrap',
	    overflow: 'hidden',
	    textOverflow: 'ellipsis',
	    width: '100%'
	  };
	  const rangeContainerStyle = {
	    display: 'flex'
	  };
	  const rangeItemStyle = {
	    flexGrow: '1'
	  };
	  const sliderStyle = {
	    marginTop: '7px'
	  };
	  const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
	  const onChange = reactExports.useCallback((_ev, value) => handleChange(path, Number(value)), [path, handleChange]);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(FormControl$1, {
	    fullWidth: !appliedUiSchemaOptions.trim,
	    onFocus: onFocus,
	    onBlur: onBlur,
	    id: id
	  }, /*#__PURE__*/React.createElement(FormLabel$1, {
	    htmlFor: id,
	    error: !isValid,
	    component: 'legend',
	    required: showAsRequired(required, appliedUiSchemaOptions.hideRequiredAsterisk)
	  }, /*#__PURE__*/React.createElement(Typography$1, {
	    id: id + '-typo',
	    style: labelStyle,
	    variant: 'caption'
	  }, label)), /*#__PURE__*/React.createElement("div", {
	    style: rangeContainerStyle
	  }, /*#__PURE__*/React.createElement(Typography$1, {
	    style: rangeItemStyle,
	    variant: 'caption',
	    align: 'left'
	  }, schema.minimum), /*#__PURE__*/React.createElement(Typography$1, {
	    style: rangeItemStyle,
	    variant: 'caption',
	    align: 'right'
	  }, schema.maximum)), /*#__PURE__*/React.createElement(Slider$1, {
	    style: sliderStyle,
	    min: schema.minimum,
	    max: schema.maximum,
	    value: Number(data || schema.default),
	    onChange: onChange,
	    id: id + '-input',
	    disabled: !enabled,
	    step: schema.multipleOf || 1
	  }), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: !isValid
	  }, !isValid ? errors : showDescription ? description : null)));
	};
	const materialSliderControlTester = rankWith(4, isRangeControl);
	var MaterialSliderControl$1 = withJsonFormsControlProps(MaterialSliderControl);
	const MaterialTextControl = props => ( /*#__PURE__*/React.createElement(MaterialInputControl, Object.assign({}, props, {
	  input: MuiInputText
	})));
	const materialTextControlTester = rankWith(1, isStringControl);
	var MaterialTextControl$1 = withJsonFormsControlProps(MaterialTextControl);
	const MaterialTimeControl = props => {
	  const [focused, onFocus, onBlur] = useFocus();
	  const {
	    id,
	    description,
	    errors,
	    label,
	    uischema,
	    visible,
	    enabled,
	    required,
	    path,
	    handleChange,
	    data,
	    config
	  } = props;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const isValid = errors.length === 0;
	  const showDescription = !isDescriptionHidden(visible, description, focused, appliedUiSchemaOptions.showUnfocusedDescription);
	  const format = appliedUiSchemaOptions.timeFormat ?? 'HH:mm';
	  const saveFormat = appliedUiSchemaOptions.timeSaveFormat ?? 'HH:mm:ss';
	  const views = appliedUiSchemaOptions.views ?? ['hours', 'minutes'];
	  const firstFormHelperText = showDescription ? description : !isValid ? errors : null;
	  const secondFormHelperText = showDescription && !isValid ? errors : null;
	  const onChange = reactExports.useMemo(() => createOnChangeHandler(path, handleChange, saveFormat), [path, handleChange, saveFormat]);
	  const value = getData(data, saveFormat);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(LocalizationProvider, {
	    dateAdapter: AdapterDayjs
	  }, /*#__PURE__*/React.createElement(TimePicker, {
	    label: label,
	    value: value,
	    onChange: onChange,
	    format: format,
	    ampm: !!appliedUiSchemaOptions.ampm,
	    views: views,
	    disabled: !enabled,
	    slotProps: {
	      actionBar: ({
	        wrapperVariant
	      }) => ({
	        actions: wrapperVariant === 'desktop' ? [] : ['clear', 'cancel', 'accept']
	      }),
	      textField: {
	        id: id + '-input',
	        required: required && !appliedUiSchemaOptions.hideRequiredAsterisk,
	        autoFocus: appliedUiSchemaOptions.focus,
	        error: !isValid,
	        fullWidth: !appliedUiSchemaOptions.trim,
	        inputProps: {
	          type: 'text'
	        },
	        InputLabelProps: data ? {
	          shrink: true
	        } : undefined,
	        onFocus: onFocus,
	        onBlur: onBlur,
	        variant: 'standard'
	      }
	    }
	  }), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: !isValid && !showDescription
	  }, firstFormHelperText), /*#__PURE__*/React.createElement(FormHelperText$1, {
	    error: !isValid
	  }, secondFormHelperText)));
	};
	const materialTimeControlTester = rankWith(4, isTimeControl);
	var MaterialTimeControl$1 = withJsonFormsControlProps(MaterialTimeControl);
	const iconStyle = {
	  float: 'right'
	};
	const ExpandPanelRendererComponent = props => {
	  const [labelHtmlId] = reactExports.useState(createId('expand-panel'));
	  reactExports.useEffect(() => {
	    return () => {
	      removeId(labelHtmlId);
	    };
	  }, [labelHtmlId]);
	  const {
	    enabled,
	    childLabel,
	    childPath,
	    index,
	    expanded,
	    moveDown,
	    moveUp,
	    enableMoveDown,
	    enableMoveUp,
	    handleExpansion,
	    removeItems,
	    path,
	    rootSchema,
	    schema,
	    uischema,
	    uischemas,
	    renderers,
	    cells,
	    config,
	    translations
	  } = props;
	  const foundUISchema = reactExports.useMemo(() => findUISchema(uischemas, schema, uischema.scope, path, undefined, uischema, rootSchema), [uischemas, schema, uischema.scope, path, uischema, rootSchema]);
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const showSortButtons = appliedUiSchemaOptions.showSortButtons || appliedUiSchemaOptions.showArrayLayoutSortButtons;
	  return /*#__PURE__*/React.createElement(Accordion$1, {
	    "aria-labelledby": labelHtmlId,
	    expanded: expanded,
	    onChange: handleExpansion(childPath)
	  }, /*#__PURE__*/React.createElement(AccordionSummary$1, {
	    expandIcon: /*#__PURE__*/React.createElement(default_1, null)
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    container: true,
	    alignItems: 'center'
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    item: true,
	    xs: 7,
	    md: 9
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    container: true,
	    alignItems: 'center'
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    item: true,
	    xs: 2,
	    md: 1
	  }, /*#__PURE__*/React.createElement(Avatar$1, {
	    "aria-label": 'Index'
	  }, index + 1)), /*#__PURE__*/React.createElement(Grid$1, {
	    item: true,
	    xs: 10,
	    md: 11
	  }, /*#__PURE__*/React.createElement("span", {
	    id: labelHtmlId
	  }, childLabel)))), /*#__PURE__*/React.createElement(Grid$1, {
	    item: true,
	    xs: 5,
	    md: 3
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    container: true,
	    justifyContent: 'flex-end'
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(Grid$1, {
	    container: true,
	    direction: 'row',
	    justifyContent: 'center',
	    alignItems: 'center'
	  }, showSortButtons && enabled ? ( /*#__PURE__*/React.createElement(reactExports.Fragment, null, /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(IconButton$1, {
	    onClick: moveUp(path, index),
	    style: iconStyle,
	    disabled: !enableMoveUp,
	    "aria-label": translations.upAriaLabel,
	    size: 'large'
	  }, /*#__PURE__*/React.createElement(default_1$4, null))), /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(IconButton$1, {
	    onClick: moveDown(path, index),
	    style: iconStyle,
	    disabled: !enableMoveDown,
	    "aria-label": translations.downAriaLabel,
	    size: 'large'
	  }, /*#__PURE__*/React.createElement(default_1$5, null))))) : '', enabled && ( /*#__PURE__*/React.createElement(Grid$1, {
	    item: true
	  }, /*#__PURE__*/React.createElement(IconButton$1, {
	    onClick: removeItems(path, [index]),
	    style: iconStyle,
	    "aria-label": translations.removeAriaLabel,
	    size: 'large'
	  }, /*#__PURE__*/React.createElement(default_1$6, null)))))))))), /*#__PURE__*/React.createElement(AccordionDetails$1, null, /*#__PURE__*/React.createElement(JsonFormsDispatch, {
	    enabled: enabled,
	    schema: schema,
	    uischema: foundUISchema,
	    path: childPath,
	    key: childPath,
	    renderers: renderers,
	    cells: cells
	  })));
	};
	const ExpandPanelRenderer = /*#__PURE__*/React.memo(ExpandPanelRendererComponent);
	const ctxDispatchToExpandPanelProps = dispatch => ({
	  removeItems: reactExports.useCallback((path, toDelete) => event => {
	    event.stopPropagation();
	    dispatch(update(path, array => {
	      toDelete.sort().reverse().forEach(s => array.splice(s, 1));
	      return array;
	    }));
	  }, [dispatch]),
	  moveUp: reactExports.useCallback((path, toMove) => event => {
	    event.stopPropagation();
	    dispatch(update(path, array => {
	      moveUp(array, toMove);
	      return array;
	    }));
	  }, [dispatch]),
	  moveDown: reactExports.useCallback((path, toMove) => event => {
	    event.stopPropagation();
	    dispatch(update(path, array => {
	      moveDown(array, toMove);
	      return array;
	    }));
	  }, [dispatch])
	});
	const withContextToExpandPanelProps = Component => function WithContextToExpandPanelProps({
	  ctx,
	  props
	}) {
	  const dispatchProps = ctxDispatchToExpandPanelProps(ctx.dispatch);
	  const {
	    childLabelProp,
	    schema,
	    path,
	    index,
	    uischemas
	  } = props;
	  const childPath = compose$1(path, `${index}`);
	  const childData = Resolve.data(ctx.core.data, childPath);
	  const childLabel = childLabelProp ? get$2(childData, childLabelProp, '') : get$2(childData, getFirstPrimitiveProp(schema), '');
	  return /*#__PURE__*/React.createElement(Component, Object.assign({}, props, dispatchProps, {
	    childLabel: childLabel,
	    childPath: childPath,
	    uischemas: uischemas
	  }));
	};
	const withJsonFormsExpandPanelProps = Component => withJsonFormsContext(withContextToExpandPanelProps(Component));
	var ExpandPanelRenderer$1 = withJsonFormsExpandPanelProps(ExpandPanelRenderer);
	const groupTester = rankWith(1, uiTypeIs('Group'));
	const style = {
	  marginBottom: '10px'
	};
	const GroupComponent = /*#__PURE__*/React.memo(function GroupComponent({
	  visible,
	  enabled,
	  uischema,
	  label,
	  ...props
	}) {
	  const groupLayout = uischema;
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(Card$1, {
	    style: style
	  }, !isEmpty$6(label) && /*#__PURE__*/React.createElement(CardHeader$1, {
	    title: label
	  }), /*#__PURE__*/React.createElement(CardContent$1, null, /*#__PURE__*/React.createElement(MaterialLayoutRenderer, Object.assign({}, props, {
	    visible: visible,
	    enabled: enabled,
	    elements: groupLayout.elements
	  })))));
	});
	const MaterializedGroupLayoutRenderer = ({
	  uischema,
	  schema,
	  path,
	  visible,
	  enabled,
	  renderers,
	  cells,
	  direction,
	  label
	}) => {
	  const groupLayout = uischema;
	  return /*#__PURE__*/React.createElement(GroupComponent, {
	    elements: groupLayout.elements,
	    schema: schema,
	    path: path,
	    direction: direction,
	    visible: visible,
	    enabled: enabled,
	    uischema: uischema,
	    renderers: renderers,
	    cells: cells,
	    label: label
	  });
	};
	var MaterialGroupLayout = withJsonFormsLayoutProps(MaterializedGroupLayoutRenderer);
	const materialGroupTester = withIncreasedRank(1, groupTester);
	const materialHorizontalLayoutTester = rankWith(2, uiTypeIs('HorizontalLayout'));
	const MaterialHorizontalLayoutRenderer = ({
	  uischema,
	  renderers,
	  cells,
	  schema,
	  path,
	  enabled,
	  visible
	}) => {
	  const layout = uischema;
	  const childProps = {
	    elements: layout.elements,
	    schema,
	    path,
	    enabled,
	    direction: 'row',
	    visible
	  };
	  return /*#__PURE__*/React.createElement(MaterialLayoutRenderer, Object.assign({}, childProps, {
	    renderers: renderers,
	    cells: cells
	  }));
	};
	var MaterialHorizontalLayout = withJsonFormsLayoutProps(MaterialHorizontalLayoutRenderer);
	const materialVerticalLayoutTester = rankWith(1, uiTypeIs('VerticalLayout'));
	const MaterialVerticalLayoutRenderer = ({
	  uischema,
	  schema,
	  path,
	  enabled,
	  visible,
	  renderers,
	  cells
	}) => {
	  const verticalLayout = uischema;
	  const childProps = {
	    elements: verticalLayout.elements,
	    schema,
	    path,
	    enabled,
	    direction: 'column',
	    visible
	  };
	  return /*#__PURE__*/React.createElement(MaterialLayoutRenderer, Object.assign({}, childProps, {
	    renderers: renderers,
	    cells: cells
	  }));
	};
	var MaterialVerticalLayout = withJsonFormsLayoutProps(MaterialVerticalLayoutRenderer);
	const isSingleLevelCategorization = and(uiTypeIs('Categorization'), uischema => {
	  const categorization = uischema;
	  return categorization.elements && categorization.elements.reduce((acc, e) => acc && e.type === 'Category', true);
	});
	const materialCategorizationTester = rankWith(1, isSingleLevelCategorization);
	const MaterialCategorizationLayoutRenderer = props => {
	  const {
	    data,
	    path,
	    renderers,
	    cells,
	    schema,
	    uischema,
	    visible,
	    enabled,
	    selected,
	    onChange,
	    ajv,
	    t
	  } = props;
	  const categorization = uischema;
	  const [previousCategorization, setPreviousCategorization] = reactExports.useState(uischema);
	  const [activeCategory, setActiveCategory] = reactExports.useState(selected ?? 0);
	  const categories = reactExports.useMemo(() => categorization.elements.filter(category => isVisible(category, data, undefined, ajv)), [categorization, data, ajv]);
	  if (categorization !== previousCategorization) {
	    setActiveCategory(0);
	    setPreviousCategorization(categorization);
	  }
	  const safeCategory = activeCategory >= categorization.elements.length ? 0 : activeCategory;
	  const childProps = {
	    elements: categories[safeCategory] ? categories[safeCategory].elements : [],
	    schema,
	    path,
	    direction: 'column',
	    enabled,
	    visible,
	    renderers,
	    cells
	  };
	  const onTabChange = (_event, value) => {
	    if (onChange) {
	      onChange(value, safeCategory);
	    }
	    setActiveCategory(value);
	  };
	  const tabLabels = reactExports.useMemo(() => {
	    return categories.map(e => deriveLabelForUISchemaElement(e, t));
	  }, [categories, t]);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(AppBar$1, {
	    position: 'static'
	  }, /*#__PURE__*/React.createElement(Tabs$1, {
	    value: safeCategory,
	    onChange: onTabChange,
	    textColor: 'inherit',
	    indicatorColor: 'secondary',
	    variant: 'scrollable'
	  }, categories.map((_, idx) => ( /*#__PURE__*/React.createElement(Tab$1, {
	    key: idx,
	    label: tabLabels[idx]
	  }))))), /*#__PURE__*/React.createElement("div", {
	    style: {
	      marginTop: '0.5em'
	    }
	  }, /*#__PURE__*/React.createElement(MaterialLayoutRenderer, Object.assign({}, childProps, {
	    key: safeCategory
	  }))));
	};
	var MaterialCategorizationLayout = withAjvProps(withTranslateProps(withJsonFormsLayoutProps(MaterialCategorizationLayoutRenderer)));
	const MaterialArrayLayoutComponent = props => {
	  const [expanded, setExpanded] = reactExports.useState(false);
	  const innerCreateDefaultValue = reactExports.useCallback(() => createDefaultValue(props.schema), [props.schema]);
	  const handleChange = reactExports.useCallback(panel => (_event, expandedPanel) => {
	    setExpanded(expandedPanel ? panel : false);
	  }, []);
	  const isExpanded = index => expanded === compose$1(props.path, `${index}`);
	  const {
	    enabled,
	    data,
	    path,
	    schema,
	    uischema,
	    errors,
	    addItem,
	    renderers,
	    cells,
	    label,
	    required,
	    rootSchema,
	    config,
	    uischemas,
	    translations
	  } = props;
	  const appliedUiSchemaOptions = merge$2({}, config, props.uischema.options);
	  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(ArrayLayoutToolbar, {
	    translations: translations,
	    label: computeLabel(label, required, appliedUiSchemaOptions.hideRequiredAsterisk),
	    errors: errors,
	    path: path,
	    enabled: enabled,
	    addItem: addItem,
	    createDefault: innerCreateDefaultValue
	  }), /*#__PURE__*/React.createElement("div", null, data > 0 ? map$1(range$1(data), index => {
	    return /*#__PURE__*/React.createElement(ExpandPanelRenderer$1, {
	      enabled: enabled,
	      index: index,
	      expanded: isExpanded(index),
	      schema: schema,
	      path: path,
	      handleExpansion: handleChange,
	      uischema: uischema,
	      renderers: renderers,
	      cells: cells,
	      key: index,
	      rootSchema: rootSchema,
	      enableMoveUp: index != 0,
	      enableMoveDown: index < data - 1,
	      config: config,
	      childLabelProp: appliedUiSchemaOptions.elementLabelProp,
	      uischemas: uischemas,
	      translations: translations
	    });
	  }) : ( /*#__PURE__*/React.createElement("p", null, "No data"))));
	};
	const MaterialArrayLayout$1 = /*#__PURE__*/React.memo(MaterialArrayLayoutComponent);
	const MaterialArrayLayoutRenderer = ({
	  visible,
	  addItem,
	  ...props
	}) => {
	  const addItemCb = reactExports.useCallback((p, value) => addItem(p, value), [addItem]);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(MaterialArrayLayout$1, Object.assign({
	    visible: visible,
	    addItem: addItemCb
	  }, props)));
	};
	const materialArrayLayoutTester = rankWith(4, isObjectArrayWithNesting);
	var MaterialArrayLayout = withJsonFormsArrayLayoutProps(MaterialArrayLayoutRenderer);
	const MaterialBooleanCell = props => {
	  return /*#__PURE__*/React.createElement(MuiCheckbox, Object.assign({}, props));
	};
	const materialBooleanCellTester = rankWith(2, isBooleanControl);
	var MaterialBooleanCell$1 = withJsonFormsCellProps(MaterialBooleanCell);
	const MaterialBooleanToggleCell = props => {
	  return /*#__PURE__*/React.createElement(MuiToggle, Object.assign({}, props));
	};
	const materialBooleanToggleCellTester = rankWith(3, and(isBooleanControl, optionIs('toggle', true)));
	var MaterialBooleanToggleCell$1 = withJsonFormsCellProps(MaterialBooleanToggleCell);
	const MaterialDateCell = props => {
	  const {
	    data,
	    className,
	    id,
	    enabled,
	    uischema,
	    path,
	    handleChange,
	    config
	  } = props;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  return /*#__PURE__*/React.createElement(Input$1, {
	    type: 'date',
	    value: data || '',
	    onChange: ev => handleChange(path, ev.target.value),
	    className: className,
	    id: id,
	    disabled: !enabled,
	    autoFocus: appliedUiSchemaOptions.focus,
	    fullWidth: true
	  });
	};
	const materialDateCellTester = rankWith(2, isDateControl);
	var MaterialDateCell$1 = withJsonFormsCellProps(MaterialDateCell);
	const MaterialEnumCell = props => /*#__PURE__*/React.createElement(MuiSelect, Object.assign({}, props));
	const materialEnumCellTester = rankWith(2, isEnumControl);
	var MaterialEnumCell$1 = withJsonFormsEnumCellProps(withTranslateProps( /*#__PURE__*/React.memo(MaterialEnumCell)), false);
	const MaterialIntegerCell = props => ( /*#__PURE__*/React.createElement(MuiInputInteger, Object.assign({}, props)));
	const materialIntegerCellTester = rankWith(2, isIntegerControl);
	var MaterialIntegerCell$1 = withJsonFormsCellProps(MaterialIntegerCell);
	const MaterialNumberCell = props => ( /*#__PURE__*/React.createElement(MuiInputNumber, Object.assign({}, props)));
	const materialNumberCellTester = rankWith(2, isNumberControl);
	var MaterialNumberCell$1 = withJsonFormsCellProps(MaterialNumberCell);
	const MaterialNumberFormatCell = props => /*#__PURE__*/React.createElement(MuiInputNumberFormat, Object.assign({}, props));
	const materialNumberFormatCellTester = rankWith(4, isNumberFormatControl);
	var MaterialNumberFormatCell$1 = withJsonFormsCellProps(MaterialNumberFormatCell);
	const MaterialOneOfEnumCell = props => /*#__PURE__*/React.createElement(MuiSelect, Object.assign({}, props));
	const materialOneOfEnumCellTester = rankWith(2, isOneOfEnumControl);
	var MaterialOneOfEnumCell$1 = withJsonFormsOneOfEnumCellProps(withTranslateProps( /*#__PURE__*/React.memo(MaterialOneOfEnumCell)), false);
	const MaterialTextCell = props => ( /*#__PURE__*/React.createElement(MuiInputText, Object.assign({}, props)));
	const materialTextCellTester = rankWith(1, isStringControl);
	var MaterialTextCell$1 = withJsonFormsCellProps(MaterialTextCell);
	const MaterialTimeCell = props => ( /*#__PURE__*/React.createElement(MuiInputTime, Object.assign({}, props)));
	const materialTimeCellTester = rankWith(2, isTimeControl);
	var MaterialTimeCell$1 = withJsonFormsCellProps(MaterialTimeCell);
	const materialCategorizationStepperTester = rankWith(2, and(uiTypeIs('Categorization'), categorizationHasCategory, optionIs('variant', 'stepper')));
	const MaterialCategorizationStepperLayoutRenderer = props => {
	  const [activeCategory, setActiveCategory] = reactExports.useState(0);
	  const handleStep = step => {
	    setActiveCategory(step);
	  };
	  const {
	    data,
	    path,
	    renderers,
	    schema,
	    uischema,
	    visible,
	    cells,
	    config,
	    ajv,
	    t
	  } = props;
	  const categorization = uischema;
	  const appliedUiSchemaOptions = merge$2({}, config, uischema.options);
	  const buttonWrapperStyle = {
	    textAlign: 'right',
	    width: '100%',
	    margin: '1em auto'
	  };
	  const buttonNextStyle = {
	    float: 'right'
	  };
	  const buttonStyle = {
	    marginRight: '1em'
	  };
	  const categories = reactExports.useMemo(() => categorization.elements.filter(category => isVisible(category, data, undefined, ajv)), [categorization, data, ajv]);
	  const childProps = {
	    elements: categories[activeCategory].elements,
	    schema,
	    path,
	    direction: 'column',
	    visible,
	    renderers,
	    cells
	  };
	  const tabLabels = reactExports.useMemo(() => {
	    return categories.map(e => deriveLabelForUISchemaElement(e, t));
	  }, [categories, t]);
	  return /*#__PURE__*/React.createElement(Hidden, {
	    xsUp: !visible
	  }, /*#__PURE__*/React.createElement(Stepper$1, {
	    activeStep: activeCategory,
	    nonLinear: true
	  }, categories.map((_, idx) => ( /*#__PURE__*/React.createElement(Step$1, {
	    key: tabLabels[idx]
	  }, /*#__PURE__*/React.createElement(StepButton$1, {
	    onClick: () => handleStep(idx)
	  }, tabLabels[idx]))))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(MaterialLayoutRenderer, Object.assign({}, childProps))), appliedUiSchemaOptions.showNavButtons ? ( /*#__PURE__*/React.createElement("div", {
	    style: buttonWrapperStyle
	  }, /*#__PURE__*/React.createElement(Button$1, {
	    style: buttonNextStyle,
	    variant: 'contained',
	    color: 'primary',
	    disabled: activeCategory >= categories.length - 1,
	    onClick: () => handleStep(activeCategory + 1)
	  }, "Next"), /*#__PURE__*/React.createElement(Button$1, {
	    style: buttonStyle,
	    color: 'secondary',
	    variant: 'contained',
	    disabled: activeCategory <= 0,
	    onClick: () => handleStep(activeCategory - 1)
	  }, "Previous"))) : ( /*#__PURE__*/React.createElement(React.Fragment, null)));
	};
	var MaterialCategorizationStepperLayout = withAjvProps(withTranslateProps(withJsonFormsLayoutProps(MaterialCategorizationStepperLayoutRenderer)));
	const materialRenderers = [{
	  tester: materialArrayControlTester,
	  renderer: MaterialArrayControlRenderer$1
	}, {
	  tester: materialBooleanControlTester,
	  renderer: MaterialBooleanControl$1
	}, {
	  tester: materialBooleanToggleControlTester,
	  renderer: MaterialBooleanToggleControl$1
	}, {
	  tester: materialNativeControlTester,
	  renderer: MaterialNativeControl$1
	}, {
	  tester: materialEnumControlTester,
	  renderer: MaterialEnumControl$1
	}, {
	  tester: materialIntegerControlTester,
	  renderer: MaterialIntegerControl$1
	}, {
	  tester: materialNumberControlTester,
	  renderer: MaterialNumberControl$1
	}, {
	  tester: materialTextControlTester,
	  renderer: MaterialTextControl$1
	}, {
	  tester: materialDateTimeControlTester,
	  renderer: MaterialDateTimeControl$1
	}, {
	  tester: materialDateControlTester,
	  renderer: MaterialDateControl$1
	}, {
	  tester: materialTimeControlTester,
	  renderer: MaterialTimeControl$1
	}, {
	  tester: materialSliderControlTester,
	  renderer: MaterialSliderControl$1
	}, {
	  tester: materialObjectControlTester,
	  renderer: MaterialObjectRenderer$1
	}, {
	  tester: materialAllOfControlTester,
	  renderer: MaterialAllOfRenderer$1
	}, {
	  tester: materialAnyOfControlTester,
	  renderer: MaterialAnyOfRenderer$1
	}, {
	  tester: materialOneOfControlTester,
	  renderer: MaterialOneOfRenderer$1
	}, {
	  tester: materialRadioGroupControlTester,
	  renderer: MaterialRadioGroupControl$1
	}, {
	  tester: materialOneOfRadioGroupControlTester,
	  renderer: MaterialOneOfRadioGroupControl$1
	}, {
	  tester: materialOneOfEnumControlTester,
	  renderer: MaterialOneOfEnumControl$1
	}, {
	  tester: materialGroupTester,
	  renderer: MaterialGroupLayout
	}, {
	  tester: materialHorizontalLayoutTester,
	  renderer: MaterialHorizontalLayout
	}, {
	  tester: materialVerticalLayoutTester,
	  renderer: MaterialVerticalLayout
	}, {
	  tester: materialCategorizationTester,
	  renderer: MaterialCategorizationLayout
	}, {
	  tester: materialCategorizationStepperTester,
	  renderer: MaterialCategorizationStepperLayout
	}, {
	  tester: materialArrayLayoutTester,
	  renderer: MaterialArrayLayout
	}, {
	  tester: materialLabelRendererTester,
	  renderer: MaterialLabelRenderer$1
	}, {
	  tester: materialListWithDetailTester,
	  renderer: MaterialListWithDetailRenderer$1
	}, {
	  tester: materialAnyOfStringOrEnumControlTester,
	  renderer: MaterialAnyOfStringOrEnumControl$1
	}, {
	  tester: materialEnumArrayRendererTester,
	  renderer: MaterialEnumArrayRenderer$1
	}];
	const materialCells = [{
	  tester: materialBooleanCellTester,
	  cell: MaterialBooleanCell$1
	}, {
	  tester: materialBooleanToggleCellTester,
	  cell: MaterialBooleanToggleCell$1
	}, {
	  tester: materialDateCellTester,
	  cell: MaterialDateCell$1
	}, {
	  tester: materialEnumCellTester,
	  cell: MaterialEnumCell$1
	}, {
	  tester: materialIntegerCellTester,
	  cell: MaterialIntegerCell$1
	}, {
	  tester: materialNumberCellTester,
	  cell: MaterialNumberCell$1
	}, {
	  tester: materialNumberFormatCellTester,
	  cell: MaterialNumberFormatCell$1
	}, {
	  tester: materialOneOfEnumCellTester,
	  cell: MaterialOneOfEnumCell$1
	}, {
	  tester: materialTextCellTester,
	  cell: MaterialTextCell$1
	}, {
	  tester: materialTimeCellTester,
	  cell: MaterialTimeCell$1
	}];

	function renderForm(form) {
	  const schema = JSON.parse(form.dataset.schema);
	  JSON.parse(form.dataset.uischema);
	  const formData = JSON.parse(form.dataset.formdata);
	  document.getElementById(`id_${form.dataset.name}`);
	  function App() {
	    const [data, setData] = reactExports.useState(formData);
	    return /*#__PURE__*/React.createElement("div", {
	      className: "App"
	    }, /*#__PURE__*/React.createElement(JsonForms, {
	      schema: schema,
	      data: data,
	      renderers: materialRenderers,
	      cells: materialCells,
	      onChange: ({
	        data,
	        errors
	      }) => setData(data)
	    }));
	  }
	  const root = createRoot(form);
	  root.render( /*#__PURE__*/reactExports.createElement(App));
	}
	document.addEventListener('DOMContentLoaded', () => {
	  const forms = document.querySelectorAll('.structured-field-editor');
	  for (let i = 0; i < forms.length; i++) {
	    renderForm(forms[i]);
	  }
	});

})();
