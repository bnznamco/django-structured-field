import{_ as t,c as p,a as o,b as a,e as i,d as n,w as l,r,o as c}from"./app-B4__nN3S.js";const d={};function u(m,s){const e=r("RouteLink");return c(),p("div",null,[s[6]||(s[6]=o(`<h1 id="üåç-rest-framework-integration" tabindex="-1"><a class="header-anchor" href="#üåç-rest-framework-integration"><span>üåç REST Framework Integration</span></a></h1><p>This guide explains how to integrate Django Structured JSON Field with Django Rest Framework (DRF).</p><h2 id="üöÄ-basic-setup" tabindex="-1"><a class="header-anchor" href="#üöÄ-basic-setup"><span>üöÄ Basic Setup</span></a></h2><h3 id="_1Ô∏è‚É£-install-dependencies" tabindex="-1"><a class="header-anchor" href="#_1Ô∏è‚É£-install-dependencies"><span>1Ô∏è‚É£ Install Dependencies</span></a></h3><p>Make sure you have Django Rest Framework installed:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">pip <span class="token function">install</span> djangorestframework</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_2Ô∏è‚É£-configure-settings" tabindex="-1"><a class="header-anchor" href="#_2Ô∏è‚É£-configure-settings"><span>2Ô∏è‚É£ Configure Settings</span></a></h3><p>Add &#39;rest_framework&#39; to your INSTALLED_APPS in settings.py:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token comment"># Django apps</span></span>
<span class="line">    <span class="token string">&#39;django.contrib.admin&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;django.contrib.auth&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;django.contrib.contenttypes&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;django.contrib.sessions&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;django.contrib.messages&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;django.contrib.staticfiles&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Third party apps</span></span>
<span class="line">    <span class="token string">&#39;rest_framework&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&#39;structured&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Your apps</span></span>
<span class="line">    <span class="token string">&#39;myapp&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="üß©-using-structuredmodelserializer" tabindex="-1"><a class="header-anchor" href="#üß©-using-structuredmodelserializer"><span>üß© Using StructuredModelSerializer</span></a></h2><p>The package provides a special serializer class called <code>StructuredModelSerializer</code> that automatically handles the serialization and deserialization of structured fields.</p><h3 id="üìå-basic-usage" tabindex="-1"><a class="header-anchor" href="#üìå-basic-usage"><span>üìå Basic Usage</span></a></h3><p>Simply use <code>StructuredModelSerializer</code> instead of the standard DRF <code>ModelSerializer</code>:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers</span>
<span class="line"><span class="token keyword">from</span> structured<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>rest_framework <span class="token keyword">import</span> StructuredModelSerializer</span>
<span class="line"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> MyModel</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyModelSerializer</span><span class="token punctuation">(</span>StructuredModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span></span>
<span class="line">        model <span class="token operator">=</span> MyModel</span>
<span class="line">        fields <span class="token operator">=</span> <span class="token string">&#39;__all__&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That&#39;s it! The serializer will automatically handle your structured fields, including:</p><ul><li>Proper serialization of nested data</li><li>Validation based on your Pydantic schema</li><li>Translation of Pydantic validation errors to DRF errors</li><li>Handling of related models (ForeignKey and QuerySet fields)</li></ul><h3 id="‚öôÔ∏è-how-it-works" tabindex="-1"><a class="header-anchor" href="#‚öôÔ∏è-how-it-works"><span>‚öôÔ∏è How It Works</span></a></h3><p>When you use <code>StructuredModelSerializer</code>:</p><ol><li><p>For <strong>serialization</strong> (Python ‚Üí JSON):</p><ul><li>Structured fields are automatically converted to their JSON representation</li><li>Foreign keys are serialized as their IDs</li><li>QuerySets are serialized as lists of IDs</li></ul></li><li><p>For <strong>deserialization</strong> (JSON ‚Üí Python):</p><ul><li>JSON data is validated against your Pydantic schema</li><li>Foreign keys are converted to model instances</li><li>Lists of IDs are converted to QuerySets</li></ul></li></ol><h3 id="üìä-example-response" tabindex="-1"><a class="header-anchor" href="#üìä-example-response"><span>üìä Example Response</span></a></h3><p>A model with a structured field:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">PersonSchema</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token builtin">str</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">    friends<span class="token punctuation">:</span> QuerySet<span class="token punctuation">[</span>User<span class="token punctuation">]</span>  <span class="token comment"># A Django User model</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">    data <span class="token operator">=</span> StructuredJSONField<span class="token punctuation">(</span>schema<span class="token operator">=</span>PersonSchema<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Will be serialized as:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Example Person&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;friends&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>  <span class="token comment">// User IDs</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="‚ö†Ô∏è-error-handling" tabindex="-1"><a class="header-anchor" href="#‚ö†Ô∏è-error-handling"><span>‚ö†Ô∏è Error Handling</span></a></h2><p>One of the key benefits of using <code>StructuredModelSerializer</code> is that Pydantic validation errors are automatically translated to DRF-style errors.</p><h3 id="üö´-error-response-example" tabindex="-1"><a class="header-anchor" href="#üö´-error-response-example"><span>üö´ Error Response Example</span></a></h3><p>If a client sends invalid data:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Example&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token number">123</span><span class="token punctuation">,</span>  <span class="token comment">// Should be a string</span></span>
<span class="line">    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token string">&quot;thirty&quot;</span>  <span class="token comment">// Should be an integer</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The response will contain proper validation errors:</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;String expected&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;Value is not a valid integer&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="üîß-custom-field-handling" tabindex="-1"><a class="header-anchor" href="#üîß-custom-field-handling"><span>üîß Custom Field Handling</span></a></h2><p>You can still customize field behavior in your serializer:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers</span>
<span class="line"><span class="token keyword">from</span> structured<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>rest_framework <span class="token keyword">import</span> StructuredModelSerializer</span>
<span class="line"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> MyModel</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyModelSerializer</span><span class="token punctuation">(</span>StructuredModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    extra_field <span class="token operator">=</span> serializers<span class="token punctuation">.</span>SerializerMethodField<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span></span>
<span class="line">        model <span class="token operator">=</span> MyModel</span>
<span class="line">        fields <span class="token operator">=</span> <span class="token string">&#39;__all__&#39;</span></span>
<span class="line">        </span>
<span class="line">    <span class="token keyword">def</span> <span class="token function">get_extra_field</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f&quot;Name: </span><span class="token interpolation"><span class="token punctuation">{</span>obj<span class="token punctuation">.</span>structured_data<span class="token punctuation">.</span>name<span class="token punctuation">}</span></span><span class="token string">, Age: </span><span class="token interpolation"><span class="token punctuation">{</span>obj<span class="token punctuation">.</span>structured_data<span class="token punctuation">.</span>age<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="üñ•Ô∏è-working-with-views" tabindex="-1"><a class="header-anchor" href="#üñ•Ô∏è-working-with-views"><span>üñ•Ô∏è Working with Views</span></a></h2><p>You can use the serializer with any DRF view type:</p><h3 id="üì¶-viewset-example" tabindex="-1"><a class="header-anchor" href="#üì¶-viewset-example"><span>üì¶ ViewSet Example</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> viewsets</span>
<span class="line"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> MyModel</span>
<span class="line"><span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> MyModelSerializer</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyModelViewSet</span><span class="token punctuation">(</span>viewsets<span class="token punctuation">.</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    queryset <span class="token operator">=</span> MyModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    serializer_class <span class="token operator">=</span> MyModelSerializer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="üîÑ-function-based-view-example" tabindex="-1"><a class="header-anchor" href="#üîÑ-function-based-view-example"><span>üîÑ Function-Based View Example</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view</span>
<span class="line"><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response</span>
<span class="line"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> MyModel</span>
<span class="line"><span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> MyModelSerializer</span>
<span class="line"></span>
<span class="line"><span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">get_my_models</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    models <span class="token operator">=</span> MyModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    serializer <span class="token operator">=</span> MyModelSerializer<span class="token punctuation">(</span>models<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="üí°-best-practices" tabindex="-1"><a class="header-anchor" href="#üí°-best-practices"><span>üí° Best Practices</span></a></h2><ol><li><p><strong>üìÅ Serializer Organization</strong>:</p><ul><li>Keep your serializers in a separate <code>serializers.py</code> file</li><li>Follow DRF conventions for clarity and maintainability</li><li>Reuse serializers for similar models or schemas</li></ul></li><li><p><strong>‚úÖ Validation</strong>:</p><ul><li>Use Pydantic validators in your schema for field-specific validation</li><li>Use DRF serializer validation for cross-field validation</li><li>Provide clear error messages in all validators</li></ul></li><li><p><strong>‚ö° Performance</strong>:</p><ul><li>Enable caching to optimize query performance with related fields</li><li>Use appropriate database indexing for fields used in filtering</li><li>Consider pagination for endpoints returning multiple items</li></ul></li><li><p><strong>üîí Security</strong>:</p><ul><li>Be careful with nested writable serializers and permissions</li><li>Validate data at both the schema and serializer levels</li><li>Use appropriate authentication and permission classes</li></ul></li></ol><h2 id="‚ùì-common-issues-and-solutions" tabindex="-1"><a class="header-anchor" href="#‚ùì-common-issues-and-solutions"><span>‚ùì Common Issues and Solutions</span></a></h2><ol><li><p><strong>üö´ Schema Validation Errors</strong>:</p><ul><li>Ensure your schema is correctly defined with proper types</li><li>Remember that DRF may convert some types (e.g., strings to numbers)</li><li>Check the exact error message to identify the issue</li></ul></li><li><p><strong>üîó Related Fields Not Working</strong>:</p><ul><li>Verify that the model exists and is correctly referenced</li><li>Check that the IDs being passed actually exist in the database</li><li>Make sure you&#39;re using the correct field type (ForeignKey vs QuerySet)</li></ul></li><li><p><strong>üê¢ Performance Issues</strong>:</p><ul><li>Enable caching for better performance with related fields</li><li>Use <code>select_related()</code> and <code>prefetch_related()</code> in your querysets</li><li>Optimize database queries by selecting only needed fields</li></ul></li></ol><h2 id="üîÑ-next-steps" tabindex="-1"><a class="header-anchor" href="#üîÑ-next-steps"><span>üîÑ Next Steps</span></a></h2><p>After mastering REST Framework integration, you might want to explore:</p>`,46)),a("ul",null,[a("li",null,[i(e,{to:"/Guide/How%20to/Caching/"},{default:l(()=>s[0]||(s[0]=[n("‚ö° Caching")])),_:1}),s[1]||(s[1]=n(" for optimizing API performance"))]),a("li",null,[i(e,{to:"/Guide/How%20to/Relationships/"},{default:l(()=>s[2]||(s[2]=[n("üîó Relationships")])),_:1}),s[3]||(s[3]=n(" for more complex data structures"))]),a("li",null,[i(e,{to:"/Guide/How%20to/Admin%20Integration/"},{default:l(()=>s[4]||(s[4]=[n("üß∞ Admin Integration")])),_:1}),s[5]||(s[5]=n(" for managing data through the admin interface"))])])])}const v=t(d,[["render",u]]),h=JSON.parse('{"path":"/Guide/How%20to/REST%20Framework%20Integration/","title":"üåç REST Framework Integration","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"üöÄ Basic Setup","slug":"üöÄ-basic-setup","link":"#üöÄ-basic-setup","children":[{"level":3,"title":"1Ô∏è‚É£ Install Dependencies","slug":"_1Ô∏è‚É£-install-dependencies","link":"#_1Ô∏è‚É£-install-dependencies","children":[]},{"level":3,"title":"2Ô∏è‚É£ Configure Settings","slug":"_2Ô∏è‚É£-configure-settings","link":"#_2Ô∏è‚É£-configure-settings","children":[]}]},{"level":2,"title":"üß© Using StructuredModelSerializer","slug":"üß©-using-structuredmodelserializer","link":"#üß©-using-structuredmodelserializer","children":[{"level":3,"title":"üìå Basic Usage","slug":"üìå-basic-usage","link":"#üìå-basic-usage","children":[]},{"level":3,"title":"‚öôÔ∏è How It Works","slug":"‚öôÔ∏è-how-it-works","link":"#‚öôÔ∏è-how-it-works","children":[]},{"level":3,"title":"üìä Example Response","slug":"üìä-example-response","link":"#üìä-example-response","children":[]}]},{"level":2,"title":"‚ö†Ô∏è Error Handling","slug":"‚ö†Ô∏è-error-handling","link":"#‚ö†Ô∏è-error-handling","children":[{"level":3,"title":"üö´ Error Response Example","slug":"üö´-error-response-example","link":"#üö´-error-response-example","children":[]}]},{"level":2,"title":"üîß Custom Field Handling","slug":"üîß-custom-field-handling","link":"#üîß-custom-field-handling","children":[]},{"level":2,"title":"üñ•Ô∏è Working with Views","slug":"üñ•Ô∏è-working-with-views","link":"#üñ•Ô∏è-working-with-views","children":[{"level":3,"title":"üì¶ ViewSet Example","slug":"üì¶-viewset-example","link":"#üì¶-viewset-example","children":[]},{"level":3,"title":"üîÑ Function-Based View Example","slug":"üîÑ-function-based-view-example","link":"#üîÑ-function-based-view-example","children":[]}]},{"level":2,"title":"üí° Best Practices","slug":"üí°-best-practices","link":"#üí°-best-practices","children":[]},{"level":2,"title":"‚ùì Common Issues and Solutions","slug":"‚ùì-common-issues-and-solutions","link":"#‚ùì-common-issues-and-solutions","children":[]},{"level":2,"title":"üîÑ Next Steps","slug":"üîÑ-next-steps","link":"#üîÑ-next-steps","children":[]}],"git":{"updatedTime":1742998502000,"contributors":[{"name":"bnznamco","username":"bnznamco","email":"gabriele.baldi.01@gmail.com","commits":3,"url":"https://github.com/bnznamco"}],"changelog":[{"hash":"695f3a53d7ba8180183e8cb2e0cabcd2ffbd0893","time":1742998502000,"email":"gabriele.baldi.01@gmail.com","author":"bnznamco","message":"docs: update contents"},{"hash":"a03b155355b11640e5a70a3df3068c393c90f6b1","time":1742982268000,"email":"gabriele.baldi.01@gmail.com","author":"bnznamco","message":"docs: updated to vuepress 2"},{"hash":"853b7590c1e47d887ae5c09c54d82094e5b20d66","time":1742974046000,"email":"gabriele.baldi.01@gmail.com","author":"bnznamco","message":"docs: added github-pages docs"}]},"filePathRelative":"Guide/How to/REST Framework Integration/README.md"}');export{v as comp,h as data};
