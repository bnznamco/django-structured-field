import{_ as l,c as p,a as o,b as s,e,w as t,r as c,o as r,d as i}from"./app-B4__nN3S.js";const u={};function d(m,n){const a=c("RouteLink");return r(),p("div",null,[n[3]||(n[3]=o(`<h1 id="üì¶-installation-and-basic-usage" tabindex="-1"><a class="header-anchor" href="#üì¶-installation-and-basic-usage"><span>üì¶ Installation and Basic Usage</span></a></h1><p>This guide will help you get started with Django Structured JSON Field.</p><h2 id="üöÄ-installation" tabindex="-1"><a class="header-anchor" href="#üöÄ-installation"><span>üöÄ Installation</span></a></h2><p>Install the package using pip:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">pip <span class="token function">install</span> django-structured-json-field</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="üß©-basic-usage" tabindex="-1"><a class="header-anchor" href="#üß©-basic-usage"><span>üß© Basic Usage</span></a></h2><h3 id="_1Ô∏è‚É£-define-your-schema" tabindex="-1"><a class="header-anchor" href="#_1Ô∏è‚É£-define-your-schema"><span>1Ô∏è‚É£ Define Your Schema</span></a></h3><p>First, you need to define your schema using Pydantic models. Create a new file (e.g., <code>schemas.py</code>) and define your schema:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> structured<span class="token punctuation">.</span>pydantic<span class="token punctuation">.</span>models <span class="token keyword">import</span> BaseModel</span>
<span class="line"></span>
<span class="line"><span class="token comment"># Define your schema using Pydantic models</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MySchema</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token builtin">str</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Define an initialization function</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">init_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> MySchema<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2Ô∏è‚É£-create-your-model" tabindex="-1"><a class="header-anchor" href="#_2Ô∏è‚É£-create-your-model"><span>2Ô∏è‚É£ Create Your Model</span></a></h3><p>Now, create a Django model that uses the StructuredJSONField:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models</span>
<span class="line"><span class="token keyword">from</span> structured<span class="token punctuation">.</span>fields <span class="token keyword">import</span> StructuredJSONField</span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MyModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">    structured_data <span class="token operator">=</span> StructuredJSONField<span class="token punctuation">(</span>schema<span class="token operator">=</span>MySchema<span class="token punctuation">,</span> default<span class="token operator">=</span>init_data<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3Ô∏è‚É£-create-and-apply-migrations" tabindex="-1"><a class="header-anchor" href="#_3Ô∏è‚É£-create-and-apply-migrations"><span>3Ô∏è‚É£ Create and Apply Migrations</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">python manage.py makemigrations</span>
<span class="line">python manage.py migrate</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4Ô∏è‚É£-using-the-model" tabindex="-1"><a class="header-anchor" href="#_4Ô∏è‚É£-using-the-model"><span>4Ô∏è‚É£ Using the Model</span></a></h3><p>You can now use your model as you would with any other Django model:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># Create a new instance with a dictionary</span></span>
<span class="line">instance <span class="token operator">=</span> MyModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span></span>
<span class="line">    title<span class="token operator">=</span><span class="token string">&quot;Example&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    structured_data<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Or create with a schema instance</span></span>
<span class="line">schema_instance <span class="token operator">=</span> MySchema<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line">instance <span class="token operator">=</span> MyModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span></span>
<span class="line">    title<span class="token operator">=</span><span class="token string">&quot;Example&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    structured_data<span class="token operator">=</span>schema_instance</span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Access the structured data</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>structured_data<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment"># &quot;John Doe&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>structured_data<span class="token punctuation">.</span>age<span class="token punctuation">)</span>   <span class="token comment"># 30</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Update the structured data</span></span>
<span class="line">instance<span class="token punctuation">.</span>structured_data<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">31</span></span>
<span class="line">instance<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="üîë-key-concepts" tabindex="-1"><a class="header-anchor" href="#üîë-key-concepts"><span>üîë Key Concepts</span></a></h2><ol><li><strong>üìê Schema Definition</strong>: Your schema defines the structure and validation rules for your JSON field.</li><li><strong>üîÑ Default Values</strong>: The <code>init_data</code> function provides default values for new instances.</li><li><strong>‚úÖ Type Validation</strong>: The field automatically validates data against your schema.</li><li><strong>üö´ Null Values</strong>: Fields can be optional by providing default values (like <code>None</code>).</li><li><strong>üì• Data Input</strong>: You can provide either a dictionary or a schema instance when creating or updating records.</li></ol><h2 id="üí°-best-practices" tabindex="-1"><a class="header-anchor" href="#üí°-best-practices"><span>üí° Best Practices</span></a></h2><ol><li>Always define an initialization function (<code>init_data</code>) to provide default values.</li><li>Use type hints in your schema for better IDE support and validation.</li><li>Consider making fields optional if they&#39;re not always required.</li><li>Use descriptive field names that clearly indicate their purpose.</li><li>Test your schema with both dictionary and object inputs to ensure it works correctly.</li></ol><h2 id="‚ùì-common-issues-and-solutions" tabindex="-1"><a class="header-anchor" href="#‚ùì-common-issues-and-solutions"><span>‚ùì Common Issues and Solutions</span></a></h2><ol><li><strong>üöß Migration Errors</strong>: If you encounter migration errors, ensure your schema is properly defined before running migrations.</li><li><strong>‚ö†Ô∏è Validation Errors</strong>: The field will raise validation errors if the data doesn&#39;t match your schema.</li><li><strong>üîÑ Default Values</strong>: Always provide appropriate default values to prevent null value issues.</li></ol><h2 id="üì¶-nested-structures" tabindex="-1"><a class="header-anchor" href="#üì¶-nested-structures"><span>üì¶ Nested Structures</span></a></h2><p>You can also define nested schemas:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">ChildSchema</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token builtin">str</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">ParentSchema</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    name<span class="token punctuation">:</span> <span class="token builtin">str</span></span>
<span class="line">    age<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line">    child<span class="token punctuation">:</span> ChildSchema <span class="token operator">=</span> <span class="token boolean">None</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example usage:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># Create with nested data</span></span>
<span class="line">instance <span class="token operator">=</span> MyModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span></span>
<span class="line">    title<span class="token operator">=</span><span class="token string">&quot;Example&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    structured_data<span class="token operator">=</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Parent&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;child&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Child&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">10</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Access nested fields</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>structured_data<span class="token punctuation">.</span>child<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment"># &quot;Child&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="üîÑ-next-steps" tabindex="-1"><a class="header-anchor" href="#üîÑ-next-steps"><span>üîÑ Next Steps</span></a></h2><p>After mastering basic usage, you might want to explore:</p>`,30)),s("ul",null,[s("li",null,[e(a,{to:"/Guide/How%20to/Relationships/"},{default:t(()=>n[0]||(n[0]=[i("üîó Relationships")])),_:1})]),s("li",null,[e(a,{to:"/Guide/How%20to/Admin%20Integration/"},{default:t(()=>n[1]||(n[1]=[i("üß∞ Admin Integration")])),_:1})]),s("li",null,[e(a,{to:"/Guide/How%20to/REST%20Framework%20Integration/"},{default:t(()=>n[2]||(n[2]=[i("üåç REST Framework Integration")])),_:1})])])])}const h=l(u,[["render",d]]),v=JSON.parse('{"path":"/Guide/How%20to/Installation%20and%20Basic%20Usage/","title":"üì¶ Installation and Basic Usage","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"üöÄ Installation","slug":"üöÄ-installation","link":"#üöÄ-installation","children":[]},{"level":2,"title":"üß© Basic Usage","slug":"üß©-basic-usage","link":"#üß©-basic-usage","children":[{"level":3,"title":"1Ô∏è‚É£ Define Your Schema","slug":"_1Ô∏è‚É£-define-your-schema","link":"#_1Ô∏è‚É£-define-your-schema","children":[]},{"level":3,"title":"2Ô∏è‚É£ Create Your Model","slug":"_2Ô∏è‚É£-create-your-model","link":"#_2Ô∏è‚É£-create-your-model","children":[]},{"level":3,"title":"3Ô∏è‚É£ Create and Apply Migrations","slug":"_3Ô∏è‚É£-create-and-apply-migrations","link":"#_3Ô∏è‚É£-create-and-apply-migrations","children":[]},{"level":3,"title":"4Ô∏è‚É£ Using the Model","slug":"_4Ô∏è‚É£-using-the-model","link":"#_4Ô∏è‚É£-using-the-model","children":[]}]},{"level":2,"title":"üîë Key Concepts","slug":"üîë-key-concepts","link":"#üîë-key-concepts","children":[]},{"level":2,"title":"üí° Best Practices","slug":"üí°-best-practices","link":"#üí°-best-practices","children":[]},{"level":2,"title":"‚ùì Common Issues and Solutions","slug":"‚ùì-common-issues-and-solutions","link":"#‚ùì-common-issues-and-solutions","children":[]},{"level":2,"title":"üì¶ Nested Structures","slug":"üì¶-nested-structures","link":"#üì¶-nested-structures","children":[]},{"level":2,"title":"üîÑ Next Steps","slug":"üîÑ-next-steps","link":"#üîÑ-next-steps","children":[]}],"git":{"updatedTime":1742998502000,"contributors":[{"name":"bnznamco","username":"bnznamco","email":"gabriele.baldi.01@gmail.com","commits":3,"url":"https://github.com/bnznamco"}],"changelog":[{"hash":"695f3a53d7ba8180183e8cb2e0cabcd2ffbd0893","time":1742998502000,"email":"gabriele.baldi.01@gmail.com","author":"bnznamco","message":"docs: update contents"},{"hash":"a03b155355b11640e5a70a3df3068c393c90f6b1","time":1742982268000,"email":"gabriele.baldi.01@gmail.com","author":"bnznamco","message":"docs: updated to vuepress 2"},{"hash":"853b7590c1e47d887ae5c09c54d82094e5b20d66","time":1742974046000,"email":"gabriele.baldi.01@gmail.com","author":"bnznamco","message":"docs: added github-pages docs"}]},"filePathRelative":"Guide/How to/Installation and Basic Usage/README.md"}');export{h as comp,v as data};
